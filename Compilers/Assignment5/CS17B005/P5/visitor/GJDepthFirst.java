//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
  
  int n_val = 0;
  public int maxi = 1000000; // make it 10000
  int labler = 1000000+1;
  int proc_count = 0;
  int num_args = 0;
  public ArrayList<Set<String>> In = new ArrayList<Set<String>>(maxi);
  public ArrayList<Set<String>> Out = new ArrayList<Set<String>>(maxi);
  public ArrayList<Set<String>> Def = new ArrayList<Set<String>>(maxi);
  public ArrayList<Set<String>> Use = new ArrayList<Set<String>>(maxi);
  public ArrayList<ArrayList<Integer> > graph = new ArrayList<ArrayList<Integer> >(maxi);
  public HashMap <Integer,Integer> proc = new HashMap<>();
  public HashMap <Integer,Integer> box3 = new HashMap<>();
  public HashMap <Integer,Integer> box2 = new HashMap<>();
  public HashMap <Integer,Integer> cnt_args = new HashMap<>();
  HashMap <String,Integer> label = new HashMap<>();
  List<Integer> var_args = new ArrayList<Integer>();
  
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      graph.add(new ArrayList<Integer>());
      argu = (A)"";
      proc.put(-1,0);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      int w = 0;
      if(!var_args.isEmpty())
      {
        w = Collections.max(var_args);
      }
      box3.put(proc_count, w);
      proc.put(proc_count,n_val);
      int full = proc.get(proc_count);
      boolean change = true;
      while(change)
      {
        int j = proc.get(proc_count - 1);
        change = false;
        for(;j < full;++j)
        {
          Set<String> tempOut = new HashSet<String>(Out.get(j));
          Set<String> tempIn = new HashSet<String>(In.get(j));
          Set<String> difference = new HashSet<String>(Out.get(j));
          difference.removeAll(Def.get(j));
          Set<String> union = new HashSet<String>(difference); 
          union.addAll(Use.get(j));
          In.set(j,union);
          int k;
          int x = graph.get(j).get(0);
          Set<String> unionx = new HashSet<String>();
          for(k = 0;k < graph.get(j).size();k++)
          {
            x = graph.get(j).get(k);
            if(x < full) unionx.addAll(In.get(x));
          }
          Out.set(j,unionx);
          if(!tempIn.equals(In.get(j)) || !tempOut.equals(Out.get(j)))
          {
            change = true;
          }
        }
      }
      int j = proc.get(proc_count - 1),counter = 0;
      cnt_args.put(proc_count,counter);
      for(;j < full;++j)
      {
        Set<String> difference1 = new HashSet<String>(Out.get(j));
          difference1.removeAll(In.get(j));
          counter+=(difference1.size());
      }
      box2.put(proc_count,10 + counter);
      proc_count++;
      // going to procedures
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      //System.out.println(Def);
      /*System.out.println("xxx" + In.get(494));
      System.out.println("xxx" + In.get(495));
      System.out.println("xxx" + In.get(496));
      System.out.println("xxx" + In.get(497));
      System.out.println("xxx" + In.get(498));
      System.out.println("---" + Out.get(494));
      System.out.println("prob" + Out.get(495));
      System.out.println("---" + Out.get(496));
      System.out.println("---" + Out.get(497));
      System.out.println("---" + Out.get(498));
      System.out.println("def:" + Def.get(495));
      System.out.println("use:" + Use.get(495));*/
      //System.out.println(Out);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, (A)"label");
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      var_args.clear();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String strw = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      int w = 0;
      if(!var_args.isEmpty())
      {
        w = Collections.max(var_args);
      }
      box3.put(proc_count, w);
      proc.put(proc_count,n_val);
      // the algorithm for In and Out
      int full = proc.get(proc_count);
      boolean change = true;
      while(change)
      {
        int j = proc.get(proc_count - 1);
        change = false;
        for(;j < full;++j)
        {
          Set<String> tempOut = new HashSet<String>(Out.get(j));
          Set<String> tempIn = new HashSet<String>(In.get(j));
          Set<String> difference = new HashSet<String>(Out.get(j));
          difference.removeAll(Def.get(j));
          Set<String> union = new HashSet<String>(Use.get(j)); 
          union.addAll(difference);
          In.set(j,union);
          int k,l;
          Set<String> unionx = new HashSet<String>();
          for(k = 0;k < graph.get(j).size();k++)
          {
            l = graph.get(j).get(k);
            if(l < full) unionx.addAll(In.get(l));
          }
          Out.set(j,unionx);
          if(!tempIn.equals(In.get(j)) || !tempOut.equals(Out.get(j)))
          {
            change = true;
          }
        }
      }
      int j = proc.get(proc_count - 1),counter = Integer.parseInt(strw);
      cnt_args.put(proc_count,counter);
      for(;j < full;++j)
      {
        Set<String> difference1 = new HashSet<String>(Out.get(j));
          difference1.removeAll(In.get(j));
          counter+=(difference1.size());
      }
      box2.put(proc_count,18 + counter); // can be reduced
      proc_count++;
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      graph.add(new ArrayList<Integer>());
      argu = (A)"";
      In.add(new HashSet<String>());
      Out.add(new HashSet<String>());
      Def.add(new HashSet<String>());
      Use.add(new HashSet<String>());
      n.f0.accept(this, argu);
      n_val++;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      graph.get(n_val).add(n_val+1);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      graph.get(n_val).add(n_val+1);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      Use.get(n_val).add(str);
      String str1 = (String)n.f2.accept(this, argu);
      graph.get(n_val).add(n_val+1);
      if(label.containsKey(str1))
      {
        graph.get(n_val).add(label.get(str1));
      }
      else
      {
        label.put(str1, labler);
        graph.get(n_val).add(labler);
        labler++;       
      }
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str1 = (String)n.f1.accept(this, argu);
      if(label.containsKey(str1))
      {
        graph.get(n_val).add(label.get(str1));
      }
      else
      {
        label.put(str1, labler);
        graph.get(n_val).add(labler);
        labler++;       
      }
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String str1 = (String)n.f3.accept(this, argu);
      Use.get(n_val).add(str);
      Use.get(n_val).add(str1);
      graph.get(n_val).add(n_val+1);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      Def.get(n_val).add(str);
      Use.get(n_val).add(str1);
      graph.get(n_val).add(n_val+1);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      Def.get(n_val).add(str);
      n.f2.accept(this, argu);
      graph.get(n_val).add(n_val+1);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      graph.get(n_val).add(n_val+1);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      In.add(new HashSet<String>());
      Out.add(new HashSet<String>());
      Def.add(new HashSet<String>());
      Use.add(new HashSet<String>());
      graph.add(new ArrayList<Integer>());
      graph.get(n_val).add(n_val+1);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n_val++;
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      num_args = 0;
      n.f3.accept(this, (A)"args");
      var_args.add(num_args);
      num_args = 0;
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      Use.get(n_val).add(str);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      String str = (String) argu;
      n.f0.accept(this, (A)"simple");
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      //R _ret=null;
     num_args++;
     String str1 = (String)argu;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
     if(str1.equals("args") || str1.equals("simple"))
     {
       Use.get(n_val).add(str);
     }
      return (R)str;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      //R _ret=null;
      n.f0.accept(this, argu);
      String str = n.f0.tokenImage;
      return (R)str;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      //R _ret=null;
     String str1 = (String)argu;
      n.f0.accept(this, argu);
      String str = n.f0.tokenImage;
     if(str1.equals("label"))
     {
       if(label.containsKey(str))
       {
         int x = label.get(str);
         for (int i = 0; i < graph.size(); i++) 
         { 
             for (int j = 0; j < graph.get(i).size(); j++) 
             { 
                 if(graph.get(i).get(j) == x)
                 {
                   graph.get(i).set(j,n_val);
                 }
              } 
         }
       }
       else
       {
         label.put(str,n_val);
       }
     }
      return (R)str;
   }

}
