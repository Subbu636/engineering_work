//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst2<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
  
  public int maxi;
  public ArrayList<Set<String>> In = new ArrayList<Set<String>>(maxi);
  public ArrayList<Set<String>> Out = new ArrayList<Set<String>>(maxi);
  public HashMap <Integer,Integer> proc = new HashMap<>();
  public HashMap <Integer,Integer> box3 = new HashMap<>();
  public HashMap <Integer,Integer> box2 = new HashMap<>();
  public HashMap <Integer,Integer> cnt_args = new HashMap<>();
  Stack<String> free_regs = new Stack<>();
  HashMap <String,String> reg_map = new HashMap<>();
  HashMap <String,Integer> spill_map = new HashMap<>();
  List<List<String>> expireit = new ArrayList<List<String>>();
  ArrayList<String> args = new ArrayList<>(maxi);
  int n_val = 0,proc_count = 0,stack_count = 0;
  
  void expired(String str)
  {
    if(reg_map.containsKey(str))
    {
      String str1 = reg_map.remove(str);
      // try getting elements from spill
      if(spill_map.isEmpty())
      {
        free_regs.push(str1);
      }
      else
      {
        String firstKey = (String)spill_map.keySet().toArray()[0];
        reg_map.put(firstKey, str1);
        String str2 = Integer.toString(spill_map.remove(firstKey));
        System.out.println("ALOAD "+str1+" SPILLEDARG "+str2);
      }
    }
  }
  
  void addup(String str)
  {
    if(!reg_map.containsKey(str) && !spill_map.containsKey(str))
    {
      if(free_regs.isEmpty())
      {
        // spill it
        String str1 = Integer.toString(stack_count);
        String firstKey = (String)reg_map.keySet().toArray()[0];
        String str2 = (reg_map.remove(firstKey));
        System.out.println("ASTORE SPILLEDARG "+ str1 + " " + str2);
        spill_map.put(firstKey, stack_count);
        reg_map.put(str, str2);
        stack_count++;
      }
      else
      {
        String str1 = free_regs.pop();
        reg_map.put(str,str1);
      }
    }
  }
  
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      int i;
      for(i = 0;i < maxi;i++)
      {
        List<String> x = new ArrayList<String>();
        expireit.add(x);
      }
      int less = proc.get(proc_count - 1);
      int j = proc.get(proc_count) - 1;
      HashMap <String,Integer> kills = new HashMap<>();
      for(;j > less;--j)
      {
        Iterator value = In.get(j).iterator();
          while(value.hasNext())
          {
            String strq = ((String)value.next());
            if(!kills.containsKey(strq))
            {
              kills.put(strq,j);
              expireit.get(j).add(strq);
            }
          }
      }
      for(i = 9;i >= 0;--i)
      {
        String str = "t" + Integer.toString(i);
        free_regs.push(str);
      }
      for(i = 7;i >= 0;--i)
      {
        String str = "s" + Integer.toString(i);
        free_regs.push(str);
      }
      System.out.println("MAIN [0] ["+Integer.toString(box2.get(proc_count))+"] ["+Integer.toString(box3.get(proc_count))+"]");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("END");
      int con = cnt_args.get(proc_count);
      con = Math.max(0, con - 4);
      if(stack_count > con + 8)
      {
        System.out.println("// SPILLED");
      }
      else
      {
        System.out.println("// NOTSPILLED");
      }
      System.out.println();
      free_regs.clear();
      reg_map.clear();
      spill_map.clear();
      proc_count++;
      // start of procedures
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      //System.out.println(free_regs);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, (A)"labelit");
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      stack_count = 0;
      int less = proc.get(proc_count - 1);
      int j = proc.get(proc_count) - 1;
      HashMap <String,Integer> kills = new HashMap<>();
      for(;j >= less;--j)
      {
        Iterator value = In.get(j).iterator();
          while(value.hasNext())
          {
            String strq = ((String)value.next());
            if(!kills.containsKey(strq))
            {
              kills.put(strq,j);
              expireit.get(j).add(strq);
            }
          }
      }
      int i;
      for(i = 9;i >= 0;--i)
      {
        String str = "t" + Integer.toString(i);
        free_regs.push(str);
      }
      for(i = 7;i >= 0;--i)
      {
        String str = "s" + Integer.toString(i);
        free_regs.push(str);
      }
      String str = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      System.out.println(str+ " ["+str1+"] ["+Integer.toString(box2.get(proc_count))+"] ["+Integer.toString(box3.get(proc_count))+"]");
      n.f4.accept(this, (A)str1);
      int con = cnt_args.get(proc_count);
      con = Math.max(0, con - 4);
      if(stack_count > con + 8)
      {
        System.out.println("// SPILLED");
      }
      else
      {
        System.out.println("// NOTSPILLED");
      }
      System.out.println();
      free_regs.clear();
      reg_map.clear();
      spill_map.clear();
      proc_count++;
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      // do linear scan
      argu = (A)"";
      Set<String> difference2 = new HashSet<String>(Out.get(n_val));
      difference2.removeAll(In.get(n_val));
      Iterator value = difference2.iterator();
      while(value.hasNext())
      {
        addup((String)value.next());
      }
      //System.out.println(difference2);
      n.f0.accept(this, argu);
      int i;
      for(i = 0;i < expireit.get(n_val).size();i++)
      {
        expired(expireit.get(n_val).get(i));
      }
      n_val++;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      if(reg_map.containsKey(str))
      {
        str = reg_map.get(str);
      }
      else
      {
        if(spill_map.containsKey(str))
        {
          int x = spill_map.get(str);
            System.out.println("ALOAD v0 SPILLEDARG "+Integer.toString(x));
        }
        str = "v0";
      }
      System.out.println("CJUMP "+str+" "+str1);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      System.out.println("JUMP "+str);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      String str2 = (String)n.f3.accept(this, argu);
      if(reg_map.containsKey(str))
      {
        str = reg_map.get(str);
      }
      else
      {
        if(spill_map.containsKey(str))
        {
          int x = spill_map.get(str);
            System.out.println("ALOAD v0 SPILLEDARG "+Integer.toString(x));
        }
        str = "v0";
      }
      if(reg_map.containsKey(str2))
      {
        str2 = reg_map.get(str2);
      }
      else
      {
        if(spill_map.containsKey(str2))
        {
          int x = spill_map.get(str2);
            System.out.println("ALOAD v0 SPILLEDARG "+Integer.toString(x));
        }
        str2 = "v1";
      }
      System.out.println("HSTORE "+str+" "+str1+" "+str2);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      String str2 = (String)n.f3.accept(this, argu);
      if(reg_map.containsKey(str))
      {
        str = reg_map.get(str);
      }
      else
      {
        if(spill_map.containsKey(str))
        {
          int x = spill_map.get(str);
            if(!free_regs.isEmpty())
            {
              //System.out.println("rock");
              String stry = free_regs.pop();
              reg_map.put(str, stry);
              spill_map.remove(str);
              str = stry;
            }
            else
            {
              String firstKey = (String)reg_map.keySet().toArray()[0];
              String stry = reg_map.get(firstKey);
              reg_map.remove(firstKey);
              reg_map.put(str, stry);
              spill_map.put(firstKey, stack_count);
              spill_map.remove(str);
              str = stry;
            }
        }
        else
        {
          str = "v0";
        }
      }
      if(reg_map.containsKey(str1))
      {
        str1 = reg_map.get(str1);
      }
      else
      {
        if(spill_map.containsKey(str1))
        {
          int x = spill_map.get(str1);
            System.out.println("ALOAD v1 SPILLEDARG "+Integer.toString(x));
        }
        str1 = "v1";
      }
      System.out.println("HLOAD "+str+" "+str1+" "+str2);
      return _ret;
   }

   /**
    * f0 -> "MOVE" 
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      if(reg_map.containsKey(str))
      {
        str = reg_map.get(str);
      }
      else
      {
        if(spill_map.containsKey(str))
        {
          int x = spill_map.get(str);
            if(!free_regs.isEmpty())
            {
              //System.out.println("rock");
              String str1 = free_regs.pop();
              reg_map.put(str, str1);
              spill_map.remove(str);
              str = str1;
            }
            else
            {
              String firstKey = (String)reg_map.keySet().toArray()[0];
              String str1 = reg_map.get(firstKey);
              reg_map.remove(firstKey);
              reg_map.put(str, str1);
              spill_map.put(firstKey, stack_count);
              spill_map.remove(str);
              str = str1;
            }
        }
        else
        {
          str = "v0";
        }
      }
      n.f2.accept(this, (A)str);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, (A)"print1");
      System.out.println("PRINT "+str);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      // it is return statment, calee saved regs
      String str1 = (String)argu;
      argu = (A)"";
      int con = cnt_args.get(proc_count);
      con = Math.max(0, con - 4);
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(con)+" s0");
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(con+1)+" s1");
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(con+2)+" s2");
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(con+3)+" s3");
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(con+4)+" s4");
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(con+5)+" s5");
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(con+6)+" s6");
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(con+7)+" s7");
      stack_count = con + 8;
      int i;
      for(i = 0;i < Integer.parseInt(str1);i++)
      {
        if(i <= 3)
        {
          String strx = free_regs.pop();
            String stry = "a"+Integer.toString(i);
            String strz = Integer.toString(i);
            System.out.println("MOVE "+strx+" "+stry);
            reg_map.put(strz, strx);
        }
        else
        {
          // write pass arg 
          if(!free_regs.isEmpty())
          {
            String strx = free_regs.pop();
            String strz = Integer.toString(i);
            System.out.println("ALOAD "+strx+" SPILLEDARG "+Integer.toString(i - 4));
            reg_map.put(strz, strx);
          }
          else
          {
            String strz = Integer.toString(i);
            System.out.println("ALOAD v0 SPILLEDARG "+Integer.toString(i - 4));
            System.out.println("ASTORE SPILLEDARG "+Integer.toString(stack_count)+" v0");
            spill_map.put(strz, stack_count);
            stack_count++;
          }
        }
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String str = (String)n.f3.accept(this, (A)"print1");
      n.f4.accept(this, argu);
      System.out.println("MOVE v0 "+str);
      System.out.println("ALOAD s0 SPILLEDARG "+Integer.toString(con));
      System.out.println("ALOAD s1 SPILLEDARG "+Integer.toString(con+1));
      System.out.println("ALOAD s2 SPILLEDARG "+Integer.toString(con+2));
      System.out.println("ALOAD s3 SPILLEDARG "+Integer.toString(con+3));
      System.out.println("ALOAD s4 SPILLEDARG "+Integer.toString(con+4));
      System.out.println("ALOAD s5 SPILLEDARG "+Integer.toString(con+5));
      System.out.println("ALOAD s6 SPILLEDARG "+Integer.toString(con+6));
      System.out.println("ALOAD s7 SPILLEDARG "+Integer.toString(con+7));
      System.out.println("END");
      n_val++;
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      // caller saved regs
      String str = (String)argu;
      argu = (A)"";
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(stack_count)+" t0");
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(stack_count+1)+" t1");
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(stack_count+2)+" t2");
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(stack_count+3)+" t3");
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(stack_count+4)+" t4");
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(stack_count+5)+" t5");
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(stack_count+6)+" t6");
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(stack_count+7)+" t7");
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(stack_count+8)+" t8");
      System.out.println("ASTORE SPILLEDARG "+Integer.toString(stack_count+9)+" t9");
      n.f0.accept(this, argu);
      String str1 = (String)n.f1.accept(this, (A)"print1");
      n.f2.accept(this, argu);
      args.clear();
      n.f3.accept(this, (A)"args");
      n.f4.accept(this, argu);
      int i;
      for(i = 0;i < args.size();i++)
      {
        String str2 = (String)args.get(i);
        if(i > 3)
        {
          if(reg_map.containsKey(str2))
              {
                str2 = reg_map.get(str2);
                String str3 = Integer.toString(i - 3);
                System.out.println("PASSARG "+str3+" "+str2);
              }
              else
              {
                int x = spill_map.get(str2);
                String str3 = Integer.toString(i - 3);
                System.out.println("ALOAD v0 SPILLEDARG "+Integer.toString(x));
                System.out.println("PASSARG "+str3+" v0");
              }
        }
        else
        {
          if(reg_map.containsKey(str2))
              {
                str2 = reg_map.get(str2);
                String str3 = "a"+Integer.toString(i);
                System.out.println("MOVE "+str3+" "+str2);
              }
              else
              {
                int x = spill_map.get(str2);
                str2 = "a"+Integer.toString(i);
                System.out.println("ALOAD "+str2+" SPILLEDARG "+Integer.toString(x));
              }
        }
      }
      System.out.println("CALL "+str1);
      System.out.println("ALOAD t0 SPILLEDARG "+Integer.toString(stack_count));
      System.out.println("ALOAD t1 SPILLEDARG "+Integer.toString(stack_count+1));
      System.out.println("ALOAD t2 SPILLEDARG "+Integer.toString(stack_count+2));
      System.out.println("ALOAD t3 SPILLEDARG "+Integer.toString(stack_count+3));
      System.out.println("ALOAD t4 SPILLEDARG "+Integer.toString(stack_count+4));
      System.out.println("ALOAD t5 SPILLEDARG "+Integer.toString(stack_count+5));
      System.out.println("ALOAD t6 SPILLEDARG "+Integer.toString(stack_count+6));
      System.out.println("ALOAD t7 SPILLEDARG "+Integer.toString(stack_count+7));
      System.out.println("ALOAD t8 SPILLEDARG "+Integer.toString(stack_count+8));
      System.out.println("ALOAD t9 SPILLEDARG "+Integer.toString(stack_count+9));
      System.out.println("MOVE "+str+" v0");
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      String str = (String)argu;
      argu = (A)"";
      n.f0.accept(this, argu);
      String str1 = (String)n.f1.accept(this, (A)"print1");
      System.out.println("MOVE "+str+" HALLOCATE "+str1);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String str3 = (String)argu;
      argu = (A)"";
      String str = (String)n.f0.accept(this, argu);
      String str1 = (String)n.f1.accept(this, (A)"print0");
      String str2 = (String)n.f2.accept(this, (A)"print1");
      System.out.println("MOVE "+str3+" "+str+" "+str1+" "+str2);
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      //R _ret=null;
      n.f0.accept(this, argu);
      R _ret;
      n.f0.accept(this, argu);
      int num = n.f0.which;
      if(num == 0)
      {
        _ret = (R)"LE";
      }
      else if(num == 1)
      {
        _ret = (R)"NE";
      }
      else if(num == 2)
      {
        _ret = (R)"PLUS";
      }
      else if(num == 3)
      {
        _ret = (R)"MINUS";
      }
      else if(num == 4)
      {
        _ret = (R)"TIMES";
      }
      else
      {
        _ret = (R)"DIV";
      }
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      //R _ret=null;
     String str1 = (String)argu;
     String str;
     if(!str1.equals("") && !str1.equals("print0") && !str1.equals("print1"))
     {
       str = (String)n.f0.accept(this, (A)"print1");
       System.out.println("MOVE "+str1+" "+str);
     }
     else
     {
          str = (String)n.f0.accept(this, argu);
     }
      return (R)str;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      //R _ret=null;
     String str1 = (String)argu;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      if(str1.equals("print0"))
      {
        if(reg_map.containsKey(str))
          {
            str = reg_map.get(str);
          }
          else
          {
            if(spill_map.containsKey(str))
            {
              int x = spill_map.get(str);
                System.out.println("ALOAD v0 SPILLEDARG "+Integer.toString(x));
            }
            str = "v0";
            // cause of error
          }
      }
      if(str1.equals("print1"))
      {
        if(reg_map.containsKey(str))
          {
            str = reg_map.get(str);
          }
          else
          {
            if(spill_map.containsKey(str))
            {
              int x = spill_map.get(str);
                System.out.println("ALOAD v1 SPILLEDARG "+Integer.toString(x));
            }
            str = "v1";
            // cause of error
          }
      }
      if(str1.equals("args"))
      {
        args.add(str);
      }
      return (R)str;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      //R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f0.tokenImage;
      return (R)str;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      //R _ret=null;
     String str1 = (String)argu;
      n.f0.accept(this, argu);
      String str = (String)n.f0.tokenImage;
      if(str1.equals("labelit"))
      {
        System.out.println(str);
      }
      return (R)str;
   }

}
