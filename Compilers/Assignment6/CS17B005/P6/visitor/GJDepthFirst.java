//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
  int x1 = 0;
  int x2 = 0;
  int x3 = 0;
  
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println("  .text");
      System.out.println("  .globl main");
      System.out.println("main:");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String str2 = (String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      String str3 = (String)n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      x1 = Integer.parseInt(str1);
      x2 = Integer.parseInt(str2);
      x3 = Integer.parseInt(str3);
      int size;
      if(x3>4)
      {
        size = (x3 - 4 + x2 + 2)*4;
      }
      else
      {
        size = (x2 + 1)*4;
      }
      System.out.println("move $fp, $sp\nsubu $sp, $sp, "+size+"\nsw $ra, -4($fp)");
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      System.out.println("lw $ra, -4($fp)\naddu $sp, $sp, "+size+"\njr $ra");
      System.out.println();
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      System.out.println("         .text\n" + 
          "         .globl _halloc\n" + 
          "_halloc:\n" + 
          "         li $v0, 9\n" + 
          "         syscall\n" + 
          "         j $ra\n" + 
          "\n" + 
          "         .text\n" + 
          "         .globl _print\n" + 
          "_print:\n" + 
          "         li $v0, 1\n" + 
          "         syscall\n" + 
          "         la $a0, newl\n" + 
          "         li $v0, 4\n" + 
          "         syscall\n" + 
          "         j $ra\n" + 
          "\n" + 
          "         .data\n" + 
          "         .align   0\n" + 
          "newl:    .asciiz \"\\n\" \n" + 
          "         .data\n" + 
          "         .align   0\n" + 
          "str_er:  .asciiz \" ERROR: abnormal termination\\n\" ");
      
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, (A)"label");
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      x1 = 0;
      x2 = 0;
      x3 = 0;
      String str = (String)n.f0.accept(this, argu);
      System.out.println("  .text");
      System.out.println("  .globl "+str);
      System.out.println(str+":");
      n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String str2 = (String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      String str3 = (String)n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      x1 = Integer.parseInt(str1);
      x2 = Integer.parseInt(str2);
      x3 = Integer.parseInt(str3);
      int size;
      if(x3>4)
      {
        size = (x3 - 4 + x2 + 2)*4;
      }
      else
      {
        size = (x2 + 2)*4;
      }
      System.out.println("sw $fp, -8($sp)\nmove $fp, $sp\nsubu $sp, $sp, "+size+"\nsw $ra, -4($fp)");
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      System.out.println("lw $ra, -4($fp)\nlw $fp, "+Integer.toString(size-8)+"($sp)\naddu $sp, $sp, "+size+"\njr $ra ");
      System.out.println();
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      argu = (A)"";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("li $v0 4\nla $a0,str_er\nsyscall\nli $v0, 10\nsyscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      System.out.println("beqz "+str+" "+str1);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      System.out.println("b "+str);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      String str2 = (String)n.f3.accept(this, argu);
      System.out.println("sw "+str2+", "+str1+"("+str+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      String str2 = (String)n.f3.accept(this, argu);
      System.out.println("lw "+str+", "+str2+"("+str1+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      n.f2.accept(this, (A)str);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, (A)"tov1");
      System.out.println("move $a0, $v1");
      System.out.println("jal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      int x = Integer.valueOf(str1);
      if(x1 > 4)
      {
        if(x < x1 - 4)
        {
          System.out.println("lw "+str+", "+Integer.toString(4*(x))+"($fp)");
          return _ret;
        }
        x = x + 4 - x1;
      }
      if(x3 > 4)
      {
        x = x + x3 - 4;
      }
      System.out.println("lw "+str+", "+Integer.toString(4*(x))+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      int x = Integer.valueOf(str);
      if(x1 > 4)
      {
        if(x < x1 - 4)
        {
          System.out.println("sw "+str1+", "+Integer.toString(4*(x))+"($fp)");
          return _ret;
        }
        x = x + 4 - x1;
      }
      if(x3 > 4)
      {
        x = x + x3 - 4;
      }
      System.out.println("sw "+str1+", "+Integer.toString(4*(x))+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      int x = Integer.parseInt(str);
      System.out.println("sw "+str1+", "+Integer.toString(4*(x-1))+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, (A)"tov1");
      System.out.println("jalr $v1");
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      String str = (String)argu;
      n.f0.accept(this, argu);
      n.f1.accept(this, (A)"tov1");
      System.out.println("move $a0, $v1");
      System.out.println("jal _halloc");
      System.out.println("move "+str+", $v0");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String str = (String)argu;
      argu = (A)"";
      String str1 = (String)n.f0.accept(this, argu);
      String str2 = (String)n.f1.accept(this, argu);
      n.f2.accept(this, (A)"tov1");
      System.out.println(str1+" "+str+" "+str2+" $v1");
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
   //R _ret=null;
        n.f0.accept(this, argu);
        R _ret;
        n.f0.accept(this, argu);
        int num = n.f0.which;
        if(num == 0)
        {
          _ret = (R)"sle";
        }
        else if(num == 1)
        {
          _ret = (R)"sne";
        }
        else if(num == 2)
        {
          _ret = (R)"add";
        }
        else if(num == 3)
        {
          _ret = (R)"sub";
        }
        else if(num == 4)
        {
          _ret = (R)"mul";
        }
        else
        {
          _ret = (R)"div";
        }
        return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      //R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      return (R)str;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      String str = (String)argu;
      String str1 = (String)n.f0.accept(this, argu);
      int num = n.f0.which;
      if(str.equals("tov1"))
      {
        if(num == 0)
        {
          System.out.println("move $v1, "+str1);
        }
        else if(num == 1)
        {
          System.out.println("li $v1, "+str1);
        }
        else
        {
          System.out.println("la $v1, "+str1);
        }
      }
      else
      {
        if(num == 0)
        {
          System.out.println("move "+str+", "+str1);
        }
        else if(num == 1)
        {
          System.out.println("li "+str+", "+str1);
        }
        else
        {
          System.out.println("la "+str+", "+str1);
        }
      }
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      //R _ret=null;
      n.f0.accept(this, argu);
      String str;
      int num = n.f0.which;
      if(num == 0)
      {
        str = "$a0";
      }
      else if(num == 1)
      {
        str = "$a1";
      }
      else if(num == 2)
      {
        str = "$a2";
      }
      else if(num == 3)
      {
        str = "$a3";
      }
      else if(num == 4)
      {
        str = "$t0";
      }
      else if(num == 5)
      {
        str = "$t1";
      }
      else if(num == 6)
      {
        str = "$t2";
      }
      else if(num == 7)
      {
        str = "$t3";
      }
      else if(num == 8)
      {
        str = "$t4";
      }
      else if(num == 9)
      {
        str = "$t5";
      }
      else if(num == 10)
      {
        str = "$t6";
      }
      else if(num == 11)
      {
        str = "$t7";
      }
      else if(num == 12)
      {
        str = "$s0";
      }
      else if(num == 13)
      {
        str = "$s1";
      }
      else if(num == 14)
      {
        str = "$s2";
      }
      else if(num == 15)
      {
        str = "$s3";
      }
      else if(num == 16)
      {
        str = "$s4";
      }
      else if(num == 17)
      {
        str = "$s5";
      }
      else if(num == 18)
      {
        str = "$s6";
      }
      else if(num == 19)
      {
        str = "$s7";
      }
      else if(num == 20)
      {
        str = "$t8";
      }
      else if(num == 21)
      {
        str = "$t9";
      }
      else if(num == 22)
      {
        str = "$v0";
      }
      else
      {
        str = "$v1";
      }
      return (R)str;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f0.tokenImage;
      return (R)str;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      //R _ret=null;
      String str = (String)argu;
      n.f0.accept(this, argu);
      String str1 = (String)n.f0.tokenImage;
      if(str.equals("label"))
      {
        System.out.println(str1+":");
      }
      return (R)str1;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
