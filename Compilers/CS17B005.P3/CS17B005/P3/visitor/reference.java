//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   ArrayList<String> ans = new ArrayList<String>();
   int count = 0;
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( DeclStatement() )*
    * f1 -> ( Statement() )*
    * f2 -> PrintStatment()
    * f3 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      for(int i = 0 ; i < ans.size() ; i++){
      	System.out.println(ans.get(i));
      }
      return _ret;
   }

   /**
    * f0 -> IntDecl()
    *       | BoolDecl()
    */
   public R visit(DeclStatement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INT>
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(IntDecl n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> <BOOL>
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(BoolDecl n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> <PRINT>
    * f1 -> Expression()
    */
   public R visit(PrintStatment n) {
      R _ret=null;
      n.f0.accept(this);
      String x = (String)n.f1.accept(this);
      ans.add("print " + x);
      return _ret;
   }

   /**
    * f0 -> AssignmentStatement()
    *       | PrintStatment()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String x = (String)n.f2.accept(this);
      ans.add(n.f0.f0.tokenImage + "=" + x + ";");
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> PlusExpression()
    *       | MinusExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      String x = (String)n.f0.accept(this);
      return (R)x;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> Expression()
    */
   public R visit(PlusExpression n) {
      R _ret=null;
      String x1 = (String)n.f0.accept(this);
      n.f1.accept(this);
      String x2 = (String)n.f2.accept(this);
      String var = "var" + Integer.toString(count);
      count++;
 
      ans.add(var + "=" + x1 + "+" + x2 + ";");
      return (R)var;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> Expression()
    */
   public R visit(MinusExpression n) {
       R _ret=null;
      String x1 = (String)n.f0.accept(this);
      n.f1.accept(this);
      String x2 = (String)n.f2.accept(this);
      String var = "var" + Integer.toString(count);
      count++;
 
      ans.add(var + "=" + x1 + "-" + x2 + ";");
      return (R)var;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | Identifier()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
      String x = (String)n.f0.accept(this);
      return (R)x;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n) {
      R _ret=null;
      n.f0.accept(this);
      String x = (String)n.f1.accept(this);
      n.f2.accept(this);
      return (R)x;
   }

}
