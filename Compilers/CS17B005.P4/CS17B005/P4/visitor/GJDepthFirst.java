//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	int temp = 3000;
	String newTemp()
	{
		String str = " TEMP "+Integer.toString(temp)+" ";
		temp++;
		return str;
	}
	String ExpList = "";
	
	
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println("MAIN");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.println("END");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, (A)"list");
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String str = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      System.out.println(str + "[" + str1 + "]");
      System.out.println("BEGIN");
      String str2 = (String)n.f4.accept(this, argu);
      System.out.println("RETURN" + str2);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      argu = (A)"";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      System.out.println("CJUMP" + str + str1);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      System.out.println("JUMP " + str);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      String str2 = (String)n.f3.accept(this, argu);
      System.out.println("HSTORE" + str + str1+str2);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      String str2 = (String)n.f3.accept(this, argu);
      System.out.println("HLOAD" + str + str1+str2);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      String str1 = (String)n.f2.accept(this, argu);
      System.out.println("MOVE" + str + str1);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      System.out.println("PRINT"+str);
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n, A argu) {
      //R _ret=null;
	   String str = (String) argu;
	   argu = (A)"";
      String str1 = (String)n.f0.accept(this, argu);
      String str2 = newTemp();
      System.out.println("MOVE" + str2 + str1);
      if(str.equals("call"))
	   {
		   ExpList = ExpList + str2;
	   }
      return (R)str2;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      //R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String str = (String)n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return (R)str;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      //R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      String str1 = newTemp();
      n.f2.accept(this, argu);
      String cmm = ExpList;
      ExpList = "";
      n.f3.accept(this, (A)"call");
      n.f4.accept(this, argu);
      System.out.println("MOVE"+str1 + "CALL"+str+"("+ExpList+")");
      ExpList = cmm;
      return (R)str1;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n, A argu) {
      //R _ret=null;
      n.f0.accept(this, argu);
      String str = (String)n.f1.accept(this, argu);
      String str1 = newTemp();
      System.out.println("MOVE"+str1 + "HALLOCATE"+str);
      return (R)str1;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n, A argu) {
      //R _ret=null;
      String str = (String)n.f0.accept(this, argu);
      String str1 = (String)n.f1.accept(this, argu);
      String str2 = (String)n.f2.accept(this, argu);
      String str3 = newTemp();
      System.out.println("MOVE" + str3 + str + str1 + str2);
      return (R)str3;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret;
      n.f0.accept(this, argu);
      int num = n.f0.which;
      //System.out.println(num);
      if(num == 0)
      {
    	  _ret = (R)"LE";
      }
      else if(num == 1)
      {
    	  _ret = (R)"NE";
      }
      else if(num == 2)
      {
    	  _ret = (R)"PLUS";
      }
      else if(num == 3)
      {
    	  _ret = (R)"MINUS";
      }
      else if(num == 4)
      {
    	  _ret = (R)"TIMES";
      }
      else
      {
    	  _ret = (R)"DIV";
      }
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      //R _ret=null;
      n.f0.accept(this, argu);
      String _ret = (String)n.f1.accept(this, argu);
      return (R)(" TEMP "+_ret);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      //R _ret=null;
	   R _ret = (R)n.f0.tokenImage;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      //R _ret=null;
	   String str = (String)argu;
	   R _ret = (R)n.f0.tokenImage;
	   argu = (A)"";
	   if(str.equals("list"))
	   {
		   System.out.println((String)_ret);
	   }
      return _ret;
   }

}
