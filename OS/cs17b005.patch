diff -uarN xv6-orig/create_file.c lab12/create_file.c
--- xv6-orig/create_file.c	1970-01-01 05:30:00.000000000 +0530
+++ lab12/create_file.c	2019-11-08 15:43:39.924526663 +0530
@@ -0,0 +1,54 @@
+/*
+This program accepts a commandline input of number of sectors (512 bytes)
+the max sectors available for a file is 12 direct + 128 indirect is 140
+so for any input greater than 140 it cant allocate any memory
+so it just allocates 140 and quits there by depicting max size 512*140
+= 71,680 bytes.
+
+CAUTION: big allocations takes time so one should wait until final output
+
+*/
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fcntl.h"
+
+
+int
+main(int argc, char *argv[])
+{
+  int fd;
+  if(argc != 2)
+  {
+    printf(1, "inputs reqd.\n");
+    exit();
+  }
+  int num_sectors = atoi(argv[1]);
+  char buf[512];
+  fd = open("new_file", O_CREATE | O_RDWR);
+  if(fd >= 0) 
+  {
+      printf(1, "created\n");
+  } 
+  else 
+  {
+      printf(1, "error\n");
+      exit();
+  }
+  int i = 0;
+  while(i < num_sectors)
+  {
+    int var = write(fd, buf, 512);
+    printf(1,"x");
+    if(var <= 0)
+    {
+      // reaches here if it cant allocate anymore
+      printf(1,"\nmemory limit exceeded");
+      break;
+    }
+    i++;
+  }
+  printf(1, "\ndone sectors %d\n",i);
+  close(fd);
+  exit();
+}
diff -uarN xv6-orig/Makefile lab12/Makefile
--- xv6-orig/Makefile	2019-10-11 13:19:05.000000000 +0530
+++ lab12/Makefile	2019-11-08 15:41:28.348520389 +0530
@@ -181,6 +181,7 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_create_file\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -248,7 +249,7 @@
 # check in that version.
 
 EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c create_file.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
