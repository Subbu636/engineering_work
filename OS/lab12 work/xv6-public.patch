diff -urN xv6-public/bio.d xv6-public-new/bio.d
--- xv6-public/bio.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/bio.d	2019-10-04 10:45:49.488028920 +0530
@@ -0,0 +1,2 @@
+bio.o: bio.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files xv6-public/bio.o and xv6-public-new/bio.o differ
diff -urN xv6-public/bootasm.d xv6-public-new/bootasm.d
--- xv6-public/bootasm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/bootasm.d	2019-10-04 10:45:49.444028918 +0530
@@ -0,0 +1 @@
+bootasm.o: bootasm.S asm.h memlayout.h mmu.h
Binary files xv6-public/bootasm.o and xv6-public-new/bootasm.o differ
Binary files xv6-public/bootblock and xv6-public-new/bootblock differ
diff -urN xv6-public/bootblock.asm xv6-public-new/bootblock.asm
--- xv6-public/bootblock.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/bootblock.asm	2019-10-04 10:45:49.452028918 +0530
@@ -0,0 +1,351 @@
+
+bootblock.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00007c00 <start>:
+# with %cs=0 %ip=7c00.
+
+.code16                       # Assemble for 16-bit mode
+.globl start
+start:
+  cli                         # BIOS enabled interrupts; disable
+    7c00:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax             # Set %ax to zero
+    7c01:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds             # -> Data Segment
+    7c03:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es             # -> Extra Segment
+    7c05:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss             # -> Stack Segment
+    7c07:	8e d0                	mov    %eax,%ss
+
+00007c09 <seta20.1>:
+
+  # Physical address line A20 is tied to zero so that the first PCs 
+  # with 2 MB would run software that assumed 1 MB.  Undo that.
+seta20.1:
+  inb     $0x64,%al               # Wait for not busy
+    7c09:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c0b:	a8 02                	test   $0x2,%al
+  jnz     seta20.1
+    7c0d:	75 fa                	jne    7c09 <seta20.1>
+
+  movb    $0xd1,%al               # 0xd1 -> port 0x64
+    7c0f:	b0 d1                	mov    $0xd1,%al
+  outb    %al,$0x64
+    7c11:	e6 64                	out    %al,$0x64
+
+00007c13 <seta20.2>:
+
+seta20.2:
+  inb     $0x64,%al               # Wait for not busy
+    7c13:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c15:	a8 02                	test   $0x2,%al
+  jnz     seta20.2
+    7c17:	75 fa                	jne    7c13 <seta20.2>
+
+  movb    $0xdf,%al               # 0xdf -> port 0x60
+    7c19:	b0 df                	mov    $0xdf,%al
+  outb    %al,$0x60
+    7c1b:	e6 60                	out    %al,$0x60
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7c1d:	0f 01 16             	lgdtl  (%esi)
+    7c20:	78 7c                	js     7c9e <readsect+0x12>
+  movl    %cr0, %eax
+    7c22:	0f 20 c0             	mov    %cr0,%eax
+  orl     $CR0_PE, %eax
+    7c25:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7c29:	0f 22 c0             	mov    %eax,%cr0
+
+//PAGEBREAK!
+  # Complete the transition to 32-bit protected mode by using a long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmp    $(SEG_KCODE<<3), $start32
+    7c2c:	ea                   	.byte 0xea
+    7c2d:	31 7c 08 00          	xor    %edi,0x0(%eax,%ecx,1)
+
+00007c31 <start32>:
+
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7c31:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7c35:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7c37:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7c39:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    7c3b:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    7c3f:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7c41:	8e e8                	mov    %eax,%gs
+
+  # Set up the stack pointer and call into C.
+  movl    $start, %esp
+    7c43:	bc 00 7c 00 00       	mov    $0x7c00,%esp
+  call    bootmain
+    7c48:	e8 f0 00 00 00       	call   7d3d <bootmain>
+
+  # If bootmain returns (it shouldn't), trigger a Bochs
+  # breakpoint if running under Bochs, then loop.
+  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00
+    7c4d:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    7c51:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7c54:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax            # 0x8ae0 -> port 0x8a00
+    7c56:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7c5a:	66 ef                	out    %ax,(%dx)
+
+00007c5c <spin>:
+spin:
+  jmp     spin
+    7c5c:	eb fe                	jmp    7c5c <spin>
+    7c5e:	66 90                	xchg   %ax,%ax
+
+00007c60 <gdt>:
+	...
+    7c68:	ff                   	(bad)  
+    7c69:	ff 00                	incl   (%eax)
+    7c6b:	00 00                	add    %al,(%eax)
+    7c6d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7c74:	00                   	.byte 0x0
+    7c75:	92                   	xchg   %eax,%edx
+    7c76:	cf                   	iret   
+	...
+
+00007c78 <gdtdesc>:
+    7c78:	17                   	pop    %ss
+    7c79:	00 60 7c             	add    %ah,0x7c(%eax)
+	...
+
+00007c7e <waitdisk>:
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+    7c7e:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7c83:	ec                   	in     (%dx),%al
+
+void
+waitdisk(void)
+{
+  // Wait for disk ready.
+  while((inb(0x1F7) & 0xC0) != 0x40)
+    7c84:	83 e0 c0             	and    $0xffffffc0,%eax
+    7c87:	3c 40                	cmp    $0x40,%al
+    7c89:	75 f8                	jne    7c83 <waitdisk+0x5>
+    ;
+}
+    7c8b:	c3                   	ret    
+
+00007c8c <readsect>:
+
+// Read a single sector at offset into dst.
+void
+readsect(void *dst, uint offset)
+{
+    7c8c:	55                   	push   %ebp
+    7c8d:	89 e5                	mov    %esp,%ebp
+    7c8f:	57                   	push   %edi
+    7c90:	53                   	push   %ebx
+    7c91:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  // Issue command.
+  waitdisk();
+    7c94:	e8 e5 ff ff ff       	call   7c7e <waitdisk>
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+    7c99:	b8 01 00 00 00       	mov    $0x1,%eax
+    7c9e:	ba f2 01 00 00       	mov    $0x1f2,%edx
+    7ca3:	ee                   	out    %al,(%dx)
+    7ca4:	ba f3 01 00 00       	mov    $0x1f3,%edx
+    7ca9:	89 d8                	mov    %ebx,%eax
+    7cab:	ee                   	out    %al,(%dx)
+  outb(0x1F2, 1);   // count = 1
+  outb(0x1F3, offset);
+  outb(0x1F4, offset >> 8);
+    7cac:	89 d8                	mov    %ebx,%eax
+    7cae:	c1 e8 08             	shr    $0x8,%eax
+    7cb1:	ba f4 01 00 00       	mov    $0x1f4,%edx
+    7cb6:	ee                   	out    %al,(%dx)
+  outb(0x1F5, offset >> 16);
+    7cb7:	89 d8                	mov    %ebx,%eax
+    7cb9:	c1 e8 10             	shr    $0x10,%eax
+    7cbc:	ba f5 01 00 00       	mov    $0x1f5,%edx
+    7cc1:	ee                   	out    %al,(%dx)
+  outb(0x1F6, (offset >> 24) | 0xE0);
+    7cc2:	89 d8                	mov    %ebx,%eax
+    7cc4:	c1 e8 18             	shr    $0x18,%eax
+    7cc7:	83 c8 e0             	or     $0xffffffe0,%eax
+    7cca:	ba f6 01 00 00       	mov    $0x1f6,%edx
+    7ccf:	ee                   	out    %al,(%dx)
+    7cd0:	b8 20 00 00 00       	mov    $0x20,%eax
+    7cd5:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7cda:	ee                   	out    %al,(%dx)
+  outb(0x1F7, 0x20);  // cmd 0x20 - read sectors
+
+  // Read data.
+  waitdisk();
+    7cdb:	e8 9e ff ff ff       	call   7c7e <waitdisk>
+  asm volatile("cld; rep insl" :
+    7ce0:	8b 7d 08             	mov    0x8(%ebp),%edi
+    7ce3:	b9 80 00 00 00       	mov    $0x80,%ecx
+    7ce8:	ba f0 01 00 00       	mov    $0x1f0,%edx
+    7ced:	fc                   	cld    
+    7cee:	f3 6d                	rep insl (%dx),%es:(%edi)
+  insl(0x1F0, dst, SECTSIZE/4);
+}
+    7cf0:	5b                   	pop    %ebx
+    7cf1:	5f                   	pop    %edi
+    7cf2:	5d                   	pop    %ebp
+    7cf3:	c3                   	ret    
+
+00007cf4 <readseg>:
+
+// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.
+// Might copy more than asked.
+void
+readseg(uchar* pa, uint count, uint offset)
+{
+    7cf4:	55                   	push   %ebp
+    7cf5:	89 e5                	mov    %esp,%ebp
+    7cf7:	57                   	push   %edi
+    7cf8:	56                   	push   %esi
+    7cf9:	53                   	push   %ebx
+    7cfa:	83 ec 0c             	sub    $0xc,%esp
+    7cfd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    7d00:	8b 75 10             	mov    0x10(%ebp),%esi
+  uchar* epa;
+
+  epa = pa + count;
+    7d03:	89 df                	mov    %ebx,%edi
+    7d05:	03 7d 0c             	add    0xc(%ebp),%edi
+
+  // Round down to sector boundary.
+  pa -= offset % SECTSIZE;
+    7d08:	89 f0                	mov    %esi,%eax
+    7d0a:	25 ff 01 00 00       	and    $0x1ff,%eax
+    7d0f:	29 c3                	sub    %eax,%ebx
+
+  // Translate from bytes to sectors; kernel starts at sector 1.
+  offset = (offset / SECTSIZE) + 1;
+    7d11:	c1 ee 09             	shr    $0x9,%esi
+    7d14:	83 c6 01             	add    $0x1,%esi
+
+  // If this is too slow, we could read lots of sectors at a time.
+  // We'd write more to memory than asked, but it doesn't matter --
+  // we load in increasing order.
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d17:	39 df                	cmp    %ebx,%edi
+    7d19:	76 1a                	jbe    7d35 <readseg+0x41>
+    readsect(pa, offset);
+    7d1b:	83 ec 08             	sub    $0x8,%esp
+    7d1e:	56                   	push   %esi
+    7d1f:	53                   	push   %ebx
+    7d20:	e8 67 ff ff ff       	call   7c8c <readsect>
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d25:	81 c3 00 02 00 00    	add    $0x200,%ebx
+    7d2b:	83 c6 01             	add    $0x1,%esi
+    7d2e:	83 c4 10             	add    $0x10,%esp
+    7d31:	39 df                	cmp    %ebx,%edi
+    7d33:	77 e6                	ja     7d1b <readseg+0x27>
+}
+    7d35:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7d38:	5b                   	pop    %ebx
+    7d39:	5e                   	pop    %esi
+    7d3a:	5f                   	pop    %edi
+    7d3b:	5d                   	pop    %ebp
+    7d3c:	c3                   	ret    
+
+00007d3d <bootmain>:
+{
+    7d3d:	55                   	push   %ebp
+    7d3e:	89 e5                	mov    %esp,%ebp
+    7d40:	57                   	push   %edi
+    7d41:	56                   	push   %esi
+    7d42:	53                   	push   %ebx
+    7d43:	83 ec 10             	sub    $0x10,%esp
+  readseg((uchar*)elf, 4096, 0);
+    7d46:	6a 00                	push   $0x0
+    7d48:	68 00 10 00 00       	push   $0x1000
+    7d4d:	68 00 00 01 00       	push   $0x10000
+    7d52:	e8 9d ff ff ff       	call   7cf4 <readseg>
+  if(elf->magic != ELF_MAGIC)
+    7d57:	83 c4 10             	add    $0x10,%esp
+    7d5a:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
+    7d61:	45 4c 46 
+    7d64:	75 21                	jne    7d87 <bootmain+0x4a>
+  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
+    7d66:	a1 1c 00 01 00       	mov    0x1001c,%eax
+    7d6b:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
+  eph = ph + elf->phnum;
+    7d71:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
+    7d78:	c1 e6 05             	shl    $0x5,%esi
+    7d7b:	01 de                	add    %ebx,%esi
+  for(; ph < eph; ph++){
+    7d7d:	39 f3                	cmp    %esi,%ebx
+    7d7f:	72 15                	jb     7d96 <bootmain+0x59>
+  entry();
+    7d81:	ff 15 18 00 01 00    	call   *0x10018
+}
+    7d87:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7d8a:	5b                   	pop    %ebx
+    7d8b:	5e                   	pop    %esi
+    7d8c:	5f                   	pop    %edi
+    7d8d:	5d                   	pop    %ebp
+    7d8e:	c3                   	ret    
+  for(; ph < eph; ph++){
+    7d8f:	83 c3 20             	add    $0x20,%ebx
+    7d92:	39 de                	cmp    %ebx,%esi
+    7d94:	76 eb                	jbe    7d81 <bootmain+0x44>
+    pa = (uchar*)ph->paddr;
+    7d96:	8b 7b 0c             	mov    0xc(%ebx),%edi
+    readseg(pa, ph->filesz, ph->off);
+    7d99:	83 ec 04             	sub    $0x4,%esp
+    7d9c:	ff 73 04             	pushl  0x4(%ebx)
+    7d9f:	ff 73 10             	pushl  0x10(%ebx)
+    7da2:	57                   	push   %edi
+    7da3:	e8 4c ff ff ff       	call   7cf4 <readseg>
+    if(ph->memsz > ph->filesz)
+    7da8:	8b 4b 14             	mov    0x14(%ebx),%ecx
+    7dab:	8b 43 10             	mov    0x10(%ebx),%eax
+    7dae:	83 c4 10             	add    $0x10,%esp
+    7db1:	39 c1                	cmp    %eax,%ecx
+    7db3:	76 da                	jbe    7d8f <bootmain+0x52>
+      stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz);
+    7db5:	01 c7                	add    %eax,%edi
+    7db7:	29 c1                	sub    %eax,%ecx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    7db9:	b8 00 00 00 00       	mov    $0x0,%eax
+    7dbe:	fc                   	cld    
+    7dbf:	f3 aa                	rep stos %al,%es:(%edi)
+    7dc1:	eb cc                	jmp    7d8f <bootmain+0x52>
Binary files xv6-public/bootblock.o and xv6-public-new/bootblock.o differ
Binary files xv6-public/bootblockother.o and xv6-public-new/bootblockother.o differ
diff -urN xv6-public/bootmain.d xv6-public-new/bootmain.d
--- xv6-public/bootmain.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/bootmain.d	2019-10-04 10:45:49.432028917 +0530
@@ -0,0 +1 @@
+bootmain.o: bootmain.c types.h elf.h x86.h memlayout.h
Binary files xv6-public/bootmain.o and xv6-public-new/bootmain.o differ
Binary files xv6-public/_cat and xv6-public-new/_cat differ
diff -urN xv6-public/cat.asm xv6-public-new/cat.asm
--- xv6-public/cat.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/cat.asm	2019-10-04 10:45:48.476028872 +0530
@@ -0,0 +1,1274 @@
+
+_cat:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	be 01 00 00 00       	mov    $0x1,%esi
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 18             	sub    $0x18,%esp
+  19:	8b 01                	mov    (%ecx),%eax
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  21:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  24:	83 f8 01             	cmp    $0x1,%eax
+  27:	7e 54                	jle    7d <main+0x7d>
+  29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    cat(0);
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	pushl  (%ebx)
+  37:	e8 65 03 00 00       	call   3a1 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	89 c7                	mov    %eax,%edi
+  41:	85 c0                	test   %eax,%eax
+  43:	78 24                	js     69 <main+0x69>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+      exit();
+    }
+    cat(fd);
+  45:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 1; i < argc; i++){
+  48:	83 c6 01             	add    $0x1,%esi
+  4b:	83 c3 04             	add    $0x4,%ebx
+    cat(fd);
+  4e:	50                   	push   %eax
+  4f:	e8 3c 00 00 00       	call   90 <cat>
+    close(fd);
+  54:	89 3c 24             	mov    %edi,(%esp)
+  57:	e8 2d 03 00 00       	call   389 <close>
+  for(i = 1; i < argc; i++){
+  5c:	83 c4 10             	add    $0x10,%esp
+  5f:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  62:	75 cc                	jne    30 <main+0x30>
+  }
+  exit();
+  64:	e8 f8 02 00 00       	call   361 <exit>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+  69:	50                   	push   %eax
+  6a:	ff 33                	pushl  (%ebx)
+  6c:	68 5b 08 00 00       	push   $0x85b
+  71:	6a 01                	push   $0x1
+  73:	e8 58 04 00 00       	call   4d0 <printf>
+      exit();
+  78:	e8 e4 02 00 00       	call   361 <exit>
+    cat(0);
+  7d:	83 ec 0c             	sub    $0xc,%esp
+  80:	6a 00                	push   $0x0
+  82:	e8 09 00 00 00       	call   90 <cat>
+    exit();
+  87:	e8 d5 02 00 00       	call   361 <exit>
+  8c:	66 90                	xchg   %ax,%ax
+  8e:	66 90                	xchg   %ax,%ax
+
+00000090 <cat>:
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	56                   	push   %esi
+  94:	8b 75 08             	mov    0x8(%ebp),%esi
+  97:	53                   	push   %ebx
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  98:	eb 1d                	jmp    b7 <cat+0x27>
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if (write(1, buf, n) != n) {
+  a0:	83 ec 04             	sub    $0x4,%esp
+  a3:	53                   	push   %ebx
+  a4:	68 80 0b 00 00       	push   $0xb80
+  a9:	6a 01                	push   $0x1
+  ab:	e8 d1 02 00 00       	call   381 <write>
+  b0:	83 c4 10             	add    $0x10,%esp
+  b3:	39 d8                	cmp    %ebx,%eax
+  b5:	75 25                	jne    dc <cat+0x4c>
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  b7:	83 ec 04             	sub    $0x4,%esp
+  ba:	68 00 02 00 00       	push   $0x200
+  bf:	68 80 0b 00 00       	push   $0xb80
+  c4:	56                   	push   %esi
+  c5:	e8 af 02 00 00       	call   379 <read>
+  ca:	83 c4 10             	add    $0x10,%esp
+  cd:	89 c3                	mov    %eax,%ebx
+  cf:	85 c0                	test   %eax,%eax
+  d1:	7f cd                	jg     a0 <cat+0x10>
+  if(n < 0){
+  d3:	75 1b                	jne    f0 <cat+0x60>
+}
+  d5:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  d8:	5b                   	pop    %ebx
+  d9:	5e                   	pop    %esi
+  da:	5d                   	pop    %ebp
+  db:	c3                   	ret    
+      printf(1, "cat: write error\n");
+  dc:	83 ec 08             	sub    $0x8,%esp
+  df:	68 38 08 00 00       	push   $0x838
+  e4:	6a 01                	push   $0x1
+  e6:	e8 e5 03 00 00       	call   4d0 <printf>
+      exit();
+  eb:	e8 71 02 00 00       	call   361 <exit>
+    printf(1, "cat: read error\n");
+  f0:	50                   	push   %eax
+  f1:	50                   	push   %eax
+  f2:	68 4a 08 00 00       	push   $0x84a
+  f7:	6a 01                	push   $0x1
+  f9:	e8 d2 03 00 00       	call   4d0 <printf>
+    exit();
+  fe:	e8 5e 02 00 00       	call   361 <exit>
+ 103:	66 90                	xchg   %ax,%ax
+ 105:	66 90                	xchg   %ax,%ax
+ 107:	66 90                	xchg   %ax,%ax
+ 109:	66 90                	xchg   %ax,%ax
+ 10b:	66 90                	xchg   %ax,%ax
+ 10d:	66 90                	xchg   %ax,%ax
+ 10f:	90                   	nop
+
+00000110 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 110:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 111:	31 d2                	xor    %edx,%edx
+{
+ 113:	89 e5                	mov    %esp,%ebp
+ 115:	53                   	push   %ebx
+ 116:	8b 45 08             	mov    0x8(%ebp),%eax
+ 119:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 11c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 120:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+ 124:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 127:	83 c2 01             	add    $0x1,%edx
+ 12a:	84 c9                	test   %cl,%cl
+ 12c:	75 f2                	jne    120 <strcpy+0x10>
+    ;
+  return os;
+}
+ 12e:	5b                   	pop    %ebx
+ 12f:	5d                   	pop    %ebp
+ 130:	c3                   	ret    
+ 131:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 138:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13f:	90                   	nop
+
+00000140 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	56                   	push   %esi
+ 144:	53                   	push   %ebx
+ 145:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 148:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+ 14b:	0f b6 13             	movzbl (%ebx),%edx
+ 14e:	0f b6 0e             	movzbl (%esi),%ecx
+ 151:	84 d2                	test   %dl,%dl
+ 153:	74 1e                	je     173 <strcmp+0x33>
+ 155:	b8 01 00 00 00       	mov    $0x1,%eax
+ 15a:	38 ca                	cmp    %cl,%dl
+ 15c:	74 09                	je     167 <strcmp+0x27>
+ 15e:	eb 20                	jmp    180 <strcmp+0x40>
+ 160:	83 c0 01             	add    $0x1,%eax
+ 163:	38 ca                	cmp    %cl,%dl
+ 165:	75 19                	jne    180 <strcmp+0x40>
+ 167:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 16b:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+ 16f:	84 d2                	test   %dl,%dl
+ 171:	75 ed                	jne    160 <strcmp+0x20>
+ 173:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+ 175:	5b                   	pop    %ebx
+ 176:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 177:	29 c8                	sub    %ecx,%eax
+}
+ 179:	5d                   	pop    %ebp
+ 17a:	c3                   	ret    
+ 17b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 17f:	90                   	nop
+ 180:	0f b6 c2             	movzbl %dl,%eax
+ 183:	5b                   	pop    %ebx
+ 184:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 185:	29 c8                	sub    %ecx,%eax
+}
+ 187:	5d                   	pop    %ebp
+ 188:	c3                   	ret    
+ 189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000190 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 196:	80 39 00             	cmpb   $0x0,(%ecx)
+ 199:	74 15                	je     1b0 <strlen+0x20>
+ 19b:	31 d2                	xor    %edx,%edx
+ 19d:	8d 76 00             	lea    0x0(%esi),%esi
+ 1a0:	83 c2 01             	add    $0x1,%edx
+ 1a3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1a7:	89 d0                	mov    %edx,%eax
+ 1a9:	75 f5                	jne    1a0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1ab:	5d                   	pop    %ebp
+ 1ac:	c3                   	ret    
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 1b0:	31 c0                	xor    %eax,%eax
+}
+ 1b2:	5d                   	pop    %ebp
+ 1b3:	c3                   	ret    
+ 1b4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1bf:	90                   	nop
+
+000001c0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	57                   	push   %edi
+ 1c4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1c7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1ca:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1cd:	89 d7                	mov    %edx,%edi
+ 1cf:	fc                   	cld    
+ 1d0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1d2:	89 d0                	mov    %edx,%eax
+ 1d4:	5f                   	pop    %edi
+ 1d5:	5d                   	pop    %ebp
+ 1d6:	c3                   	ret    
+ 1d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1de:	66 90                	xchg   %ax,%ax
+
+000001e0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1e0:	55                   	push   %ebp
+ 1e1:	89 e5                	mov    %esp,%ebp
+ 1e3:	53                   	push   %ebx
+ 1e4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e7:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 1ea:	0f b6 18             	movzbl (%eax),%ebx
+ 1ed:	84 db                	test   %bl,%bl
+ 1ef:	74 1d                	je     20e <strchr+0x2e>
+ 1f1:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 1f3:	38 d3                	cmp    %dl,%bl
+ 1f5:	75 0d                	jne    204 <strchr+0x24>
+ 1f7:	eb 17                	jmp    210 <strchr+0x30>
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 200:	38 ca                	cmp    %cl,%dl
+ 202:	74 0c                	je     210 <strchr+0x30>
+  for(; *s; s++)
+ 204:	83 c0 01             	add    $0x1,%eax
+ 207:	0f b6 10             	movzbl (%eax),%edx
+ 20a:	84 d2                	test   %dl,%dl
+ 20c:	75 f2                	jne    200 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 20e:	31 c0                	xor    %eax,%eax
+}
+ 210:	5b                   	pop    %ebx
+ 211:	5d                   	pop    %ebp
+ 212:	c3                   	ret    
+ 213:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 21a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000220 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	57                   	push   %edi
+ 224:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 225:	31 f6                	xor    %esi,%esi
+{
+ 227:	53                   	push   %ebx
+ 228:	89 f3                	mov    %esi,%ebx
+ 22a:	83 ec 1c             	sub    $0x1c,%esp
+ 22d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 230:	eb 2f                	jmp    261 <gets+0x41>
+ 232:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 238:	83 ec 04             	sub    $0x4,%esp
+ 23b:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 23e:	6a 01                	push   $0x1
+ 240:	50                   	push   %eax
+ 241:	6a 00                	push   $0x0
+ 243:	e8 31 01 00 00       	call   379 <read>
+    if(cc < 1)
+ 248:	83 c4 10             	add    $0x10,%esp
+ 24b:	85 c0                	test   %eax,%eax
+ 24d:	7e 1c                	jle    26b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 24f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 253:	83 c7 01             	add    $0x1,%edi
+ 256:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 259:	3c 0a                	cmp    $0xa,%al
+ 25b:	74 23                	je     280 <gets+0x60>
+ 25d:	3c 0d                	cmp    $0xd,%al
+ 25f:	74 1f                	je     280 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 261:	83 c3 01             	add    $0x1,%ebx
+ 264:	89 fe                	mov    %edi,%esi
+ 266:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 269:	7c cd                	jl     238 <gets+0x18>
+ 26b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 26d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 270:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 273:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 276:	5b                   	pop    %ebx
+ 277:	5e                   	pop    %esi
+ 278:	5f                   	pop    %edi
+ 279:	5d                   	pop    %ebp
+ 27a:	c3                   	ret    
+ 27b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 27f:	90                   	nop
+ 280:	8b 75 08             	mov    0x8(%ebp),%esi
+ 283:	8b 45 08             	mov    0x8(%ebp),%eax
+ 286:	01 de                	add    %ebx,%esi
+ 288:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 28a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 28d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 290:	5b                   	pop    %ebx
+ 291:	5e                   	pop    %esi
+ 292:	5f                   	pop    %edi
+ 293:	5d                   	pop    %ebp
+ 294:	c3                   	ret    
+ 295:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002a0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	56                   	push   %esi
+ 2a4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2a5:	83 ec 08             	sub    $0x8,%esp
+ 2a8:	6a 00                	push   $0x0
+ 2aa:	ff 75 08             	pushl  0x8(%ebp)
+ 2ad:	e8 ef 00 00 00       	call   3a1 <open>
+  if(fd < 0)
+ 2b2:	83 c4 10             	add    $0x10,%esp
+ 2b5:	85 c0                	test   %eax,%eax
+ 2b7:	78 27                	js     2e0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2b9:	83 ec 08             	sub    $0x8,%esp
+ 2bc:	ff 75 0c             	pushl  0xc(%ebp)
+ 2bf:	89 c3                	mov    %eax,%ebx
+ 2c1:	50                   	push   %eax
+ 2c2:	e8 f2 00 00 00       	call   3b9 <fstat>
+  close(fd);
+ 2c7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2ca:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2cc:	e8 b8 00 00 00       	call   389 <close>
+  return r;
+ 2d1:	83 c4 10             	add    $0x10,%esp
+}
+ 2d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2d7:	89 f0                	mov    %esi,%eax
+ 2d9:	5b                   	pop    %ebx
+ 2da:	5e                   	pop    %esi
+ 2db:	5d                   	pop    %ebp
+ 2dc:	c3                   	ret    
+ 2dd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 2e0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2e5:	eb ed                	jmp    2d4 <stat+0x34>
+ 2e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ee:	66 90                	xchg   %ax,%ax
+
+000002f0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2f0:	55                   	push   %ebp
+ 2f1:	89 e5                	mov    %esp,%ebp
+ 2f3:	53                   	push   %ebx
+ 2f4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2f7:	0f be 11             	movsbl (%ecx),%edx
+ 2fa:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 2fd:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 2ff:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 304:	77 1f                	ja     325 <atoi+0x35>
+ 306:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 30d:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 310:	83 c1 01             	add    $0x1,%ecx
+ 313:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 316:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 31a:	0f be 11             	movsbl (%ecx),%edx
+ 31d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 320:	80 fb 09             	cmp    $0x9,%bl
+ 323:	76 eb                	jbe    310 <atoi+0x20>
+  return n;
+}
+ 325:	5b                   	pop    %ebx
+ 326:	5d                   	pop    %ebp
+ 327:	c3                   	ret    
+ 328:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 32f:	90                   	nop
+
+00000330 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	57                   	push   %edi
+ 334:	8b 55 10             	mov    0x10(%ebp),%edx
+ 337:	8b 45 08             	mov    0x8(%ebp),%eax
+ 33a:	56                   	push   %esi
+ 33b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 33e:	85 d2                	test   %edx,%edx
+ 340:	7e 13                	jle    355 <memmove+0x25>
+ 342:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 344:	89 c7                	mov    %eax,%edi
+ 346:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 34d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 350:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 351:	39 fa                	cmp    %edi,%edx
+ 353:	75 fb                	jne    350 <memmove+0x20>
+  return vdst;
+}
+ 355:	5e                   	pop    %esi
+ 356:	5f                   	pop    %edi
+ 357:	5d                   	pop    %ebp
+ 358:	c3                   	ret    
+
+00000359 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 359:	b8 01 00 00 00       	mov    $0x1,%eax
+ 35e:	cd 40                	int    $0x40
+ 360:	c3                   	ret    
+
+00000361 <exit>:
+SYSCALL(exit)
+ 361:	b8 02 00 00 00       	mov    $0x2,%eax
+ 366:	cd 40                	int    $0x40
+ 368:	c3                   	ret    
+
+00000369 <wait>:
+SYSCALL(wait)
+ 369:	b8 03 00 00 00       	mov    $0x3,%eax
+ 36e:	cd 40                	int    $0x40
+ 370:	c3                   	ret    
+
+00000371 <pipe>:
+SYSCALL(pipe)
+ 371:	b8 04 00 00 00       	mov    $0x4,%eax
+ 376:	cd 40                	int    $0x40
+ 378:	c3                   	ret    
+
+00000379 <read>:
+SYSCALL(read)
+ 379:	b8 05 00 00 00       	mov    $0x5,%eax
+ 37e:	cd 40                	int    $0x40
+ 380:	c3                   	ret    
+
+00000381 <write>:
+SYSCALL(write)
+ 381:	b8 10 00 00 00       	mov    $0x10,%eax
+ 386:	cd 40                	int    $0x40
+ 388:	c3                   	ret    
+
+00000389 <close>:
+SYSCALL(close)
+ 389:	b8 15 00 00 00       	mov    $0x15,%eax
+ 38e:	cd 40                	int    $0x40
+ 390:	c3                   	ret    
+
+00000391 <kill>:
+SYSCALL(kill)
+ 391:	b8 06 00 00 00       	mov    $0x6,%eax
+ 396:	cd 40                	int    $0x40
+ 398:	c3                   	ret    
+
+00000399 <exec>:
+SYSCALL(exec)
+ 399:	b8 07 00 00 00       	mov    $0x7,%eax
+ 39e:	cd 40                	int    $0x40
+ 3a0:	c3                   	ret    
+
+000003a1 <open>:
+SYSCALL(open)
+ 3a1:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3a6:	cd 40                	int    $0x40
+ 3a8:	c3                   	ret    
+
+000003a9 <mknod>:
+SYSCALL(mknod)
+ 3a9:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3ae:	cd 40                	int    $0x40
+ 3b0:	c3                   	ret    
+
+000003b1 <unlink>:
+SYSCALL(unlink)
+ 3b1:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3b6:	cd 40                	int    $0x40
+ 3b8:	c3                   	ret    
+
+000003b9 <fstat>:
+SYSCALL(fstat)
+ 3b9:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3be:	cd 40                	int    $0x40
+ 3c0:	c3                   	ret    
+
+000003c1 <link>:
+SYSCALL(link)
+ 3c1:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3c6:	cd 40                	int    $0x40
+ 3c8:	c3                   	ret    
+
+000003c9 <mkdir>:
+SYSCALL(mkdir)
+ 3c9:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3ce:	cd 40                	int    $0x40
+ 3d0:	c3                   	ret    
+
+000003d1 <chdir>:
+SYSCALL(chdir)
+ 3d1:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3d6:	cd 40                	int    $0x40
+ 3d8:	c3                   	ret    
+
+000003d9 <dup>:
+SYSCALL(dup)
+ 3d9:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3de:	cd 40                	int    $0x40
+ 3e0:	c3                   	ret    
+
+000003e1 <getpid>:
+SYSCALL(getpid)
+ 3e1:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3e6:	cd 40                	int    $0x40
+ 3e8:	c3                   	ret    
+
+000003e9 <sbrk>:
+SYSCALL(sbrk)
+ 3e9:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3ee:	cd 40                	int    $0x40
+ 3f0:	c3                   	ret    
+
+000003f1 <sleep>:
+SYSCALL(sleep)
+ 3f1:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3f6:	cd 40                	int    $0x40
+ 3f8:	c3                   	ret    
+
+000003f9 <uptime>:
+SYSCALL(uptime)
+ 3f9:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3fe:	cd 40                	int    $0x40
+ 400:	c3                   	ret    
+ 401:	66 90                	xchg   %ax,%ax
+ 403:	66 90                	xchg   %ax,%ax
+ 405:	66 90                	xchg   %ax,%ax
+ 407:	66 90                	xchg   %ax,%ax
+ 409:	66 90                	xchg   %ax,%ax
+ 40b:	66 90                	xchg   %ax,%ax
+ 40d:	66 90                	xchg   %ax,%ax
+ 40f:	90                   	nop
+
+00000410 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 416:	89 d3                	mov    %edx,%ebx
+{
+ 418:	83 ec 3c             	sub    $0x3c,%esp
+ 41b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+ 41e:	85 d2                	test   %edx,%edx
+ 420:	0f 89 92 00 00 00    	jns    4b8 <printint+0xa8>
+ 426:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 42a:	0f 84 88 00 00 00    	je     4b8 <printint+0xa8>
+    neg = 1;
+ 430:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+ 437:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 439:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 440:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 443:	eb 08                	jmp    44d <printint+0x3d>
+ 445:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 448:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+ 44b:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+ 44d:	89 d8                	mov    %ebx,%eax
+ 44f:	31 d2                	xor    %edx,%edx
+ 451:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 454:	f7 f1                	div    %ecx
+ 456:	83 c7 01             	add    $0x1,%edi
+ 459:	0f b6 92 78 08 00 00 	movzbl 0x878(%edx),%edx
+ 460:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+ 463:	39 d9                	cmp    %ebx,%ecx
+ 465:	76 e1                	jbe    448 <printint+0x38>
+  if(neg)
+ 467:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 46a:	85 c0                	test   %eax,%eax
+ 46c:	74 0d                	je     47b <printint+0x6b>
+    buf[i++] = '-';
+ 46e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 473:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+ 478:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 47b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 47e:	8b 7d bc             	mov    -0x44(%ebp),%edi
+ 481:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 485:	eb 0f                	jmp    496 <printint+0x86>
+ 487:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 48e:	66 90                	xchg   %ax,%ax
+ 490:	0f b6 13             	movzbl (%ebx),%edx
+ 493:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 496:	83 ec 04             	sub    $0x4,%esp
+ 499:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 49c:	6a 01                	push   $0x1
+ 49e:	56                   	push   %esi
+ 49f:	57                   	push   %edi
+ 4a0:	e8 dc fe ff ff       	call   381 <write>
+
+  while(--i >= 0)
+ 4a5:	83 c4 10             	add    $0x10,%esp
+ 4a8:	39 de                	cmp    %ebx,%esi
+ 4aa:	75 e4                	jne    490 <printint+0x80>
+    putc(fd, buf[i]);
+}
+ 4ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4af:	5b                   	pop    %ebx
+ 4b0:	5e                   	pop    %esi
+ 4b1:	5f                   	pop    %edi
+ 4b2:	5d                   	pop    %ebp
+ 4b3:	c3                   	ret    
+ 4b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4b8:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+ 4bf:	e9 75 ff ff ff       	jmp    439 <printint+0x29>
+ 4c4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4cf:	90                   	nop
+
+000004d0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4d0:	55                   	push   %ebp
+ 4d1:	89 e5                	mov    %esp,%ebp
+ 4d3:	57                   	push   %edi
+ 4d4:	56                   	push   %esi
+ 4d5:	53                   	push   %ebx
+ 4d6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4d9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4dc:	0f b6 1e             	movzbl (%esi),%ebx
+ 4df:	84 db                	test   %bl,%bl
+ 4e1:	0f 84 b9 00 00 00    	je     5a0 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+ 4e7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4ea:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 4ed:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 4f0:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 4f2:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4f5:	eb 38                	jmp    52f <printf+0x5f>
+ 4f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4fe:	66 90                	xchg   %ax,%ax
+ 500:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 503:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 508:	83 f8 25             	cmp    $0x25,%eax
+ 50b:	74 17                	je     524 <printf+0x54>
+  write(fd, &c, 1);
+ 50d:	83 ec 04             	sub    $0x4,%esp
+ 510:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 513:	6a 01                	push   $0x1
+ 515:	57                   	push   %edi
+ 516:	ff 75 08             	pushl  0x8(%ebp)
+ 519:	e8 63 fe ff ff       	call   381 <write>
+ 51e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 521:	83 c4 10             	add    $0x10,%esp
+ 524:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 527:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 52b:	84 db                	test   %bl,%bl
+ 52d:	74 71                	je     5a0 <printf+0xd0>
+    c = fmt[i] & 0xff;
+ 52f:	0f be cb             	movsbl %bl,%ecx
+ 532:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 535:	85 d2                	test   %edx,%edx
+ 537:	74 c7                	je     500 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 539:	83 fa 25             	cmp    $0x25,%edx
+ 53c:	75 e6                	jne    524 <printf+0x54>
+      if(c == 'd'){
+ 53e:	83 f8 64             	cmp    $0x64,%eax
+ 541:	0f 84 99 00 00 00    	je     5e0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 547:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 54d:	83 f9 70             	cmp    $0x70,%ecx
+ 550:	74 5e                	je     5b0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 552:	83 f8 73             	cmp    $0x73,%eax
+ 555:	0f 84 d5 00 00 00    	je     630 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 55b:	83 f8 63             	cmp    $0x63,%eax
+ 55e:	0f 84 8c 00 00 00    	je     5f0 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 564:	83 f8 25             	cmp    $0x25,%eax
+ 567:	0f 84 b3 00 00 00    	je     620 <printf+0x150>
+  write(fd, &c, 1);
+ 56d:	83 ec 04             	sub    $0x4,%esp
+ 570:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 574:	6a 01                	push   $0x1
+ 576:	57                   	push   %edi
+ 577:	ff 75 08             	pushl  0x8(%ebp)
+ 57a:	e8 02 fe ff ff       	call   381 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 57f:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 582:	83 c4 0c             	add    $0xc,%esp
+ 585:	6a 01                	push   $0x1
+ 587:	83 c6 01             	add    $0x1,%esi
+ 58a:	57                   	push   %edi
+ 58b:	ff 75 08             	pushl  0x8(%ebp)
+ 58e:	e8 ee fd ff ff       	call   381 <write>
+  for(i = 0; fmt[i]; i++){
+ 593:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 597:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 59a:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 59c:	84 db                	test   %bl,%bl
+ 59e:	75 8f                	jne    52f <printf+0x5f>
+    }
+  }
+}
+ 5a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5a3:	5b                   	pop    %ebx
+ 5a4:	5e                   	pop    %esi
+ 5a5:	5f                   	pop    %edi
+ 5a6:	5d                   	pop    %ebp
+ 5a7:	c3                   	ret    
+ 5a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
+        printint(fd, *ap, 16, 0);
+ 5b0:	83 ec 0c             	sub    $0xc,%esp
+ 5b3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5b8:	6a 00                	push   $0x0
+ 5ba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5bd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5c0:	8b 13                	mov    (%ebx),%edx
+ 5c2:	e8 49 fe ff ff       	call   410 <printint>
+        ap++;
+ 5c7:	89 d8                	mov    %ebx,%eax
+ 5c9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5cc:	31 d2                	xor    %edx,%edx
+        ap++;
+ 5ce:	83 c0 04             	add    $0x4,%eax
+ 5d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5d4:	e9 4b ff ff ff       	jmp    524 <printf+0x54>
+ 5d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 5e0:	83 ec 0c             	sub    $0xc,%esp
+ 5e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5e8:	6a 01                	push   $0x1
+ 5ea:	eb ce                	jmp    5ba <printf+0xea>
+ 5ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 5f0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 5f3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5f6:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 5f8:	6a 01                	push   $0x1
+        ap++;
+ 5fa:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 5fd:	57                   	push   %edi
+ 5fe:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 601:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 604:	e8 78 fd ff ff       	call   381 <write>
+        ap++;
+ 609:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 60c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 60f:	31 d2                	xor    %edx,%edx
+ 611:	e9 0e ff ff ff       	jmp    524 <printf+0x54>
+ 616:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 61d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 620:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 623:	83 ec 04             	sub    $0x4,%esp
+ 626:	e9 5a ff ff ff       	jmp    585 <printf+0xb5>
+ 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 62f:	90                   	nop
+        s = (char*)*ap;
+ 630:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 633:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 635:	83 c0 04             	add    $0x4,%eax
+ 638:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 63b:	85 db                	test   %ebx,%ebx
+ 63d:	74 17                	je     656 <printf+0x186>
+        while(*s != 0){
+ 63f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 642:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 644:	84 c0                	test   %al,%al
+ 646:	0f 84 d8 fe ff ff    	je     524 <printf+0x54>
+ 64c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 64f:	89 de                	mov    %ebx,%esi
+ 651:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 654:	eb 1a                	jmp    670 <printf+0x1a0>
+          s = "(null)";
+ 656:	bb 70 08 00 00       	mov    $0x870,%ebx
+        while(*s != 0){
+ 65b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 65e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 663:	89 de                	mov    %ebx,%esi
+ 665:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 668:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 66f:	90                   	nop
+  write(fd, &c, 1);
+ 670:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 673:	83 c6 01             	add    $0x1,%esi
+ 676:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 679:	6a 01                	push   $0x1
+ 67b:	57                   	push   %edi
+ 67c:	53                   	push   %ebx
+ 67d:	e8 ff fc ff ff       	call   381 <write>
+        while(*s != 0){
+ 682:	0f b6 06             	movzbl (%esi),%eax
+ 685:	83 c4 10             	add    $0x10,%esp
+ 688:	84 c0                	test   %al,%al
+ 68a:	75 e4                	jne    670 <printf+0x1a0>
+ 68c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 68f:	31 d2                	xor    %edx,%edx
+ 691:	e9 8e fe ff ff       	jmp    524 <printf+0x54>
+ 696:	66 90                	xchg   %ax,%ax
+ 698:	66 90                	xchg   %ax,%ax
+ 69a:	66 90                	xchg   %ax,%ax
+ 69c:	66 90                	xchg   %ax,%ax
+ 69e:	66 90                	xchg   %ax,%ax
+
+000006a0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6a0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6a1:	a1 60 0b 00 00       	mov    0xb60,%eax
+{
+ 6a6:	89 e5                	mov    %esp,%ebp
+ 6a8:	57                   	push   %edi
+ 6a9:	56                   	push   %esi
+ 6aa:	53                   	push   %ebx
+ 6ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6ae:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 6b0:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6b3:	39 c8                	cmp    %ecx,%eax
+ 6b5:	73 19                	jae    6d0 <free+0x30>
+ 6b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6be:	66 90                	xchg   %ax,%ax
+ 6c0:	39 d1                	cmp    %edx,%ecx
+ 6c2:	72 14                	jb     6d8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6c4:	39 d0                	cmp    %edx,%eax
+ 6c6:	73 10                	jae    6d8 <free+0x38>
+{
+ 6c8:	89 d0                	mov    %edx,%eax
+ 6ca:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6cc:	39 c8                	cmp    %ecx,%eax
+ 6ce:	72 f0                	jb     6c0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6d0:	39 d0                	cmp    %edx,%eax
+ 6d2:	72 f4                	jb     6c8 <free+0x28>
+ 6d4:	39 d1                	cmp    %edx,%ecx
+ 6d6:	73 f0                	jae    6c8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6de:	39 fa                	cmp    %edi,%edx
+ 6e0:	74 1e                	je     700 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6e2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6e5:	8b 50 04             	mov    0x4(%eax),%edx
+ 6e8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6eb:	39 f1                	cmp    %esi,%ecx
+ 6ed:	74 28                	je     717 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6ef:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 6f1:	5b                   	pop    %ebx
+  freep = p;
+ 6f2:	a3 60 0b 00 00       	mov    %eax,0xb60
+}
+ 6f7:	5e                   	pop    %esi
+ 6f8:	5f                   	pop    %edi
+ 6f9:	5d                   	pop    %ebp
+ 6fa:	c3                   	ret    
+ 6fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ff:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 700:	03 72 04             	add    0x4(%edx),%esi
+ 703:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 706:	8b 10                	mov    (%eax),%edx
+ 708:	8b 12                	mov    (%edx),%edx
+ 70a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 70d:	8b 50 04             	mov    0x4(%eax),%edx
+ 710:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 713:	39 f1                	cmp    %esi,%ecx
+ 715:	75 d8                	jne    6ef <free+0x4f>
+    p->s.size += bp->s.size;
+ 717:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 71a:	a3 60 0b 00 00       	mov    %eax,0xb60
+    p->s.size += bp->s.size;
+ 71f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 722:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 725:	89 10                	mov    %edx,(%eax)
+}
+ 727:	5b                   	pop    %ebx
+ 728:	5e                   	pop    %esi
+ 729:	5f                   	pop    %edi
+ 72a:	5d                   	pop    %ebp
+ 72b:	c3                   	ret    
+ 72c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000730 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 730:	55                   	push   %ebp
+ 731:	89 e5                	mov    %esp,%ebp
+ 733:	57                   	push   %edi
+ 734:	56                   	push   %esi
+ 735:	53                   	push   %ebx
+ 736:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 739:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 73c:	8b 3d 60 0b 00 00    	mov    0xb60,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 742:	8d 70 07             	lea    0x7(%eax),%esi
+ 745:	c1 ee 03             	shr    $0x3,%esi
+ 748:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 74b:	85 ff                	test   %edi,%edi
+ 74d:	0f 84 ad 00 00 00    	je     800 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 753:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 755:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 758:	39 f1                	cmp    %esi,%ecx
+ 75a:	73 72                	jae    7ce <malloc+0x9e>
+ 75c:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 762:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 767:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 76a:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 771:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 774:	eb 1b                	jmp    791 <malloc+0x61>
+ 776:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 77d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 780:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 782:	8b 48 04             	mov    0x4(%eax),%ecx
+ 785:	39 f1                	cmp    %esi,%ecx
+ 787:	73 4f                	jae    7d8 <malloc+0xa8>
+ 789:	8b 3d 60 0b 00 00    	mov    0xb60,%edi
+ 78f:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 791:	39 d7                	cmp    %edx,%edi
+ 793:	75 eb                	jne    780 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 795:	83 ec 0c             	sub    $0xc,%esp
+ 798:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 79b:	e8 49 fc ff ff       	call   3e9 <sbrk>
+  if(p == (char*)-1)
+ 7a0:	83 c4 10             	add    $0x10,%esp
+ 7a3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7a6:	74 1c                	je     7c4 <malloc+0x94>
+  hp->s.size = nu;
+ 7a8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7ab:	83 ec 0c             	sub    $0xc,%esp
+ 7ae:	83 c0 08             	add    $0x8,%eax
+ 7b1:	50                   	push   %eax
+ 7b2:	e8 e9 fe ff ff       	call   6a0 <free>
+  return freep;
+ 7b7:	8b 15 60 0b 00 00    	mov    0xb60,%edx
+      if((p = morecore(nunits)) == 0)
+ 7bd:	83 c4 10             	add    $0x10,%esp
+ 7c0:	85 d2                	test   %edx,%edx
+ 7c2:	75 bc                	jne    780 <malloc+0x50>
+        return 0;
+  }
+}
+ 7c4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7c7:	31 c0                	xor    %eax,%eax
+}
+ 7c9:	5b                   	pop    %ebx
+ 7ca:	5e                   	pop    %esi
+ 7cb:	5f                   	pop    %edi
+ 7cc:	5d                   	pop    %ebp
+ 7cd:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7ce:	89 d0                	mov    %edx,%eax
+ 7d0:	89 fa                	mov    %edi,%edx
+ 7d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 7d8:	39 ce                	cmp    %ecx,%esi
+ 7da:	74 54                	je     830 <malloc+0x100>
+        p->s.size -= nunits;
+ 7dc:	29 f1                	sub    %esi,%ecx
+ 7de:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 7e1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 7e4:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 7e7:	89 15 60 0b 00 00    	mov    %edx,0xb60
+}
+ 7ed:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7f0:	83 c0 08             	add    $0x8,%eax
+}
+ 7f3:	5b                   	pop    %ebx
+ 7f4:	5e                   	pop    %esi
+ 7f5:	5f                   	pop    %edi
+ 7f6:	5d                   	pop    %ebp
+ 7f7:	c3                   	ret    
+ 7f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ff:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+ 800:	c7 05 60 0b 00 00 64 	movl   $0xb64,0xb60
+ 807:	0b 00 00 
+    base.s.size = 0;
+ 80a:	bf 64 0b 00 00       	mov    $0xb64,%edi
+    base.s.ptr = freep = prevp = &base;
+ 80f:	c7 05 64 0b 00 00 64 	movl   $0xb64,0xb64
+ 816:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 819:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 81b:	c7 05 68 0b 00 00 00 	movl   $0x0,0xb68
+ 822:	00 00 00 
+    if(p->s.size >= nunits){
+ 825:	e9 32 ff ff ff       	jmp    75c <malloc+0x2c>
+ 82a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 830:	8b 08                	mov    (%eax),%ecx
+ 832:	89 0a                	mov    %ecx,(%edx)
+ 834:	eb b1                	jmp    7e7 <malloc+0xb7>
diff -urN xv6-public/cat.d xv6-public-new/cat.d
--- xv6-public/cat.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/cat.d	2019-10-04 10:45:48.464028871 +0530
@@ -0,0 +1 @@
+cat.o: cat.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/cat.o and xv6-public-new/cat.o differ
diff -urN xv6-public/cat.sym xv6-public-new/cat.sym
--- xv6-public/cat.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/cat.sym	2019-10-04 10:45:48.480028872 +0530
@@ -0,0 +1,59 @@
+00000000 .text
+00000838 .rodata
+0000088c .eh_frame
+00000b60 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 cat.c
+00000000 ulib.c
+00000000 printf.c
+00000410 printint
+00000878 digits.1101
+00000000 umalloc.c
+00000b60 freep
+00000b64 base
+00000110 strcpy
+000004d0 printf
+00000330 memmove
+000003a9 mknod
+00000220 gets
+000003e1 getpid
+00000090 cat
+00000730 malloc
+000003f1 sleep
+00000371 pipe
+00000381 write
+000003b9 fstat
+00000391 kill
+000003d1 chdir
+00000399 exec
+00000369 wait
+00000379 read
+000003b1 unlink
+00000359 fork
+000003e9 sbrk
+000003f9 uptime
+00000b5c __bss_start
+000001c0 memset
+00000000 main
+00000140 strcmp
+000003d9 dup
+00000b80 buf
+000002a0 stat
+00000b5c _edata
+00000d80 _end
+000003c1 link
+00000361 exit
+000002f0 atoi
+00000190 strlen
+000003a1 open
+000001e0 strchr
+000003c9 mkdir
+00000389 close
+000006a0 free
diff -urN xv6-public/console.d xv6-public-new/console.d
--- xv6-public/console.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/console.d	2019-10-04 10:45:49.576028924 +0530
@@ -0,0 +1,3 @@
+console.o: console.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ traps.h spinlock.h sleeplock.h fs.h file.h memlayout.h mmu.h proc.h \
+ x86.h
Binary files xv6-public/console.o and xv6-public-new/console.o differ
Binary files xv6-public/_echo and xv6-public-new/_echo differ
diff -urN xv6-public/echo.asm xv6-public-new/echo.asm
--- xv6-public/echo.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/echo.asm	2019-10-04 10:45:48.508028873 +0530
@@ -0,0 +1,1188 @@
+
+_echo:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	56                   	push   %esi
+   e:	53                   	push   %ebx
+   f:	51                   	push   %ecx
+  10:	83 ec 0c             	sub    $0xc,%esp
+  13:	8b 01                	mov    (%ecx),%eax
+  15:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  for(i = 1; i < argc; i++)
+  18:	83 f8 01             	cmp    $0x1,%eax
+  1b:	7e 47                	jle    64 <main+0x64>
+  1d:	8d 5a 04             	lea    0x4(%edx),%ebx
+  20:	8d 34 82             	lea    (%edx,%eax,4),%esi
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  23:	83 c3 04             	add    $0x4,%ebx
+  26:	8b 43 fc             	mov    -0x4(%ebx),%eax
+  29:	39 f3                	cmp    %esi,%ebx
+  2b:	74 22                	je     4f <main+0x4f>
+  2d:	8d 76 00             	lea    0x0(%esi),%esi
+  30:	68 98 07 00 00       	push   $0x798
+  35:	83 c3 04             	add    $0x4,%ebx
+  38:	50                   	push   %eax
+  39:	68 9a 07 00 00       	push   $0x79a
+  3e:	6a 01                	push   $0x1
+  40:	e8 eb 03 00 00       	call   430 <printf>
+  45:	83 c4 10             	add    $0x10,%esp
+  48:	8b 43 fc             	mov    -0x4(%ebx),%eax
+  4b:	39 f3                	cmp    %esi,%ebx
+  4d:	75 e1                	jne    30 <main+0x30>
+  4f:	68 9f 07 00 00       	push   $0x79f
+  54:	50                   	push   %eax
+  55:	68 9a 07 00 00       	push   $0x79a
+  5a:	6a 01                	push   $0x1
+  5c:	e8 cf 03 00 00       	call   430 <printf>
+  61:	83 c4 10             	add    $0x10,%esp
+  exit();
+  64:	e8 58 02 00 00       	call   2c1 <exit>
+  69:	66 90                	xchg   %ax,%ax
+  6b:	66 90                	xchg   %ax,%ax
+  6d:	66 90                	xchg   %ax,%ax
+  6f:	90                   	nop
+
+00000070 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  70:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  71:	31 d2                	xor    %edx,%edx
+{
+  73:	89 e5                	mov    %esp,%ebp
+  75:	53                   	push   %ebx
+  76:	8b 45 08             	mov    0x8(%ebp),%eax
+  79:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  80:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+  84:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+  87:	83 c2 01             	add    $0x1,%edx
+  8a:	84 c9                	test   %cl,%cl
+  8c:	75 f2                	jne    80 <strcpy+0x10>
+    ;
+  return os;
+}
+  8e:	5b                   	pop    %ebx
+  8f:	5d                   	pop    %ebp
+  90:	c3                   	ret    
+  91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  9f:	90                   	nop
+
+000000a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  a0:	55                   	push   %ebp
+  a1:	89 e5                	mov    %esp,%ebp
+  a3:	56                   	push   %esi
+  a4:	53                   	push   %ebx
+  a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  a8:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+  ab:	0f b6 13             	movzbl (%ebx),%edx
+  ae:	0f b6 0e             	movzbl (%esi),%ecx
+  b1:	84 d2                	test   %dl,%dl
+  b3:	74 1e                	je     d3 <strcmp+0x33>
+  b5:	b8 01 00 00 00       	mov    $0x1,%eax
+  ba:	38 ca                	cmp    %cl,%dl
+  bc:	74 09                	je     c7 <strcmp+0x27>
+  be:	eb 20                	jmp    e0 <strcmp+0x40>
+  c0:	83 c0 01             	add    $0x1,%eax
+  c3:	38 ca                	cmp    %cl,%dl
+  c5:	75 19                	jne    e0 <strcmp+0x40>
+  c7:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  cb:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+  cf:	84 d2                	test   %dl,%dl
+  d1:	75 ed                	jne    c0 <strcmp+0x20>
+  d3:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+  d5:	5b                   	pop    %ebx
+  d6:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+  d7:	29 c8                	sub    %ecx,%eax
+}
+  d9:	5d                   	pop    %ebp
+  da:	c3                   	ret    
+  db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  df:	90                   	nop
+  e0:	0f b6 c2             	movzbl %dl,%eax
+  e3:	5b                   	pop    %ebx
+  e4:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+  e5:	29 c8                	sub    %ecx,%eax
+}
+  e7:	5d                   	pop    %ebp
+  e8:	c3                   	ret    
+  e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000000f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  f6:	80 39 00             	cmpb   $0x0,(%ecx)
+  f9:	74 15                	je     110 <strlen+0x20>
+  fb:	31 d2                	xor    %edx,%edx
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 100:	83 c2 01             	add    $0x1,%edx
+ 103:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 107:	89 d0                	mov    %edx,%eax
+ 109:	75 f5                	jne    100 <strlen+0x10>
+    ;
+  return n;
+}
+ 10b:	5d                   	pop    %ebp
+ 10c:	c3                   	ret    
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 110:	31 c0                	xor    %eax,%eax
+}
+ 112:	5d                   	pop    %ebp
+ 113:	c3                   	ret    
+ 114:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 11f:	90                   	nop
+
+00000120 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	57                   	push   %edi
+ 124:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 127:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 12a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 12d:	89 d7                	mov    %edx,%edi
+ 12f:	fc                   	cld    
+ 130:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 132:	89 d0                	mov    %edx,%eax
+ 134:	5f                   	pop    %edi
+ 135:	5d                   	pop    %ebp
+ 136:	c3                   	ret    
+ 137:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13e:	66 90                	xchg   %ax,%ax
+
+00000140 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	53                   	push   %ebx
+ 144:	8b 45 08             	mov    0x8(%ebp),%eax
+ 147:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 14a:	0f b6 18             	movzbl (%eax),%ebx
+ 14d:	84 db                	test   %bl,%bl
+ 14f:	74 1d                	je     16e <strchr+0x2e>
+ 151:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 153:	38 d3                	cmp    %dl,%bl
+ 155:	75 0d                	jne    164 <strchr+0x24>
+ 157:	eb 17                	jmp    170 <strchr+0x30>
+ 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 160:	38 ca                	cmp    %cl,%dl
+ 162:	74 0c                	je     170 <strchr+0x30>
+  for(; *s; s++)
+ 164:	83 c0 01             	add    $0x1,%eax
+ 167:	0f b6 10             	movzbl (%eax),%edx
+ 16a:	84 d2                	test   %dl,%dl
+ 16c:	75 f2                	jne    160 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 16e:	31 c0                	xor    %eax,%eax
+}
+ 170:	5b                   	pop    %ebx
+ 171:	5d                   	pop    %ebp
+ 172:	c3                   	ret    
+ 173:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000180 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	57                   	push   %edi
+ 184:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 185:	31 f6                	xor    %esi,%esi
+{
+ 187:	53                   	push   %ebx
+ 188:	89 f3                	mov    %esi,%ebx
+ 18a:	83 ec 1c             	sub    $0x1c,%esp
+ 18d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 190:	eb 2f                	jmp    1c1 <gets+0x41>
+ 192:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 198:	83 ec 04             	sub    $0x4,%esp
+ 19b:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 19e:	6a 01                	push   $0x1
+ 1a0:	50                   	push   %eax
+ 1a1:	6a 00                	push   $0x0
+ 1a3:	e8 31 01 00 00       	call   2d9 <read>
+    if(cc < 1)
+ 1a8:	83 c4 10             	add    $0x10,%esp
+ 1ab:	85 c0                	test   %eax,%eax
+ 1ad:	7e 1c                	jle    1cb <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 1af:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1b3:	83 c7 01             	add    $0x1,%edi
+ 1b6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1b9:	3c 0a                	cmp    $0xa,%al
+ 1bb:	74 23                	je     1e0 <gets+0x60>
+ 1bd:	3c 0d                	cmp    $0xd,%al
+ 1bf:	74 1f                	je     1e0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1c1:	83 c3 01             	add    $0x1,%ebx
+ 1c4:	89 fe                	mov    %edi,%esi
+ 1c6:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1c9:	7c cd                	jl     198 <gets+0x18>
+ 1cb:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1d0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1d6:	5b                   	pop    %ebx
+ 1d7:	5e                   	pop    %esi
+ 1d8:	5f                   	pop    %edi
+ 1d9:	5d                   	pop    %ebp
+ 1da:	c3                   	ret    
+ 1db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1df:	90                   	nop
+ 1e0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1e3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e6:	01 de                	add    %ebx,%esi
+ 1e8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1ea:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ed:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1f0:	5b                   	pop    %ebx
+ 1f1:	5e                   	pop    %esi
+ 1f2:	5f                   	pop    %edi
+ 1f3:	5d                   	pop    %ebp
+ 1f4:	c3                   	ret    
+ 1f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000200 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	56                   	push   %esi
+ 204:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 205:	83 ec 08             	sub    $0x8,%esp
+ 208:	6a 00                	push   $0x0
+ 20a:	ff 75 08             	pushl  0x8(%ebp)
+ 20d:	e8 ef 00 00 00       	call   301 <open>
+  if(fd < 0)
+ 212:	83 c4 10             	add    $0x10,%esp
+ 215:	85 c0                	test   %eax,%eax
+ 217:	78 27                	js     240 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 219:	83 ec 08             	sub    $0x8,%esp
+ 21c:	ff 75 0c             	pushl  0xc(%ebp)
+ 21f:	89 c3                	mov    %eax,%ebx
+ 221:	50                   	push   %eax
+ 222:	e8 f2 00 00 00       	call   319 <fstat>
+  close(fd);
+ 227:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 22a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 22c:	e8 b8 00 00 00       	call   2e9 <close>
+  return r;
+ 231:	83 c4 10             	add    $0x10,%esp
+}
+ 234:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 237:	89 f0                	mov    %esi,%eax
+ 239:	5b                   	pop    %ebx
+ 23a:	5e                   	pop    %esi
+ 23b:	5d                   	pop    %ebp
+ 23c:	c3                   	ret    
+ 23d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 240:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 245:	eb ed                	jmp    234 <stat+0x34>
+ 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24e:	66 90                	xchg   %ax,%ax
+
+00000250 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	53                   	push   %ebx
+ 254:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 257:	0f be 11             	movsbl (%ecx),%edx
+ 25a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 25d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 25f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 264:	77 1f                	ja     285 <atoi+0x35>
+ 266:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 26d:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 270:	83 c1 01             	add    $0x1,%ecx
+ 273:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 276:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 27a:	0f be 11             	movsbl (%ecx),%edx
+ 27d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 280:	80 fb 09             	cmp    $0x9,%bl
+ 283:	76 eb                	jbe    270 <atoi+0x20>
+  return n;
+}
+ 285:	5b                   	pop    %ebx
+ 286:	5d                   	pop    %ebp
+ 287:	c3                   	ret    
+ 288:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 28f:	90                   	nop
+
+00000290 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	57                   	push   %edi
+ 294:	8b 55 10             	mov    0x10(%ebp),%edx
+ 297:	8b 45 08             	mov    0x8(%ebp),%eax
+ 29a:	56                   	push   %esi
+ 29b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 29e:	85 d2                	test   %edx,%edx
+ 2a0:	7e 13                	jle    2b5 <memmove+0x25>
+ 2a2:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 2a4:	89 c7                	mov    %eax,%edi
+ 2a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ad:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2b1:	39 fa                	cmp    %edi,%edx
+ 2b3:	75 fb                	jne    2b0 <memmove+0x20>
+  return vdst;
+}
+ 2b5:	5e                   	pop    %esi
+ 2b6:	5f                   	pop    %edi
+ 2b7:	5d                   	pop    %ebp
+ 2b8:	c3                   	ret    
+
+000002b9 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2b9:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2be:	cd 40                	int    $0x40
+ 2c0:	c3                   	ret    
+
+000002c1 <exit>:
+SYSCALL(exit)
+ 2c1:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2c6:	cd 40                	int    $0x40
+ 2c8:	c3                   	ret    
+
+000002c9 <wait>:
+SYSCALL(wait)
+ 2c9:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2ce:	cd 40                	int    $0x40
+ 2d0:	c3                   	ret    
+
+000002d1 <pipe>:
+SYSCALL(pipe)
+ 2d1:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2d6:	cd 40                	int    $0x40
+ 2d8:	c3                   	ret    
+
+000002d9 <read>:
+SYSCALL(read)
+ 2d9:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2de:	cd 40                	int    $0x40
+ 2e0:	c3                   	ret    
+
+000002e1 <write>:
+SYSCALL(write)
+ 2e1:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2e6:	cd 40                	int    $0x40
+ 2e8:	c3                   	ret    
+
+000002e9 <close>:
+SYSCALL(close)
+ 2e9:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2ee:	cd 40                	int    $0x40
+ 2f0:	c3                   	ret    
+
+000002f1 <kill>:
+SYSCALL(kill)
+ 2f1:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2f6:	cd 40                	int    $0x40
+ 2f8:	c3                   	ret    
+
+000002f9 <exec>:
+SYSCALL(exec)
+ 2f9:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2fe:	cd 40                	int    $0x40
+ 300:	c3                   	ret    
+
+00000301 <open>:
+SYSCALL(open)
+ 301:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 306:	cd 40                	int    $0x40
+ 308:	c3                   	ret    
+
+00000309 <mknod>:
+SYSCALL(mknod)
+ 309:	b8 11 00 00 00       	mov    $0x11,%eax
+ 30e:	cd 40                	int    $0x40
+ 310:	c3                   	ret    
+
+00000311 <unlink>:
+SYSCALL(unlink)
+ 311:	b8 12 00 00 00       	mov    $0x12,%eax
+ 316:	cd 40                	int    $0x40
+ 318:	c3                   	ret    
+
+00000319 <fstat>:
+SYSCALL(fstat)
+ 319:	b8 08 00 00 00       	mov    $0x8,%eax
+ 31e:	cd 40                	int    $0x40
+ 320:	c3                   	ret    
+
+00000321 <link>:
+SYSCALL(link)
+ 321:	b8 13 00 00 00       	mov    $0x13,%eax
+ 326:	cd 40                	int    $0x40
+ 328:	c3                   	ret    
+
+00000329 <mkdir>:
+SYSCALL(mkdir)
+ 329:	b8 14 00 00 00       	mov    $0x14,%eax
+ 32e:	cd 40                	int    $0x40
+ 330:	c3                   	ret    
+
+00000331 <chdir>:
+SYSCALL(chdir)
+ 331:	b8 09 00 00 00       	mov    $0x9,%eax
+ 336:	cd 40                	int    $0x40
+ 338:	c3                   	ret    
+
+00000339 <dup>:
+SYSCALL(dup)
+ 339:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 33e:	cd 40                	int    $0x40
+ 340:	c3                   	ret    
+
+00000341 <getpid>:
+SYSCALL(getpid)
+ 341:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 346:	cd 40                	int    $0x40
+ 348:	c3                   	ret    
+
+00000349 <sbrk>:
+SYSCALL(sbrk)
+ 349:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 34e:	cd 40                	int    $0x40
+ 350:	c3                   	ret    
+
+00000351 <sleep>:
+SYSCALL(sleep)
+ 351:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 356:	cd 40                	int    $0x40
+ 358:	c3                   	ret    
+
+00000359 <uptime>:
+SYSCALL(uptime)
+ 359:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 35e:	cd 40                	int    $0x40
+ 360:	c3                   	ret    
+ 361:	66 90                	xchg   %ax,%ax
+ 363:	66 90                	xchg   %ax,%ax
+ 365:	66 90                	xchg   %ax,%ax
+ 367:	66 90                	xchg   %ax,%ax
+ 369:	66 90                	xchg   %ax,%ax
+ 36b:	66 90                	xchg   %ax,%ax
+ 36d:	66 90                	xchg   %ax,%ax
+ 36f:	90                   	nop
+
+00000370 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	57                   	push   %edi
+ 374:	56                   	push   %esi
+ 375:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 376:	89 d3                	mov    %edx,%ebx
+{
+ 378:	83 ec 3c             	sub    $0x3c,%esp
+ 37b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+ 37e:	85 d2                	test   %edx,%edx
+ 380:	0f 89 92 00 00 00    	jns    418 <printint+0xa8>
+ 386:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 38a:	0f 84 88 00 00 00    	je     418 <printint+0xa8>
+    neg = 1;
+ 390:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+ 397:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 399:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3a0:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3a3:	eb 08                	jmp    3ad <printint+0x3d>
+ 3a5:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3a8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+ 3ab:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+ 3ad:	89 d8                	mov    %ebx,%eax
+ 3af:	31 d2                	xor    %edx,%edx
+ 3b1:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 3b4:	f7 f1                	div    %ecx
+ 3b6:	83 c7 01             	add    $0x1,%edi
+ 3b9:	0f b6 92 a8 07 00 00 	movzbl 0x7a8(%edx),%edx
+ 3c0:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+ 3c3:	39 d9                	cmp    %ebx,%ecx
+ 3c5:	76 e1                	jbe    3a8 <printint+0x38>
+  if(neg)
+ 3c7:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 3ca:	85 c0                	test   %eax,%eax
+ 3cc:	74 0d                	je     3db <printint+0x6b>
+    buf[i++] = '-';
+ 3ce:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3d3:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+ 3d8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 3db:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3de:	8b 7d bc             	mov    -0x44(%ebp),%edi
+ 3e1:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3e5:	eb 0f                	jmp    3f6 <printint+0x86>
+ 3e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ee:	66 90                	xchg   %ax,%ax
+ 3f0:	0f b6 13             	movzbl (%ebx),%edx
+ 3f3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3f6:	83 ec 04             	sub    $0x4,%esp
+ 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3fc:	6a 01                	push   $0x1
+ 3fe:	56                   	push   %esi
+ 3ff:	57                   	push   %edi
+ 400:	e8 dc fe ff ff       	call   2e1 <write>
+
+  while(--i >= 0)
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x80>
+    putc(fd, buf[i]);
+}
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 418:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+ 41f:	e9 75 ff ff ff       	jmp    399 <printint+0x29>
+ 424:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
+
+00000430 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 439:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 43c:	0f b6 1e             	movzbl (%esi),%ebx
+ 43f:	84 db                	test   %bl,%bl
+ 441:	0f 84 b9 00 00 00    	je     500 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+ 447:	8d 45 10             	lea    0x10(%ebp),%eax
+ 44a:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 44d:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 450:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 452:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 455:	eb 38                	jmp    48f <printf+0x5f>
+ 457:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45e:	66 90                	xchg   %ax,%ax
+ 460:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 463:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	74 17                	je     484 <printf+0x54>
+  write(fd, &c, 1);
+ 46d:	83 ec 04             	sub    $0x4,%esp
+ 470:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 473:	6a 01                	push   $0x1
+ 475:	57                   	push   %edi
+ 476:	ff 75 08             	pushl  0x8(%ebp)
+ 479:	e8 63 fe ff ff       	call   2e1 <write>
+ 47e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 481:	83 c4 10             	add    $0x10,%esp
+ 484:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 487:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 48b:	84 db                	test   %bl,%bl
+ 48d:	74 71                	je     500 <printf+0xd0>
+    c = fmt[i] & 0xff;
+ 48f:	0f be cb             	movsbl %bl,%ecx
+ 492:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 495:	85 d2                	test   %edx,%edx
+ 497:	74 c7                	je     460 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 499:	83 fa 25             	cmp    $0x25,%edx
+ 49c:	75 e6                	jne    484 <printf+0x54>
+      if(c == 'd'){
+ 49e:	83 f8 64             	cmp    $0x64,%eax
+ 4a1:	0f 84 99 00 00 00    	je     540 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4a7:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4ad:	83 f9 70             	cmp    $0x70,%ecx
+ 4b0:	74 5e                	je     510 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4b2:	83 f8 73             	cmp    $0x73,%eax
+ 4b5:	0f 84 d5 00 00 00    	je     590 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4bb:	83 f8 63             	cmp    $0x63,%eax
+ 4be:	0f 84 8c 00 00 00    	je     550 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4c4:	83 f8 25             	cmp    $0x25,%eax
+ 4c7:	0f 84 b3 00 00 00    	je     580 <printf+0x150>
+  write(fd, &c, 1);
+ 4cd:	83 ec 04             	sub    $0x4,%esp
+ 4d0:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4d4:	6a 01                	push   $0x1
+ 4d6:	57                   	push   %edi
+ 4d7:	ff 75 08             	pushl  0x8(%ebp)
+ 4da:	e8 02 fe ff ff       	call   2e1 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4df:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4e2:	83 c4 0c             	add    $0xc,%esp
+ 4e5:	6a 01                	push   $0x1
+ 4e7:	83 c6 01             	add    $0x1,%esi
+ 4ea:	57                   	push   %edi
+ 4eb:	ff 75 08             	pushl  0x8(%ebp)
+ 4ee:	e8 ee fd ff ff       	call   2e1 <write>
+  for(i = 0; fmt[i]; i++){
+ 4f3:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 4f7:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 4fa:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 4fc:	84 db                	test   %bl,%bl
+ 4fe:	75 8f                	jne    48f <printf+0x5f>
+    }
+  }
+}
+ 500:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 503:	5b                   	pop    %ebx
+ 504:	5e                   	pop    %esi
+ 505:	5f                   	pop    %edi
+ 506:	5d                   	pop    %ebp
+ 507:	c3                   	ret    
+ 508:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 50f:	90                   	nop
+        printint(fd, *ap, 16, 0);
+ 510:	83 ec 0c             	sub    $0xc,%esp
+ 513:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 518:	6a 00                	push   $0x0
+ 51a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 51d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 520:	8b 13                	mov    (%ebx),%edx
+ 522:	e8 49 fe ff ff       	call   370 <printint>
+        ap++;
+ 527:	89 d8                	mov    %ebx,%eax
+ 529:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 52c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 52e:	83 c0 04             	add    $0x4,%eax
+ 531:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 534:	e9 4b ff ff ff       	jmp    484 <printf+0x54>
+ 539:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 548:	6a 01                	push   $0x1
+ 54a:	eb ce                	jmp    51a <printf+0xea>
+ 54c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 550:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 553:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 556:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 558:	6a 01                	push   $0x1
+        ap++;
+ 55a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 55d:	57                   	push   %edi
+ 55e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 561:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 564:	e8 78 fd ff ff       	call   2e1 <write>
+        ap++;
+ 569:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 56c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 56f:	31 d2                	xor    %edx,%edx
+ 571:	e9 0e ff ff ff       	jmp    484 <printf+0x54>
+ 576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 580:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+ 586:	e9 5a ff ff ff       	jmp    4e5 <printf+0xb5>
+ 58b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 58f:	90                   	nop
+        s = (char*)*ap;
+ 590:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 593:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 595:	83 c0 04             	add    $0x4,%eax
+ 598:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 59b:	85 db                	test   %ebx,%ebx
+ 59d:	74 17                	je     5b6 <printf+0x186>
+        while(*s != 0){
+ 59f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5a2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5a4:	84 c0                	test   %al,%al
+ 5a6:	0f 84 d8 fe ff ff    	je     484 <printf+0x54>
+ 5ac:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5af:	89 de                	mov    %ebx,%esi
+ 5b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5b4:	eb 1a                	jmp    5d0 <printf+0x1a0>
+          s = "(null)";
+ 5b6:	bb a1 07 00 00       	mov    $0x7a1,%ebx
+        while(*s != 0){
+ 5bb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5be:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c3:	89 de                	mov    %ebx,%esi
+ 5c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5cf:	90                   	nop
+  write(fd, &c, 1);
+ 5d0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5d3:	83 c6 01             	add    $0x1,%esi
+ 5d6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5d9:	6a 01                	push   $0x1
+ 5db:	57                   	push   %edi
+ 5dc:	53                   	push   %ebx
+ 5dd:	e8 ff fc ff ff       	call   2e1 <write>
+        while(*s != 0){
+ 5e2:	0f b6 06             	movzbl (%esi),%eax
+ 5e5:	83 c4 10             	add    $0x10,%esp
+ 5e8:	84 c0                	test   %al,%al
+ 5ea:	75 e4                	jne    5d0 <printf+0x1a0>
+ 5ec:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5ef:	31 d2                	xor    %edx,%edx
+ 5f1:	e9 8e fe ff ff       	jmp    484 <printf+0x54>
+ 5f6:	66 90                	xchg   %ax,%ax
+ 5f8:	66 90                	xchg   %ax,%ax
+ 5fa:	66 90                	xchg   %ax,%ax
+ 5fc:	66 90                	xchg   %ax,%ax
+ 5fe:	66 90                	xchg   %ax,%ax
+
+00000600 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 600:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 601:	a1 58 0a 00 00       	mov    0xa58,%eax
+{
+ 606:	89 e5                	mov    %esp,%ebp
+ 608:	57                   	push   %edi
+ 609:	56                   	push   %esi
+ 60a:	53                   	push   %ebx
+ 60b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 60e:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 610:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 613:	39 c8                	cmp    %ecx,%eax
+ 615:	73 19                	jae    630 <free+0x30>
+ 617:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 61e:	66 90                	xchg   %ax,%ax
+ 620:	39 d1                	cmp    %edx,%ecx
+ 622:	72 14                	jb     638 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 624:	39 d0                	cmp    %edx,%eax
+ 626:	73 10                	jae    638 <free+0x38>
+{
+ 628:	89 d0                	mov    %edx,%eax
+ 62a:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 62c:	39 c8                	cmp    %ecx,%eax
+ 62e:	72 f0                	jb     620 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 630:	39 d0                	cmp    %edx,%eax
+ 632:	72 f4                	jb     628 <free+0x28>
+ 634:	39 d1                	cmp    %edx,%ecx
+ 636:	73 f0                	jae    628 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 638:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 63b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 63e:	39 fa                	cmp    %edi,%edx
+ 640:	74 1e                	je     660 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 642:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 645:	8b 50 04             	mov    0x4(%eax),%edx
+ 648:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 64b:	39 f1                	cmp    %esi,%ecx
+ 64d:	74 28                	je     677 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 64f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 651:	5b                   	pop    %ebx
+  freep = p;
+ 652:	a3 58 0a 00 00       	mov    %eax,0xa58
+}
+ 657:	5e                   	pop    %esi
+ 658:	5f                   	pop    %edi
+ 659:	5d                   	pop    %ebp
+ 65a:	c3                   	ret    
+ 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 660:	03 72 04             	add    0x4(%edx),%esi
+ 663:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 666:	8b 10                	mov    (%eax),%edx
+ 668:	8b 12                	mov    (%edx),%edx
+ 66a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 66d:	8b 50 04             	mov    0x4(%eax),%edx
+ 670:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 673:	39 f1                	cmp    %esi,%ecx
+ 675:	75 d8                	jne    64f <free+0x4f>
+    p->s.size += bp->s.size;
+ 677:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 67a:	a3 58 0a 00 00       	mov    %eax,0xa58
+    p->s.size += bp->s.size;
+ 67f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 682:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 685:	89 10                	mov    %edx,(%eax)
+}
+ 687:	5b                   	pop    %ebx
+ 688:	5e                   	pop    %esi
+ 689:	5f                   	pop    %edi
+ 68a:	5d                   	pop    %ebp
+ 68b:	c3                   	ret    
+ 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000690 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 690:	55                   	push   %ebp
+ 691:	89 e5                	mov    %esp,%ebp
+ 693:	57                   	push   %edi
+ 694:	56                   	push   %esi
+ 695:	53                   	push   %ebx
+ 696:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 699:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 69c:	8b 3d 58 0a 00 00    	mov    0xa58,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6a2:	8d 70 07             	lea    0x7(%eax),%esi
+ 6a5:	c1 ee 03             	shr    $0x3,%esi
+ 6a8:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6ab:	85 ff                	test   %edi,%edi
+ 6ad:	0f 84 ad 00 00 00    	je     760 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6b3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 6b5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6b8:	39 f1                	cmp    %esi,%ecx
+ 6ba:	73 72                	jae    72e <malloc+0x9e>
+ 6bc:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6c2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6c7:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ca:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6d4:	eb 1b                	jmp    6f1 <malloc+0x61>
+ 6d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6dd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e0:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6e2:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6e5:	39 f1                	cmp    %esi,%ecx
+ 6e7:	73 4f                	jae    738 <malloc+0xa8>
+ 6e9:	8b 3d 58 0a 00 00    	mov    0xa58,%edi
+ 6ef:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6f1:	39 d7                	cmp    %edx,%edi
+ 6f3:	75 eb                	jne    6e0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 6f5:	83 ec 0c             	sub    $0xc,%esp
+ 6f8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6fb:	e8 49 fc ff ff       	call   349 <sbrk>
+  if(p == (char*)-1)
+ 700:	83 c4 10             	add    $0x10,%esp
+ 703:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 706:	74 1c                	je     724 <malloc+0x94>
+  hp->s.size = nu;
+ 708:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 70b:	83 ec 0c             	sub    $0xc,%esp
+ 70e:	83 c0 08             	add    $0x8,%eax
+ 711:	50                   	push   %eax
+ 712:	e8 e9 fe ff ff       	call   600 <free>
+  return freep;
+ 717:	8b 15 58 0a 00 00    	mov    0xa58,%edx
+      if((p = morecore(nunits)) == 0)
+ 71d:	83 c4 10             	add    $0x10,%esp
+ 720:	85 d2                	test   %edx,%edx
+ 722:	75 bc                	jne    6e0 <malloc+0x50>
+        return 0;
+  }
+}
+ 724:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 727:	31 c0                	xor    %eax,%eax
+}
+ 729:	5b                   	pop    %ebx
+ 72a:	5e                   	pop    %esi
+ 72b:	5f                   	pop    %edi
+ 72c:	5d                   	pop    %ebp
+ 72d:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 72e:	89 d0                	mov    %edx,%eax
+ 730:	89 fa                	mov    %edi,%edx
+ 732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 738:	39 ce                	cmp    %ecx,%esi
+ 73a:	74 54                	je     790 <malloc+0x100>
+        p->s.size -= nunits;
+ 73c:	29 f1                	sub    %esi,%ecx
+ 73e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 741:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 744:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 747:	89 15 58 0a 00 00    	mov    %edx,0xa58
+}
+ 74d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 750:	83 c0 08             	add    $0x8,%eax
+}
+ 753:	5b                   	pop    %ebx
+ 754:	5e                   	pop    %esi
+ 755:	5f                   	pop    %edi
+ 756:	5d                   	pop    %ebp
+ 757:	c3                   	ret    
+ 758:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 75f:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+ 760:	c7 05 58 0a 00 00 5c 	movl   $0xa5c,0xa58
+ 767:	0a 00 00 
+    base.s.size = 0;
+ 76a:	bf 5c 0a 00 00       	mov    $0xa5c,%edi
+    base.s.ptr = freep = prevp = &base;
+ 76f:	c7 05 5c 0a 00 00 5c 	movl   $0xa5c,0xa5c
+ 776:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 779:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 77b:	c7 05 60 0a 00 00 00 	movl   $0x0,0xa60
+ 782:	00 00 00 
+    if(p->s.size >= nunits){
+ 785:	e9 32 ff ff ff       	jmp    6bc <malloc+0x2c>
+ 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 790:	8b 08                	mov    (%eax),%ecx
+ 792:	89 0a                	mov    %ecx,(%edx)
+ 794:	eb b1                	jmp    747 <malloc+0xb7>
diff -urN xv6-public/echo.d xv6-public-new/echo.d
--- xv6-public/echo.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/echo.d	2019-10-04 10:45:48.496028873 +0530
@@ -0,0 +1 @@
+echo.o: echo.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/echo.o and xv6-public-new/echo.o differ
diff -urN xv6-public/echo.sym xv6-public-new/echo.sym
--- xv6-public/echo.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/echo.sym	2019-10-04 10:45:48.512028873 +0530
@@ -0,0 +1,57 @@
+00000000 .text
+00000798 .rodata
+000007bc .eh_frame
+00000a58 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 echo.c
+00000000 ulib.c
+00000000 printf.c
+00000370 printint
+000007a8 digits.1101
+00000000 umalloc.c
+00000a58 freep
+00000a5c base
+00000070 strcpy
+00000430 printf
+00000290 memmove
+00000309 mknod
+00000180 gets
+00000341 getpid
+00000690 malloc
+00000351 sleep
+000002d1 pipe
+000002e1 write
+00000319 fstat
+000002f1 kill
+00000331 chdir
+000002f9 exec
+000002c9 wait
+000002d9 read
+00000311 unlink
+000002b9 fork
+00000349 sbrk
+00000359 uptime
+00000a58 __bss_start
+00000120 memset
+00000000 main
+000000a0 strcmp
+00000339 dup
+00000200 stat
+00000a58 _edata
+00000a64 _end
+00000321 link
+000002c1 exit
+00000250 atoi
+000000f0 strlen
+00000301 open
+00000140 strchr
+00000329 mkdir
+000002e9 close
+00000600 free
Binary files xv6-public/entry.o and xv6-public-new/entry.o differ
Binary files xv6-public/entryother and xv6-public-new/entryother differ
diff -urN xv6-public/entryother.asm xv6-public-new/entryother.asm
--- xv6-public/entryother.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/entryother.asm	2019-10-04 10:45:50.860028985 +0530
@@ -0,0 +1,125 @@
+
+bootblockother.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00007000 <start>:
+# This code combines elements of bootasm.S and entry.S.
+
+.code16           
+.globl start
+start:
+  cli            
+    7000:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax
+    7001:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds
+    7003:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es
+    7005:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss
+    7007:	8e d0                	mov    %eax,%ss
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7009:	0f 01 16             	lgdtl  (%esi)
+    700c:	84 70 0f             	test   %dh,0xf(%eax)
+  movl    %cr0, %eax
+    700f:	20 c0                	and    %al,%al
+  orl     $CR0_PE, %eax
+    7011:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7015:	0f 22 c0             	mov    %eax,%cr0
+
+  # Complete the transition to 32-bit protected mode by using a long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmpl    $(SEG_KCODE<<3), $(start32)
+    7018:	66 ea 20 70 00 00    	ljmpw  $0x0,$0x7020
+    701e:	08 00                	or     %al,(%eax)
+
+00007020 <start32>:
+
+//PAGEBREAK!
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7020:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7024:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7026:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7028:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    702a:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    702e:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7030:	8e e8                	mov    %eax,%gs
+
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+    7032:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+    7035:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+    7038:	0f 22 e0             	mov    %eax,%cr4
+  # Use entrypgdir as our initial page table
+  movl    (start-12), %eax
+    703b:	a1 f4 6f 00 00       	mov    0x6ff4,%eax
+  movl    %eax, %cr3
+    7040:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+    7043:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
+    7046:	0d 01 00 01 80       	or     $0x80010001,%eax
+  movl    %eax, %cr0
+    704b:	0f 22 c0             	mov    %eax,%cr0
+
+  # Switch to the stack allocated by startothers()
+  movl    (start-4), %esp
+    704e:	8b 25 fc 6f 00 00    	mov    0x6ffc,%esp
+  # Call mpenter()
+  call	 *(start-8)
+    7054:	ff 15 f8 6f 00 00    	call   *0x6ff8
+
+  movw    $0x8a00, %ax
+    705a:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    705e:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7061:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax
+    7063:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7067:	66 ef                	out    %ax,(%dx)
+
+00007069 <spin>:
+spin:
+  jmp     spin
+    7069:	eb fe                	jmp    7069 <spin>
+    706b:	90                   	nop
+
+0000706c <gdt>:
+	...
+    7074:	ff                   	(bad)  
+    7075:	ff 00                	incl   (%eax)
+    7077:	00 00                	add    %al,(%eax)
+    7079:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7080:	00                   	.byte 0x0
+    7081:	92                   	xchg   %eax,%edx
+    7082:	cf                   	iret   
+	...
+
+00007084 <gdtdesc>:
+    7084:	17                   	pop    %ss
+    7085:	00 6c 70 00          	add    %ch,0x0(%eax,%esi,2)
+	...
diff -urN xv6-public/entryother.d xv6-public-new/entryother.d
--- xv6-public/entryother.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/entryother.d	2019-10-04 10:45:50.848028985 +0530
@@ -0,0 +1 @@
+entryother.o: entryother.S asm.h memlayout.h mmu.h
Binary files xv6-public/entryother.o and xv6-public-new/entryother.o differ
diff -urN xv6-public/exec.d xv6-public-new/exec.d
--- xv6-public/exec.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/exec.d	2019-10-04 10:45:49.624028926 +0530
@@ -0,0 +1,2 @@
+exec.o: exec.c /usr/include/stdc-predef.h types.h param.h memlayout.h \
+ mmu.h proc.h defs.h x86.h elf.h
Binary files xv6-public/exec.o and xv6-public-new/exec.o differ
diff -urN xv6-public/file.d xv6-public-new/file.d
--- xv6-public/file.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/file.d	2019-10-04 10:45:49.672028929 +0530
@@ -0,0 +1,2 @@
+file.o: file.c /usr/include/stdc-predef.h types.h defs.h param.h fs.h \
+ spinlock.h sleeplock.h file.h
Binary files xv6-public/file.o and xv6-public-new/file.o differ
Binary files xv6-public/_firstprog and xv6-public-new/_firstprog differ
diff -urN xv6-public/firstprog.asm xv6-public-new/firstprog.asm
--- xv6-public/firstprog.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/firstprog.asm	2019-10-04 13:31:40.568132921 +0530
@@ -0,0 +1,1197 @@
+
+_firstprog:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	53                   	push   %ebx
+   e:	51                   	push   %ecx
+	printf(1, "cs3500 in xv6\n");
+	char buff[100];
+	gets(buff,100);
+   f:	8d 5d 94             	lea    -0x6c(%ebp),%ebx
+{
+  12:	83 ec 78             	sub    $0x78,%esp
+	printf(1, "cs3500 in xv6\n");
+  15:	68 98 07 00 00       	push   $0x798
+  1a:	6a 01                	push   $0x1
+  1c:	e8 0f 04 00 00       	call   430 <printf>
+	gets(buff,100);
+  21:	58                   	pop    %eax
+  22:	5a                   	pop    %edx
+  23:	6a 64                	push   $0x64
+  25:	53                   	push   %ebx
+  26:	e8 55 01 00 00       	call   180 <gets>
+	printf(1,"%s",buff);
+  2b:	83 c4 0c             	add    $0xc,%esp
+  2e:	53                   	push   %ebx
+  2f:	68 a7 07 00 00       	push   $0x7a7
+  34:	6a 01                	push   $0x1
+  36:	e8 f5 03 00 00       	call   430 <printf>
+	char *Myarg[3];
+	Myarg[0] = "echo";
+	Myarg[1] = "one";
+	Myarg[2] = 0;
+	exec("echo",Myarg);
+  3b:	8d 45 88             	lea    -0x78(%ebp),%eax
+  3e:	59                   	pop    %ecx
+  3f:	5b                   	pop    %ebx
+  40:	50                   	push   %eax
+  41:	68 aa 07 00 00       	push   $0x7aa
+	Myarg[0] = "echo";
+  46:	c7 45 88 aa 07 00 00 	movl   $0x7aa,-0x78(%ebp)
+	Myarg[1] = "one";
+  4d:	c7 45 8c af 07 00 00 	movl   $0x7af,-0x74(%ebp)
+	Myarg[2] = 0;
+  54:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
+	exec("echo",Myarg);
+  5b:	e8 99 02 00 00       	call   2f9 <exec>
+  exit();
+  60:	e8 5c 02 00 00       	call   2c1 <exit>
+  65:	66 90                	xchg   %ax,%ax
+  67:	66 90                	xchg   %ax,%ax
+  69:	66 90                	xchg   %ax,%ax
+  6b:	66 90                	xchg   %ax,%ax
+  6d:	66 90                	xchg   %ax,%ax
+  6f:	90                   	nop
+
+00000070 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  70:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  71:	31 d2                	xor    %edx,%edx
+{
+  73:	89 e5                	mov    %esp,%ebp
+  75:	53                   	push   %ebx
+  76:	8b 45 08             	mov    0x8(%ebp),%eax
+  79:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  80:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+  84:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+  87:	83 c2 01             	add    $0x1,%edx
+  8a:	84 c9                	test   %cl,%cl
+  8c:	75 f2                	jne    80 <strcpy+0x10>
+    ;
+  return os;
+}
+  8e:	5b                   	pop    %ebx
+  8f:	5d                   	pop    %ebp
+  90:	c3                   	ret    
+  91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  9f:	90                   	nop
+
+000000a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  a0:	55                   	push   %ebp
+  a1:	89 e5                	mov    %esp,%ebp
+  a3:	56                   	push   %esi
+  a4:	53                   	push   %ebx
+  a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  a8:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+  ab:	0f b6 13             	movzbl (%ebx),%edx
+  ae:	0f b6 0e             	movzbl (%esi),%ecx
+  b1:	84 d2                	test   %dl,%dl
+  b3:	74 1e                	je     d3 <strcmp+0x33>
+  b5:	b8 01 00 00 00       	mov    $0x1,%eax
+  ba:	38 ca                	cmp    %cl,%dl
+  bc:	74 09                	je     c7 <strcmp+0x27>
+  be:	eb 20                	jmp    e0 <strcmp+0x40>
+  c0:	83 c0 01             	add    $0x1,%eax
+  c3:	38 ca                	cmp    %cl,%dl
+  c5:	75 19                	jne    e0 <strcmp+0x40>
+  c7:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  cb:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+  cf:	84 d2                	test   %dl,%dl
+  d1:	75 ed                	jne    c0 <strcmp+0x20>
+  d3:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+  d5:	5b                   	pop    %ebx
+  d6:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+  d7:	29 c8                	sub    %ecx,%eax
+}
+  d9:	5d                   	pop    %ebp
+  da:	c3                   	ret    
+  db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  df:	90                   	nop
+  e0:	0f b6 c2             	movzbl %dl,%eax
+  e3:	5b                   	pop    %ebx
+  e4:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+  e5:	29 c8                	sub    %ecx,%eax
+}
+  e7:	5d                   	pop    %ebp
+  e8:	c3                   	ret    
+  e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000000f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  f6:	80 39 00             	cmpb   $0x0,(%ecx)
+  f9:	74 15                	je     110 <strlen+0x20>
+  fb:	31 d2                	xor    %edx,%edx
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 100:	83 c2 01             	add    $0x1,%edx
+ 103:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 107:	89 d0                	mov    %edx,%eax
+ 109:	75 f5                	jne    100 <strlen+0x10>
+    ;
+  return n;
+}
+ 10b:	5d                   	pop    %ebp
+ 10c:	c3                   	ret    
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 110:	31 c0                	xor    %eax,%eax
+}
+ 112:	5d                   	pop    %ebp
+ 113:	c3                   	ret    
+ 114:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 11f:	90                   	nop
+
+00000120 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	57                   	push   %edi
+ 124:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 127:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 12a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 12d:	89 d7                	mov    %edx,%edi
+ 12f:	fc                   	cld    
+ 130:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 132:	89 d0                	mov    %edx,%eax
+ 134:	5f                   	pop    %edi
+ 135:	5d                   	pop    %ebp
+ 136:	c3                   	ret    
+ 137:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13e:	66 90                	xchg   %ax,%ax
+
+00000140 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	53                   	push   %ebx
+ 144:	8b 45 08             	mov    0x8(%ebp),%eax
+ 147:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 14a:	0f b6 18             	movzbl (%eax),%ebx
+ 14d:	84 db                	test   %bl,%bl
+ 14f:	74 1d                	je     16e <strchr+0x2e>
+ 151:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 153:	38 d3                	cmp    %dl,%bl
+ 155:	75 0d                	jne    164 <strchr+0x24>
+ 157:	eb 17                	jmp    170 <strchr+0x30>
+ 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 160:	38 ca                	cmp    %cl,%dl
+ 162:	74 0c                	je     170 <strchr+0x30>
+  for(; *s; s++)
+ 164:	83 c0 01             	add    $0x1,%eax
+ 167:	0f b6 10             	movzbl (%eax),%edx
+ 16a:	84 d2                	test   %dl,%dl
+ 16c:	75 f2                	jne    160 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 16e:	31 c0                	xor    %eax,%eax
+}
+ 170:	5b                   	pop    %ebx
+ 171:	5d                   	pop    %ebp
+ 172:	c3                   	ret    
+ 173:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000180 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	57                   	push   %edi
+ 184:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 185:	31 f6                	xor    %esi,%esi
+{
+ 187:	53                   	push   %ebx
+ 188:	89 f3                	mov    %esi,%ebx
+ 18a:	83 ec 1c             	sub    $0x1c,%esp
+ 18d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 190:	eb 2f                	jmp    1c1 <gets+0x41>
+ 192:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 198:	83 ec 04             	sub    $0x4,%esp
+ 19b:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 19e:	6a 01                	push   $0x1
+ 1a0:	50                   	push   %eax
+ 1a1:	6a 00                	push   $0x0
+ 1a3:	e8 31 01 00 00       	call   2d9 <read>
+    if(cc < 1)
+ 1a8:	83 c4 10             	add    $0x10,%esp
+ 1ab:	85 c0                	test   %eax,%eax
+ 1ad:	7e 1c                	jle    1cb <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 1af:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1b3:	83 c7 01             	add    $0x1,%edi
+ 1b6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1b9:	3c 0a                	cmp    $0xa,%al
+ 1bb:	74 23                	je     1e0 <gets+0x60>
+ 1bd:	3c 0d                	cmp    $0xd,%al
+ 1bf:	74 1f                	je     1e0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1c1:	83 c3 01             	add    $0x1,%ebx
+ 1c4:	89 fe                	mov    %edi,%esi
+ 1c6:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1c9:	7c cd                	jl     198 <gets+0x18>
+ 1cb:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1d0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1d6:	5b                   	pop    %ebx
+ 1d7:	5e                   	pop    %esi
+ 1d8:	5f                   	pop    %edi
+ 1d9:	5d                   	pop    %ebp
+ 1da:	c3                   	ret    
+ 1db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1df:	90                   	nop
+ 1e0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1e3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e6:	01 de                	add    %ebx,%esi
+ 1e8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1ea:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ed:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1f0:	5b                   	pop    %ebx
+ 1f1:	5e                   	pop    %esi
+ 1f2:	5f                   	pop    %edi
+ 1f3:	5d                   	pop    %ebp
+ 1f4:	c3                   	ret    
+ 1f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000200 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	56                   	push   %esi
+ 204:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 205:	83 ec 08             	sub    $0x8,%esp
+ 208:	6a 00                	push   $0x0
+ 20a:	ff 75 08             	pushl  0x8(%ebp)
+ 20d:	e8 ef 00 00 00       	call   301 <open>
+  if(fd < 0)
+ 212:	83 c4 10             	add    $0x10,%esp
+ 215:	85 c0                	test   %eax,%eax
+ 217:	78 27                	js     240 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 219:	83 ec 08             	sub    $0x8,%esp
+ 21c:	ff 75 0c             	pushl  0xc(%ebp)
+ 21f:	89 c3                	mov    %eax,%ebx
+ 221:	50                   	push   %eax
+ 222:	e8 f2 00 00 00       	call   319 <fstat>
+  close(fd);
+ 227:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 22a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 22c:	e8 b8 00 00 00       	call   2e9 <close>
+  return r;
+ 231:	83 c4 10             	add    $0x10,%esp
+}
+ 234:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 237:	89 f0                	mov    %esi,%eax
+ 239:	5b                   	pop    %ebx
+ 23a:	5e                   	pop    %esi
+ 23b:	5d                   	pop    %ebp
+ 23c:	c3                   	ret    
+ 23d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 240:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 245:	eb ed                	jmp    234 <stat+0x34>
+ 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24e:	66 90                	xchg   %ax,%ax
+
+00000250 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	53                   	push   %ebx
+ 254:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 257:	0f be 11             	movsbl (%ecx),%edx
+ 25a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 25d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 25f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 264:	77 1f                	ja     285 <atoi+0x35>
+ 266:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 26d:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 270:	83 c1 01             	add    $0x1,%ecx
+ 273:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 276:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 27a:	0f be 11             	movsbl (%ecx),%edx
+ 27d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 280:	80 fb 09             	cmp    $0x9,%bl
+ 283:	76 eb                	jbe    270 <atoi+0x20>
+  return n;
+}
+ 285:	5b                   	pop    %ebx
+ 286:	5d                   	pop    %ebp
+ 287:	c3                   	ret    
+ 288:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 28f:	90                   	nop
+
+00000290 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	57                   	push   %edi
+ 294:	8b 55 10             	mov    0x10(%ebp),%edx
+ 297:	8b 45 08             	mov    0x8(%ebp),%eax
+ 29a:	56                   	push   %esi
+ 29b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 29e:	85 d2                	test   %edx,%edx
+ 2a0:	7e 13                	jle    2b5 <memmove+0x25>
+ 2a2:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 2a4:	89 c7                	mov    %eax,%edi
+ 2a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ad:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2b1:	39 fa                	cmp    %edi,%edx
+ 2b3:	75 fb                	jne    2b0 <memmove+0x20>
+  return vdst;
+}
+ 2b5:	5e                   	pop    %esi
+ 2b6:	5f                   	pop    %edi
+ 2b7:	5d                   	pop    %ebp
+ 2b8:	c3                   	ret    
+
+000002b9 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2b9:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2be:	cd 40                	int    $0x40
+ 2c0:	c3                   	ret    
+
+000002c1 <exit>:
+SYSCALL(exit)
+ 2c1:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2c6:	cd 40                	int    $0x40
+ 2c8:	c3                   	ret    
+
+000002c9 <wait>:
+SYSCALL(wait)
+ 2c9:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2ce:	cd 40                	int    $0x40
+ 2d0:	c3                   	ret    
+
+000002d1 <pipe>:
+SYSCALL(pipe)
+ 2d1:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2d6:	cd 40                	int    $0x40
+ 2d8:	c3                   	ret    
+
+000002d9 <read>:
+SYSCALL(read)
+ 2d9:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2de:	cd 40                	int    $0x40
+ 2e0:	c3                   	ret    
+
+000002e1 <write>:
+SYSCALL(write)
+ 2e1:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2e6:	cd 40                	int    $0x40
+ 2e8:	c3                   	ret    
+
+000002e9 <close>:
+SYSCALL(close)
+ 2e9:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2ee:	cd 40                	int    $0x40
+ 2f0:	c3                   	ret    
+
+000002f1 <kill>:
+SYSCALL(kill)
+ 2f1:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2f6:	cd 40                	int    $0x40
+ 2f8:	c3                   	ret    
+
+000002f9 <exec>:
+SYSCALL(exec)
+ 2f9:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2fe:	cd 40                	int    $0x40
+ 300:	c3                   	ret    
+
+00000301 <open>:
+SYSCALL(open)
+ 301:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 306:	cd 40                	int    $0x40
+ 308:	c3                   	ret    
+
+00000309 <mknod>:
+SYSCALL(mknod)
+ 309:	b8 11 00 00 00       	mov    $0x11,%eax
+ 30e:	cd 40                	int    $0x40
+ 310:	c3                   	ret    
+
+00000311 <unlink>:
+SYSCALL(unlink)
+ 311:	b8 12 00 00 00       	mov    $0x12,%eax
+ 316:	cd 40                	int    $0x40
+ 318:	c3                   	ret    
+
+00000319 <fstat>:
+SYSCALL(fstat)
+ 319:	b8 08 00 00 00       	mov    $0x8,%eax
+ 31e:	cd 40                	int    $0x40
+ 320:	c3                   	ret    
+
+00000321 <link>:
+SYSCALL(link)
+ 321:	b8 13 00 00 00       	mov    $0x13,%eax
+ 326:	cd 40                	int    $0x40
+ 328:	c3                   	ret    
+
+00000329 <mkdir>:
+SYSCALL(mkdir)
+ 329:	b8 14 00 00 00       	mov    $0x14,%eax
+ 32e:	cd 40                	int    $0x40
+ 330:	c3                   	ret    
+
+00000331 <chdir>:
+SYSCALL(chdir)
+ 331:	b8 09 00 00 00       	mov    $0x9,%eax
+ 336:	cd 40                	int    $0x40
+ 338:	c3                   	ret    
+
+00000339 <dup>:
+SYSCALL(dup)
+ 339:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 33e:	cd 40                	int    $0x40
+ 340:	c3                   	ret    
+
+00000341 <getpid>:
+SYSCALL(getpid)
+ 341:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 346:	cd 40                	int    $0x40
+ 348:	c3                   	ret    
+
+00000349 <sbrk>:
+SYSCALL(sbrk)
+ 349:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 34e:	cd 40                	int    $0x40
+ 350:	c3                   	ret    
+
+00000351 <sleep>:
+SYSCALL(sleep)
+ 351:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 356:	cd 40                	int    $0x40
+ 358:	c3                   	ret    
+
+00000359 <uptime>:
+SYSCALL(uptime)
+ 359:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 35e:	cd 40                	int    $0x40
+ 360:	c3                   	ret    
+ 361:	66 90                	xchg   %ax,%ax
+ 363:	66 90                	xchg   %ax,%ax
+ 365:	66 90                	xchg   %ax,%ax
+ 367:	66 90                	xchg   %ax,%ax
+ 369:	66 90                	xchg   %ax,%ax
+ 36b:	66 90                	xchg   %ax,%ax
+ 36d:	66 90                	xchg   %ax,%ax
+ 36f:	90                   	nop
+
+00000370 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	57                   	push   %edi
+ 374:	56                   	push   %esi
+ 375:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 376:	89 d3                	mov    %edx,%ebx
+{
+ 378:	83 ec 3c             	sub    $0x3c,%esp
+ 37b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+ 37e:	85 d2                	test   %edx,%edx
+ 380:	0f 89 92 00 00 00    	jns    418 <printint+0xa8>
+ 386:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 38a:	0f 84 88 00 00 00    	je     418 <printint+0xa8>
+    neg = 1;
+ 390:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+ 397:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 399:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3a0:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3a3:	eb 08                	jmp    3ad <printint+0x3d>
+ 3a5:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3a8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+ 3ab:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+ 3ad:	89 d8                	mov    %ebx,%eax
+ 3af:	31 d2                	xor    %edx,%edx
+ 3b1:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 3b4:	f7 f1                	div    %ecx
+ 3b6:	83 c7 01             	add    $0x1,%edi
+ 3b9:	0f b6 92 bc 07 00 00 	movzbl 0x7bc(%edx),%edx
+ 3c0:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+ 3c3:	39 d9                	cmp    %ebx,%ecx
+ 3c5:	76 e1                	jbe    3a8 <printint+0x38>
+  if(neg)
+ 3c7:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 3ca:	85 c0                	test   %eax,%eax
+ 3cc:	74 0d                	je     3db <printint+0x6b>
+    buf[i++] = '-';
+ 3ce:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3d3:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+ 3d8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 3db:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3de:	8b 7d bc             	mov    -0x44(%ebp),%edi
+ 3e1:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3e5:	eb 0f                	jmp    3f6 <printint+0x86>
+ 3e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ee:	66 90                	xchg   %ax,%ax
+ 3f0:	0f b6 13             	movzbl (%ebx),%edx
+ 3f3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3f6:	83 ec 04             	sub    $0x4,%esp
+ 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3fc:	6a 01                	push   $0x1
+ 3fe:	56                   	push   %esi
+ 3ff:	57                   	push   %edi
+ 400:	e8 dc fe ff ff       	call   2e1 <write>
+
+  while(--i >= 0)
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x80>
+    putc(fd, buf[i]);
+}
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 418:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+ 41f:	e9 75 ff ff ff       	jmp    399 <printint+0x29>
+ 424:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
+
+00000430 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 439:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 43c:	0f b6 1e             	movzbl (%esi),%ebx
+ 43f:	84 db                	test   %bl,%bl
+ 441:	0f 84 b9 00 00 00    	je     500 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+ 447:	8d 45 10             	lea    0x10(%ebp),%eax
+ 44a:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 44d:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 450:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 452:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 455:	eb 38                	jmp    48f <printf+0x5f>
+ 457:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45e:	66 90                	xchg   %ax,%ax
+ 460:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 463:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	74 17                	je     484 <printf+0x54>
+  write(fd, &c, 1);
+ 46d:	83 ec 04             	sub    $0x4,%esp
+ 470:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 473:	6a 01                	push   $0x1
+ 475:	57                   	push   %edi
+ 476:	ff 75 08             	pushl  0x8(%ebp)
+ 479:	e8 63 fe ff ff       	call   2e1 <write>
+ 47e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 481:	83 c4 10             	add    $0x10,%esp
+ 484:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 487:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 48b:	84 db                	test   %bl,%bl
+ 48d:	74 71                	je     500 <printf+0xd0>
+    c = fmt[i] & 0xff;
+ 48f:	0f be cb             	movsbl %bl,%ecx
+ 492:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 495:	85 d2                	test   %edx,%edx
+ 497:	74 c7                	je     460 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 499:	83 fa 25             	cmp    $0x25,%edx
+ 49c:	75 e6                	jne    484 <printf+0x54>
+      if(c == 'd'){
+ 49e:	83 f8 64             	cmp    $0x64,%eax
+ 4a1:	0f 84 99 00 00 00    	je     540 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4a7:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4ad:	83 f9 70             	cmp    $0x70,%ecx
+ 4b0:	74 5e                	je     510 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4b2:	83 f8 73             	cmp    $0x73,%eax
+ 4b5:	0f 84 d5 00 00 00    	je     590 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4bb:	83 f8 63             	cmp    $0x63,%eax
+ 4be:	0f 84 8c 00 00 00    	je     550 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4c4:	83 f8 25             	cmp    $0x25,%eax
+ 4c7:	0f 84 b3 00 00 00    	je     580 <printf+0x150>
+  write(fd, &c, 1);
+ 4cd:	83 ec 04             	sub    $0x4,%esp
+ 4d0:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4d4:	6a 01                	push   $0x1
+ 4d6:	57                   	push   %edi
+ 4d7:	ff 75 08             	pushl  0x8(%ebp)
+ 4da:	e8 02 fe ff ff       	call   2e1 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4df:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4e2:	83 c4 0c             	add    $0xc,%esp
+ 4e5:	6a 01                	push   $0x1
+ 4e7:	83 c6 01             	add    $0x1,%esi
+ 4ea:	57                   	push   %edi
+ 4eb:	ff 75 08             	pushl  0x8(%ebp)
+ 4ee:	e8 ee fd ff ff       	call   2e1 <write>
+  for(i = 0; fmt[i]; i++){
+ 4f3:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 4f7:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 4fa:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 4fc:	84 db                	test   %bl,%bl
+ 4fe:	75 8f                	jne    48f <printf+0x5f>
+    }
+  }
+}
+ 500:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 503:	5b                   	pop    %ebx
+ 504:	5e                   	pop    %esi
+ 505:	5f                   	pop    %edi
+ 506:	5d                   	pop    %ebp
+ 507:	c3                   	ret    
+ 508:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 50f:	90                   	nop
+        printint(fd, *ap, 16, 0);
+ 510:	83 ec 0c             	sub    $0xc,%esp
+ 513:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 518:	6a 00                	push   $0x0
+ 51a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 51d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 520:	8b 13                	mov    (%ebx),%edx
+ 522:	e8 49 fe ff ff       	call   370 <printint>
+        ap++;
+ 527:	89 d8                	mov    %ebx,%eax
+ 529:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 52c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 52e:	83 c0 04             	add    $0x4,%eax
+ 531:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 534:	e9 4b ff ff ff       	jmp    484 <printf+0x54>
+ 539:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 548:	6a 01                	push   $0x1
+ 54a:	eb ce                	jmp    51a <printf+0xea>
+ 54c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 550:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 553:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 556:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 558:	6a 01                	push   $0x1
+        ap++;
+ 55a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 55d:	57                   	push   %edi
+ 55e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 561:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 564:	e8 78 fd ff ff       	call   2e1 <write>
+        ap++;
+ 569:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 56c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 56f:	31 d2                	xor    %edx,%edx
+ 571:	e9 0e ff ff ff       	jmp    484 <printf+0x54>
+ 576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 580:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+ 586:	e9 5a ff ff ff       	jmp    4e5 <printf+0xb5>
+ 58b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 58f:	90                   	nop
+        s = (char*)*ap;
+ 590:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 593:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 595:	83 c0 04             	add    $0x4,%eax
+ 598:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 59b:	85 db                	test   %ebx,%ebx
+ 59d:	74 17                	je     5b6 <printf+0x186>
+        while(*s != 0){
+ 59f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5a2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5a4:	84 c0                	test   %al,%al
+ 5a6:	0f 84 d8 fe ff ff    	je     484 <printf+0x54>
+ 5ac:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5af:	89 de                	mov    %ebx,%esi
+ 5b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5b4:	eb 1a                	jmp    5d0 <printf+0x1a0>
+          s = "(null)";
+ 5b6:	bb b3 07 00 00       	mov    $0x7b3,%ebx
+        while(*s != 0){
+ 5bb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5be:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c3:	89 de                	mov    %ebx,%esi
+ 5c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5cf:	90                   	nop
+  write(fd, &c, 1);
+ 5d0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5d3:	83 c6 01             	add    $0x1,%esi
+ 5d6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5d9:	6a 01                	push   $0x1
+ 5db:	57                   	push   %edi
+ 5dc:	53                   	push   %ebx
+ 5dd:	e8 ff fc ff ff       	call   2e1 <write>
+        while(*s != 0){
+ 5e2:	0f b6 06             	movzbl (%esi),%eax
+ 5e5:	83 c4 10             	add    $0x10,%esp
+ 5e8:	84 c0                	test   %al,%al
+ 5ea:	75 e4                	jne    5d0 <printf+0x1a0>
+ 5ec:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5ef:	31 d2                	xor    %edx,%edx
+ 5f1:	e9 8e fe ff ff       	jmp    484 <printf+0x54>
+ 5f6:	66 90                	xchg   %ax,%ax
+ 5f8:	66 90                	xchg   %ax,%ax
+ 5fa:	66 90                	xchg   %ax,%ax
+ 5fc:	66 90                	xchg   %ax,%ax
+ 5fe:	66 90                	xchg   %ax,%ax
+
+00000600 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 600:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 601:	a1 68 0a 00 00       	mov    0xa68,%eax
+{
+ 606:	89 e5                	mov    %esp,%ebp
+ 608:	57                   	push   %edi
+ 609:	56                   	push   %esi
+ 60a:	53                   	push   %ebx
+ 60b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 60e:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 610:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 613:	39 c8                	cmp    %ecx,%eax
+ 615:	73 19                	jae    630 <free+0x30>
+ 617:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 61e:	66 90                	xchg   %ax,%ax
+ 620:	39 d1                	cmp    %edx,%ecx
+ 622:	72 14                	jb     638 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 624:	39 d0                	cmp    %edx,%eax
+ 626:	73 10                	jae    638 <free+0x38>
+{
+ 628:	89 d0                	mov    %edx,%eax
+ 62a:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 62c:	39 c8                	cmp    %ecx,%eax
+ 62e:	72 f0                	jb     620 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 630:	39 d0                	cmp    %edx,%eax
+ 632:	72 f4                	jb     628 <free+0x28>
+ 634:	39 d1                	cmp    %edx,%ecx
+ 636:	73 f0                	jae    628 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 638:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 63b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 63e:	39 fa                	cmp    %edi,%edx
+ 640:	74 1e                	je     660 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 642:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 645:	8b 50 04             	mov    0x4(%eax),%edx
+ 648:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 64b:	39 f1                	cmp    %esi,%ecx
+ 64d:	74 28                	je     677 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 64f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 651:	5b                   	pop    %ebx
+  freep = p;
+ 652:	a3 68 0a 00 00       	mov    %eax,0xa68
+}
+ 657:	5e                   	pop    %esi
+ 658:	5f                   	pop    %edi
+ 659:	5d                   	pop    %ebp
+ 65a:	c3                   	ret    
+ 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 660:	03 72 04             	add    0x4(%edx),%esi
+ 663:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 666:	8b 10                	mov    (%eax),%edx
+ 668:	8b 12                	mov    (%edx),%edx
+ 66a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 66d:	8b 50 04             	mov    0x4(%eax),%edx
+ 670:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 673:	39 f1                	cmp    %esi,%ecx
+ 675:	75 d8                	jne    64f <free+0x4f>
+    p->s.size += bp->s.size;
+ 677:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 67a:	a3 68 0a 00 00       	mov    %eax,0xa68
+    p->s.size += bp->s.size;
+ 67f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 682:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 685:	89 10                	mov    %edx,(%eax)
+}
+ 687:	5b                   	pop    %ebx
+ 688:	5e                   	pop    %esi
+ 689:	5f                   	pop    %edi
+ 68a:	5d                   	pop    %ebp
+ 68b:	c3                   	ret    
+ 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000690 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 690:	55                   	push   %ebp
+ 691:	89 e5                	mov    %esp,%ebp
+ 693:	57                   	push   %edi
+ 694:	56                   	push   %esi
+ 695:	53                   	push   %ebx
+ 696:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 699:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 69c:	8b 3d 68 0a 00 00    	mov    0xa68,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6a2:	8d 70 07             	lea    0x7(%eax),%esi
+ 6a5:	c1 ee 03             	shr    $0x3,%esi
+ 6a8:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6ab:	85 ff                	test   %edi,%edi
+ 6ad:	0f 84 ad 00 00 00    	je     760 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6b3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 6b5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6b8:	39 f1                	cmp    %esi,%ecx
+ 6ba:	73 72                	jae    72e <malloc+0x9e>
+ 6bc:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6c2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6c7:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ca:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6d4:	eb 1b                	jmp    6f1 <malloc+0x61>
+ 6d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6dd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e0:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6e2:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6e5:	39 f1                	cmp    %esi,%ecx
+ 6e7:	73 4f                	jae    738 <malloc+0xa8>
+ 6e9:	8b 3d 68 0a 00 00    	mov    0xa68,%edi
+ 6ef:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6f1:	39 d7                	cmp    %edx,%edi
+ 6f3:	75 eb                	jne    6e0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 6f5:	83 ec 0c             	sub    $0xc,%esp
+ 6f8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6fb:	e8 49 fc ff ff       	call   349 <sbrk>
+  if(p == (char*)-1)
+ 700:	83 c4 10             	add    $0x10,%esp
+ 703:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 706:	74 1c                	je     724 <malloc+0x94>
+  hp->s.size = nu;
+ 708:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 70b:	83 ec 0c             	sub    $0xc,%esp
+ 70e:	83 c0 08             	add    $0x8,%eax
+ 711:	50                   	push   %eax
+ 712:	e8 e9 fe ff ff       	call   600 <free>
+  return freep;
+ 717:	8b 15 68 0a 00 00    	mov    0xa68,%edx
+      if((p = morecore(nunits)) == 0)
+ 71d:	83 c4 10             	add    $0x10,%esp
+ 720:	85 d2                	test   %edx,%edx
+ 722:	75 bc                	jne    6e0 <malloc+0x50>
+        return 0;
+  }
+}
+ 724:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 727:	31 c0                	xor    %eax,%eax
+}
+ 729:	5b                   	pop    %ebx
+ 72a:	5e                   	pop    %esi
+ 72b:	5f                   	pop    %edi
+ 72c:	5d                   	pop    %ebp
+ 72d:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 72e:	89 d0                	mov    %edx,%eax
+ 730:	89 fa                	mov    %edi,%edx
+ 732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 738:	39 ce                	cmp    %ecx,%esi
+ 73a:	74 54                	je     790 <malloc+0x100>
+        p->s.size -= nunits;
+ 73c:	29 f1                	sub    %esi,%ecx
+ 73e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 741:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 744:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 747:	89 15 68 0a 00 00    	mov    %edx,0xa68
+}
+ 74d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 750:	83 c0 08             	add    $0x8,%eax
+}
+ 753:	5b                   	pop    %ebx
+ 754:	5e                   	pop    %esi
+ 755:	5f                   	pop    %edi
+ 756:	5d                   	pop    %ebp
+ 757:	c3                   	ret    
+ 758:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 75f:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+ 760:	c7 05 68 0a 00 00 6c 	movl   $0xa6c,0xa68
+ 767:	0a 00 00 
+    base.s.size = 0;
+ 76a:	bf 6c 0a 00 00       	mov    $0xa6c,%edi
+    base.s.ptr = freep = prevp = &base;
+ 76f:	c7 05 6c 0a 00 00 6c 	movl   $0xa6c,0xa6c
+ 776:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 779:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 77b:	c7 05 70 0a 00 00 00 	movl   $0x0,0xa70
+ 782:	00 00 00 
+    if(p->s.size >= nunits){
+ 785:	e9 32 ff ff ff       	jmp    6bc <malloc+0x2c>
+ 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 790:	8b 08                	mov    (%eax),%ecx
+ 792:	89 0a                	mov    %ecx,(%edx)
+ 794:	eb b1                	jmp    747 <malloc+0xb7>
diff -urN xv6-public/firstprog.c xv6-public-new/firstprog.c
--- xv6-public/firstprog.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/firstprog.c	2019-10-04 13:30:58.768130928 +0530
@@ -0,0 +1,18 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+	printf(1, "cs3500 in xv6\n");
+	char buff[100];
+	gets(buff,100);
+	printf(1,"%s",buff);
+	char *Myarg[3];
+	Myarg[0] = "echo";
+	Myarg[1] = "one";
+	Myarg[2] = 0;
+	exec("echo",Myarg);
+  exit();
+}
diff -urN xv6-public/firstprog.d xv6-public-new/firstprog.d
--- xv6-public/firstprog.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/firstprog.d	2019-10-04 13:31:40.544132920 +0530
@@ -0,0 +1 @@
+firstprog.o: firstprog.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/firstprog.o and xv6-public-new/firstprog.o differ
diff -urN xv6-public/firstprog.sym xv6-public-new/firstprog.sym
--- xv6-public/firstprog.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/firstprog.sym	2019-10-04 13:31:40.572132921 +0530
@@ -0,0 +1,57 @@
+00000000 .text
+00000798 .rodata
+000007d0 .eh_frame
+00000a68 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 firstprog.c
+00000000 ulib.c
+00000000 printf.c
+00000370 printint
+000007bc digits.1101
+00000000 umalloc.c
+00000a68 freep
+00000a6c base
+00000070 strcpy
+00000430 printf
+00000290 memmove
+00000309 mknod
+00000180 gets
+00000341 getpid
+00000690 malloc
+00000351 sleep
+000002d1 pipe
+000002e1 write
+00000319 fstat
+000002f1 kill
+00000331 chdir
+000002f9 exec
+000002c9 wait
+000002d9 read
+00000311 unlink
+000002b9 fork
+00000349 sbrk
+00000359 uptime
+00000a68 __bss_start
+00000120 memset
+00000000 main
+000000a0 strcmp
+00000339 dup
+00000200 stat
+00000a68 _edata
+00000a74 _end
+00000321 link
+000002c1 exit
+00000250 atoi
+000000f0 strlen
+00000301 open
+00000140 strchr
+00000329 mkdir
+000002e9 close
+00000600 free
Binary files xv6-public/_forktest and xv6-public-new/_forktest differ
diff -urN xv6-public/forktest.asm xv6-public-new/forktest.asm
--- xv6-public/forktest.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/forktest.asm	2019-10-04 10:45:48.548028875 +0530
@@ -0,0 +1,670 @@
+
+_forktest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "fork test OK\n");
+}
+
+int
+main(void)
+{
+   0:	55                   	push   %ebp
+   1:	89 e5                	mov    %esp,%ebp
+   3:	83 e4 f0             	and    $0xfffffff0,%esp
+  forktest();
+   6:	e8 35 00 00 00       	call   40 <forktest>
+  exit();
+   b:	e8 81 03 00 00       	call   391 <exit>
+
+00000010 <printf>:
+{
+  10:	55                   	push   %ebp
+  11:	89 e5                	mov    %esp,%ebp
+  13:	53                   	push   %ebx
+  14:	83 ec 10             	sub    $0x10,%esp
+  17:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  write(fd, s, strlen(s));
+  1a:	53                   	push   %ebx
+  1b:	e8 a0 01 00 00       	call   1c0 <strlen>
+  20:	83 c4 0c             	add    $0xc,%esp
+  23:	50                   	push   %eax
+  24:	53                   	push   %ebx
+  25:	ff 75 08             	pushl  0x8(%ebp)
+  28:	e8 84 03 00 00       	call   3b1 <write>
+}
+  2d:	83 c4 10             	add    $0x10,%esp
+  30:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  33:	c9                   	leave  
+  34:	c3                   	ret    
+  35:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000040 <forktest>:
+{
+  40:	55                   	push   %ebp
+  41:	89 e5                	mov    %esp,%ebp
+  43:	53                   	push   %ebx
+  for(n=0; n<N; n++){
+  44:	31 db                	xor    %ebx,%ebx
+{
+  46:	83 ec 10             	sub    $0x10,%esp
+  write(fd, s, strlen(s));
+  49:	68 34 04 00 00       	push   $0x434
+  4e:	e8 6d 01 00 00       	call   1c0 <strlen>
+  53:	83 c4 0c             	add    $0xc,%esp
+  56:	50                   	push   %eax
+  57:	68 34 04 00 00       	push   $0x434
+  5c:	6a 01                	push   $0x1
+  5e:	e8 4e 03 00 00       	call   3b1 <write>
+  63:	83 c4 10             	add    $0x10,%esp
+  66:	eb 19                	jmp    81 <forktest+0x41>
+  68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  6f:	90                   	nop
+    if(pid == 0)
+  70:	74 58                	je     ca <forktest+0x8a>
+  for(n=0; n<N; n++){
+  72:	83 c3 01             	add    $0x1,%ebx
+  75:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+  7b:	0f 84 92 00 00 00    	je     113 <forktest+0xd3>
+    pid = fork();
+  81:	e8 03 03 00 00       	call   389 <fork>
+    if(pid < 0)
+  86:	85 c0                	test   %eax,%eax
+  88:	79 e6                	jns    70 <forktest+0x30>
+  for(; n > 0; n--){
+  8a:	85 db                	test   %ebx,%ebx
+  8c:	74 10                	je     9e <forktest+0x5e>
+  8e:	66 90                	xchg   %ax,%ax
+    if(wait() < 0){
+  90:	e8 04 03 00 00       	call   399 <wait>
+  95:	85 c0                	test   %eax,%eax
+  97:	78 36                	js     cf <forktest+0x8f>
+  for(; n > 0; n--){
+  99:	83 eb 01             	sub    $0x1,%ebx
+  9c:	75 f2                	jne    90 <forktest+0x50>
+  if(wait() != -1){
+  9e:	e8 f6 02 00 00       	call   399 <wait>
+  a3:	83 f8 ff             	cmp    $0xffffffff,%eax
+  a6:	75 49                	jne    f1 <forktest+0xb1>
+  write(fd, s, strlen(s));
+  a8:	83 ec 0c             	sub    $0xc,%esp
+  ab:	68 66 04 00 00       	push   $0x466
+  b0:	e8 0b 01 00 00       	call   1c0 <strlen>
+  b5:	83 c4 0c             	add    $0xc,%esp
+  b8:	50                   	push   %eax
+  b9:	68 66 04 00 00       	push   $0x466
+  be:	6a 01                	push   $0x1
+  c0:	e8 ec 02 00 00       	call   3b1 <write>
+}
+  c5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  c8:	c9                   	leave  
+  c9:	c3                   	ret    
+      exit();
+  ca:	e8 c2 02 00 00       	call   391 <exit>
+  write(fd, s, strlen(s));
+  cf:	83 ec 0c             	sub    $0xc,%esp
+  d2:	68 3f 04 00 00       	push   $0x43f
+  d7:	e8 e4 00 00 00       	call   1c0 <strlen>
+  dc:	83 c4 0c             	add    $0xc,%esp
+  df:	50                   	push   %eax
+  e0:	68 3f 04 00 00       	push   $0x43f
+  e5:	6a 01                	push   $0x1
+  e7:	e8 c5 02 00 00       	call   3b1 <write>
+      exit();
+  ec:	e8 a0 02 00 00       	call   391 <exit>
+  write(fd, s, strlen(s));
+  f1:	83 ec 0c             	sub    $0xc,%esp
+  f4:	68 53 04 00 00       	push   $0x453
+  f9:	e8 c2 00 00 00       	call   1c0 <strlen>
+  fe:	83 c4 0c             	add    $0xc,%esp
+ 101:	50                   	push   %eax
+ 102:	68 53 04 00 00       	push   $0x453
+ 107:	6a 01                	push   $0x1
+ 109:	e8 a3 02 00 00       	call   3b1 <write>
+    exit();
+ 10e:	e8 7e 02 00 00       	call   391 <exit>
+  write(fd, s, strlen(s));
+ 113:	83 ec 0c             	sub    $0xc,%esp
+ 116:	68 74 04 00 00       	push   $0x474
+ 11b:	e8 a0 00 00 00       	call   1c0 <strlen>
+ 120:	83 c4 0c             	add    $0xc,%esp
+ 123:	50                   	push   %eax
+ 124:	68 74 04 00 00       	push   $0x474
+ 129:	6a 01                	push   $0x1
+ 12b:	e8 81 02 00 00       	call   3b1 <write>
+    exit();
+ 130:	e8 5c 02 00 00       	call   391 <exit>
+ 135:	66 90                	xchg   %ax,%ax
+ 137:	66 90                	xchg   %ax,%ax
+ 139:	66 90                	xchg   %ax,%ax
+ 13b:	66 90                	xchg   %ax,%ax
+ 13d:	66 90                	xchg   %ax,%ax
+ 13f:	90                   	nop
+
+00000140 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 140:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 141:	31 d2                	xor    %edx,%edx
+{
+ 143:	89 e5                	mov    %esp,%ebp
+ 145:	53                   	push   %ebx
+ 146:	8b 45 08             	mov    0x8(%ebp),%eax
+ 149:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 150:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+ 154:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 157:	83 c2 01             	add    $0x1,%edx
+ 15a:	84 c9                	test   %cl,%cl
+ 15c:	75 f2                	jne    150 <strcpy+0x10>
+    ;
+  return os;
+}
+ 15e:	5b                   	pop    %ebx
+ 15f:	5d                   	pop    %ebp
+ 160:	c3                   	ret    
+ 161:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 168:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16f:	90                   	nop
+
+00000170 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	56                   	push   %esi
+ 174:	53                   	push   %ebx
+ 175:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 178:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+ 17b:	0f b6 13             	movzbl (%ebx),%edx
+ 17e:	0f b6 0e             	movzbl (%esi),%ecx
+ 181:	84 d2                	test   %dl,%dl
+ 183:	74 1e                	je     1a3 <strcmp+0x33>
+ 185:	b8 01 00 00 00       	mov    $0x1,%eax
+ 18a:	38 ca                	cmp    %cl,%dl
+ 18c:	74 09                	je     197 <strcmp+0x27>
+ 18e:	eb 20                	jmp    1b0 <strcmp+0x40>
+ 190:	83 c0 01             	add    $0x1,%eax
+ 193:	38 ca                	cmp    %cl,%dl
+ 195:	75 19                	jne    1b0 <strcmp+0x40>
+ 197:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 19b:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+ 19f:	84 d2                	test   %dl,%dl
+ 1a1:	75 ed                	jne    190 <strcmp+0x20>
+ 1a3:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+ 1a5:	5b                   	pop    %ebx
+ 1a6:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 1a7:	29 c8                	sub    %ecx,%eax
+}
+ 1a9:	5d                   	pop    %ebp
+ 1aa:	c3                   	ret    
+ 1ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1af:	90                   	nop
+ 1b0:	0f b6 c2             	movzbl %dl,%eax
+ 1b3:	5b                   	pop    %ebx
+ 1b4:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 1b5:	29 c8                	sub    %ecx,%eax
+}
+ 1b7:	5d                   	pop    %ebp
+ 1b8:	c3                   	ret    
+ 1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000001c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1c6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 1c9:	74 15                	je     1e0 <strlen+0x20>
+ 1cb:	31 d2                	xor    %edx,%edx
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1d0:	83 c2 01             	add    $0x1,%edx
+ 1d3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1d7:	89 d0                	mov    %edx,%eax
+ 1d9:	75 f5                	jne    1d0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1db:	5d                   	pop    %ebp
+ 1dc:	c3                   	ret    
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 1e0:	31 c0                	xor    %eax,%eax
+}
+ 1e2:	5d                   	pop    %ebp
+ 1e3:	c3                   	ret    
+ 1e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1ef:	90                   	nop
+
+000001f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	57                   	push   %edi
+ 1f4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1fd:	89 d7                	mov    %edx,%edi
+ 1ff:	fc                   	cld    
+ 200:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 202:	89 d0                	mov    %edx,%eax
+ 204:	5f                   	pop    %edi
+ 205:	5d                   	pop    %ebp
+ 206:	c3                   	ret    
+ 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20e:	66 90                	xchg   %ax,%ax
+
+00000210 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 45 08             	mov    0x8(%ebp),%eax
+ 217:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 21a:	0f b6 18             	movzbl (%eax),%ebx
+ 21d:	84 db                	test   %bl,%bl
+ 21f:	74 1d                	je     23e <strchr+0x2e>
+ 221:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 223:	38 d3                	cmp    %dl,%bl
+ 225:	75 0d                	jne    234 <strchr+0x24>
+ 227:	eb 17                	jmp    240 <strchr+0x30>
+ 229:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 230:	38 ca                	cmp    %cl,%dl
+ 232:	74 0c                	je     240 <strchr+0x30>
+  for(; *s; s++)
+ 234:	83 c0 01             	add    $0x1,%eax
+ 237:	0f b6 10             	movzbl (%eax),%edx
+ 23a:	84 d2                	test   %dl,%dl
+ 23c:	75 f2                	jne    230 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 23e:	31 c0                	xor    %eax,%eax
+}
+ 240:	5b                   	pop    %ebx
+ 241:	5d                   	pop    %ebp
+ 242:	c3                   	ret    
+ 243:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000250 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	57                   	push   %edi
+ 254:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 255:	31 f6                	xor    %esi,%esi
+{
+ 257:	53                   	push   %ebx
+ 258:	89 f3                	mov    %esi,%ebx
+ 25a:	83 ec 1c             	sub    $0x1c,%esp
+ 25d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 260:	eb 2f                	jmp    291 <gets+0x41>
+ 262:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 268:	83 ec 04             	sub    $0x4,%esp
+ 26b:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 26e:	6a 01                	push   $0x1
+ 270:	50                   	push   %eax
+ 271:	6a 00                	push   $0x0
+ 273:	e8 31 01 00 00       	call   3a9 <read>
+    if(cc < 1)
+ 278:	83 c4 10             	add    $0x10,%esp
+ 27b:	85 c0                	test   %eax,%eax
+ 27d:	7e 1c                	jle    29b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 27f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 283:	83 c7 01             	add    $0x1,%edi
+ 286:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 289:	3c 0a                	cmp    $0xa,%al
+ 28b:	74 23                	je     2b0 <gets+0x60>
+ 28d:	3c 0d                	cmp    $0xd,%al
+ 28f:	74 1f                	je     2b0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 291:	83 c3 01             	add    $0x1,%ebx
+ 294:	89 fe                	mov    %edi,%esi
+ 296:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 299:	7c cd                	jl     268 <gets+0x18>
+ 29b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 29d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2a0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2a3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2a6:	5b                   	pop    %ebx
+ 2a7:	5e                   	pop    %esi
+ 2a8:	5f                   	pop    %edi
+ 2a9:	5d                   	pop    %ebp
+ 2aa:	c3                   	ret    
+ 2ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2af:	90                   	nop
+ 2b0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2b3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2b6:	01 de                	add    %ebx,%esi
+ 2b8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2ba:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2bd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2c0:	5b                   	pop    %ebx
+ 2c1:	5e                   	pop    %esi
+ 2c2:	5f                   	pop    %edi
+ 2c3:	5d                   	pop    %ebp
+ 2c4:	c3                   	ret    
+ 2c5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2d0:	55                   	push   %ebp
+ 2d1:	89 e5                	mov    %esp,%ebp
+ 2d3:	56                   	push   %esi
+ 2d4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2d5:	83 ec 08             	sub    $0x8,%esp
+ 2d8:	6a 00                	push   $0x0
+ 2da:	ff 75 08             	pushl  0x8(%ebp)
+ 2dd:	e8 ef 00 00 00       	call   3d1 <open>
+  if(fd < 0)
+ 2e2:	83 c4 10             	add    $0x10,%esp
+ 2e5:	85 c0                	test   %eax,%eax
+ 2e7:	78 27                	js     310 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2e9:	83 ec 08             	sub    $0x8,%esp
+ 2ec:	ff 75 0c             	pushl  0xc(%ebp)
+ 2ef:	89 c3                	mov    %eax,%ebx
+ 2f1:	50                   	push   %eax
+ 2f2:	e8 f2 00 00 00       	call   3e9 <fstat>
+  close(fd);
+ 2f7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2fa:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2fc:	e8 b8 00 00 00       	call   3b9 <close>
+  return r;
+ 301:	83 c4 10             	add    $0x10,%esp
+}
+ 304:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 307:	89 f0                	mov    %esi,%eax
+ 309:	5b                   	pop    %ebx
+ 30a:	5e                   	pop    %esi
+ 30b:	5d                   	pop    %ebp
+ 30c:	c3                   	ret    
+ 30d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 310:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 315:	eb ed                	jmp    304 <stat+0x34>
+ 317:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 31e:	66 90                	xchg   %ax,%ax
+
+00000320 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 320:	55                   	push   %ebp
+ 321:	89 e5                	mov    %esp,%ebp
+ 323:	53                   	push   %ebx
+ 324:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 327:	0f be 11             	movsbl (%ecx),%edx
+ 32a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 32d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 32f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 334:	77 1f                	ja     355 <atoi+0x35>
+ 336:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 33d:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 340:	83 c1 01             	add    $0x1,%ecx
+ 343:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 346:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 34a:	0f be 11             	movsbl (%ecx),%edx
+ 34d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 350:	80 fb 09             	cmp    $0x9,%bl
+ 353:	76 eb                	jbe    340 <atoi+0x20>
+  return n;
+}
+ 355:	5b                   	pop    %ebx
+ 356:	5d                   	pop    %ebp
+ 357:	c3                   	ret    
+ 358:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 35f:	90                   	nop
+
+00000360 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	8b 55 10             	mov    0x10(%ebp),%edx
+ 367:	8b 45 08             	mov    0x8(%ebp),%eax
+ 36a:	56                   	push   %esi
+ 36b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 36e:	85 d2                	test   %edx,%edx
+ 370:	7e 13                	jle    385 <memmove+0x25>
+ 372:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 374:	89 c7                	mov    %eax,%edi
+ 376:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 37d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 380:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 381:	39 fa                	cmp    %edi,%edx
+ 383:	75 fb                	jne    380 <memmove+0x20>
+  return vdst;
+}
+ 385:	5e                   	pop    %esi
+ 386:	5f                   	pop    %edi
+ 387:	5d                   	pop    %ebp
+ 388:	c3                   	ret    
+
+00000389 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 389:	b8 01 00 00 00       	mov    $0x1,%eax
+ 38e:	cd 40                	int    $0x40
+ 390:	c3                   	ret    
+
+00000391 <exit>:
+SYSCALL(exit)
+ 391:	b8 02 00 00 00       	mov    $0x2,%eax
+ 396:	cd 40                	int    $0x40
+ 398:	c3                   	ret    
+
+00000399 <wait>:
+SYSCALL(wait)
+ 399:	b8 03 00 00 00       	mov    $0x3,%eax
+ 39e:	cd 40                	int    $0x40
+ 3a0:	c3                   	ret    
+
+000003a1 <pipe>:
+SYSCALL(pipe)
+ 3a1:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3a6:	cd 40                	int    $0x40
+ 3a8:	c3                   	ret    
+
+000003a9 <read>:
+SYSCALL(read)
+ 3a9:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3ae:	cd 40                	int    $0x40
+ 3b0:	c3                   	ret    
+
+000003b1 <write>:
+SYSCALL(write)
+ 3b1:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3b6:	cd 40                	int    $0x40
+ 3b8:	c3                   	ret    
+
+000003b9 <close>:
+SYSCALL(close)
+ 3b9:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3be:	cd 40                	int    $0x40
+ 3c0:	c3                   	ret    
+
+000003c1 <kill>:
+SYSCALL(kill)
+ 3c1:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3c6:	cd 40                	int    $0x40
+ 3c8:	c3                   	ret    
+
+000003c9 <exec>:
+SYSCALL(exec)
+ 3c9:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3ce:	cd 40                	int    $0x40
+ 3d0:	c3                   	ret    
+
+000003d1 <open>:
+SYSCALL(open)
+ 3d1:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3d6:	cd 40                	int    $0x40
+ 3d8:	c3                   	ret    
+
+000003d9 <mknod>:
+SYSCALL(mknod)
+ 3d9:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3de:	cd 40                	int    $0x40
+ 3e0:	c3                   	ret    
+
+000003e1 <unlink>:
+SYSCALL(unlink)
+ 3e1:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3e6:	cd 40                	int    $0x40
+ 3e8:	c3                   	ret    
+
+000003e9 <fstat>:
+SYSCALL(fstat)
+ 3e9:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3ee:	cd 40                	int    $0x40
+ 3f0:	c3                   	ret    
+
+000003f1 <link>:
+SYSCALL(link)
+ 3f1:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3f6:	cd 40                	int    $0x40
+ 3f8:	c3                   	ret    
+
+000003f9 <mkdir>:
+SYSCALL(mkdir)
+ 3f9:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3fe:	cd 40                	int    $0x40
+ 400:	c3                   	ret    
+
+00000401 <chdir>:
+SYSCALL(chdir)
+ 401:	b8 09 00 00 00       	mov    $0x9,%eax
+ 406:	cd 40                	int    $0x40
+ 408:	c3                   	ret    
+
+00000409 <dup>:
+SYSCALL(dup)
+ 409:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 40e:	cd 40                	int    $0x40
+ 410:	c3                   	ret    
+
+00000411 <getpid>:
+SYSCALL(getpid)
+ 411:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 416:	cd 40                	int    $0x40
+ 418:	c3                   	ret    
+
+00000419 <sbrk>:
+SYSCALL(sbrk)
+ 419:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 41e:	cd 40                	int    $0x40
+ 420:	c3                   	ret    
+
+00000421 <sleep>:
+SYSCALL(sleep)
+ 421:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 426:	cd 40                	int    $0x40
+ 428:	c3                   	ret    
+
+00000429 <uptime>:
+SYSCALL(uptime)
+ 429:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 42e:	cd 40                	int    $0x40
+ 430:	c3                   	ret    
diff -urN xv6-public/forktest.d xv6-public-new/forktest.d
--- xv6-public/forktest.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/forktest.d	2019-10-04 10:45:48.536028875 +0530
@@ -0,0 +1 @@
+forktest.o: forktest.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/forktest.o and xv6-public-new/forktest.o differ
diff -urN xv6-public/fs.d xv6-public-new/fs.d
--- xv6-public/fs.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/fs.d	2019-10-04 10:45:49.812028935 +0530
@@ -0,0 +1,2 @@
+fs.o: fs.c /usr/include/stdc-predef.h types.h defs.h param.h stat.h mmu.h \
+ proc.h spinlock.h sleeplock.h fs.h buf.h file.h
Binary files xv6-public/fs.img and xv6-public-new/fs.img differ
Binary files xv6-public/fs.o and xv6-public-new/fs.o differ
diff -urN xv6-public/.gdbinit xv6-public-new/.gdbinit
--- xv6-public/.gdbinit	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/.gdbinit	2019-10-04 13:44:54.048170757 +0530
@@ -0,0 +1,27 @@
+set $lastcs = -1
+
+define hook-stop
+  # There doesn't seem to be a good way to detect if we're in 16- or
+  # 32-bit mode, but in 32-bit mode we always run with CS == 8 in the
+  # kernel and CS == 35 in user space
+  if $cs == 8 || $cs == 35
+    if $lastcs != 8 && $lastcs != 35
+      set architecture i386
+    end
+    x/i $pc
+  else
+    if $lastcs == -1 || $lastcs == 8 || $lastcs == 35
+      set architecture i8086
+    end
+    # Translate the segment:offset into a physical address
+    printf "[%4x:%4x] ", $cs, $eip
+    x/i $cs*16+$eip
+  end
+  set $lastcs = $cs
+end
+
+echo + target remote localhost:26000\n
+target remote localhost:26000
+
+echo + symbol-file kernel\n
+symbol-file kernel
diff -urN xv6-public/.git/FETCH_HEAD xv6-public-new/.git/FETCH_HEAD
--- xv6-public/.git/FETCH_HEAD	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/.git/FETCH_HEAD	2019-10-04 10:44:57.956026463 +0530
@@ -0,0 +1 @@
+34f060c3dcf3bf3dde683df9ff9872bc9f1d5d14		branch 'master' of git://github.com/mit-pdos/xv6-public
Binary files xv6-public/.git/index and xv6-public-new/.git/index differ
diff -urN xv6-public/.git/logs/HEAD xv6-public-new/.git/logs/HEAD
--- xv6-public/.git/logs/HEAD	2019-10-04 16:31:53.096648503 +0530
+++ xv6-public-new/.git/logs/HEAD	2019-10-04 10:44:12.084024275 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 34f060c3dcf3bf3dde683df9ff9872bc9f1d5d14 subhash <subhash@subbu.(none)> 1570186913 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
+0000000000000000000000000000000000000000 34f060c3dcf3bf3dde683df9ff9872bc9f1d5d14 subhash <subhash@subbu.(none)> 1570166052 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
diff -urN xv6-public/.git/logs/refs/heads/master xv6-public-new/.git/logs/refs/heads/master
--- xv6-public/.git/logs/refs/heads/master	2019-10-04 16:31:53.096648503 +0530
+++ xv6-public-new/.git/logs/refs/heads/master	2019-10-04 10:44:12.084024275 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 34f060c3dcf3bf3dde683df9ff9872bc9f1d5d14 subhash <subhash@subbu.(none)> 1570186913 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
+0000000000000000000000000000000000000000 34f060c3dcf3bf3dde683df9ff9872bc9f1d5d14 subhash <subhash@subbu.(none)> 1570166052 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
diff -urN xv6-public/.git/logs/refs/remotes/origin/HEAD xv6-public-new/.git/logs/refs/remotes/origin/HEAD
--- xv6-public/.git/logs/refs/remotes/origin/HEAD	2019-10-04 16:31:53.092648502 +0530
+++ xv6-public-new/.git/logs/refs/remotes/origin/HEAD	2019-10-04 10:44:12.084024275 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 34f060c3dcf3bf3dde683df9ff9872bc9f1d5d14 subhash <subhash@subbu.(none)> 1570186913 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
+0000000000000000000000000000000000000000 34f060c3dcf3bf3dde683df9ff9872bc9f1d5d14 subhash <subhash@subbu.(none)> 1570166052 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
diff -urN xv6-public/.git/ORIG_HEAD xv6-public-new/.git/ORIG_HEAD
--- xv6-public/.git/ORIG_HEAD	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/.git/ORIG_HEAD	2019-10-04 10:44:57.964026463 +0530
@@ -0,0 +1 @@
+34f060c3dcf3bf3dde683df9ff9872bc9f1d5d14
Binary files xv6-public/_grep and xv6-public-new/_grep differ
diff -urN xv6-public/grep.asm xv6-public-new/grep.asm
--- xv6-public/grep.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/grep.asm	2019-10-04 10:45:48.608028878 +0530
@@ -0,0 +1,1573 @@
+
+_grep:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	83 ec 18             	sub    $0x18,%esp
+  14:	8b 01                	mov    (%ecx),%eax
+  16:	8b 59 04             	mov    0x4(%ecx),%ebx
+  19:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  int fd, i;
+  char *pattern;
+
+  if(argc <= 1){
+  1c:	83 f8 01             	cmp    $0x1,%eax
+  1f:	7e 77                	jle    98 <main+0x98>
+    printf(2, "usage: grep pattern [file ...]\n");
+    exit();
+  }
+  pattern = argv[1];
+  21:	8b 43 04             	mov    0x4(%ebx),%eax
+  24:	83 c3 08             	add    $0x8,%ebx
+
+  if(argc <= 2){
+  27:	83 7d e4 02          	cmpl   $0x2,-0x1c(%ebp)
+    grep(pattern, 0);
+    exit();
+  }
+
+  for(i = 2; i < argc; i++){
+  2b:	be 02 00 00 00       	mov    $0x2,%esi
+  pattern = argv[1];
+  30:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(argc <= 2){
+  33:	75 35                	jne    6a <main+0x6a>
+    grep(pattern, 0);
+  35:	52                   	push   %edx
+  36:	52                   	push   %edx
+  37:	6a 00                	push   $0x0
+  39:	50                   	push   %eax
+  3a:	e8 f1 01 00 00       	call   230 <grep>
+    exit();
+  3f:	e8 4d 05 00 00       	call   591 <exit>
+  44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if((fd = open(argv[i], 0)) < 0){
+      printf(1, "grep: cannot open %s\n", argv[i]);
+      exit();
+    }
+    grep(pattern, fd);
+  48:	83 ec 08             	sub    $0x8,%esp
+  for(i = 2; i < argc; i++){
+  4b:	83 c6 01             	add    $0x1,%esi
+  4e:	83 c3 04             	add    $0x4,%ebx
+    grep(pattern, fd);
+  51:	50                   	push   %eax
+  52:	ff 75 e0             	pushl  -0x20(%ebp)
+  55:	e8 d6 01 00 00       	call   230 <grep>
+    close(fd);
+  5a:	89 3c 24             	mov    %edi,(%esp)
+  5d:	e8 57 05 00 00       	call   5b9 <close>
+  for(i = 2; i < argc; i++){
+  62:	83 c4 10             	add    $0x10,%esp
+  65:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  68:	7e 29                	jle    93 <main+0x93>
+    if((fd = open(argv[i], 0)) < 0){
+  6a:	83 ec 08             	sub    $0x8,%esp
+  6d:	6a 00                	push   $0x0
+  6f:	ff 33                	pushl  (%ebx)
+  71:	e8 5b 05 00 00       	call   5d1 <open>
+  76:	83 c4 10             	add    $0x10,%esp
+  79:	89 c7                	mov    %eax,%edi
+  7b:	85 c0                	test   %eax,%eax
+  7d:	79 c9                	jns    48 <main+0x48>
+      printf(1, "grep: cannot open %s\n", argv[i]);
+  7f:	50                   	push   %eax
+  80:	ff 33                	pushl  (%ebx)
+  82:	68 88 0a 00 00       	push   $0xa88
+  87:	6a 01                	push   $0x1
+  89:	e8 72 06 00 00       	call   700 <printf>
+      exit();
+  8e:	e8 fe 04 00 00       	call   591 <exit>
+  }
+  exit();
+  93:	e8 f9 04 00 00       	call   591 <exit>
+    printf(2, "usage: grep pattern [file ...]\n");
+  98:	51                   	push   %ecx
+  99:	51                   	push   %ecx
+  9a:	68 68 0a 00 00       	push   $0xa68
+  9f:	6a 02                	push   $0x2
+  a1:	e8 5a 06 00 00       	call   700 <printf>
+    exit();
+  a6:	e8 e6 04 00 00       	call   591 <exit>
+  ab:	66 90                	xchg   %ax,%ax
+  ad:	66 90                	xchg   %ax,%ax
+  af:	90                   	nop
+
+000000b0 <matchstar>:
+  return 0;
+}
+
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	57                   	push   %edi
+  b4:	56                   	push   %esi
+  b5:	53                   	push   %ebx
+  b6:	83 ec 0c             	sub    $0xc,%esp
+  b9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  bf:	8b 7d 10             	mov    0x10(%ebp),%edi
+  c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+  c8:	83 ec 08             	sub    $0x8,%esp
+  cb:	57                   	push   %edi
+  cc:	56                   	push   %esi
+  cd:	e8 3e 00 00 00       	call   110 <matchhere>
+  d2:	83 c4 10             	add    $0x10,%esp
+  d5:	85 c0                	test   %eax,%eax
+  d7:	75 1f                	jne    f8 <matchstar+0x48>
+      return 1;
+  }while(*text!='\0' && (*text++==c || c=='.'));
+  d9:	0f be 17             	movsbl (%edi),%edx
+  dc:	84 d2                	test   %dl,%dl
+  de:	74 0c                	je     ec <matchstar+0x3c>
+  e0:	83 c7 01             	add    $0x1,%edi
+  e3:	39 da                	cmp    %ebx,%edx
+  e5:	74 e1                	je     c8 <matchstar+0x18>
+  e7:	83 fb 2e             	cmp    $0x2e,%ebx
+  ea:	74 dc                	je     c8 <matchstar+0x18>
+  return 0;
+}
+  ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  ef:	5b                   	pop    %ebx
+  f0:	5e                   	pop    %esi
+  f1:	5f                   	pop    %edi
+  f2:	5d                   	pop    %ebp
+  f3:	c3                   	ret    
+  f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return 1;
+  fb:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 100:	5b                   	pop    %ebx
+ 101:	5e                   	pop    %esi
+ 102:	5f                   	pop    %edi
+ 103:	5d                   	pop    %ebp
+ 104:	c3                   	ret    
+ 105:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000110 <matchhere>:
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	57                   	push   %edi
+ 114:	56                   	push   %esi
+ 115:	53                   	push   %ebx
+ 116:	83 ec 0c             	sub    $0xc,%esp
+  if(re[0] == '\0')
+ 119:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+ 11c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  if(re[0] == '\0')
+ 11f:	0f b6 10             	movzbl (%eax),%edx
+ 122:	84 d2                	test   %dl,%dl
+ 124:	74 67                	je     18d <matchhere+0x7d>
+  if(re[1] == '*')
+ 126:	0f be 40 01          	movsbl 0x1(%eax),%eax
+ 12a:	3c 2a                	cmp    $0x2a,%al
+ 12c:	74 6c                	je     19a <matchhere+0x8a>
+  if(re[0] == '$' && re[1] == '\0')
+ 12e:	0f b6 1f             	movzbl (%edi),%ebx
+ 131:	80 fa 24             	cmp    $0x24,%dl
+ 134:	75 08                	jne    13e <matchhere+0x2e>
+ 136:	84 c0                	test   %al,%al
+ 138:	0f 84 81 00 00 00    	je     1bf <matchhere+0xaf>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+ 13e:	84 db                	test   %bl,%bl
+ 140:	74 09                	je     14b <matchhere+0x3b>
+ 142:	38 da                	cmp    %bl,%dl
+ 144:	74 3c                	je     182 <matchhere+0x72>
+ 146:	80 fa 2e             	cmp    $0x2e,%dl
+ 149:	74 37                	je     182 <matchhere+0x72>
+}
+ 14b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+ 14e:	31 c0                	xor    %eax,%eax
+}
+ 150:	5b                   	pop    %ebx
+ 151:	5e                   	pop    %esi
+ 152:	5f                   	pop    %edi
+ 153:	5d                   	pop    %ebp
+ 154:	c3                   	ret    
+ 155:	8d 76 00             	lea    0x0(%esi),%esi
+  if(re[1] == '*')
+ 158:	8b 75 08             	mov    0x8(%ebp),%esi
+ 15b:	0f b6 56 01          	movzbl 0x1(%esi),%edx
+ 15f:	80 fa 2a             	cmp    $0x2a,%dl
+ 162:	74 3b                	je     19f <matchhere+0x8f>
+  if(re[0] == '$' && re[1] == '\0')
+ 164:	3c 24                	cmp    $0x24,%al
+ 166:	75 04                	jne    16c <matchhere+0x5c>
+ 168:	84 d2                	test   %dl,%dl
+ 16a:	74 4f                	je     1bb <matchhere+0xab>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+ 16c:	0f b6 33             	movzbl (%ebx),%esi
+ 16f:	89 f1                	mov    %esi,%ecx
+ 171:	84 c9                	test   %cl,%cl
+ 173:	74 d6                	je     14b <matchhere+0x3b>
+ 175:	89 df                	mov    %ebx,%edi
+ 177:	3c 2e                	cmp    $0x2e,%al
+ 179:	74 04                	je     17f <matchhere+0x6f>
+ 17b:	38 c1                	cmp    %al,%cl
+ 17d:	75 cc                	jne    14b <matchhere+0x3b>
+ 17f:	0f be c2             	movsbl %dl,%eax
+    return matchhere(re+1, text+1);
+ 182:	8d 5f 01             	lea    0x1(%edi),%ebx
+ 185:	83 45 08 01          	addl   $0x1,0x8(%ebp)
+  if(re[0] == '\0')
+ 189:	84 c0                	test   %al,%al
+ 18b:	75 cb                	jne    158 <matchhere+0x48>
+    return 1;
+ 18d:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 192:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 195:	5b                   	pop    %ebx
+ 196:	5e                   	pop    %esi
+ 197:	5f                   	pop    %edi
+ 198:	5d                   	pop    %ebp
+ 199:	c3                   	ret    
+  if(re[1] == '*')
+ 19a:	89 fb                	mov    %edi,%ebx
+ 19c:	0f be c2             	movsbl %dl,%eax
+    return matchstar(re[0], re+2, text);
+ 19f:	8b 7d 08             	mov    0x8(%ebp),%edi
+ 1a2:	83 ec 04             	sub    $0x4,%esp
+ 1a5:	53                   	push   %ebx
+ 1a6:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 1a9:	51                   	push   %ecx
+ 1aa:	50                   	push   %eax
+ 1ab:	e8 00 ff ff ff       	call   b0 <matchstar>
+ 1b0:	83 c4 10             	add    $0x10,%esp
+}
+ 1b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1b6:	5b                   	pop    %ebx
+ 1b7:	5e                   	pop    %esi
+ 1b8:	5f                   	pop    %edi
+ 1b9:	5d                   	pop    %ebp
+ 1ba:	c3                   	ret    
+ 1bb:	0f b6 5f 01          	movzbl 0x1(%edi),%ebx
+    return *text == '\0';
+ 1bf:	31 c0                	xor    %eax,%eax
+ 1c1:	84 db                	test   %bl,%bl
+ 1c3:	0f 94 c0             	sete   %al
+ 1c6:	eb ca                	jmp    192 <matchhere+0x82>
+ 1c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1cf:	90                   	nop
+
+000001d0 <match>:
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	56                   	push   %esi
+ 1d4:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1d7:	53                   	push   %ebx
+ 1d8:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  if(re[0] == '^')
+ 1db:	80 3e 5e             	cmpb   $0x5e,(%esi)
+ 1de:	75 11                	jne    1f1 <match+0x21>
+ 1e0:	eb 2e                	jmp    210 <match+0x40>
+ 1e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  }while(*text++ != '\0');
+ 1e8:	83 c3 01             	add    $0x1,%ebx
+ 1eb:	80 7b ff 00          	cmpb   $0x0,-0x1(%ebx)
+ 1ef:	74 16                	je     207 <match+0x37>
+    if(matchhere(re, text))
+ 1f1:	83 ec 08             	sub    $0x8,%esp
+ 1f4:	53                   	push   %ebx
+ 1f5:	56                   	push   %esi
+ 1f6:	e8 15 ff ff ff       	call   110 <matchhere>
+ 1fb:	83 c4 10             	add    $0x10,%esp
+ 1fe:	85 c0                	test   %eax,%eax
+ 200:	74 e6                	je     1e8 <match+0x18>
+      return 1;
+ 202:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 207:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 20a:	5b                   	pop    %ebx
+ 20b:	5e                   	pop    %esi
+ 20c:	5d                   	pop    %ebp
+ 20d:	c3                   	ret    
+ 20e:	66 90                	xchg   %ax,%ax
+    return matchhere(re+1, text);
+ 210:	83 c6 01             	add    $0x1,%esi
+ 213:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+ 216:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 219:	5b                   	pop    %ebx
+ 21a:	5e                   	pop    %esi
+ 21b:	5d                   	pop    %ebp
+    return matchhere(re+1, text);
+ 21c:	e9 ef fe ff ff       	jmp    110 <matchhere>
+ 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 228:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22f:	90                   	nop
+
+00000230 <grep>:
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	57                   	push   %edi
+ 234:	56                   	push   %esi
+ 235:	53                   	push   %ebx
+ 236:	83 ec 1c             	sub    $0x1c,%esp
+  m = 0;
+ 239:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+{
+ 240:	8b 75 08             	mov    0x8(%ebp),%esi
+ 243:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 247:	90                   	nop
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+ 248:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+ 24b:	b8 ff 03 00 00       	mov    $0x3ff,%eax
+ 250:	83 ec 04             	sub    $0x4,%esp
+ 253:	29 c8                	sub    %ecx,%eax
+ 255:	50                   	push   %eax
+ 256:	8d 81 80 0e 00 00    	lea    0xe80(%ecx),%eax
+ 25c:	50                   	push   %eax
+ 25d:	ff 75 0c             	pushl  0xc(%ebp)
+ 260:	e8 44 03 00 00       	call   5a9 <read>
+ 265:	83 c4 10             	add    $0x10,%esp
+ 268:	85 c0                	test   %eax,%eax
+ 26a:	0f 8e c0 00 00 00    	jle    330 <grep+0x100>
+    m += n;
+ 270:	01 45 e4             	add    %eax,-0x1c(%ebp)
+ 273:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+    p = buf;
+ 276:	bb 80 0e 00 00       	mov    $0xe80,%ebx
+    buf[m] = '\0';
+ 27b:	c6 81 80 0e 00 00 00 	movb   $0x0,0xe80(%ecx)
+    while((q = strchr(p, '\n')) != 0){
+ 282:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 288:	83 ec 08             	sub    $0x8,%esp
+ 28b:	6a 0a                	push   $0xa
+ 28d:	53                   	push   %ebx
+ 28e:	e8 7d 01 00 00       	call   410 <strchr>
+ 293:	83 c4 10             	add    $0x10,%esp
+ 296:	89 c7                	mov    %eax,%edi
+ 298:	85 c0                	test   %eax,%eax
+ 29a:	74 44                	je     2e0 <grep+0xb0>
+      if(match(pattern, p)){
+ 29c:	83 ec 08             	sub    $0x8,%esp
+      *q = 0;
+ 29f:	c6 07 00             	movb   $0x0,(%edi)
+      if(match(pattern, p)){
+ 2a2:	53                   	push   %ebx
+ 2a3:	56                   	push   %esi
+ 2a4:	e8 27 ff ff ff       	call   1d0 <match>
+ 2a9:	83 c4 10             	add    $0x10,%esp
+ 2ac:	8d 57 01             	lea    0x1(%edi),%edx
+ 2af:	85 c0                	test   %eax,%eax
+ 2b1:	75 0d                	jne    2c0 <grep+0x90>
+      p = q+1;
+ 2b3:	89 d3                	mov    %edx,%ebx
+ 2b5:	eb d1                	jmp    288 <grep+0x58>
+ 2b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2be:	66 90                	xchg   %ax,%ax
+        write(1, p, q+1 - p);
+ 2c0:	89 d0                	mov    %edx,%eax
+ 2c2:	83 ec 04             	sub    $0x4,%esp
+        *q = '\n';
+ 2c5:	c6 07 0a             	movb   $0xa,(%edi)
+        write(1, p, q+1 - p);
+ 2c8:	29 d8                	sub    %ebx,%eax
+ 2ca:	89 55 e0             	mov    %edx,-0x20(%ebp)
+ 2cd:	50                   	push   %eax
+ 2ce:	53                   	push   %ebx
+ 2cf:	6a 01                	push   $0x1
+ 2d1:	e8 db 02 00 00       	call   5b1 <write>
+ 2d6:	8b 55 e0             	mov    -0x20(%ebp),%edx
+ 2d9:	83 c4 10             	add    $0x10,%esp
+      p = q+1;
+ 2dc:	89 d3                	mov    %edx,%ebx
+ 2de:	eb a8                	jmp    288 <grep+0x58>
+    if(p == buf)
+ 2e0:	81 fb 80 0e 00 00    	cmp    $0xe80,%ebx
+ 2e6:	74 38                	je     320 <grep+0xf0>
+    if(m > 0){
+ 2e8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+ 2eb:	85 c9                	test   %ecx,%ecx
+ 2ed:	0f 8e 55 ff ff ff    	jle    248 <grep+0x18>
+      m -= p - buf;
+ 2f3:	89 d8                	mov    %ebx,%eax
+      memmove(buf, p, m);
+ 2f5:	83 ec 04             	sub    $0x4,%esp
+      m -= p - buf;
+ 2f8:	2d 80 0e 00 00       	sub    $0xe80,%eax
+ 2fd:	29 c1                	sub    %eax,%ecx
+      memmove(buf, p, m);
+ 2ff:	51                   	push   %ecx
+ 300:	53                   	push   %ebx
+ 301:	68 80 0e 00 00       	push   $0xe80
+      m -= p - buf;
+ 306:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+      memmove(buf, p, m);
+ 309:	e8 52 02 00 00       	call   560 <memmove>
+ 30e:	83 c4 10             	add    $0x10,%esp
+ 311:	e9 32 ff ff ff       	jmp    248 <grep+0x18>
+ 316:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 31d:	8d 76 00             	lea    0x0(%esi),%esi
+      m = 0;
+ 320:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+ 327:	e9 1c ff ff ff       	jmp    248 <grep+0x18>
+ 32c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+}
+ 330:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 333:	5b                   	pop    %ebx
+ 334:	5e                   	pop    %esi
+ 335:	5f                   	pop    %edi
+ 336:	5d                   	pop    %ebp
+ 337:	c3                   	ret    
+ 338:	66 90                	xchg   %ax,%ax
+ 33a:	66 90                	xchg   %ax,%ax
+ 33c:	66 90                	xchg   %ax,%ax
+ 33e:	66 90                	xchg   %ax,%ax
+
+00000340 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 340:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 341:	31 d2                	xor    %edx,%edx
+{
+ 343:	89 e5                	mov    %esp,%ebp
+ 345:	53                   	push   %ebx
+ 346:	8b 45 08             	mov    0x8(%ebp),%eax
+ 349:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 34c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 350:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+ 354:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 357:	83 c2 01             	add    $0x1,%edx
+ 35a:	84 c9                	test   %cl,%cl
+ 35c:	75 f2                	jne    350 <strcpy+0x10>
+    ;
+  return os;
+}
+ 35e:	5b                   	pop    %ebx
+ 35f:	5d                   	pop    %ebp
+ 360:	c3                   	ret    
+ 361:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 368:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36f:	90                   	nop
+
+00000370 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	56                   	push   %esi
+ 374:	53                   	push   %ebx
+ 375:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 378:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+ 37b:	0f b6 13             	movzbl (%ebx),%edx
+ 37e:	0f b6 0e             	movzbl (%esi),%ecx
+ 381:	84 d2                	test   %dl,%dl
+ 383:	74 1e                	je     3a3 <strcmp+0x33>
+ 385:	b8 01 00 00 00       	mov    $0x1,%eax
+ 38a:	38 ca                	cmp    %cl,%dl
+ 38c:	74 09                	je     397 <strcmp+0x27>
+ 38e:	eb 20                	jmp    3b0 <strcmp+0x40>
+ 390:	83 c0 01             	add    $0x1,%eax
+ 393:	38 ca                	cmp    %cl,%dl
+ 395:	75 19                	jne    3b0 <strcmp+0x40>
+ 397:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 39b:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+ 39f:	84 d2                	test   %dl,%dl
+ 3a1:	75 ed                	jne    390 <strcmp+0x20>
+ 3a3:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+ 3a5:	5b                   	pop    %ebx
+ 3a6:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 3a7:	29 c8                	sub    %ecx,%eax
+}
+ 3a9:	5d                   	pop    %ebp
+ 3aa:	c3                   	ret    
+ 3ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3af:	90                   	nop
+ 3b0:	0f b6 c2             	movzbl %dl,%eax
+ 3b3:	5b                   	pop    %ebx
+ 3b4:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 3b5:	29 c8                	sub    %ecx,%eax
+}
+ 3b7:	5d                   	pop    %ebp
+ 3b8:	c3                   	ret    
+ 3b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000003c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3c6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 3c9:	74 15                	je     3e0 <strlen+0x20>
+ 3cb:	31 d2                	xor    %edx,%edx
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3d0:	83 c2 01             	add    $0x1,%edx
+ 3d3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 3d7:	89 d0                	mov    %edx,%eax
+ 3d9:	75 f5                	jne    3d0 <strlen+0x10>
+    ;
+  return n;
+}
+ 3db:	5d                   	pop    %ebp
+ 3dc:	c3                   	ret    
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 3e0:	31 c0                	xor    %eax,%eax
+}
+ 3e2:	5d                   	pop    %ebp
+ 3e3:	c3                   	ret    
+ 3e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3ef:	90                   	nop
+
+000003f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	57                   	push   %edi
+ 3f4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 3f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 3fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3fd:	89 d7                	mov    %edx,%edi
+ 3ff:	fc                   	cld    
+ 400:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 402:	89 d0                	mov    %edx,%eax
+ 404:	5f                   	pop    %edi
+ 405:	5d                   	pop    %ebp
+ 406:	c3                   	ret    
+ 407:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 40e:	66 90                	xchg   %ax,%ax
+
+00000410 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	53                   	push   %ebx
+ 414:	8b 45 08             	mov    0x8(%ebp),%eax
+ 417:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 41a:	0f b6 18             	movzbl (%eax),%ebx
+ 41d:	84 db                	test   %bl,%bl
+ 41f:	74 1d                	je     43e <strchr+0x2e>
+ 421:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 423:	38 d3                	cmp    %dl,%bl
+ 425:	75 0d                	jne    434 <strchr+0x24>
+ 427:	eb 17                	jmp    440 <strchr+0x30>
+ 429:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 430:	38 ca                	cmp    %cl,%dl
+ 432:	74 0c                	je     440 <strchr+0x30>
+  for(; *s; s++)
+ 434:	83 c0 01             	add    $0x1,%eax
+ 437:	0f b6 10             	movzbl (%eax),%edx
+ 43a:	84 d2                	test   %dl,%dl
+ 43c:	75 f2                	jne    430 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 43e:	31 c0                	xor    %eax,%eax
+}
+ 440:	5b                   	pop    %ebx
+ 441:	5d                   	pop    %ebp
+ 442:	c3                   	ret    
+ 443:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000450 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 450:	55                   	push   %ebp
+ 451:	89 e5                	mov    %esp,%ebp
+ 453:	57                   	push   %edi
+ 454:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 455:	31 f6                	xor    %esi,%esi
+{
+ 457:	53                   	push   %ebx
+ 458:	89 f3                	mov    %esi,%ebx
+ 45a:	83 ec 1c             	sub    $0x1c,%esp
+ 45d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 460:	eb 2f                	jmp    491 <gets+0x41>
+ 462:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 468:	83 ec 04             	sub    $0x4,%esp
+ 46b:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 46e:	6a 01                	push   $0x1
+ 470:	50                   	push   %eax
+ 471:	6a 00                	push   $0x0
+ 473:	e8 31 01 00 00       	call   5a9 <read>
+    if(cc < 1)
+ 478:	83 c4 10             	add    $0x10,%esp
+ 47b:	85 c0                	test   %eax,%eax
+ 47d:	7e 1c                	jle    49b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 47f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 483:	83 c7 01             	add    $0x1,%edi
+ 486:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 489:	3c 0a                	cmp    $0xa,%al
+ 48b:	74 23                	je     4b0 <gets+0x60>
+ 48d:	3c 0d                	cmp    $0xd,%al
+ 48f:	74 1f                	je     4b0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 491:	83 c3 01             	add    $0x1,%ebx
+ 494:	89 fe                	mov    %edi,%esi
+ 496:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 499:	7c cd                	jl     468 <gets+0x18>
+ 49b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 49d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 4a0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4a3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4a6:	5b                   	pop    %ebx
+ 4a7:	5e                   	pop    %esi
+ 4a8:	5f                   	pop    %edi
+ 4a9:	5d                   	pop    %ebp
+ 4aa:	c3                   	ret    
+ 4ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4af:	90                   	nop
+ 4b0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4b3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4b6:	01 de                	add    %ebx,%esi
+ 4b8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 4ba:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4bd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4c0:	5b                   	pop    %ebx
+ 4c1:	5e                   	pop    %esi
+ 4c2:	5f                   	pop    %edi
+ 4c3:	5d                   	pop    %ebp
+ 4c4:	c3                   	ret    
+ 4c5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000004d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4d0:	55                   	push   %ebp
+ 4d1:	89 e5                	mov    %esp,%ebp
+ 4d3:	56                   	push   %esi
+ 4d4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4d5:	83 ec 08             	sub    $0x8,%esp
+ 4d8:	6a 00                	push   $0x0
+ 4da:	ff 75 08             	pushl  0x8(%ebp)
+ 4dd:	e8 ef 00 00 00       	call   5d1 <open>
+  if(fd < 0)
+ 4e2:	83 c4 10             	add    $0x10,%esp
+ 4e5:	85 c0                	test   %eax,%eax
+ 4e7:	78 27                	js     510 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 4e9:	83 ec 08             	sub    $0x8,%esp
+ 4ec:	ff 75 0c             	pushl  0xc(%ebp)
+ 4ef:	89 c3                	mov    %eax,%ebx
+ 4f1:	50                   	push   %eax
+ 4f2:	e8 f2 00 00 00       	call   5e9 <fstat>
+  close(fd);
+ 4f7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 4fa:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 4fc:	e8 b8 00 00 00       	call   5b9 <close>
+  return r;
+ 501:	83 c4 10             	add    $0x10,%esp
+}
+ 504:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 507:	89 f0                	mov    %esi,%eax
+ 509:	5b                   	pop    %ebx
+ 50a:	5e                   	pop    %esi
+ 50b:	5d                   	pop    %ebp
+ 50c:	c3                   	ret    
+ 50d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 510:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 515:	eb ed                	jmp    504 <stat+0x34>
+ 517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51e:	66 90                	xchg   %ax,%ax
+
+00000520 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 520:	55                   	push   %ebp
+ 521:	89 e5                	mov    %esp,%ebp
+ 523:	53                   	push   %ebx
+ 524:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 527:	0f be 11             	movsbl (%ecx),%edx
+ 52a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 52d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 52f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 534:	77 1f                	ja     555 <atoi+0x35>
+ 536:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 540:	83 c1 01             	add    $0x1,%ecx
+ 543:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 546:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 54a:	0f be 11             	movsbl (%ecx),%edx
+ 54d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 550:	80 fb 09             	cmp    $0x9,%bl
+ 553:	76 eb                	jbe    540 <atoi+0x20>
+  return n;
+}
+ 555:	5b                   	pop    %ebx
+ 556:	5d                   	pop    %ebp
+ 557:	c3                   	ret    
+ 558:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 55f:	90                   	nop
+
+00000560 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 560:	55                   	push   %ebp
+ 561:	89 e5                	mov    %esp,%ebp
+ 563:	57                   	push   %edi
+ 564:	8b 55 10             	mov    0x10(%ebp),%edx
+ 567:	8b 45 08             	mov    0x8(%ebp),%eax
+ 56a:	56                   	push   %esi
+ 56b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 56e:	85 d2                	test   %edx,%edx
+ 570:	7e 13                	jle    585 <memmove+0x25>
+ 572:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 574:	89 c7                	mov    %eax,%edi
+ 576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 580:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 581:	39 fa                	cmp    %edi,%edx
+ 583:	75 fb                	jne    580 <memmove+0x20>
+  return vdst;
+}
+ 585:	5e                   	pop    %esi
+ 586:	5f                   	pop    %edi
+ 587:	5d                   	pop    %ebp
+ 588:	c3                   	ret    
+
+00000589 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 589:	b8 01 00 00 00       	mov    $0x1,%eax
+ 58e:	cd 40                	int    $0x40
+ 590:	c3                   	ret    
+
+00000591 <exit>:
+SYSCALL(exit)
+ 591:	b8 02 00 00 00       	mov    $0x2,%eax
+ 596:	cd 40                	int    $0x40
+ 598:	c3                   	ret    
+
+00000599 <wait>:
+SYSCALL(wait)
+ 599:	b8 03 00 00 00       	mov    $0x3,%eax
+ 59e:	cd 40                	int    $0x40
+ 5a0:	c3                   	ret    
+
+000005a1 <pipe>:
+SYSCALL(pipe)
+ 5a1:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5a6:	cd 40                	int    $0x40
+ 5a8:	c3                   	ret    
+
+000005a9 <read>:
+SYSCALL(read)
+ 5a9:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5ae:	cd 40                	int    $0x40
+ 5b0:	c3                   	ret    
+
+000005b1 <write>:
+SYSCALL(write)
+ 5b1:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5b6:	cd 40                	int    $0x40
+ 5b8:	c3                   	ret    
+
+000005b9 <close>:
+SYSCALL(close)
+ 5b9:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5be:	cd 40                	int    $0x40
+ 5c0:	c3                   	ret    
+
+000005c1 <kill>:
+SYSCALL(kill)
+ 5c1:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5c6:	cd 40                	int    $0x40
+ 5c8:	c3                   	ret    
+
+000005c9 <exec>:
+SYSCALL(exec)
+ 5c9:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5ce:	cd 40                	int    $0x40
+ 5d0:	c3                   	ret    
+
+000005d1 <open>:
+SYSCALL(open)
+ 5d1:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5d6:	cd 40                	int    $0x40
+ 5d8:	c3                   	ret    
+
+000005d9 <mknod>:
+SYSCALL(mknod)
+ 5d9:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5de:	cd 40                	int    $0x40
+ 5e0:	c3                   	ret    
+
+000005e1 <unlink>:
+SYSCALL(unlink)
+ 5e1:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5e6:	cd 40                	int    $0x40
+ 5e8:	c3                   	ret    
+
+000005e9 <fstat>:
+SYSCALL(fstat)
+ 5e9:	b8 08 00 00 00       	mov    $0x8,%eax
+ 5ee:	cd 40                	int    $0x40
+ 5f0:	c3                   	ret    
+
+000005f1 <link>:
+SYSCALL(link)
+ 5f1:	b8 13 00 00 00       	mov    $0x13,%eax
+ 5f6:	cd 40                	int    $0x40
+ 5f8:	c3                   	ret    
+
+000005f9 <mkdir>:
+SYSCALL(mkdir)
+ 5f9:	b8 14 00 00 00       	mov    $0x14,%eax
+ 5fe:	cd 40                	int    $0x40
+ 600:	c3                   	ret    
+
+00000601 <chdir>:
+SYSCALL(chdir)
+ 601:	b8 09 00 00 00       	mov    $0x9,%eax
+ 606:	cd 40                	int    $0x40
+ 608:	c3                   	ret    
+
+00000609 <dup>:
+SYSCALL(dup)
+ 609:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 60e:	cd 40                	int    $0x40
+ 610:	c3                   	ret    
+
+00000611 <getpid>:
+SYSCALL(getpid)
+ 611:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 616:	cd 40                	int    $0x40
+ 618:	c3                   	ret    
+
+00000619 <sbrk>:
+SYSCALL(sbrk)
+ 619:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 61e:	cd 40                	int    $0x40
+ 620:	c3                   	ret    
+
+00000621 <sleep>:
+SYSCALL(sleep)
+ 621:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 626:	cd 40                	int    $0x40
+ 628:	c3                   	ret    
+
+00000629 <uptime>:
+SYSCALL(uptime)
+ 629:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 62e:	cd 40                	int    $0x40
+ 630:	c3                   	ret    
+ 631:	66 90                	xchg   %ax,%ax
+ 633:	66 90                	xchg   %ax,%ax
+ 635:	66 90                	xchg   %ax,%ax
+ 637:	66 90                	xchg   %ax,%ax
+ 639:	66 90                	xchg   %ax,%ax
+ 63b:	66 90                	xchg   %ax,%ax
+ 63d:	66 90                	xchg   %ax,%ax
+ 63f:	90                   	nop
+
+00000640 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 640:	55                   	push   %ebp
+ 641:	89 e5                	mov    %esp,%ebp
+ 643:	57                   	push   %edi
+ 644:	56                   	push   %esi
+ 645:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 646:	89 d3                	mov    %edx,%ebx
+{
+ 648:	83 ec 3c             	sub    $0x3c,%esp
+ 64b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+ 64e:	85 d2                	test   %edx,%edx
+ 650:	0f 89 92 00 00 00    	jns    6e8 <printint+0xa8>
+ 656:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 65a:	0f 84 88 00 00 00    	je     6e8 <printint+0xa8>
+    neg = 1;
+ 660:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+ 667:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 669:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 670:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 673:	eb 08                	jmp    67d <printint+0x3d>
+ 675:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 678:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+ 67b:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+ 67d:	89 d8                	mov    %ebx,%eax
+ 67f:	31 d2                	xor    %edx,%edx
+ 681:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 684:	f7 f1                	div    %ecx
+ 686:	83 c7 01             	add    $0x1,%edi
+ 689:	0f b6 92 a8 0a 00 00 	movzbl 0xaa8(%edx),%edx
+ 690:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+ 693:	39 d9                	cmp    %ebx,%ecx
+ 695:	76 e1                	jbe    678 <printint+0x38>
+  if(neg)
+ 697:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 69a:	85 c0                	test   %eax,%eax
+ 69c:	74 0d                	je     6ab <printint+0x6b>
+    buf[i++] = '-';
+ 69e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 6a3:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+ 6a8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 6ab:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 6ae:	8b 7d bc             	mov    -0x44(%ebp),%edi
+ 6b1:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6b5:	eb 0f                	jmp    6c6 <printint+0x86>
+ 6b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6be:	66 90                	xchg   %ax,%ax
+ 6c0:	0f b6 13             	movzbl (%ebx),%edx
+ 6c3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 6c6:	83 ec 04             	sub    $0x4,%esp
+ 6c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6cc:	6a 01                	push   $0x1
+ 6ce:	56                   	push   %esi
+ 6cf:	57                   	push   %edi
+ 6d0:	e8 dc fe ff ff       	call   5b1 <write>
+
+  while(--i >= 0)
+ 6d5:	83 c4 10             	add    $0x10,%esp
+ 6d8:	39 de                	cmp    %ebx,%esi
+ 6da:	75 e4                	jne    6c0 <printint+0x80>
+    putc(fd, buf[i]);
+}
+ 6dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6df:	5b                   	pop    %ebx
+ 6e0:	5e                   	pop    %esi
+ 6e1:	5f                   	pop    %edi
+ 6e2:	5d                   	pop    %ebp
+ 6e3:	c3                   	ret    
+ 6e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 6e8:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+ 6ef:	e9 75 ff ff ff       	jmp    669 <printint+0x29>
+ 6f4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ff:	90                   	nop
+
+00000700 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 700:	55                   	push   %ebp
+ 701:	89 e5                	mov    %esp,%ebp
+ 703:	57                   	push   %edi
+ 704:	56                   	push   %esi
+ 705:	53                   	push   %ebx
+ 706:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 709:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 70c:	0f b6 1e             	movzbl (%esi),%ebx
+ 70f:	84 db                	test   %bl,%bl
+ 711:	0f 84 b9 00 00 00    	je     7d0 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+ 717:	8d 45 10             	lea    0x10(%ebp),%eax
+ 71a:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 71d:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 720:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 722:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 725:	eb 38                	jmp    75f <printf+0x5f>
+ 727:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 72e:	66 90                	xchg   %ax,%ax
+ 730:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 733:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 738:	83 f8 25             	cmp    $0x25,%eax
+ 73b:	74 17                	je     754 <printf+0x54>
+  write(fd, &c, 1);
+ 73d:	83 ec 04             	sub    $0x4,%esp
+ 740:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 743:	6a 01                	push   $0x1
+ 745:	57                   	push   %edi
+ 746:	ff 75 08             	pushl  0x8(%ebp)
+ 749:	e8 63 fe ff ff       	call   5b1 <write>
+ 74e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 751:	83 c4 10             	add    $0x10,%esp
+ 754:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 757:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 75b:	84 db                	test   %bl,%bl
+ 75d:	74 71                	je     7d0 <printf+0xd0>
+    c = fmt[i] & 0xff;
+ 75f:	0f be cb             	movsbl %bl,%ecx
+ 762:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 765:	85 d2                	test   %edx,%edx
+ 767:	74 c7                	je     730 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 769:	83 fa 25             	cmp    $0x25,%edx
+ 76c:	75 e6                	jne    754 <printf+0x54>
+      if(c == 'd'){
+ 76e:	83 f8 64             	cmp    $0x64,%eax
+ 771:	0f 84 99 00 00 00    	je     810 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 777:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 77d:	83 f9 70             	cmp    $0x70,%ecx
+ 780:	74 5e                	je     7e0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 782:	83 f8 73             	cmp    $0x73,%eax
+ 785:	0f 84 d5 00 00 00    	je     860 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 78b:	83 f8 63             	cmp    $0x63,%eax
+ 78e:	0f 84 8c 00 00 00    	je     820 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 794:	83 f8 25             	cmp    $0x25,%eax
+ 797:	0f 84 b3 00 00 00    	je     850 <printf+0x150>
+  write(fd, &c, 1);
+ 79d:	83 ec 04             	sub    $0x4,%esp
+ 7a0:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7a4:	6a 01                	push   $0x1
+ 7a6:	57                   	push   %edi
+ 7a7:	ff 75 08             	pushl  0x8(%ebp)
+ 7aa:	e8 02 fe ff ff       	call   5b1 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 7af:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7b2:	83 c4 0c             	add    $0xc,%esp
+ 7b5:	6a 01                	push   $0x1
+ 7b7:	83 c6 01             	add    $0x1,%esi
+ 7ba:	57                   	push   %edi
+ 7bb:	ff 75 08             	pushl  0x8(%ebp)
+ 7be:	e8 ee fd ff ff       	call   5b1 <write>
+  for(i = 0; fmt[i]; i++){
+ 7c3:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 7c7:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 7ca:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 7cc:	84 db                	test   %bl,%bl
+ 7ce:	75 8f                	jne    75f <printf+0x5f>
+    }
+  }
+}
+ 7d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7d3:	5b                   	pop    %ebx
+ 7d4:	5e                   	pop    %esi
+ 7d5:	5f                   	pop    %edi
+ 7d6:	5d                   	pop    %ebp
+ 7d7:	c3                   	ret    
+ 7d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7df:	90                   	nop
+        printint(fd, *ap, 16, 0);
+ 7e0:	83 ec 0c             	sub    $0xc,%esp
+ 7e3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7e8:	6a 00                	push   $0x0
+ 7ea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 7ed:	8b 45 08             	mov    0x8(%ebp),%eax
+ 7f0:	8b 13                	mov    (%ebx),%edx
+ 7f2:	e8 49 fe ff ff       	call   640 <printint>
+        ap++;
+ 7f7:	89 d8                	mov    %ebx,%eax
+ 7f9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 7fc:	31 d2                	xor    %edx,%edx
+        ap++;
+ 7fe:	83 c0 04             	add    $0x4,%eax
+ 801:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 804:	e9 4b ff ff ff       	jmp    754 <printf+0x54>
+ 809:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 810:	83 ec 0c             	sub    $0xc,%esp
+ 813:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 818:	6a 01                	push   $0x1
+ 81a:	eb ce                	jmp    7ea <printf+0xea>
+ 81c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 820:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 823:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 826:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 828:	6a 01                	push   $0x1
+        ap++;
+ 82a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 82d:	57                   	push   %edi
+ 82e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 831:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 834:	e8 78 fd ff ff       	call   5b1 <write>
+        ap++;
+ 839:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 83c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 83f:	31 d2                	xor    %edx,%edx
+ 841:	e9 0e ff ff ff       	jmp    754 <printf+0x54>
+ 846:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 84d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 850:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 853:	83 ec 04             	sub    $0x4,%esp
+ 856:	e9 5a ff ff ff       	jmp    7b5 <printf+0xb5>
+ 85b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 85f:	90                   	nop
+        s = (char*)*ap;
+ 860:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 863:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 865:	83 c0 04             	add    $0x4,%eax
+ 868:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 86b:	85 db                	test   %ebx,%ebx
+ 86d:	74 17                	je     886 <printf+0x186>
+        while(*s != 0){
+ 86f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 872:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 874:	84 c0                	test   %al,%al
+ 876:	0f 84 d8 fe ff ff    	je     754 <printf+0x54>
+ 87c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 87f:	89 de                	mov    %ebx,%esi
+ 881:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 884:	eb 1a                	jmp    8a0 <printf+0x1a0>
+          s = "(null)";
+ 886:	bb 9e 0a 00 00       	mov    $0xa9e,%ebx
+        while(*s != 0){
+ 88b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 88e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 893:	89 de                	mov    %ebx,%esi
+ 895:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 898:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 89f:	90                   	nop
+  write(fd, &c, 1);
+ 8a0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 8a3:	83 c6 01             	add    $0x1,%esi
+ 8a6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 8a9:	6a 01                	push   $0x1
+ 8ab:	57                   	push   %edi
+ 8ac:	53                   	push   %ebx
+ 8ad:	e8 ff fc ff ff       	call   5b1 <write>
+        while(*s != 0){
+ 8b2:	0f b6 06             	movzbl (%esi),%eax
+ 8b5:	83 c4 10             	add    $0x10,%esp
+ 8b8:	84 c0                	test   %al,%al
+ 8ba:	75 e4                	jne    8a0 <printf+0x1a0>
+ 8bc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 8bf:	31 d2                	xor    %edx,%edx
+ 8c1:	e9 8e fe ff ff       	jmp    754 <printf+0x54>
+ 8c6:	66 90                	xchg   %ax,%ax
+ 8c8:	66 90                	xchg   %ax,%ax
+ 8ca:	66 90                	xchg   %ax,%ax
+ 8cc:	66 90                	xchg   %ax,%ax
+ 8ce:	66 90                	xchg   %ax,%ax
+
+000008d0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8d0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8d1:	a1 60 0e 00 00       	mov    0xe60,%eax
+{
+ 8d6:	89 e5                	mov    %esp,%ebp
+ 8d8:	57                   	push   %edi
+ 8d9:	56                   	push   %esi
+ 8da:	53                   	push   %ebx
+ 8db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8de:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 8e0:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8e3:	39 c8                	cmp    %ecx,%eax
+ 8e5:	73 19                	jae    900 <free+0x30>
+ 8e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8ee:	66 90                	xchg   %ax,%ax
+ 8f0:	39 d1                	cmp    %edx,%ecx
+ 8f2:	72 14                	jb     908 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 8f4:	39 d0                	cmp    %edx,%eax
+ 8f6:	73 10                	jae    908 <free+0x38>
+{
+ 8f8:	89 d0                	mov    %edx,%eax
+ 8fa:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8fc:	39 c8                	cmp    %ecx,%eax
+ 8fe:	72 f0                	jb     8f0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 900:	39 d0                	cmp    %edx,%eax
+ 902:	72 f4                	jb     8f8 <free+0x28>
+ 904:	39 d1                	cmp    %edx,%ecx
+ 906:	73 f0                	jae    8f8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 908:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 90b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 90e:	39 fa                	cmp    %edi,%edx
+ 910:	74 1e                	je     930 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 912:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 915:	8b 50 04             	mov    0x4(%eax),%edx
+ 918:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 91b:	39 f1                	cmp    %esi,%ecx
+ 91d:	74 28                	je     947 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 91f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 921:	5b                   	pop    %ebx
+  freep = p;
+ 922:	a3 60 0e 00 00       	mov    %eax,0xe60
+}
+ 927:	5e                   	pop    %esi
+ 928:	5f                   	pop    %edi
+ 929:	5d                   	pop    %ebp
+ 92a:	c3                   	ret    
+ 92b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 92f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 930:	03 72 04             	add    0x4(%edx),%esi
+ 933:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 936:	8b 10                	mov    (%eax),%edx
+ 938:	8b 12                	mov    (%edx),%edx
+ 93a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 93d:	8b 50 04             	mov    0x4(%eax),%edx
+ 940:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 943:	39 f1                	cmp    %esi,%ecx
+ 945:	75 d8                	jne    91f <free+0x4f>
+    p->s.size += bp->s.size;
+ 947:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 94a:	a3 60 0e 00 00       	mov    %eax,0xe60
+    p->s.size += bp->s.size;
+ 94f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 952:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 955:	89 10                	mov    %edx,(%eax)
+}
+ 957:	5b                   	pop    %ebx
+ 958:	5e                   	pop    %esi
+ 959:	5f                   	pop    %edi
+ 95a:	5d                   	pop    %ebp
+ 95b:	c3                   	ret    
+ 95c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000960 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 960:	55                   	push   %ebp
+ 961:	89 e5                	mov    %esp,%ebp
+ 963:	57                   	push   %edi
+ 964:	56                   	push   %esi
+ 965:	53                   	push   %ebx
+ 966:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 969:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 96c:	8b 3d 60 0e 00 00    	mov    0xe60,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 972:	8d 70 07             	lea    0x7(%eax),%esi
+ 975:	c1 ee 03             	shr    $0x3,%esi
+ 978:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 97b:	85 ff                	test   %edi,%edi
+ 97d:	0f 84 ad 00 00 00    	je     a30 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 983:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 985:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 988:	39 f1                	cmp    %esi,%ecx
+ 98a:	73 72                	jae    9fe <malloc+0x9e>
+ 98c:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 992:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 997:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 99a:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 9a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 9a4:	eb 1b                	jmp    9c1 <malloc+0x61>
+ 9a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9ad:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9b0:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 9b2:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9b5:	39 f1                	cmp    %esi,%ecx
+ 9b7:	73 4f                	jae    a08 <malloc+0xa8>
+ 9b9:	8b 3d 60 0e 00 00    	mov    0xe60,%edi
+ 9bf:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9c1:	39 d7                	cmp    %edx,%edi
+ 9c3:	75 eb                	jne    9b0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 9c5:	83 ec 0c             	sub    $0xc,%esp
+ 9c8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 9cb:	e8 49 fc ff ff       	call   619 <sbrk>
+  if(p == (char*)-1)
+ 9d0:	83 c4 10             	add    $0x10,%esp
+ 9d3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9d6:	74 1c                	je     9f4 <malloc+0x94>
+  hp->s.size = nu;
+ 9d8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9db:	83 ec 0c             	sub    $0xc,%esp
+ 9de:	83 c0 08             	add    $0x8,%eax
+ 9e1:	50                   	push   %eax
+ 9e2:	e8 e9 fe ff ff       	call   8d0 <free>
+  return freep;
+ 9e7:	8b 15 60 0e 00 00    	mov    0xe60,%edx
+      if((p = morecore(nunits)) == 0)
+ 9ed:	83 c4 10             	add    $0x10,%esp
+ 9f0:	85 d2                	test   %edx,%edx
+ 9f2:	75 bc                	jne    9b0 <malloc+0x50>
+        return 0;
+  }
+}
+ 9f4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 9f7:	31 c0                	xor    %eax,%eax
+}
+ 9f9:	5b                   	pop    %ebx
+ 9fa:	5e                   	pop    %esi
+ 9fb:	5f                   	pop    %edi
+ 9fc:	5d                   	pop    %ebp
+ 9fd:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 9fe:	89 d0                	mov    %edx,%eax
+ a00:	89 fa                	mov    %edi,%edx
+ a02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ a08:	39 ce                	cmp    %ecx,%esi
+ a0a:	74 54                	je     a60 <malloc+0x100>
+        p->s.size -= nunits;
+ a0c:	29 f1                	sub    %esi,%ecx
+ a0e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ a11:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ a14:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ a17:	89 15 60 0e 00 00    	mov    %edx,0xe60
+}
+ a1d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a20:	83 c0 08             	add    $0x8,%eax
+}
+ a23:	5b                   	pop    %ebx
+ a24:	5e                   	pop    %esi
+ a25:	5f                   	pop    %edi
+ a26:	5d                   	pop    %ebp
+ a27:	c3                   	ret    
+ a28:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a2f:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+ a30:	c7 05 60 0e 00 00 64 	movl   $0xe64,0xe60
+ a37:	0e 00 00 
+    base.s.size = 0;
+ a3a:	bf 64 0e 00 00       	mov    $0xe64,%edi
+    base.s.ptr = freep = prevp = &base;
+ a3f:	c7 05 64 0e 00 00 64 	movl   $0xe64,0xe64
+ a46:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a49:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ a4b:	c7 05 68 0e 00 00 00 	movl   $0x0,0xe68
+ a52:	00 00 00 
+    if(p->s.size >= nunits){
+ a55:	e9 32 ff ff ff       	jmp    98c <malloc+0x2c>
+ a5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ a60:	8b 08                	mov    (%eax),%ecx
+ a62:	89 0a                	mov    %ecx,(%edx)
+ a64:	eb b1                	jmp    a17 <malloc+0xb7>
diff -urN xv6-public/grep.d xv6-public-new/grep.d
--- xv6-public/grep.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/grep.d	2019-10-04 10:45:48.592028877 +0530
@@ -0,0 +1 @@
+grep.o: grep.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/grep.o and xv6-public-new/grep.o differ
diff -urN xv6-public/grep.sym xv6-public-new/grep.sym
--- xv6-public/grep.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/grep.sym	2019-10-04 10:45:48.608028878 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+00000a68 .rodata
+00000abc .eh_frame
+00000e60 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 grep.c
+00000000 ulib.c
+00000000 printf.c
+00000640 printint
+00000aa8 digits.1101
+00000000 umalloc.c
+00000e60 freep
+00000e64 base
+00000340 strcpy
+00000700 printf
+00000560 memmove
+00000110 matchhere
+000005d9 mknod
+00000450 gets
+00000611 getpid
+00000230 grep
+00000960 malloc
+00000621 sleep
+000005a1 pipe
+000005b1 write
+000005e9 fstat
+000005c1 kill
+00000601 chdir
+000005c9 exec
+00000599 wait
+000005a9 read
+000005e1 unlink
+00000589 fork
+00000619 sbrk
+00000629 uptime
+00000e44 __bss_start
+000003f0 memset
+00000000 main
+000000b0 matchstar
+00000370 strcmp
+00000609 dup
+00000e80 buf
+000004d0 stat
+00000e44 _edata
+00001280 _end
+000001d0 match
+000005f1 link
+00000591 exit
+00000520 atoi
+000003c0 strlen
+000005d1 open
+00000410 strchr
+000005f9 mkdir
+000005b9 close
+000008d0 free
Binary files xv6-public/_head and xv6-public-new/_head differ
diff -urN xv6-public/head.asm xv6-public-new/head.asm
--- xv6-public/head.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/head.asm	2019-10-04 15:56:07.364546186 +0530
@@ -0,0 +1,1248 @@
+
+_head:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+	char buff1[512];
+	//gets(buff,512);
+	int fd,count = 0,n;
+   f:	31 f6                	xor    %esi,%esi
+{
+  11:	53                   	push   %ebx
+  12:	8d 5d e8             	lea    -0x18(%ebp),%ebx
+  15:	51                   	push   %ecx
+  16:	81 ec 20 02 00 00    	sub    $0x220,%esp
+  1c:	8b 79 04             	mov    0x4(%ecx),%edi
+	if((fd = open(argv[1], 0)) < 0){
+  1f:	6a 00                	push   $0x0
+  21:	ff 77 04             	pushl  0x4(%edi)
+  24:	e8 48 03 00 00       	call   371 <open>
+  29:	83 c4 10             	add    $0x10,%esp
+  2c:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
+  32:	85 c0                	test   %eax,%eax
+  34:	0f 88 8b 00 00 00    	js     c5 <main+0xc5>
+  3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      printf(1, "head: cannot open %s\n", argv[1]);
+      exit();
+    }
+	//printf(1,"%s\n", buff);
+	while((n = read(fd, buff1, sizeof(buff1))) > 0) {
+  40:	83 ec 04             	sub    $0x4,%esp
+  43:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
+  49:	68 00 02 00 00       	push   $0x200
+  4e:	50                   	push   %eax
+  4f:	ff b5 e4 fd ff ff    	pushl  -0x21c(%ebp)
+  55:	e8 ef 02 00 00       	call   349 <read>
+  5a:	83 c4 10             	add    $0x10,%esp
+  5d:	85 c0                	test   %eax,%eax
+  5f:	7e 3c                	jle    9d <main+0x9d>
+  61:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
+  67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  6e:	66 90                	xchg   %ax,%ax
+		int i;
+     for(i = 0;i < sizeof(buff1);i++)
+     {
+     	if(buff1[i] == '\n')
+  70:	0f be 07             	movsbl (%edi),%eax
+     	{
+     		count++;
+  73:	31 d2                	xor    %edx,%edx
+  75:	3c 0a                	cmp    $0xa,%al
+  77:	0f 94 c2             	sete   %dl
+  7a:	01 d6                	add    %edx,%esi
+     	}
+     	if(count <= 10)
+  7c:	83 fe 0a             	cmp    $0xa,%esi
+  7f:	7f bf                	jg     40 <main+0x40>
+     	{
+     		printf(1,"%c",buff1[i]);
+  81:	83 ec 04             	sub    $0x4,%esp
+  84:	83 c7 01             	add    $0x1,%edi
+  87:	50                   	push   %eax
+  88:	68 1e 08 00 00       	push   $0x81e
+  8d:	6a 01                	push   $0x1
+  8f:	e8 0c 04 00 00       	call   4a0 <printf>
+     for(i = 0;i < sizeof(buff1);i++)
+  94:	83 c4 10             	add    $0x10,%esp
+  97:	39 df                	cmp    %ebx,%edi
+  99:	75 d5                	jne    70 <main+0x70>
+  9b:	eb a3                	jmp    40 <main+0x40>
+     	{
+     		break;
+     	}
+     }
+ }
+	if(n < 0){
+  9d:	75 13                	jne    b2 <main+0xb2>
+    printf(1, "head: read error\n");
+    exit();
+  }
+	close(fd);
+  9f:	83 ec 0c             	sub    $0xc,%esp
+  a2:	ff b5 e4 fd ff ff    	pushl  -0x21c(%ebp)
+  a8:	e8 ac 02 00 00       	call   359 <close>
+	exit();
+  ad:	e8 7f 02 00 00       	call   331 <exit>
+    printf(1, "head: read error\n");
+  b2:	50                   	push   %eax
+  b3:	50                   	push   %eax
+  b4:	68 21 08 00 00       	push   $0x821
+  b9:	6a 01                	push   $0x1
+  bb:	e8 e0 03 00 00       	call   4a0 <printf>
+    exit();
+  c0:	e8 6c 02 00 00       	call   331 <exit>
+      printf(1, "head: cannot open %s\n", argv[1]);
+  c5:	52                   	push   %edx
+  c6:	ff 77 04             	pushl  0x4(%edi)
+  c9:	68 08 08 00 00       	push   $0x808
+  ce:	6a 01                	push   $0x1
+  d0:	e8 cb 03 00 00       	call   4a0 <printf>
+      exit();
+  d5:	e8 57 02 00 00       	call   331 <exit>
+  da:	66 90                	xchg   %ax,%ax
+  dc:	66 90                	xchg   %ax,%ax
+  de:	66 90                	xchg   %ax,%ax
+
+000000e0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  e0:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  e1:	31 d2                	xor    %edx,%edx
+{
+  e3:	89 e5                	mov    %esp,%ebp
+  e5:	53                   	push   %ebx
+  e6:	8b 45 08             	mov    0x8(%ebp),%eax
+  e9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  f0:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+  f4:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+  f7:	83 c2 01             	add    $0x1,%edx
+  fa:	84 c9                	test   %cl,%cl
+  fc:	75 f2                	jne    f0 <strcpy+0x10>
+    ;
+  return os;
+}
+  fe:	5b                   	pop    %ebx
+  ff:	5d                   	pop    %ebp
+ 100:	c3                   	ret    
+ 101:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 108:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10f:	90                   	nop
+
+00000110 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	56                   	push   %esi
+ 114:	53                   	push   %ebx
+ 115:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 118:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+ 11b:	0f b6 13             	movzbl (%ebx),%edx
+ 11e:	0f b6 0e             	movzbl (%esi),%ecx
+ 121:	84 d2                	test   %dl,%dl
+ 123:	74 1e                	je     143 <strcmp+0x33>
+ 125:	b8 01 00 00 00       	mov    $0x1,%eax
+ 12a:	38 ca                	cmp    %cl,%dl
+ 12c:	74 09                	je     137 <strcmp+0x27>
+ 12e:	eb 20                	jmp    150 <strcmp+0x40>
+ 130:	83 c0 01             	add    $0x1,%eax
+ 133:	38 ca                	cmp    %cl,%dl
+ 135:	75 19                	jne    150 <strcmp+0x40>
+ 137:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 13b:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+ 13f:	84 d2                	test   %dl,%dl
+ 141:	75 ed                	jne    130 <strcmp+0x20>
+ 143:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+ 145:	5b                   	pop    %ebx
+ 146:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 147:	29 c8                	sub    %ecx,%eax
+}
+ 149:	5d                   	pop    %ebp
+ 14a:	c3                   	ret    
+ 14b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 14f:	90                   	nop
+ 150:	0f b6 c2             	movzbl %dl,%eax
+ 153:	5b                   	pop    %ebx
+ 154:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 155:	29 c8                	sub    %ecx,%eax
+}
+ 157:	5d                   	pop    %ebp
+ 158:	c3                   	ret    
+ 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000160 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 160:	55                   	push   %ebp
+ 161:	89 e5                	mov    %esp,%ebp
+ 163:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 166:	80 39 00             	cmpb   $0x0,(%ecx)
+ 169:	74 15                	je     180 <strlen+0x20>
+ 16b:	31 d2                	xor    %edx,%edx
+ 16d:	8d 76 00             	lea    0x0(%esi),%esi
+ 170:	83 c2 01             	add    $0x1,%edx
+ 173:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 177:	89 d0                	mov    %edx,%eax
+ 179:	75 f5                	jne    170 <strlen+0x10>
+    ;
+  return n;
+}
+ 17b:	5d                   	pop    %ebp
+ 17c:	c3                   	ret    
+ 17d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 180:	31 c0                	xor    %eax,%eax
+}
+ 182:	5d                   	pop    %ebp
+ 183:	c3                   	ret    
+ 184:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 18b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 18f:	90                   	nop
+
+00000190 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	57                   	push   %edi
+ 194:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 197:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 19a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 19d:	89 d7                	mov    %edx,%edi
+ 19f:	fc                   	cld    
+ 1a0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1a2:	89 d0                	mov    %edx,%eax
+ 1a4:	5f                   	pop    %edi
+ 1a5:	5d                   	pop    %ebp
+ 1a6:	c3                   	ret    
+ 1a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ae:	66 90                	xchg   %ax,%ax
+
+000001b0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1b0:	55                   	push   %ebp
+ 1b1:	89 e5                	mov    %esp,%ebp
+ 1b3:	53                   	push   %ebx
+ 1b4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1b7:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 1ba:	0f b6 18             	movzbl (%eax),%ebx
+ 1bd:	84 db                	test   %bl,%bl
+ 1bf:	74 1d                	je     1de <strchr+0x2e>
+ 1c1:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 1c3:	38 d3                	cmp    %dl,%bl
+ 1c5:	75 0d                	jne    1d4 <strchr+0x24>
+ 1c7:	eb 17                	jmp    1e0 <strchr+0x30>
+ 1c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1d0:	38 ca                	cmp    %cl,%dl
+ 1d2:	74 0c                	je     1e0 <strchr+0x30>
+  for(; *s; s++)
+ 1d4:	83 c0 01             	add    $0x1,%eax
+ 1d7:	0f b6 10             	movzbl (%eax),%edx
+ 1da:	84 d2                	test   %dl,%dl
+ 1dc:	75 f2                	jne    1d0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 1de:	31 c0                	xor    %eax,%eax
+}
+ 1e0:	5b                   	pop    %ebx
+ 1e1:	5d                   	pop    %ebp
+ 1e2:	c3                   	ret    
+ 1e3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000001f0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	57                   	push   %edi
+ 1f4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1f5:	31 f6                	xor    %esi,%esi
+{
+ 1f7:	53                   	push   %ebx
+ 1f8:	89 f3                	mov    %esi,%ebx
+ 1fa:	83 ec 1c             	sub    $0x1c,%esp
+ 1fd:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 200:	eb 2f                	jmp    231 <gets+0x41>
+ 202:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 208:	83 ec 04             	sub    $0x4,%esp
+ 20b:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 20e:	6a 01                	push   $0x1
+ 210:	50                   	push   %eax
+ 211:	6a 00                	push   $0x0
+ 213:	e8 31 01 00 00       	call   349 <read>
+    if(cc < 1)
+ 218:	83 c4 10             	add    $0x10,%esp
+ 21b:	85 c0                	test   %eax,%eax
+ 21d:	7e 1c                	jle    23b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 21f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 223:	83 c7 01             	add    $0x1,%edi
+ 226:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 229:	3c 0a                	cmp    $0xa,%al
+ 22b:	74 23                	je     250 <gets+0x60>
+ 22d:	3c 0d                	cmp    $0xd,%al
+ 22f:	74 1f                	je     250 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 231:	83 c3 01             	add    $0x1,%ebx
+ 234:	89 fe                	mov    %edi,%esi
+ 236:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 239:	7c cd                	jl     208 <gets+0x18>
+ 23b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 23d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 240:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 243:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 246:	5b                   	pop    %ebx
+ 247:	5e                   	pop    %esi
+ 248:	5f                   	pop    %edi
+ 249:	5d                   	pop    %ebp
+ 24a:	c3                   	ret    
+ 24b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 24f:	90                   	nop
+ 250:	8b 75 08             	mov    0x8(%ebp),%esi
+ 253:	8b 45 08             	mov    0x8(%ebp),%eax
+ 256:	01 de                	add    %ebx,%esi
+ 258:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 25a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 25d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 260:	5b                   	pop    %ebx
+ 261:	5e                   	pop    %esi
+ 262:	5f                   	pop    %edi
+ 263:	5d                   	pop    %ebp
+ 264:	c3                   	ret    
+ 265:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 26c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000270 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 270:	55                   	push   %ebp
+ 271:	89 e5                	mov    %esp,%ebp
+ 273:	56                   	push   %esi
+ 274:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 275:	83 ec 08             	sub    $0x8,%esp
+ 278:	6a 00                	push   $0x0
+ 27a:	ff 75 08             	pushl  0x8(%ebp)
+ 27d:	e8 ef 00 00 00       	call   371 <open>
+  if(fd < 0)
+ 282:	83 c4 10             	add    $0x10,%esp
+ 285:	85 c0                	test   %eax,%eax
+ 287:	78 27                	js     2b0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 289:	83 ec 08             	sub    $0x8,%esp
+ 28c:	ff 75 0c             	pushl  0xc(%ebp)
+ 28f:	89 c3                	mov    %eax,%ebx
+ 291:	50                   	push   %eax
+ 292:	e8 f2 00 00 00       	call   389 <fstat>
+  close(fd);
+ 297:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 29a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 29c:	e8 b8 00 00 00       	call   359 <close>
+  return r;
+ 2a1:	83 c4 10             	add    $0x10,%esp
+}
+ 2a4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2a7:	89 f0                	mov    %esi,%eax
+ 2a9:	5b                   	pop    %ebx
+ 2aa:	5e                   	pop    %esi
+ 2ab:	5d                   	pop    %ebp
+ 2ac:	c3                   	ret    
+ 2ad:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 2b0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2b5:	eb ed                	jmp    2a4 <stat+0x34>
+ 2b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2be:	66 90                	xchg   %ax,%ax
+
+000002c0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2c0:	55                   	push   %ebp
+ 2c1:	89 e5                	mov    %esp,%ebp
+ 2c3:	53                   	push   %ebx
+ 2c4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2c7:	0f be 11             	movsbl (%ecx),%edx
+ 2ca:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 2cd:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 2cf:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 2d4:	77 1f                	ja     2f5 <atoi+0x35>
+ 2d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2dd:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 2e0:	83 c1 01             	add    $0x1,%ecx
+ 2e3:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 2e6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 2ea:	0f be 11             	movsbl (%ecx),%edx
+ 2ed:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 2f0:	80 fb 09             	cmp    $0x9,%bl
+ 2f3:	76 eb                	jbe    2e0 <atoi+0x20>
+  return n;
+}
+ 2f5:	5b                   	pop    %ebx
+ 2f6:	5d                   	pop    %ebp
+ 2f7:	c3                   	ret    
+ 2f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ff:	90                   	nop
+
+00000300 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 300:	55                   	push   %ebp
+ 301:	89 e5                	mov    %esp,%ebp
+ 303:	57                   	push   %edi
+ 304:	8b 55 10             	mov    0x10(%ebp),%edx
+ 307:	8b 45 08             	mov    0x8(%ebp),%eax
+ 30a:	56                   	push   %esi
+ 30b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 30e:	85 d2                	test   %edx,%edx
+ 310:	7e 13                	jle    325 <memmove+0x25>
+ 312:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 314:	89 c7                	mov    %eax,%edi
+ 316:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 31d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 320:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 321:	39 fa                	cmp    %edi,%edx
+ 323:	75 fb                	jne    320 <memmove+0x20>
+  return vdst;
+}
+ 325:	5e                   	pop    %esi
+ 326:	5f                   	pop    %edi
+ 327:	5d                   	pop    %ebp
+ 328:	c3                   	ret    
+
+00000329 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 329:	b8 01 00 00 00       	mov    $0x1,%eax
+ 32e:	cd 40                	int    $0x40
+ 330:	c3                   	ret    
+
+00000331 <exit>:
+SYSCALL(exit)
+ 331:	b8 02 00 00 00       	mov    $0x2,%eax
+ 336:	cd 40                	int    $0x40
+ 338:	c3                   	ret    
+
+00000339 <wait>:
+SYSCALL(wait)
+ 339:	b8 03 00 00 00       	mov    $0x3,%eax
+ 33e:	cd 40                	int    $0x40
+ 340:	c3                   	ret    
+
+00000341 <pipe>:
+SYSCALL(pipe)
+ 341:	b8 04 00 00 00       	mov    $0x4,%eax
+ 346:	cd 40                	int    $0x40
+ 348:	c3                   	ret    
+
+00000349 <read>:
+SYSCALL(read)
+ 349:	b8 05 00 00 00       	mov    $0x5,%eax
+ 34e:	cd 40                	int    $0x40
+ 350:	c3                   	ret    
+
+00000351 <write>:
+SYSCALL(write)
+ 351:	b8 10 00 00 00       	mov    $0x10,%eax
+ 356:	cd 40                	int    $0x40
+ 358:	c3                   	ret    
+
+00000359 <close>:
+SYSCALL(close)
+ 359:	b8 15 00 00 00       	mov    $0x15,%eax
+ 35e:	cd 40                	int    $0x40
+ 360:	c3                   	ret    
+
+00000361 <kill>:
+SYSCALL(kill)
+ 361:	b8 06 00 00 00       	mov    $0x6,%eax
+ 366:	cd 40                	int    $0x40
+ 368:	c3                   	ret    
+
+00000369 <exec>:
+SYSCALL(exec)
+ 369:	b8 07 00 00 00       	mov    $0x7,%eax
+ 36e:	cd 40                	int    $0x40
+ 370:	c3                   	ret    
+
+00000371 <open>:
+SYSCALL(open)
+ 371:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 376:	cd 40                	int    $0x40
+ 378:	c3                   	ret    
+
+00000379 <mknod>:
+SYSCALL(mknod)
+ 379:	b8 11 00 00 00       	mov    $0x11,%eax
+ 37e:	cd 40                	int    $0x40
+ 380:	c3                   	ret    
+
+00000381 <unlink>:
+SYSCALL(unlink)
+ 381:	b8 12 00 00 00       	mov    $0x12,%eax
+ 386:	cd 40                	int    $0x40
+ 388:	c3                   	ret    
+
+00000389 <fstat>:
+SYSCALL(fstat)
+ 389:	b8 08 00 00 00       	mov    $0x8,%eax
+ 38e:	cd 40                	int    $0x40
+ 390:	c3                   	ret    
+
+00000391 <link>:
+SYSCALL(link)
+ 391:	b8 13 00 00 00       	mov    $0x13,%eax
+ 396:	cd 40                	int    $0x40
+ 398:	c3                   	ret    
+
+00000399 <mkdir>:
+SYSCALL(mkdir)
+ 399:	b8 14 00 00 00       	mov    $0x14,%eax
+ 39e:	cd 40                	int    $0x40
+ 3a0:	c3                   	ret    
+
+000003a1 <chdir>:
+SYSCALL(chdir)
+ 3a1:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3a6:	cd 40                	int    $0x40
+ 3a8:	c3                   	ret    
+
+000003a9 <dup>:
+SYSCALL(dup)
+ 3a9:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3ae:	cd 40                	int    $0x40
+ 3b0:	c3                   	ret    
+
+000003b1 <getpid>:
+SYSCALL(getpid)
+ 3b1:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3b6:	cd 40                	int    $0x40
+ 3b8:	c3                   	ret    
+
+000003b9 <sbrk>:
+SYSCALL(sbrk)
+ 3b9:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3be:	cd 40                	int    $0x40
+ 3c0:	c3                   	ret    
+
+000003c1 <sleep>:
+SYSCALL(sleep)
+ 3c1:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3c6:	cd 40                	int    $0x40
+ 3c8:	c3                   	ret    
+
+000003c9 <uptime>:
+SYSCALL(uptime)
+ 3c9:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3ce:	cd 40                	int    $0x40
+ 3d0:	c3                   	ret    
+ 3d1:	66 90                	xchg   %ax,%ax
+ 3d3:	66 90                	xchg   %ax,%ax
+ 3d5:	66 90                	xchg   %ax,%ax
+ 3d7:	66 90                	xchg   %ax,%ax
+ 3d9:	66 90                	xchg   %ax,%ax
+ 3db:	66 90                	xchg   %ax,%ax
+ 3dd:	66 90                	xchg   %ax,%ax
+ 3df:	90                   	nop
+
+000003e0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3e0:	55                   	push   %ebp
+ 3e1:	89 e5                	mov    %esp,%ebp
+ 3e3:	57                   	push   %edi
+ 3e4:	56                   	push   %esi
+ 3e5:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3e6:	89 d3                	mov    %edx,%ebx
+{
+ 3e8:	83 ec 3c             	sub    $0x3c,%esp
+ 3eb:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+ 3ee:	85 d2                	test   %edx,%edx
+ 3f0:	0f 89 92 00 00 00    	jns    488 <printint+0xa8>
+ 3f6:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3fa:	0f 84 88 00 00 00    	je     488 <printint+0xa8>
+    neg = 1;
+ 400:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+ 407:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 409:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 410:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 413:	eb 08                	jmp    41d <printint+0x3d>
+ 415:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 418:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+ 41b:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+ 41d:	89 d8                	mov    %ebx,%eax
+ 41f:	31 d2                	xor    %edx,%edx
+ 421:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 424:	f7 f1                	div    %ecx
+ 426:	83 c7 01             	add    $0x1,%edi
+ 429:	0f b6 92 3c 08 00 00 	movzbl 0x83c(%edx),%edx
+ 430:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+ 433:	39 d9                	cmp    %ebx,%ecx
+ 435:	76 e1                	jbe    418 <printint+0x38>
+  if(neg)
+ 437:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 43a:	85 c0                	test   %eax,%eax
+ 43c:	74 0d                	je     44b <printint+0x6b>
+    buf[i++] = '-';
+ 43e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 443:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+ 448:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 44b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 44e:	8b 7d bc             	mov    -0x44(%ebp),%edi
+ 451:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 455:	eb 0f                	jmp    466 <printint+0x86>
+ 457:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45e:	66 90                	xchg   %ax,%ax
+ 460:	0f b6 13             	movzbl (%ebx),%edx
+ 463:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 466:	83 ec 04             	sub    $0x4,%esp
+ 469:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 46c:	6a 01                	push   $0x1
+ 46e:	56                   	push   %esi
+ 46f:	57                   	push   %edi
+ 470:	e8 dc fe ff ff       	call   351 <write>
+
+  while(--i >= 0)
+ 475:	83 c4 10             	add    $0x10,%esp
+ 478:	39 de                	cmp    %ebx,%esi
+ 47a:	75 e4                	jne    460 <printint+0x80>
+    putc(fd, buf[i]);
+}
+ 47c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 47f:	5b                   	pop    %ebx
+ 480:	5e                   	pop    %esi
+ 481:	5f                   	pop    %edi
+ 482:	5d                   	pop    %ebp
+ 483:	c3                   	ret    
+ 484:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 488:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+ 48f:	e9 75 ff ff ff       	jmp    409 <printint+0x29>
+ 494:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 49b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 49f:	90                   	nop
+
+000004a0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4a0:	55                   	push   %ebp
+ 4a1:	89 e5                	mov    %esp,%ebp
+ 4a3:	57                   	push   %edi
+ 4a4:	56                   	push   %esi
+ 4a5:	53                   	push   %ebx
+ 4a6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4a9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4ac:	0f b6 1e             	movzbl (%esi),%ebx
+ 4af:	84 db                	test   %bl,%bl
+ 4b1:	0f 84 b9 00 00 00    	je     570 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+ 4b7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4ba:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 4bd:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 4c0:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 4c2:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4c5:	eb 38                	jmp    4ff <printf+0x5f>
+ 4c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ce:	66 90                	xchg   %ax,%ax
+ 4d0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 4d3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 4d8:	83 f8 25             	cmp    $0x25,%eax
+ 4db:	74 17                	je     4f4 <printf+0x54>
+  write(fd, &c, 1);
+ 4dd:	83 ec 04             	sub    $0x4,%esp
+ 4e0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4e3:	6a 01                	push   $0x1
+ 4e5:	57                   	push   %edi
+ 4e6:	ff 75 08             	pushl  0x8(%ebp)
+ 4e9:	e8 63 fe ff ff       	call   351 <write>
+ 4ee:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4f1:	83 c4 10             	add    $0x10,%esp
+ 4f4:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 4f7:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4fb:	84 db                	test   %bl,%bl
+ 4fd:	74 71                	je     570 <printf+0xd0>
+    c = fmt[i] & 0xff;
+ 4ff:	0f be cb             	movsbl %bl,%ecx
+ 502:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 505:	85 d2                	test   %edx,%edx
+ 507:	74 c7                	je     4d0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 509:	83 fa 25             	cmp    $0x25,%edx
+ 50c:	75 e6                	jne    4f4 <printf+0x54>
+      if(c == 'd'){
+ 50e:	83 f8 64             	cmp    $0x64,%eax
+ 511:	0f 84 99 00 00 00    	je     5b0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 517:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 51d:	83 f9 70             	cmp    $0x70,%ecx
+ 520:	74 5e                	je     580 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 522:	83 f8 73             	cmp    $0x73,%eax
+ 525:	0f 84 d5 00 00 00    	je     600 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 52b:	83 f8 63             	cmp    $0x63,%eax
+ 52e:	0f 84 8c 00 00 00    	je     5c0 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 534:	83 f8 25             	cmp    $0x25,%eax
+ 537:	0f 84 b3 00 00 00    	je     5f0 <printf+0x150>
+  write(fd, &c, 1);
+ 53d:	83 ec 04             	sub    $0x4,%esp
+ 540:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 544:	6a 01                	push   $0x1
+ 546:	57                   	push   %edi
+ 547:	ff 75 08             	pushl  0x8(%ebp)
+ 54a:	e8 02 fe ff ff       	call   351 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 54f:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 552:	83 c4 0c             	add    $0xc,%esp
+ 555:	6a 01                	push   $0x1
+ 557:	83 c6 01             	add    $0x1,%esi
+ 55a:	57                   	push   %edi
+ 55b:	ff 75 08             	pushl  0x8(%ebp)
+ 55e:	e8 ee fd ff ff       	call   351 <write>
+  for(i = 0; fmt[i]; i++){
+ 563:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 567:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 56a:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 56c:	84 db                	test   %bl,%bl
+ 56e:	75 8f                	jne    4ff <printf+0x5f>
+    }
+  }
+}
+ 570:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 573:	5b                   	pop    %ebx
+ 574:	5e                   	pop    %esi
+ 575:	5f                   	pop    %edi
+ 576:	5d                   	pop    %ebp
+ 577:	c3                   	ret    
+ 578:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57f:	90                   	nop
+        printint(fd, *ap, 16, 0);
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 588:	6a 00                	push   $0x0
+ 58a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 58d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 590:	8b 13                	mov    (%ebx),%edx
+ 592:	e8 49 fe ff ff       	call   3e0 <printint>
+        ap++;
+ 597:	89 d8                	mov    %ebx,%eax
+ 599:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 59e:	83 c0 04             	add    $0x4,%eax
+ 5a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5a4:	e9 4b ff ff ff       	jmp    4f4 <printf+0x54>
+ 5a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 5b0:	83 ec 0c             	sub    $0xc,%esp
+ 5b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5b8:	6a 01                	push   $0x1
+ 5ba:	eb ce                	jmp    58a <printf+0xea>
+ 5bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 5c0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 5c3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5c6:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 5c8:	6a 01                	push   $0x1
+        ap++;
+ 5ca:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 5cd:	57                   	push   %edi
+ 5ce:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 5d1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5d4:	e8 78 fd ff ff       	call   351 <write>
+        ap++;
+ 5d9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 5dc:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5df:	31 d2                	xor    %edx,%edx
+ 5e1:	e9 0e ff ff ff       	jmp    4f4 <printf+0x54>
+ 5e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ed:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5f0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5f3:	83 ec 04             	sub    $0x4,%esp
+ 5f6:	e9 5a ff ff ff       	jmp    555 <printf+0xb5>
+ 5fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5ff:	90                   	nop
+        s = (char*)*ap;
+ 600:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 603:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 605:	83 c0 04             	add    $0x4,%eax
+ 608:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 60b:	85 db                	test   %ebx,%ebx
+ 60d:	74 17                	je     626 <printf+0x186>
+        while(*s != 0){
+ 60f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 612:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 614:	84 c0                	test   %al,%al
+ 616:	0f 84 d8 fe ff ff    	je     4f4 <printf+0x54>
+ 61c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 61f:	89 de                	mov    %ebx,%esi
+ 621:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 624:	eb 1a                	jmp    640 <printf+0x1a0>
+          s = "(null)";
+ 626:	bb 33 08 00 00       	mov    $0x833,%ebx
+        while(*s != 0){
+ 62b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 62e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 633:	89 de                	mov    %ebx,%esi
+ 635:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 638:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+  write(fd, &c, 1);
+ 640:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 643:	83 c6 01             	add    $0x1,%esi
+ 646:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 649:	6a 01                	push   $0x1
+ 64b:	57                   	push   %edi
+ 64c:	53                   	push   %ebx
+ 64d:	e8 ff fc ff ff       	call   351 <write>
+        while(*s != 0){
+ 652:	0f b6 06             	movzbl (%esi),%eax
+ 655:	83 c4 10             	add    $0x10,%esp
+ 658:	84 c0                	test   %al,%al
+ 65a:	75 e4                	jne    640 <printf+0x1a0>
+ 65c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 65f:	31 d2                	xor    %edx,%edx
+ 661:	e9 8e fe ff ff       	jmp    4f4 <printf+0x54>
+ 666:	66 90                	xchg   %ax,%ax
+ 668:	66 90                	xchg   %ax,%ax
+ 66a:	66 90                	xchg   %ax,%ax
+ 66c:	66 90                	xchg   %ax,%ax
+ 66e:	66 90                	xchg   %ax,%ax
+
+00000670 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 670:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 671:	a1 f4 0a 00 00       	mov    0xaf4,%eax
+{
+ 676:	89 e5                	mov    %esp,%ebp
+ 678:	57                   	push   %edi
+ 679:	56                   	push   %esi
+ 67a:	53                   	push   %ebx
+ 67b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 67e:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 680:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 683:	39 c8                	cmp    %ecx,%eax
+ 685:	73 19                	jae    6a0 <free+0x30>
+ 687:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 68e:	66 90                	xchg   %ax,%ax
+ 690:	39 d1                	cmp    %edx,%ecx
+ 692:	72 14                	jb     6a8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 694:	39 d0                	cmp    %edx,%eax
+ 696:	73 10                	jae    6a8 <free+0x38>
+{
+ 698:	89 d0                	mov    %edx,%eax
+ 69a:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 69c:	39 c8                	cmp    %ecx,%eax
+ 69e:	72 f0                	jb     690 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6a0:	39 d0                	cmp    %edx,%eax
+ 6a2:	72 f4                	jb     698 <free+0x28>
+ 6a4:	39 d1                	cmp    %edx,%ecx
+ 6a6:	73 f0                	jae    698 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6a8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6ab:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ae:	39 fa                	cmp    %edi,%edx
+ 6b0:	74 1e                	je     6d0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6b2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6b5:	8b 50 04             	mov    0x4(%eax),%edx
+ 6b8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6bb:	39 f1                	cmp    %esi,%ecx
+ 6bd:	74 28                	je     6e7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6bf:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 6c1:	5b                   	pop    %ebx
+  freep = p;
+ 6c2:	a3 f4 0a 00 00       	mov    %eax,0xaf4
+}
+ 6c7:	5e                   	pop    %esi
+ 6c8:	5f                   	pop    %edi
+ 6c9:	5d                   	pop    %ebp
+ 6ca:	c3                   	ret    
+ 6cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6cf:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 6d0:	03 72 04             	add    0x4(%edx),%esi
+ 6d3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6d6:	8b 10                	mov    (%eax),%edx
+ 6d8:	8b 12                	mov    (%edx),%edx
+ 6da:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6dd:	8b 50 04             	mov    0x4(%eax),%edx
+ 6e0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6e3:	39 f1                	cmp    %esi,%ecx
+ 6e5:	75 d8                	jne    6bf <free+0x4f>
+    p->s.size += bp->s.size;
+ 6e7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6ea:	a3 f4 0a 00 00       	mov    %eax,0xaf4
+    p->s.size += bp->s.size;
+ 6ef:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6f2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6f5:	89 10                	mov    %edx,(%eax)
+}
+ 6f7:	5b                   	pop    %ebx
+ 6f8:	5e                   	pop    %esi
+ 6f9:	5f                   	pop    %edi
+ 6fa:	5d                   	pop    %ebp
+ 6fb:	c3                   	ret    
+ 6fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000700 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 700:	55                   	push   %ebp
+ 701:	89 e5                	mov    %esp,%ebp
+ 703:	57                   	push   %edi
+ 704:	56                   	push   %esi
+ 705:	53                   	push   %ebx
+ 706:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 709:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 70c:	8b 3d f4 0a 00 00    	mov    0xaf4,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 712:	8d 70 07             	lea    0x7(%eax),%esi
+ 715:	c1 ee 03             	shr    $0x3,%esi
+ 718:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 71b:	85 ff                	test   %edi,%edi
+ 71d:	0f 84 ad 00 00 00    	je     7d0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 723:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 725:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 728:	39 f1                	cmp    %esi,%ecx
+ 72a:	73 72                	jae    79e <malloc+0x9e>
+ 72c:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 732:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 737:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 73a:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 741:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 744:	eb 1b                	jmp    761 <malloc+0x61>
+ 746:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 74d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 750:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 752:	8b 48 04             	mov    0x4(%eax),%ecx
+ 755:	39 f1                	cmp    %esi,%ecx
+ 757:	73 4f                	jae    7a8 <malloc+0xa8>
+ 759:	8b 3d f4 0a 00 00    	mov    0xaf4,%edi
+ 75f:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 761:	39 d7                	cmp    %edx,%edi
+ 763:	75 eb                	jne    750 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 765:	83 ec 0c             	sub    $0xc,%esp
+ 768:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 76b:	e8 49 fc ff ff       	call   3b9 <sbrk>
+  if(p == (char*)-1)
+ 770:	83 c4 10             	add    $0x10,%esp
+ 773:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 776:	74 1c                	je     794 <malloc+0x94>
+  hp->s.size = nu;
+ 778:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 77b:	83 ec 0c             	sub    $0xc,%esp
+ 77e:	83 c0 08             	add    $0x8,%eax
+ 781:	50                   	push   %eax
+ 782:	e8 e9 fe ff ff       	call   670 <free>
+  return freep;
+ 787:	8b 15 f4 0a 00 00    	mov    0xaf4,%edx
+      if((p = morecore(nunits)) == 0)
+ 78d:	83 c4 10             	add    $0x10,%esp
+ 790:	85 d2                	test   %edx,%edx
+ 792:	75 bc                	jne    750 <malloc+0x50>
+        return 0;
+  }
+}
+ 794:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 797:	31 c0                	xor    %eax,%eax
+}
+ 799:	5b                   	pop    %ebx
+ 79a:	5e                   	pop    %esi
+ 79b:	5f                   	pop    %edi
+ 79c:	5d                   	pop    %ebp
+ 79d:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 79e:	89 d0                	mov    %edx,%eax
+ 7a0:	89 fa                	mov    %edi,%edx
+ 7a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 7a8:	39 ce                	cmp    %ecx,%esi
+ 7aa:	74 54                	je     800 <malloc+0x100>
+        p->s.size -= nunits;
+ 7ac:	29 f1                	sub    %esi,%ecx
+ 7ae:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 7b1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 7b4:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 7b7:	89 15 f4 0a 00 00    	mov    %edx,0xaf4
+}
+ 7bd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7c0:	83 c0 08             	add    $0x8,%eax
+}
+ 7c3:	5b                   	pop    %ebx
+ 7c4:	5e                   	pop    %esi
+ 7c5:	5f                   	pop    %edi
+ 7c6:	5d                   	pop    %ebp
+ 7c7:	c3                   	ret    
+ 7c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7cf:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+ 7d0:	c7 05 f4 0a 00 00 f8 	movl   $0xaf8,0xaf4
+ 7d7:	0a 00 00 
+    base.s.size = 0;
+ 7da:	bf f8 0a 00 00       	mov    $0xaf8,%edi
+    base.s.ptr = freep = prevp = &base;
+ 7df:	c7 05 f8 0a 00 00 f8 	movl   $0xaf8,0xaf8
+ 7e6:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7e9:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 7eb:	c7 05 fc 0a 00 00 00 	movl   $0x0,0xafc
+ 7f2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7f5:	e9 32 ff ff ff       	jmp    72c <malloc+0x2c>
+ 7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 800:	8b 08                	mov    (%eax),%ecx
+ 802:	89 0a                	mov    %ecx,(%edx)
+ 804:	eb b1                	jmp    7b7 <malloc+0xb7>
diff -urN xv6-public/head.c xv6-public-new/head.c
--- xv6-public/head.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/head.c	2019-10-04 15:55:54.252545561 +0530
@@ -0,0 +1,40 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+	char buff1[512];
+	//gets(buff,512);
+	int fd,count = 0,n;
+	if((fd = open(argv[1], 0)) < 0){
+      printf(1, "head: cannot open %s\n", argv[1]);
+      exit();
+    }
+	//printf(1,"%s\n", buff);
+	while((n = read(fd, buff1, sizeof(buff1))) > 0) {
+		int i;
+     for(i = 0;i < sizeof(buff1);i++)
+     {
+     	if(buff1[i] == '\n')
+     	{
+     		count++;
+     	}
+     	if(count <= 10)
+     	{
+     		printf(1,"%c",buff1[i]);
+     	}
+     	else
+     	{
+     		break;
+     	}
+     }
+ }
+	if(n < 0){
+    printf(1, "head: read error\n");
+    exit();
+  }
+	close(fd);
+	exit();
+}
\ No newline at end of file
diff -urN xv6-public/head.d xv6-public-new/head.d
--- xv6-public/head.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/head.d	2019-10-04 15:56:07.348546185 +0530
@@ -0,0 +1 @@
+head.o: head.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/head.o and xv6-public-new/head.o differ
diff -urN xv6-public/head.sym xv6-public-new/head.sym
--- xv6-public/head.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/head.sym	2019-10-04 15:56:07.368546186 +0530
@@ -0,0 +1,57 @@
+00000000 .text
+00000808 .rodata
+00000850 .eh_frame
+00000af4 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 head.c
+00000000 ulib.c
+00000000 printf.c
+000003e0 printint
+0000083c digits.1101
+00000000 umalloc.c
+00000af4 freep
+00000af8 base
+000000e0 strcpy
+000004a0 printf
+00000300 memmove
+00000379 mknod
+000001f0 gets
+000003b1 getpid
+00000700 malloc
+000003c1 sleep
+00000341 pipe
+00000351 write
+00000389 fstat
+00000361 kill
+000003a1 chdir
+00000369 exec
+00000339 wait
+00000349 read
+00000381 unlink
+00000329 fork
+000003b9 sbrk
+000003c9 uptime
+00000af4 __bss_start
+00000190 memset
+00000000 main
+00000110 strcmp
+000003a9 dup
+00000270 stat
+00000af4 _edata
+00000b00 _end
+00000391 link
+00000331 exit
+000002c0 atoi
+00000160 strlen
+00000371 open
+000001b0 strchr
+00000399 mkdir
+00000359 close
+00000670 free
diff -urN xv6-public/ide.d xv6-public-new/ide.d
--- xv6-public/ide.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/ide.d	2019-10-04 10:45:49.860028938 +0530
@@ -0,0 +1,2 @@
+ide.o: ide.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h sleeplock.h fs.h buf.h
Binary files xv6-public/ide.o and xv6-public-new/ide.o differ
Binary files xv6-public/_init and xv6-public-new/_init differ
diff -urN xv6-public/init.asm xv6-public-new/init.asm
--- xv6-public/init.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/init.asm	2019-10-04 10:45:48.644028880 +0530
@@ -0,0 +1,1249 @@
+
+_init:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+char *argv[] = { "sh", 0 };
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	53                   	push   %ebx
+   e:	51                   	push   %ecx
+  int pid, wpid;
+
+  if(open("console", O_RDWR) < 0){
+   f:	83 ec 08             	sub    $0x8,%esp
+  12:	6a 02                	push   $0x2
+  14:	68 18 08 00 00       	push   $0x818
+  19:	e8 63 03 00 00       	call   381 <open>
+  1e:	83 c4 10             	add    $0x10,%esp
+  21:	85 c0                	test   %eax,%eax
+  23:	0f 88 9f 00 00 00    	js     c8 <main+0xc8>
+    mknod("console", 1, 1);
+    open("console", O_RDWR);
+  }
+  dup(0);  // stdout
+  29:	83 ec 0c             	sub    $0xc,%esp
+  2c:	6a 00                	push   $0x0
+  2e:	e8 86 03 00 00       	call   3b9 <dup>
+  dup(0);  // stderr
+  33:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  3a:	e8 7a 03 00 00       	call   3b9 <dup>
+  3f:	83 c4 10             	add    $0x10,%esp
+  42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+  for(;;){
+    printf(1, "init: starting sh\n");
+  48:	83 ec 08             	sub    $0x8,%esp
+  4b:	68 20 08 00 00       	push   $0x820
+  50:	6a 01                	push   $0x1
+  52:	e8 59 04 00 00       	call   4b0 <printf>
+    pid = fork();
+  57:	e8 dd 02 00 00       	call   339 <fork>
+    if(pid < 0){
+  5c:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+  5f:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+  61:	85 c0                	test   %eax,%eax
+  63:	78 2c                	js     91 <main+0x91>
+      printf(1, "init: fork failed\n");
+      exit();
+    }
+    if(pid == 0){
+  65:	74 3d                	je     a4 <main+0xa4>
+  67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  6e:	66 90                	xchg   %ax,%ax
+      exec("sh", argv);
+      printf(1, "init: exec sh failed\n");
+      exit();
+    }
+    while((wpid=wait()) >= 0 && wpid != pid)
+  70:	e8 d4 02 00 00       	call   349 <wait>
+  75:	85 c0                	test   %eax,%eax
+  77:	78 cf                	js     48 <main+0x48>
+  79:	39 c3                	cmp    %eax,%ebx
+  7b:	74 cb                	je     48 <main+0x48>
+      printf(1, "zombie!\n");
+  7d:	83 ec 08             	sub    $0x8,%esp
+  80:	68 5f 08 00 00       	push   $0x85f
+  85:	6a 01                	push   $0x1
+  87:	e8 24 04 00 00       	call   4b0 <printf>
+  8c:	83 c4 10             	add    $0x10,%esp
+  8f:	eb df                	jmp    70 <main+0x70>
+      printf(1, "init: fork failed\n");
+  91:	53                   	push   %ebx
+  92:	53                   	push   %ebx
+  93:	68 33 08 00 00       	push   $0x833
+  98:	6a 01                	push   $0x1
+  9a:	e8 11 04 00 00       	call   4b0 <printf>
+      exit();
+  9f:	e8 9d 02 00 00       	call   341 <exit>
+      exec("sh", argv);
+  a4:	50                   	push   %eax
+  a5:	50                   	push   %eax
+  a6:	68 1c 0b 00 00       	push   $0xb1c
+  ab:	68 46 08 00 00       	push   $0x846
+  b0:	e8 c4 02 00 00       	call   379 <exec>
+      printf(1, "init: exec sh failed\n");
+  b5:	5a                   	pop    %edx
+  b6:	59                   	pop    %ecx
+  b7:	68 49 08 00 00       	push   $0x849
+  bc:	6a 01                	push   $0x1
+  be:	e8 ed 03 00 00       	call   4b0 <printf>
+      exit();
+  c3:	e8 79 02 00 00       	call   341 <exit>
+    mknod("console", 1, 1);
+  c8:	50                   	push   %eax
+  c9:	6a 01                	push   $0x1
+  cb:	6a 01                	push   $0x1
+  cd:	68 18 08 00 00       	push   $0x818
+  d2:	e8 b2 02 00 00       	call   389 <mknod>
+    open("console", O_RDWR);
+  d7:	58                   	pop    %eax
+  d8:	5a                   	pop    %edx
+  d9:	6a 02                	push   $0x2
+  db:	68 18 08 00 00       	push   $0x818
+  e0:	e8 9c 02 00 00       	call   381 <open>
+  e5:	83 c4 10             	add    $0x10,%esp
+  e8:	e9 3c ff ff ff       	jmp    29 <main+0x29>
+  ed:	66 90                	xchg   %ax,%ax
+  ef:	90                   	nop
+
+000000f0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  f0:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  f1:	31 d2                	xor    %edx,%edx
+{
+  f3:	89 e5                	mov    %esp,%ebp
+  f5:	53                   	push   %ebx
+  f6:	8b 45 08             	mov    0x8(%ebp),%eax
+  f9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 100:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+ 104:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 107:	83 c2 01             	add    $0x1,%edx
+ 10a:	84 c9                	test   %cl,%cl
+ 10c:	75 f2                	jne    100 <strcpy+0x10>
+    ;
+  return os;
+}
+ 10e:	5b                   	pop    %ebx
+ 10f:	5d                   	pop    %ebp
+ 110:	c3                   	ret    
+ 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 118:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11f:	90                   	nop
+
+00000120 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	56                   	push   %esi
+ 124:	53                   	push   %ebx
+ 125:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 128:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+ 12b:	0f b6 13             	movzbl (%ebx),%edx
+ 12e:	0f b6 0e             	movzbl (%esi),%ecx
+ 131:	84 d2                	test   %dl,%dl
+ 133:	74 1e                	je     153 <strcmp+0x33>
+ 135:	b8 01 00 00 00       	mov    $0x1,%eax
+ 13a:	38 ca                	cmp    %cl,%dl
+ 13c:	74 09                	je     147 <strcmp+0x27>
+ 13e:	eb 20                	jmp    160 <strcmp+0x40>
+ 140:	83 c0 01             	add    $0x1,%eax
+ 143:	38 ca                	cmp    %cl,%dl
+ 145:	75 19                	jne    160 <strcmp+0x40>
+ 147:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 14b:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+ 14f:	84 d2                	test   %dl,%dl
+ 151:	75 ed                	jne    140 <strcmp+0x20>
+ 153:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+ 155:	5b                   	pop    %ebx
+ 156:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 157:	29 c8                	sub    %ecx,%eax
+}
+ 159:	5d                   	pop    %ebp
+ 15a:	c3                   	ret    
+ 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+ 160:	0f b6 c2             	movzbl %dl,%eax
+ 163:	5b                   	pop    %ebx
+ 164:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 165:	29 c8                	sub    %ecx,%eax
+}
+ 167:	5d                   	pop    %ebp
+ 168:	c3                   	ret    
+ 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000170 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 176:	80 39 00             	cmpb   $0x0,(%ecx)
+ 179:	74 15                	je     190 <strlen+0x20>
+ 17b:	31 d2                	xor    %edx,%edx
+ 17d:	8d 76 00             	lea    0x0(%esi),%esi
+ 180:	83 c2 01             	add    $0x1,%edx
+ 183:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 187:	89 d0                	mov    %edx,%eax
+ 189:	75 f5                	jne    180 <strlen+0x10>
+    ;
+  return n;
+}
+ 18b:	5d                   	pop    %ebp
+ 18c:	c3                   	ret    
+ 18d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 190:	31 c0                	xor    %eax,%eax
+}
+ 192:	5d                   	pop    %ebp
+ 193:	c3                   	ret    
+ 194:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 19f:	90                   	nop
+
+000001a0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1a0:	55                   	push   %ebp
+ 1a1:	89 e5                	mov    %esp,%ebp
+ 1a3:	57                   	push   %edi
+ 1a4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1a7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1aa:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1ad:	89 d7                	mov    %edx,%edi
+ 1af:	fc                   	cld    
+ 1b0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1b2:	89 d0                	mov    %edx,%eax
+ 1b4:	5f                   	pop    %edi
+ 1b5:	5d                   	pop    %ebp
+ 1b6:	c3                   	ret    
+ 1b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1be:	66 90                	xchg   %ax,%ax
+
+000001c0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	53                   	push   %ebx
+ 1c4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1c7:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 1ca:	0f b6 18             	movzbl (%eax),%ebx
+ 1cd:	84 db                	test   %bl,%bl
+ 1cf:	74 1d                	je     1ee <strchr+0x2e>
+ 1d1:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 1d3:	38 d3                	cmp    %dl,%bl
+ 1d5:	75 0d                	jne    1e4 <strchr+0x24>
+ 1d7:	eb 17                	jmp    1f0 <strchr+0x30>
+ 1d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1e0:	38 ca                	cmp    %cl,%dl
+ 1e2:	74 0c                	je     1f0 <strchr+0x30>
+  for(; *s; s++)
+ 1e4:	83 c0 01             	add    $0x1,%eax
+ 1e7:	0f b6 10             	movzbl (%eax),%edx
+ 1ea:	84 d2                	test   %dl,%dl
+ 1ec:	75 f2                	jne    1e0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 1ee:	31 c0                	xor    %eax,%eax
+}
+ 1f0:	5b                   	pop    %ebx
+ 1f1:	5d                   	pop    %ebp
+ 1f2:	c3                   	ret    
+ 1f3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000200 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	57                   	push   %edi
+ 204:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 205:	31 f6                	xor    %esi,%esi
+{
+ 207:	53                   	push   %ebx
+ 208:	89 f3                	mov    %esi,%ebx
+ 20a:	83 ec 1c             	sub    $0x1c,%esp
+ 20d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 210:	eb 2f                	jmp    241 <gets+0x41>
+ 212:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 218:	83 ec 04             	sub    $0x4,%esp
+ 21b:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 21e:	6a 01                	push   $0x1
+ 220:	50                   	push   %eax
+ 221:	6a 00                	push   $0x0
+ 223:	e8 31 01 00 00       	call   359 <read>
+    if(cc < 1)
+ 228:	83 c4 10             	add    $0x10,%esp
+ 22b:	85 c0                	test   %eax,%eax
+ 22d:	7e 1c                	jle    24b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 22f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 233:	83 c7 01             	add    $0x1,%edi
+ 236:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 239:	3c 0a                	cmp    $0xa,%al
+ 23b:	74 23                	je     260 <gets+0x60>
+ 23d:	3c 0d                	cmp    $0xd,%al
+ 23f:	74 1f                	je     260 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 241:	83 c3 01             	add    $0x1,%ebx
+ 244:	89 fe                	mov    %edi,%esi
+ 246:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 249:	7c cd                	jl     218 <gets+0x18>
+ 24b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 24d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 250:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 253:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 256:	5b                   	pop    %ebx
+ 257:	5e                   	pop    %esi
+ 258:	5f                   	pop    %edi
+ 259:	5d                   	pop    %ebp
+ 25a:	c3                   	ret    
+ 25b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 25f:	90                   	nop
+ 260:	8b 75 08             	mov    0x8(%ebp),%esi
+ 263:	8b 45 08             	mov    0x8(%ebp),%eax
+ 266:	01 de                	add    %ebx,%esi
+ 268:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 26a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 26d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 270:	5b                   	pop    %ebx
+ 271:	5e                   	pop    %esi
+ 272:	5f                   	pop    %edi
+ 273:	5d                   	pop    %ebp
+ 274:	c3                   	ret    
+ 275:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000280 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	56                   	push   %esi
+ 284:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 285:	83 ec 08             	sub    $0x8,%esp
+ 288:	6a 00                	push   $0x0
+ 28a:	ff 75 08             	pushl  0x8(%ebp)
+ 28d:	e8 ef 00 00 00       	call   381 <open>
+  if(fd < 0)
+ 292:	83 c4 10             	add    $0x10,%esp
+ 295:	85 c0                	test   %eax,%eax
+ 297:	78 27                	js     2c0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 299:	83 ec 08             	sub    $0x8,%esp
+ 29c:	ff 75 0c             	pushl  0xc(%ebp)
+ 29f:	89 c3                	mov    %eax,%ebx
+ 2a1:	50                   	push   %eax
+ 2a2:	e8 f2 00 00 00       	call   399 <fstat>
+  close(fd);
+ 2a7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2aa:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2ac:	e8 b8 00 00 00       	call   369 <close>
+  return r;
+ 2b1:	83 c4 10             	add    $0x10,%esp
+}
+ 2b4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2b7:	89 f0                	mov    %esi,%eax
+ 2b9:	5b                   	pop    %ebx
+ 2ba:	5e                   	pop    %esi
+ 2bb:	5d                   	pop    %ebp
+ 2bc:	c3                   	ret    
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 2c0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2c5:	eb ed                	jmp    2b4 <stat+0x34>
+ 2c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ce:	66 90                	xchg   %ax,%ax
+
+000002d0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2d0:	55                   	push   %ebp
+ 2d1:	89 e5                	mov    %esp,%ebp
+ 2d3:	53                   	push   %ebx
+ 2d4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2d7:	0f be 11             	movsbl (%ecx),%edx
+ 2da:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 2dd:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 2df:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 2e4:	77 1f                	ja     305 <atoi+0x35>
+ 2e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ed:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 2f0:	83 c1 01             	add    $0x1,%ecx
+ 2f3:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 2f6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 2fa:	0f be 11             	movsbl (%ecx),%edx
+ 2fd:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 300:	80 fb 09             	cmp    $0x9,%bl
+ 303:	76 eb                	jbe    2f0 <atoi+0x20>
+  return n;
+}
+ 305:	5b                   	pop    %ebx
+ 306:	5d                   	pop    %ebp
+ 307:	c3                   	ret    
+ 308:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 30f:	90                   	nop
+
+00000310 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	57                   	push   %edi
+ 314:	8b 55 10             	mov    0x10(%ebp),%edx
+ 317:	8b 45 08             	mov    0x8(%ebp),%eax
+ 31a:	56                   	push   %esi
+ 31b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 31e:	85 d2                	test   %edx,%edx
+ 320:	7e 13                	jle    335 <memmove+0x25>
+ 322:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 324:	89 c7                	mov    %eax,%edi
+ 326:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 32d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 330:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 331:	39 fa                	cmp    %edi,%edx
+ 333:	75 fb                	jne    330 <memmove+0x20>
+  return vdst;
+}
+ 335:	5e                   	pop    %esi
+ 336:	5f                   	pop    %edi
+ 337:	5d                   	pop    %ebp
+ 338:	c3                   	ret    
+
+00000339 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 339:	b8 01 00 00 00       	mov    $0x1,%eax
+ 33e:	cd 40                	int    $0x40
+ 340:	c3                   	ret    
+
+00000341 <exit>:
+SYSCALL(exit)
+ 341:	b8 02 00 00 00       	mov    $0x2,%eax
+ 346:	cd 40                	int    $0x40
+ 348:	c3                   	ret    
+
+00000349 <wait>:
+SYSCALL(wait)
+ 349:	b8 03 00 00 00       	mov    $0x3,%eax
+ 34e:	cd 40                	int    $0x40
+ 350:	c3                   	ret    
+
+00000351 <pipe>:
+SYSCALL(pipe)
+ 351:	b8 04 00 00 00       	mov    $0x4,%eax
+ 356:	cd 40                	int    $0x40
+ 358:	c3                   	ret    
+
+00000359 <read>:
+SYSCALL(read)
+ 359:	b8 05 00 00 00       	mov    $0x5,%eax
+ 35e:	cd 40                	int    $0x40
+ 360:	c3                   	ret    
+
+00000361 <write>:
+SYSCALL(write)
+ 361:	b8 10 00 00 00       	mov    $0x10,%eax
+ 366:	cd 40                	int    $0x40
+ 368:	c3                   	ret    
+
+00000369 <close>:
+SYSCALL(close)
+ 369:	b8 15 00 00 00       	mov    $0x15,%eax
+ 36e:	cd 40                	int    $0x40
+ 370:	c3                   	ret    
+
+00000371 <kill>:
+SYSCALL(kill)
+ 371:	b8 06 00 00 00       	mov    $0x6,%eax
+ 376:	cd 40                	int    $0x40
+ 378:	c3                   	ret    
+
+00000379 <exec>:
+SYSCALL(exec)
+ 379:	b8 07 00 00 00       	mov    $0x7,%eax
+ 37e:	cd 40                	int    $0x40
+ 380:	c3                   	ret    
+
+00000381 <open>:
+SYSCALL(open)
+ 381:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 386:	cd 40                	int    $0x40
+ 388:	c3                   	ret    
+
+00000389 <mknod>:
+SYSCALL(mknod)
+ 389:	b8 11 00 00 00       	mov    $0x11,%eax
+ 38e:	cd 40                	int    $0x40
+ 390:	c3                   	ret    
+
+00000391 <unlink>:
+SYSCALL(unlink)
+ 391:	b8 12 00 00 00       	mov    $0x12,%eax
+ 396:	cd 40                	int    $0x40
+ 398:	c3                   	ret    
+
+00000399 <fstat>:
+SYSCALL(fstat)
+ 399:	b8 08 00 00 00       	mov    $0x8,%eax
+ 39e:	cd 40                	int    $0x40
+ 3a0:	c3                   	ret    
+
+000003a1 <link>:
+SYSCALL(link)
+ 3a1:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3a6:	cd 40                	int    $0x40
+ 3a8:	c3                   	ret    
+
+000003a9 <mkdir>:
+SYSCALL(mkdir)
+ 3a9:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3ae:	cd 40                	int    $0x40
+ 3b0:	c3                   	ret    
+
+000003b1 <chdir>:
+SYSCALL(chdir)
+ 3b1:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3b6:	cd 40                	int    $0x40
+ 3b8:	c3                   	ret    
+
+000003b9 <dup>:
+SYSCALL(dup)
+ 3b9:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3be:	cd 40                	int    $0x40
+ 3c0:	c3                   	ret    
+
+000003c1 <getpid>:
+SYSCALL(getpid)
+ 3c1:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3c6:	cd 40                	int    $0x40
+ 3c8:	c3                   	ret    
+
+000003c9 <sbrk>:
+SYSCALL(sbrk)
+ 3c9:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3ce:	cd 40                	int    $0x40
+ 3d0:	c3                   	ret    
+
+000003d1 <sleep>:
+SYSCALL(sleep)
+ 3d1:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3d6:	cd 40                	int    $0x40
+ 3d8:	c3                   	ret    
+
+000003d9 <uptime>:
+SYSCALL(uptime)
+ 3d9:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3de:	cd 40                	int    $0x40
+ 3e0:	c3                   	ret    
+ 3e1:	66 90                	xchg   %ax,%ax
+ 3e3:	66 90                	xchg   %ax,%ax
+ 3e5:	66 90                	xchg   %ax,%ax
+ 3e7:	66 90                	xchg   %ax,%ax
+ 3e9:	66 90                	xchg   %ax,%ax
+ 3eb:	66 90                	xchg   %ax,%ax
+ 3ed:	66 90                	xchg   %ax,%ax
+ 3ef:	90                   	nop
+
+000003f0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	57                   	push   %edi
+ 3f4:	56                   	push   %esi
+ 3f5:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3f6:	89 d3                	mov    %edx,%ebx
+{
+ 3f8:	83 ec 3c             	sub    $0x3c,%esp
+ 3fb:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+ 3fe:	85 d2                	test   %edx,%edx
+ 400:	0f 89 92 00 00 00    	jns    498 <printint+0xa8>
+ 406:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 40a:	0f 84 88 00 00 00    	je     498 <printint+0xa8>
+    neg = 1;
+ 410:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+ 417:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 419:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 420:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 423:	eb 08                	jmp    42d <printint+0x3d>
+ 425:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 428:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+ 42b:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+ 42d:	89 d8                	mov    %ebx,%eax
+ 42f:	31 d2                	xor    %edx,%edx
+ 431:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 434:	f7 f1                	div    %ecx
+ 436:	83 c7 01             	add    $0x1,%edi
+ 439:	0f b6 92 70 08 00 00 	movzbl 0x870(%edx),%edx
+ 440:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+ 443:	39 d9                	cmp    %ebx,%ecx
+ 445:	76 e1                	jbe    428 <printint+0x38>
+  if(neg)
+ 447:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 44a:	85 c0                	test   %eax,%eax
+ 44c:	74 0d                	je     45b <printint+0x6b>
+    buf[i++] = '-';
+ 44e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 453:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+ 458:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 45b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 45e:	8b 7d bc             	mov    -0x44(%ebp),%edi
+ 461:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 465:	eb 0f                	jmp    476 <printint+0x86>
+ 467:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 46e:	66 90                	xchg   %ax,%ax
+ 470:	0f b6 13             	movzbl (%ebx),%edx
+ 473:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 476:	83 ec 04             	sub    $0x4,%esp
+ 479:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 47c:	6a 01                	push   $0x1
+ 47e:	56                   	push   %esi
+ 47f:	57                   	push   %edi
+ 480:	e8 dc fe ff ff       	call   361 <write>
+
+  while(--i >= 0)
+ 485:	83 c4 10             	add    $0x10,%esp
+ 488:	39 de                	cmp    %ebx,%esi
+ 48a:	75 e4                	jne    470 <printint+0x80>
+    putc(fd, buf[i]);
+}
+ 48c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 48f:	5b                   	pop    %ebx
+ 490:	5e                   	pop    %esi
+ 491:	5f                   	pop    %edi
+ 492:	5d                   	pop    %ebp
+ 493:	c3                   	ret    
+ 494:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 498:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+ 49f:	e9 75 ff ff ff       	jmp    419 <printint+0x29>
+ 4a4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4af:	90                   	nop
+
+000004b0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4b0:	55                   	push   %ebp
+ 4b1:	89 e5                	mov    %esp,%ebp
+ 4b3:	57                   	push   %edi
+ 4b4:	56                   	push   %esi
+ 4b5:	53                   	push   %ebx
+ 4b6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4b9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4bc:	0f b6 1e             	movzbl (%esi),%ebx
+ 4bf:	84 db                	test   %bl,%bl
+ 4c1:	0f 84 b9 00 00 00    	je     580 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+ 4c7:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4ca:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 4cd:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 4d0:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 4d2:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4d5:	eb 38                	jmp    50f <printf+0x5f>
+ 4d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4de:	66 90                	xchg   %ax,%ax
+ 4e0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 4e3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 4e8:	83 f8 25             	cmp    $0x25,%eax
+ 4eb:	74 17                	je     504 <printf+0x54>
+  write(fd, &c, 1);
+ 4ed:	83 ec 04             	sub    $0x4,%esp
+ 4f0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4f3:	6a 01                	push   $0x1
+ 4f5:	57                   	push   %edi
+ 4f6:	ff 75 08             	pushl  0x8(%ebp)
+ 4f9:	e8 63 fe ff ff       	call   361 <write>
+ 4fe:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 501:	83 c4 10             	add    $0x10,%esp
+ 504:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 507:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 50b:	84 db                	test   %bl,%bl
+ 50d:	74 71                	je     580 <printf+0xd0>
+    c = fmt[i] & 0xff;
+ 50f:	0f be cb             	movsbl %bl,%ecx
+ 512:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 515:	85 d2                	test   %edx,%edx
+ 517:	74 c7                	je     4e0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 519:	83 fa 25             	cmp    $0x25,%edx
+ 51c:	75 e6                	jne    504 <printf+0x54>
+      if(c == 'd'){
+ 51e:	83 f8 64             	cmp    $0x64,%eax
+ 521:	0f 84 99 00 00 00    	je     5c0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 527:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 52d:	83 f9 70             	cmp    $0x70,%ecx
+ 530:	74 5e                	je     590 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 532:	83 f8 73             	cmp    $0x73,%eax
+ 535:	0f 84 d5 00 00 00    	je     610 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 53b:	83 f8 63             	cmp    $0x63,%eax
+ 53e:	0f 84 8c 00 00 00    	je     5d0 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 544:	83 f8 25             	cmp    $0x25,%eax
+ 547:	0f 84 b3 00 00 00    	je     600 <printf+0x150>
+  write(fd, &c, 1);
+ 54d:	83 ec 04             	sub    $0x4,%esp
+ 550:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 554:	6a 01                	push   $0x1
+ 556:	57                   	push   %edi
+ 557:	ff 75 08             	pushl  0x8(%ebp)
+ 55a:	e8 02 fe ff ff       	call   361 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 55f:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 562:	83 c4 0c             	add    $0xc,%esp
+ 565:	6a 01                	push   $0x1
+ 567:	83 c6 01             	add    $0x1,%esi
+ 56a:	57                   	push   %edi
+ 56b:	ff 75 08             	pushl  0x8(%ebp)
+ 56e:	e8 ee fd ff ff       	call   361 <write>
+  for(i = 0; fmt[i]; i++){
+ 573:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 577:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 57a:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 57c:	84 db                	test   %bl,%bl
+ 57e:	75 8f                	jne    50f <printf+0x5f>
+    }
+  }
+}
+ 580:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 583:	5b                   	pop    %ebx
+ 584:	5e                   	pop    %esi
+ 585:	5f                   	pop    %edi
+ 586:	5d                   	pop    %ebp
+ 587:	c3                   	ret    
+ 588:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58f:	90                   	nop
+        printint(fd, *ap, 16, 0);
+ 590:	83 ec 0c             	sub    $0xc,%esp
+ 593:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 598:	6a 00                	push   $0x0
+ 59a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 59d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5a0:	8b 13                	mov    (%ebx),%edx
+ 5a2:	e8 49 fe ff ff       	call   3f0 <printint>
+        ap++;
+ 5a7:	89 d8                	mov    %ebx,%eax
+ 5a9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5ac:	31 d2                	xor    %edx,%edx
+        ap++;
+ 5ae:	83 c0 04             	add    $0x4,%eax
+ 5b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5b4:	e9 4b ff ff ff       	jmp    504 <printf+0x54>
+ 5b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 5c0:	83 ec 0c             	sub    $0xc,%esp
+ 5c3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5c8:	6a 01                	push   $0x1
+ 5ca:	eb ce                	jmp    59a <printf+0xea>
+ 5cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 5d0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 5d3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5d6:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 5d8:	6a 01                	push   $0x1
+        ap++;
+ 5da:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 5dd:	57                   	push   %edi
+ 5de:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 5e1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5e4:	e8 78 fd ff ff       	call   361 <write>
+        ap++;
+ 5e9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 5ec:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5ef:	31 d2                	xor    %edx,%edx
+ 5f1:	e9 0e ff ff ff       	jmp    504 <printf+0x54>
+ 5f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5fd:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 600:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 603:	83 ec 04             	sub    $0x4,%esp
+ 606:	e9 5a ff ff ff       	jmp    565 <printf+0xb5>
+ 60b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 60f:	90                   	nop
+        s = (char*)*ap;
+ 610:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 613:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 615:	83 c0 04             	add    $0x4,%eax
+ 618:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 61b:	85 db                	test   %ebx,%ebx
+ 61d:	74 17                	je     636 <printf+0x186>
+        while(*s != 0){
+ 61f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 622:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 624:	84 c0                	test   %al,%al
+ 626:	0f 84 d8 fe ff ff    	je     504 <printf+0x54>
+ 62c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 62f:	89 de                	mov    %ebx,%esi
+ 631:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 634:	eb 1a                	jmp    650 <printf+0x1a0>
+          s = "(null)";
+ 636:	bb 68 08 00 00       	mov    $0x868,%ebx
+        while(*s != 0){
+ 63b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 63e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 643:	89 de                	mov    %ebx,%esi
+ 645:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 648:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+  write(fd, &c, 1);
+ 650:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 653:	83 c6 01             	add    $0x1,%esi
+ 656:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 659:	6a 01                	push   $0x1
+ 65b:	57                   	push   %edi
+ 65c:	53                   	push   %ebx
+ 65d:	e8 ff fc ff ff       	call   361 <write>
+        while(*s != 0){
+ 662:	0f b6 06             	movzbl (%esi),%eax
+ 665:	83 c4 10             	add    $0x10,%esp
+ 668:	84 c0                	test   %al,%al
+ 66a:	75 e4                	jne    650 <printf+0x1a0>
+ 66c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 66f:	31 d2                	xor    %edx,%edx
+ 671:	e9 8e fe ff ff       	jmp    504 <printf+0x54>
+ 676:	66 90                	xchg   %ax,%ax
+ 678:	66 90                	xchg   %ax,%ax
+ 67a:	66 90                	xchg   %ax,%ax
+ 67c:	66 90                	xchg   %ax,%ax
+ 67e:	66 90                	xchg   %ax,%ax
+
+00000680 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 680:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 681:	a1 24 0b 00 00       	mov    0xb24,%eax
+{
+ 686:	89 e5                	mov    %esp,%ebp
+ 688:	57                   	push   %edi
+ 689:	56                   	push   %esi
+ 68a:	53                   	push   %ebx
+ 68b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 68e:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 690:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 693:	39 c8                	cmp    %ecx,%eax
+ 695:	73 19                	jae    6b0 <free+0x30>
+ 697:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 69e:	66 90                	xchg   %ax,%ax
+ 6a0:	39 d1                	cmp    %edx,%ecx
+ 6a2:	72 14                	jb     6b8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6a4:	39 d0                	cmp    %edx,%eax
+ 6a6:	73 10                	jae    6b8 <free+0x38>
+{
+ 6a8:	89 d0                	mov    %edx,%eax
+ 6aa:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ac:	39 c8                	cmp    %ecx,%eax
+ 6ae:	72 f0                	jb     6a0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6b0:	39 d0                	cmp    %edx,%eax
+ 6b2:	72 f4                	jb     6a8 <free+0x28>
+ 6b4:	39 d1                	cmp    %edx,%ecx
+ 6b6:	73 f0                	jae    6a8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6b8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6bb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6be:	39 fa                	cmp    %edi,%edx
+ 6c0:	74 1e                	je     6e0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6c2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6c5:	8b 50 04             	mov    0x4(%eax),%edx
+ 6c8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6cb:	39 f1                	cmp    %esi,%ecx
+ 6cd:	74 28                	je     6f7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6cf:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 6d1:	5b                   	pop    %ebx
+  freep = p;
+ 6d2:	a3 24 0b 00 00       	mov    %eax,0xb24
+}
+ 6d7:	5e                   	pop    %esi
+ 6d8:	5f                   	pop    %edi
+ 6d9:	5d                   	pop    %ebp
+ 6da:	c3                   	ret    
+ 6db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6df:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 6e0:	03 72 04             	add    0x4(%edx),%esi
+ 6e3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6e6:	8b 10                	mov    (%eax),%edx
+ 6e8:	8b 12                	mov    (%edx),%edx
+ 6ea:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6ed:	8b 50 04             	mov    0x4(%eax),%edx
+ 6f0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6f3:	39 f1                	cmp    %esi,%ecx
+ 6f5:	75 d8                	jne    6cf <free+0x4f>
+    p->s.size += bp->s.size;
+ 6f7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6fa:	a3 24 0b 00 00       	mov    %eax,0xb24
+    p->s.size += bp->s.size;
+ 6ff:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 702:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 705:	89 10                	mov    %edx,(%eax)
+}
+ 707:	5b                   	pop    %ebx
+ 708:	5e                   	pop    %esi
+ 709:	5f                   	pop    %edi
+ 70a:	5d                   	pop    %ebp
+ 70b:	c3                   	ret    
+ 70c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000710 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 710:	55                   	push   %ebp
+ 711:	89 e5                	mov    %esp,%ebp
+ 713:	57                   	push   %edi
+ 714:	56                   	push   %esi
+ 715:	53                   	push   %ebx
+ 716:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 719:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 71c:	8b 3d 24 0b 00 00    	mov    0xb24,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 722:	8d 70 07             	lea    0x7(%eax),%esi
+ 725:	c1 ee 03             	shr    $0x3,%esi
+ 728:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 72b:	85 ff                	test   %edi,%edi
+ 72d:	0f 84 ad 00 00 00    	je     7e0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 733:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 735:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 738:	39 f1                	cmp    %esi,%ecx
+ 73a:	73 72                	jae    7ae <malloc+0x9e>
+ 73c:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 742:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 747:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 74a:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 751:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 754:	eb 1b                	jmp    771 <malloc+0x61>
+ 756:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 75d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 760:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 762:	8b 48 04             	mov    0x4(%eax),%ecx
+ 765:	39 f1                	cmp    %esi,%ecx
+ 767:	73 4f                	jae    7b8 <malloc+0xa8>
+ 769:	8b 3d 24 0b 00 00    	mov    0xb24,%edi
+ 76f:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 771:	39 d7                	cmp    %edx,%edi
+ 773:	75 eb                	jne    760 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 775:	83 ec 0c             	sub    $0xc,%esp
+ 778:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 77b:	e8 49 fc ff ff       	call   3c9 <sbrk>
+  if(p == (char*)-1)
+ 780:	83 c4 10             	add    $0x10,%esp
+ 783:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 786:	74 1c                	je     7a4 <malloc+0x94>
+  hp->s.size = nu;
+ 788:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 78b:	83 ec 0c             	sub    $0xc,%esp
+ 78e:	83 c0 08             	add    $0x8,%eax
+ 791:	50                   	push   %eax
+ 792:	e8 e9 fe ff ff       	call   680 <free>
+  return freep;
+ 797:	8b 15 24 0b 00 00    	mov    0xb24,%edx
+      if((p = morecore(nunits)) == 0)
+ 79d:	83 c4 10             	add    $0x10,%esp
+ 7a0:	85 d2                	test   %edx,%edx
+ 7a2:	75 bc                	jne    760 <malloc+0x50>
+        return 0;
+  }
+}
+ 7a4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7a7:	31 c0                	xor    %eax,%eax
+}
+ 7a9:	5b                   	pop    %ebx
+ 7aa:	5e                   	pop    %esi
+ 7ab:	5f                   	pop    %edi
+ 7ac:	5d                   	pop    %ebp
+ 7ad:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7ae:	89 d0                	mov    %edx,%eax
+ 7b0:	89 fa                	mov    %edi,%edx
+ 7b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 7b8:	39 ce                	cmp    %ecx,%esi
+ 7ba:	74 54                	je     810 <malloc+0x100>
+        p->s.size -= nunits;
+ 7bc:	29 f1                	sub    %esi,%ecx
+ 7be:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 7c1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 7c4:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 7c7:	89 15 24 0b 00 00    	mov    %edx,0xb24
+}
+ 7cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7d0:	83 c0 08             	add    $0x8,%eax
+}
+ 7d3:	5b                   	pop    %ebx
+ 7d4:	5e                   	pop    %esi
+ 7d5:	5f                   	pop    %edi
+ 7d6:	5d                   	pop    %ebp
+ 7d7:	c3                   	ret    
+ 7d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7df:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+ 7e0:	c7 05 24 0b 00 00 28 	movl   $0xb28,0xb24
+ 7e7:	0b 00 00 
+    base.s.size = 0;
+ 7ea:	bf 28 0b 00 00       	mov    $0xb28,%edi
+    base.s.ptr = freep = prevp = &base;
+ 7ef:	c7 05 28 0b 00 00 28 	movl   $0xb28,0xb28
+ 7f6:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7f9:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 7fb:	c7 05 2c 0b 00 00 00 	movl   $0x0,0xb2c
+ 802:	00 00 00 
+    if(p->s.size >= nunits){
+ 805:	e9 32 ff ff ff       	jmp    73c <malloc+0x2c>
+ 80a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 810:	8b 08                	mov    (%eax),%ecx
+ 812:	89 0a                	mov    %ecx,(%edx)
+ 814:	eb b1                	jmp    7c7 <malloc+0xb7>
Binary files xv6-public/initcode and xv6-public-new/initcode differ
diff -urN xv6-public/initcode.asm xv6-public-new/initcode.asm
--- xv6-public/initcode.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/initcode.asm	2019-10-04 10:45:50.876028986 +0530
@@ -0,0 +1,43 @@
+
+initcode.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <start>:
+
+
+# exec(init, argv)
+.globl start
+start:
+  pushl $argv
+   0:	68 24 00 00 00       	push   $0x24
+  pushl $init
+   5:	68 1c 00 00 00       	push   $0x1c
+  pushl $0  // where caller pc would be
+   a:	6a 00                	push   $0x0
+  movl $SYS_exec, %eax
+   c:	b8 07 00 00 00       	mov    $0x7,%eax
+  int $T_SYSCALL
+  11:	cd 40                	int    $0x40
+
+00000013 <exit>:
+
+# for(;;) exit();
+exit:
+  movl $SYS_exit, %eax
+  13:	b8 02 00 00 00       	mov    $0x2,%eax
+  int $T_SYSCALL
+  18:	cd 40                	int    $0x40
+  jmp exit
+  1a:	eb f7                	jmp    13 <exit>
+
+0000001c <init>:
+  1c:	2f                   	das    
+  1d:	69 6e 69 74 00 00 90 	imul   $0x90000074,0x69(%esi),%ebp
+
+00000024 <argv>:
+  24:	1c 00                	sbb    $0x0,%al
+  26:	00 00                	add    %al,(%eax)
+  28:	00 00                	add    %al,(%eax)
+	...
diff -urN xv6-public/initcode.d xv6-public-new/initcode.d
--- xv6-public/initcode.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/initcode.d	2019-10-04 10:45:50.868028986 +0530
@@ -0,0 +1 @@
+initcode.o: initcode.S syscall.h traps.h
Binary files xv6-public/initcode.o and xv6-public-new/initcode.o differ
Binary files xv6-public/initcode.out and xv6-public-new/initcode.out differ
diff -urN xv6-public/init.d xv6-public-new/init.d
--- xv6-public/init.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/init.d	2019-10-04 10:45:48.628028879 +0530
@@ -0,0 +1 @@
+init.o: init.c /usr/include/stdc-predef.h types.h stat.h user.h fcntl.h
Binary files xv6-public/init.o and xv6-public-new/init.o differ
diff -urN xv6-public/init.sym xv6-public-new/init.sym
--- xv6-public/init.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/init.sym	2019-10-04 10:45:48.644028880 +0530
@@ -0,0 +1,59 @@
+00000000 .text
+00000818 .rodata
+00000884 .eh_frame
+00000b1c .data
+00000b24 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 init.c
+00000000 ulib.c
+00000000 printf.c
+000003f0 printint
+00000870 digits.1101
+00000000 umalloc.c
+00000b24 freep
+00000b28 base
+000000f0 strcpy
+000004b0 printf
+00000b1c argv
+00000310 memmove
+00000389 mknod
+00000200 gets
+000003c1 getpid
+00000710 malloc
+000003d1 sleep
+00000351 pipe
+00000361 write
+00000399 fstat
+00000371 kill
+000003b1 chdir
+00000379 exec
+00000349 wait
+00000359 read
+00000391 unlink
+00000339 fork
+000003c9 sbrk
+000003d9 uptime
+00000b24 __bss_start
+000001a0 memset
+00000000 main
+00000120 strcmp
+000003b9 dup
+00000280 stat
+00000b24 _edata
+00000b30 _end
+000003a1 link
+00000341 exit
+000002d0 atoi
+00000170 strlen
+00000381 open
+000001c0 strchr
+000003a9 mkdir
+00000369 close
+00000680 free
diff -urN xv6-public/ioapic.d xv6-public-new/ioapic.d
--- xv6-public/ioapic.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/ioapic.d	2019-10-04 10:45:49.888028939 +0530
@@ -0,0 +1 @@
+ioapic.o: ioapic.c /usr/include/stdc-predef.h types.h defs.h traps.h
Binary files xv6-public/ioapic.o and xv6-public-new/ioapic.o differ
diff -urN xv6-public/kalloc.d xv6-public-new/kalloc.d
--- xv6-public/kalloc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/kalloc.d	2019-10-04 10:45:49.928028941 +0530
@@ -0,0 +1,2 @@
+kalloc.o: kalloc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h spinlock.h
Binary files xv6-public/kalloc.o and xv6-public-new/kalloc.o differ
diff -urN xv6-public/kbd.d xv6-public-new/kbd.d
--- xv6-public/kbd.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/kbd.d	2019-10-04 10:45:49.956028942 +0530
@@ -0,0 +1 @@
+kbd.o: kbd.c /usr/include/stdc-predef.h types.h x86.h defs.h kbd.h
Binary files xv6-public/kbd.o and xv6-public-new/kbd.o differ
Binary files xv6-public/kernel and xv6-public-new/kernel differ
diff -urN xv6-public/kernel.asm xv6-public-new/kernel.asm
--- xv6-public/kernel.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/kernel.asm	2019-10-04 10:45:50.908028988 +0530
@@ -0,0 +1,15468 @@
+
+kernel:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+80100000 <multiboot_header>:
+80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
+80100006:	00 00                	add    %al,(%eax)
+80100008:	fe 4f 52             	decb   0x52(%edi)
+8010000b:	e4                   	.byte 0xe4
+
+8010000c <entry>:
+
+# Entering xv6 on boot processor, with paging off.
+.globl entry
+entry:
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+8010000c:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+8010000f:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+80100012:	0f 22 e0             	mov    %eax,%cr4
+  # Set page directory
+  movl    $(V2P_WO(entrypgdir)), %eax
+80100015:	b8 00 90 10 00       	mov    $0x109000,%eax
+  movl    %eax, %cr3
+8010001a:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+8010001d:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PG|CR0_WP), %eax
+80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
+  movl    %eax, %cr0
+80100025:	0f 22 c0             	mov    %eax,%cr0
+
+  # Set up the stack pointer.
+  movl $(stack + KSTACKSIZE), %esp
+80100028:	bc c0 b5 10 80       	mov    $0x8010b5c0,%esp
+
+  # Jump to main(), and switch to executing at
+  # high addresses. The indirect call is needed because
+  # the assembler produces a PC-relative instruction
+  # for a direct jump.
+  mov $main, %eax
+8010002d:	b8 a0 2f 10 80       	mov    $0x80102fa0,%eax
+  jmp *%eax
+80100032:	ff e0                	jmp    *%eax
+80100034:	66 90                	xchg   %ax,%ax
+80100036:	66 90                	xchg   %ax,%ax
+80100038:	66 90                	xchg   %ax,%ax
+8010003a:	66 90                	xchg   %ax,%ax
+8010003c:	66 90                	xchg   %ax,%ax
+8010003e:	66 90                	xchg   %ax,%ax
+
+80100040 <binit>:
+  struct buf head;
+} bcache;
+
+void
+binit(void)
+{
+80100040:	55                   	push   %ebp
+80100041:	89 e5                	mov    %esp,%ebp
+80100043:	53                   	push   %ebx
+
+//PAGEBREAK!
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+  bcache.head.next = &bcache.head;
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+80100044:	bb f4 b5 10 80       	mov    $0x8010b5f4,%ebx
+{
+80100049:	83 ec 0c             	sub    $0xc,%esp
+  initlock(&bcache.lock, "bcache");
+8010004c:	68 60 6f 10 80       	push   $0x80106f60
+80100051:	68 c0 b5 10 80       	push   $0x8010b5c0
+80100056:	e8 95 42 00 00       	call   801042f0 <initlock>
+  bcache.head.next = &bcache.head;
+8010005b:	83 c4 10             	add    $0x10,%esp
+8010005e:	ba bc fc 10 80       	mov    $0x8010fcbc,%edx
+  bcache.head.prev = &bcache.head;
+80100063:	c7 05 0c fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd0c
+8010006a:	fc 10 80 
+  bcache.head.next = &bcache.head;
+8010006d:	c7 05 10 fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd10
+80100074:	fc 10 80 
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+80100077:	eb 09                	jmp    80100082 <binit+0x42>
+80100079:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100080:	89 c3                	mov    %eax,%ebx
+    b->next = bcache.head.next;
+    b->prev = &bcache.head;
+    initsleeplock(&b->lock, "buffer");
+80100082:	83 ec 08             	sub    $0x8,%esp
+80100085:	8d 43 0c             	lea    0xc(%ebx),%eax
+    b->next = bcache.head.next;
+80100088:	89 53 54             	mov    %edx,0x54(%ebx)
+    b->prev = &bcache.head;
+8010008b:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
+    initsleeplock(&b->lock, "buffer");
+80100092:	68 67 6f 10 80       	push   $0x80106f67
+80100097:	50                   	push   %eax
+80100098:	e8 23 41 00 00       	call   801041c0 <initsleeplock>
+    bcache.head.next->prev = b;
+8010009d:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+801000a2:	89 da                	mov    %ebx,%edx
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000a4:	83 c4 10             	add    $0x10,%esp
+    bcache.head.next->prev = b;
+801000a7:	89 58 50             	mov    %ebx,0x50(%eax)
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000aa:	8d 83 5c 02 00 00    	lea    0x25c(%ebx),%eax
+    bcache.head.next = b;
+801000b0:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000b6:	3d bc fc 10 80       	cmp    $0x8010fcbc,%eax
+801000bb:	75 c3                	jne    80100080 <binit+0x40>
+  }
+}
+801000bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801000c0:	c9                   	leave  
+801000c1:	c3                   	ret    
+801000c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801000c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801000d0 <bread>:
+}
+
+// Return a locked buf with the contents of the indicated block.
+struct buf*
+bread(uint dev, uint blockno)
+{
+801000d0:	55                   	push   %ebp
+801000d1:	89 e5                	mov    %esp,%ebp
+801000d3:	57                   	push   %edi
+801000d4:	56                   	push   %esi
+801000d5:	53                   	push   %ebx
+801000d6:	83 ec 18             	sub    $0x18,%esp
+801000d9:	8b 7d 08             	mov    0x8(%ebp),%edi
+801000dc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  acquire(&bcache.lock);
+801000df:	68 c0 b5 10 80       	push   $0x8010b5c0
+801000e4:	e8 67 43 00 00       	call   80104450 <acquire>
+  for(b = bcache.head.next; b != &bcache.head; b = b->next){
+801000e9:	8b 1d 10 fd 10 80    	mov    0x8010fd10,%ebx
+801000ef:	83 c4 10             	add    $0x10,%esp
+801000f2:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+801000f8:	75 11                	jne    8010010b <bread+0x3b>
+801000fa:	eb 24                	jmp    80100120 <bread+0x50>
+801000fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
+80100103:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100109:	74 15                	je     80100120 <bread+0x50>
+    if(b->dev == dev && b->blockno == blockno){
+8010010b:	3b 7b 04             	cmp    0x4(%ebx),%edi
+8010010e:	75 f0                	jne    80100100 <bread+0x30>
+80100110:	3b 73 08             	cmp    0x8(%ebx),%esi
+80100113:	75 eb                	jne    80100100 <bread+0x30>
+      b->refcnt++;
+80100115:	83 43 4c 01          	addl   $0x1,0x4c(%ebx)
+      release(&bcache.lock);
+80100119:	eb 3f                	jmp    8010015a <bread+0x8a>
+8010011b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010011f:	90                   	nop
+  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
+80100120:	8b 1d 0c fd 10 80    	mov    0x8010fd0c,%ebx
+80100126:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+8010012c:	75 0d                	jne    8010013b <bread+0x6b>
+8010012e:	eb 70                	jmp    801001a0 <bread+0xd0>
+80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
+80100133:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100139:	74 65                	je     801001a0 <bread+0xd0>
+    if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
+8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
+8010013e:	85 c0                	test   %eax,%eax
+80100140:	75 ee                	jne    80100130 <bread+0x60>
+80100142:	f6 03 04             	testb  $0x4,(%ebx)
+80100145:	75 e9                	jne    80100130 <bread+0x60>
+      b->dev = dev;
+80100147:	89 7b 04             	mov    %edi,0x4(%ebx)
+      b->blockno = blockno;
+8010014a:	89 73 08             	mov    %esi,0x8(%ebx)
+      b->flags = 0;
+8010014d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+      b->refcnt = 1;
+80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+      release(&bcache.lock);
+8010015a:	83 ec 0c             	sub    $0xc,%esp
+8010015d:	68 c0 b5 10 80       	push   $0x8010b5c0
+80100162:	e8 a9 43 00 00       	call   80104510 <release>
+      acquiresleep(&b->lock);
+80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
+8010016a:	89 04 24             	mov    %eax,(%esp)
+8010016d:	e8 8e 40 00 00       	call   80104200 <acquiresleep>
+80100172:	83 c4 10             	add    $0x10,%esp
+  struct buf *b;
+
+  b = bget(dev, blockno);
+  if((b->flags & B_VALID) == 0) {
+80100175:	f6 03 02             	testb  $0x2,(%ebx)
+80100178:	74 0e                	je     80100188 <bread+0xb8>
+    iderw(b);
+  }
+  return b;
+}
+8010017a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010017d:	89 d8                	mov    %ebx,%eax
+8010017f:	5b                   	pop    %ebx
+80100180:	5e                   	pop    %esi
+80100181:	5f                   	pop    %edi
+80100182:	5d                   	pop    %ebp
+80100183:	c3                   	ret    
+80100184:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    iderw(b);
+80100188:	83 ec 0c             	sub    $0xc,%esp
+8010018b:	53                   	push   %ebx
+8010018c:	e8 5f 20 00 00       	call   801021f0 <iderw>
+80100191:	83 c4 10             	add    $0x10,%esp
+}
+80100194:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100197:	89 d8                	mov    %ebx,%eax
+80100199:	5b                   	pop    %ebx
+8010019a:	5e                   	pop    %esi
+8010019b:	5f                   	pop    %edi
+8010019c:	5d                   	pop    %ebp
+8010019d:	c3                   	ret    
+8010019e:	66 90                	xchg   %ax,%ax
+  panic("bget: no buffers");
+801001a0:	83 ec 0c             	sub    $0xc,%esp
+801001a3:	68 6e 6f 10 80       	push   $0x80106f6e
+801001a8:	e8 e3 01 00 00       	call   80100390 <panic>
+801001ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+801001b0 <bwrite>:
+
+// Write b's contents to disk.  Must be locked.
+void
+bwrite(struct buf *b)
+{
+801001b0:	55                   	push   %ebp
+801001b1:	89 e5                	mov    %esp,%ebp
+801001b3:	53                   	push   %ebx
+801001b4:	83 ec 10             	sub    $0x10,%esp
+801001b7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holdingsleep(&b->lock))
+801001ba:	8d 43 0c             	lea    0xc(%ebx),%eax
+801001bd:	50                   	push   %eax
+801001be:	e8 dd 40 00 00       	call   801042a0 <holdingsleep>
+801001c3:	83 c4 10             	add    $0x10,%esp
+801001c6:	85 c0                	test   %eax,%eax
+801001c8:	74 0f                	je     801001d9 <bwrite+0x29>
+    panic("bwrite");
+  b->flags |= B_DIRTY;
+801001ca:	83 0b 04             	orl    $0x4,(%ebx)
+  iderw(b);
+801001cd:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+801001d0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801001d3:	c9                   	leave  
+  iderw(b);
+801001d4:	e9 17 20 00 00       	jmp    801021f0 <iderw>
+    panic("bwrite");
+801001d9:	83 ec 0c             	sub    $0xc,%esp
+801001dc:	68 7f 6f 10 80       	push   $0x80106f7f
+801001e1:	e8 aa 01 00 00       	call   80100390 <panic>
+801001e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801001ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+801001f0 <brelse>:
+
+// Release a locked buffer.
+// Move to the head of the MRU list.
+void
+brelse(struct buf *b)
+{
+801001f0:	55                   	push   %ebp
+801001f1:	89 e5                	mov    %esp,%ebp
+801001f3:	56                   	push   %esi
+801001f4:	53                   	push   %ebx
+801001f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holdingsleep(&b->lock))
+801001f8:	8d 73 0c             	lea    0xc(%ebx),%esi
+801001fb:	83 ec 0c             	sub    $0xc,%esp
+801001fe:	56                   	push   %esi
+801001ff:	e8 9c 40 00 00       	call   801042a0 <holdingsleep>
+80100204:	83 c4 10             	add    $0x10,%esp
+80100207:	85 c0                	test   %eax,%eax
+80100209:	74 66                	je     80100271 <brelse+0x81>
+    panic("brelse");
+
+  releasesleep(&b->lock);
+8010020b:	83 ec 0c             	sub    $0xc,%esp
+8010020e:	56                   	push   %esi
+8010020f:	e8 4c 40 00 00       	call   80104260 <releasesleep>
+
+  acquire(&bcache.lock);
+80100214:	c7 04 24 c0 b5 10 80 	movl   $0x8010b5c0,(%esp)
+8010021b:	e8 30 42 00 00       	call   80104450 <acquire>
+  b->refcnt--;
+80100220:	8b 43 4c             	mov    0x4c(%ebx),%eax
+  if (b->refcnt == 0) {
+80100223:	83 c4 10             	add    $0x10,%esp
+  b->refcnt--;
+80100226:	83 e8 01             	sub    $0x1,%eax
+80100229:	89 43 4c             	mov    %eax,0x4c(%ebx)
+  if (b->refcnt == 0) {
+8010022c:	85 c0                	test   %eax,%eax
+8010022e:	75 2f                	jne    8010025f <brelse+0x6f>
+    // no one is waiting for it.
+    b->next->prev = b->prev;
+80100230:	8b 43 54             	mov    0x54(%ebx),%eax
+80100233:	8b 53 50             	mov    0x50(%ebx),%edx
+80100236:	89 50 50             	mov    %edx,0x50(%eax)
+    b->prev->next = b->next;
+80100239:	8b 43 50             	mov    0x50(%ebx),%eax
+8010023c:	8b 53 54             	mov    0x54(%ebx),%edx
+8010023f:	89 50 54             	mov    %edx,0x54(%eax)
+    b->next = bcache.head.next;
+80100242:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+    b->prev = &bcache.head;
+80100247:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
+    b->next = bcache.head.next;
+8010024e:	89 43 54             	mov    %eax,0x54(%ebx)
+    bcache.head.next->prev = b;
+80100251:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+80100256:	89 58 50             	mov    %ebx,0x50(%eax)
+    bcache.head.next = b;
+80100259:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
+  }
+  
+  release(&bcache.lock);
+8010025f:	c7 45 08 c0 b5 10 80 	movl   $0x8010b5c0,0x8(%ebp)
+}
+80100266:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80100269:	5b                   	pop    %ebx
+8010026a:	5e                   	pop    %esi
+8010026b:	5d                   	pop    %ebp
+  release(&bcache.lock);
+8010026c:	e9 9f 42 00 00       	jmp    80104510 <release>
+    panic("brelse");
+80100271:	83 ec 0c             	sub    $0xc,%esp
+80100274:	68 86 6f 10 80       	push   $0x80106f86
+80100279:	e8 12 01 00 00       	call   80100390 <panic>
+8010027e:	66 90                	xchg   %ax,%ax
+
+80100280 <consoleread>:
+  }
+}
+
+int
+consoleread(struct inode *ip, char *dst, int n)
+{
+80100280:	55                   	push   %ebp
+80100281:	89 e5                	mov    %esp,%ebp
+80100283:	57                   	push   %edi
+80100284:	56                   	push   %esi
+80100285:	53                   	push   %ebx
+80100286:	83 ec 28             	sub    $0x28,%esp
+  uint target;
+  int c;
+
+  iunlock(ip);
+80100289:	ff 75 08             	pushl  0x8(%ebp)
+{
+8010028c:	8b 75 10             	mov    0x10(%ebp),%esi
+  iunlock(ip);
+8010028f:	e8 5c 15 00 00       	call   801017f0 <iunlock>
+  target = n;
+  acquire(&cons.lock);
+80100294:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
+8010029b:	e8 b0 41 00 00       	call   80104450 <acquire>
+        // caller gets a 0-byte result.
+        input.r--;
+      }
+      break;
+    }
+    *dst++ = c;
+801002a0:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  while(n > 0){
+801002a3:	83 c4 10             	add    $0x10,%esp
+801002a6:	31 c0                	xor    %eax,%eax
+    *dst++ = c;
+801002a8:	01 f7                	add    %esi,%edi
+  while(n > 0){
+801002aa:	85 f6                	test   %esi,%esi
+801002ac:	0f 8e a0 00 00 00    	jle    80100352 <consoleread+0xd2>
+801002b2:	89 f3                	mov    %esi,%ebx
+    while(input.r == input.w){
+801002b4:	8b 15 a0 ff 10 80    	mov    0x8010ffa0,%edx
+801002ba:	39 15 a4 ff 10 80    	cmp    %edx,0x8010ffa4
+801002c0:	74 29                	je     801002eb <consoleread+0x6b>
+801002c2:	eb 5c                	jmp    80100320 <consoleread+0xa0>
+801002c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      sleep(&input.r, &cons.lock);
+801002c8:	83 ec 08             	sub    $0x8,%esp
+801002cb:	68 20 a5 10 80       	push   $0x8010a520
+801002d0:	68 a0 ff 10 80       	push   $0x8010ffa0
+801002d5:	e8 96 3b 00 00       	call   80103e70 <sleep>
+    while(input.r == input.w){
+801002da:	8b 15 a0 ff 10 80    	mov    0x8010ffa0,%edx
+801002e0:	83 c4 10             	add    $0x10,%esp
+801002e3:	3b 15 a4 ff 10 80    	cmp    0x8010ffa4,%edx
+801002e9:	75 35                	jne    80100320 <consoleread+0xa0>
+      if(myproc()->killed){
+801002eb:	e8 e0 35 00 00       	call   801038d0 <myproc>
+801002f0:	8b 48 24             	mov    0x24(%eax),%ecx
+801002f3:	85 c9                	test   %ecx,%ecx
+801002f5:	74 d1                	je     801002c8 <consoleread+0x48>
+        release(&cons.lock);
+801002f7:	83 ec 0c             	sub    $0xc,%esp
+801002fa:	68 20 a5 10 80       	push   $0x8010a520
+801002ff:	e8 0c 42 00 00       	call   80104510 <release>
+        ilock(ip);
+80100304:	5a                   	pop    %edx
+80100305:	ff 75 08             	pushl  0x8(%ebp)
+80100308:	e8 03 14 00 00       	call   80101710 <ilock>
+        return -1;
+8010030d:	83 c4 10             	add    $0x10,%esp
+  }
+  release(&cons.lock);
+  ilock(ip);
+
+  return target - n;
+}
+80100310:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return -1;
+80100313:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80100318:	5b                   	pop    %ebx
+80100319:	5e                   	pop    %esi
+8010031a:	5f                   	pop    %edi
+8010031b:	5d                   	pop    %ebp
+8010031c:	c3                   	ret    
+8010031d:	8d 76 00             	lea    0x0(%esi),%esi
+    c = input.buf[input.r++ % INPUT_BUF];
+80100320:	8d 42 01             	lea    0x1(%edx),%eax
+80100323:	a3 a0 ff 10 80       	mov    %eax,0x8010ffa0
+80100328:	89 d0                	mov    %edx,%eax
+8010032a:	83 e0 7f             	and    $0x7f,%eax
+8010032d:	0f be 80 20 ff 10 80 	movsbl -0x7fef00e0(%eax),%eax
+    if(c == C('D')){  // EOF
+80100334:	83 f8 04             	cmp    $0x4,%eax
+80100337:	74 46                	je     8010037f <consoleread+0xff>
+    *dst++ = c;
+80100339:	89 da                	mov    %ebx,%edx
+    --n;
+8010033b:	83 eb 01             	sub    $0x1,%ebx
+    *dst++ = c;
+8010033e:	f7 da                	neg    %edx
+80100340:	88 04 17             	mov    %al,(%edi,%edx,1)
+    if(c == '\n')
+80100343:	83 f8 0a             	cmp    $0xa,%eax
+80100346:	74 31                	je     80100379 <consoleread+0xf9>
+  while(n > 0){
+80100348:	85 db                	test   %ebx,%ebx
+8010034a:	0f 85 64 ff ff ff    	jne    801002b4 <consoleread+0x34>
+80100350:	89 f0                	mov    %esi,%eax
+  release(&cons.lock);
+80100352:	83 ec 0c             	sub    $0xc,%esp
+80100355:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80100358:	68 20 a5 10 80       	push   $0x8010a520
+8010035d:	e8 ae 41 00 00       	call   80104510 <release>
+  ilock(ip);
+80100362:	58                   	pop    %eax
+80100363:	ff 75 08             	pushl  0x8(%ebp)
+80100366:	e8 a5 13 00 00       	call   80101710 <ilock>
+  return target - n;
+8010036b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010036e:	83 c4 10             	add    $0x10,%esp
+}
+80100371:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100374:	5b                   	pop    %ebx
+80100375:	5e                   	pop    %esi
+80100376:	5f                   	pop    %edi
+80100377:	5d                   	pop    %ebp
+80100378:	c3                   	ret    
+80100379:	89 f0                	mov    %esi,%eax
+8010037b:	29 d8                	sub    %ebx,%eax
+8010037d:	eb d3                	jmp    80100352 <consoleread+0xd2>
+      if(n < target){
+8010037f:	89 f0                	mov    %esi,%eax
+80100381:	29 d8                	sub    %ebx,%eax
+80100383:	39 f3                	cmp    %esi,%ebx
+80100385:	73 cb                	jae    80100352 <consoleread+0xd2>
+        input.r--;
+80100387:	89 15 a0 ff 10 80    	mov    %edx,0x8010ffa0
+8010038d:	eb c3                	jmp    80100352 <consoleread+0xd2>
+8010038f:	90                   	nop
+
+80100390 <panic>:
+{
+80100390:	55                   	push   %ebp
+80100391:	89 e5                	mov    %esp,%ebp
+80100393:	56                   	push   %esi
+80100394:	53                   	push   %ebx
+80100395:	83 ec 30             	sub    $0x30,%esp
+}
+
+static inline void
+cli(void)
+{
+  asm volatile("cli");
+80100398:	fa                   	cli    
+  cons.locking = 0;
+80100399:	c7 05 54 a5 10 80 00 	movl   $0x0,0x8010a554
+801003a0:	00 00 00 
+  getcallerpcs(&s, pcs);
+801003a3:	8d 5d d0             	lea    -0x30(%ebp),%ebx
+801003a6:	8d 75 f8             	lea    -0x8(%ebp),%esi
+  cprintf("lapicid %d: panic: ", lapicid());
+801003a9:	e8 72 24 00 00       	call   80102820 <lapicid>
+801003ae:	83 ec 08             	sub    $0x8,%esp
+801003b1:	50                   	push   %eax
+801003b2:	68 8d 6f 10 80       	push   $0x80106f8d
+801003b7:	e8 f4 02 00 00       	call   801006b0 <cprintf>
+  cprintf(s);
+801003bc:	58                   	pop    %eax
+801003bd:	ff 75 08             	pushl  0x8(%ebp)
+801003c0:	e8 eb 02 00 00       	call   801006b0 <cprintf>
+  cprintf("\n");
+801003c5:	c7 04 24 d7 78 10 80 	movl   $0x801078d7,(%esp)
+801003cc:	e8 df 02 00 00       	call   801006b0 <cprintf>
+  getcallerpcs(&s, pcs);
+801003d1:	8d 45 08             	lea    0x8(%ebp),%eax
+801003d4:	5a                   	pop    %edx
+801003d5:	59                   	pop    %ecx
+801003d6:	53                   	push   %ebx
+801003d7:	50                   	push   %eax
+801003d8:	e8 33 3f 00 00       	call   80104310 <getcallerpcs>
+  for(i=0; i<10; i++)
+801003dd:	83 c4 10             	add    $0x10,%esp
+    cprintf(" %p", pcs[i]);
+801003e0:	83 ec 08             	sub    $0x8,%esp
+801003e3:	ff 33                	pushl  (%ebx)
+801003e5:	83 c3 04             	add    $0x4,%ebx
+801003e8:	68 a1 6f 10 80       	push   $0x80106fa1
+801003ed:	e8 be 02 00 00       	call   801006b0 <cprintf>
+  for(i=0; i<10; i++)
+801003f2:	83 c4 10             	add    $0x10,%esp
+801003f5:	39 f3                	cmp    %esi,%ebx
+801003f7:	75 e7                	jne    801003e0 <panic+0x50>
+  panicked = 1; // freeze other CPU
+801003f9:	c7 05 58 a5 10 80 01 	movl   $0x1,0x8010a558
+80100400:	00 00 00 
+    ;
+80100403:	eb fe                	jmp    80100403 <panic+0x73>
+80100405:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010040c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100410 <consputc.part.0>:
+consputc(int c)
+80100410:	55                   	push   %ebp
+80100411:	89 e5                	mov    %esp,%ebp
+80100413:	57                   	push   %edi
+80100414:	56                   	push   %esi
+80100415:	53                   	push   %ebx
+80100416:	89 c3                	mov    %eax,%ebx
+80100418:	83 ec 1c             	sub    $0x1c,%esp
+  if(c == BACKSPACE){
+8010041b:	3d 00 01 00 00       	cmp    $0x100,%eax
+80100420:	0f 84 ea 00 00 00    	je     80100510 <consputc.part.0+0x100>
+    uartputc(c);
+80100426:	83 ec 0c             	sub    $0xc,%esp
+80100429:	50                   	push   %eax
+8010042a:	e8 51 57 00 00       	call   80105b80 <uartputc>
+8010042f:	83 c4 10             	add    $0x10,%esp
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80100432:	bf d4 03 00 00       	mov    $0x3d4,%edi
+80100437:	b8 0e 00 00 00       	mov    $0xe,%eax
+8010043c:	89 fa                	mov    %edi,%edx
+8010043e:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010043f:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
+80100444:	89 ca                	mov    %ecx,%edx
+80100446:	ec                   	in     (%dx),%al
+  pos = inb(CRTPORT+1) << 8;
+80100447:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010044a:	89 fa                	mov    %edi,%edx
+8010044c:	c1 e0 08             	shl    $0x8,%eax
+8010044f:	89 c6                	mov    %eax,%esi
+80100451:	b8 0f 00 00 00       	mov    $0xf,%eax
+80100456:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80100457:	89 ca                	mov    %ecx,%edx
+80100459:	ec                   	in     (%dx),%al
+  pos |= inb(CRTPORT+1);
+8010045a:	0f b6 c0             	movzbl %al,%eax
+8010045d:	09 f0                	or     %esi,%eax
+  if(c == '\n')
+8010045f:	83 fb 0a             	cmp    $0xa,%ebx
+80100462:	0f 84 90 00 00 00    	je     801004f8 <consputc.part.0+0xe8>
+  else if(c == BACKSPACE){
+80100468:	81 fb 00 01 00 00    	cmp    $0x100,%ebx
+8010046e:	74 70                	je     801004e0 <consputc.part.0+0xd0>
+    crt[pos++] = (c&0xff) | 0x0700;  // black on white
+80100470:	0f b6 db             	movzbl %bl,%ebx
+80100473:	8d 70 01             	lea    0x1(%eax),%esi
+80100476:	80 cf 07             	or     $0x7,%bh
+80100479:	66 89 9c 00 00 80 0b 	mov    %bx,-0x7ff48000(%eax,%eax,1)
+80100480:	80 
+  if(pos < 0 || pos > 25*80)
+80100481:	81 fe d0 07 00 00    	cmp    $0x7d0,%esi
+80100487:	0f 8f f9 00 00 00    	jg     80100586 <consputc.part.0+0x176>
+  if((pos/80) >= 24){  // Scroll up.
+8010048d:	81 fe 7f 07 00 00    	cmp    $0x77f,%esi
+80100493:	0f 8f a7 00 00 00    	jg     80100540 <consputc.part.0+0x130>
+80100499:	89 f0                	mov    %esi,%eax
+8010049b:	8d b4 36 00 80 0b 80 	lea    -0x7ff48000(%esi,%esi,1),%esi
+801004a2:	88 45 e7             	mov    %al,-0x19(%ebp)
+801004a5:	0f b6 fc             	movzbl %ah,%edi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801004a8:	bb d4 03 00 00       	mov    $0x3d4,%ebx
+801004ad:	b8 0e 00 00 00       	mov    $0xe,%eax
+801004b2:	89 da                	mov    %ebx,%edx
+801004b4:	ee                   	out    %al,(%dx)
+801004b5:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
+801004ba:	89 f8                	mov    %edi,%eax
+801004bc:	89 ca                	mov    %ecx,%edx
+801004be:	ee                   	out    %al,(%dx)
+801004bf:	b8 0f 00 00 00       	mov    $0xf,%eax
+801004c4:	89 da                	mov    %ebx,%edx
+801004c6:	ee                   	out    %al,(%dx)
+801004c7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+801004cb:	89 ca                	mov    %ecx,%edx
+801004cd:	ee                   	out    %al,(%dx)
+  crt[pos] = ' ' | 0x0700;
+801004ce:	b8 20 07 00 00       	mov    $0x720,%eax
+801004d3:	66 89 06             	mov    %ax,(%esi)
+}
+801004d6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801004d9:	5b                   	pop    %ebx
+801004da:	5e                   	pop    %esi
+801004db:	5f                   	pop    %edi
+801004dc:	5d                   	pop    %ebp
+801004dd:	c3                   	ret    
+801004de:	66 90                	xchg   %ax,%ax
+    if(pos > 0) --pos;
+801004e0:	8d 70 ff             	lea    -0x1(%eax),%esi
+801004e3:	85 c0                	test   %eax,%eax
+801004e5:	75 9a                	jne    80100481 <consputc.part.0+0x71>
+801004e7:	be 00 80 0b 80       	mov    $0x800b8000,%esi
+801004ec:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
+801004f0:	31 ff                	xor    %edi,%edi
+801004f2:	eb b4                	jmp    801004a8 <consputc.part.0+0x98>
+801004f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    pos += 80 - pos%80;
+801004f8:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
+801004fd:	f7 e2                	mul    %edx
+801004ff:	c1 ea 06             	shr    $0x6,%edx
+80100502:	8d 04 92             	lea    (%edx,%edx,4),%eax
+80100505:	c1 e0 04             	shl    $0x4,%eax
+80100508:	8d 70 50             	lea    0x50(%eax),%esi
+8010050b:	e9 71 ff ff ff       	jmp    80100481 <consputc.part.0+0x71>
+    uartputc('\b'); uartputc(' '); uartputc('\b');
+80100510:	83 ec 0c             	sub    $0xc,%esp
+80100513:	6a 08                	push   $0x8
+80100515:	e8 66 56 00 00       	call   80105b80 <uartputc>
+8010051a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+80100521:	e8 5a 56 00 00       	call   80105b80 <uartputc>
+80100526:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+8010052d:	e8 4e 56 00 00       	call   80105b80 <uartputc>
+80100532:	83 c4 10             	add    $0x10,%esp
+80100535:	e9 f8 fe ff ff       	jmp    80100432 <consputc.part.0+0x22>
+8010053a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+80100540:	83 ec 04             	sub    $0x4,%esp
+    pos -= 80;
+80100543:	8d 5e b0             	lea    -0x50(%esi),%ebx
+    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
+80100546:	bf 07 00 00 00       	mov    $0x7,%edi
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+8010054b:	68 60 0e 00 00       	push   $0xe60
+    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
+80100550:	8d b4 1b 00 80 0b 80 	lea    -0x7ff48000(%ebx,%ebx,1),%esi
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+80100557:	68 a0 80 0b 80       	push   $0x800b80a0
+8010055c:	68 00 80 0b 80       	push   $0x800b8000
+80100561:	e8 9a 40 00 00       	call   80104600 <memmove>
+    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
+80100566:	b8 80 07 00 00       	mov    $0x780,%eax
+8010056b:	83 c4 0c             	add    $0xc,%esp
+8010056e:	29 d8                	sub    %ebx,%eax
+80100570:	01 c0                	add    %eax,%eax
+80100572:	50                   	push   %eax
+80100573:	6a 00                	push   $0x0
+80100575:	56                   	push   %esi
+80100576:	e8 e5 3f 00 00       	call   80104560 <memset>
+8010057b:	88 5d e7             	mov    %bl,-0x19(%ebp)
+8010057e:	83 c4 10             	add    $0x10,%esp
+80100581:	e9 22 ff ff ff       	jmp    801004a8 <consputc.part.0+0x98>
+    panic("pos under/overflow");
+80100586:	83 ec 0c             	sub    $0xc,%esp
+80100589:	68 a5 6f 10 80       	push   $0x80106fa5
+8010058e:	e8 fd fd ff ff       	call   80100390 <panic>
+80100593:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010059a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801005a0 <printint>:
+{
+801005a0:	55                   	push   %ebp
+801005a1:	89 e5                	mov    %esp,%ebp
+801005a3:	57                   	push   %edi
+801005a4:	56                   	push   %esi
+801005a5:	53                   	push   %ebx
+801005a6:	83 ec 2c             	sub    $0x2c,%esp
+801005a9:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  if(sign && (sign = xx < 0))
+801005ac:	85 c9                	test   %ecx,%ecx
+801005ae:	74 04                	je     801005b4 <printint+0x14>
+801005b0:	85 c0                	test   %eax,%eax
+801005b2:	78 68                	js     8010061c <printint+0x7c>
+    x = xx;
+801005b4:	89 c1                	mov    %eax,%ecx
+801005b6:	31 f6                	xor    %esi,%esi
+  i = 0;
+801005b8:	31 db                	xor    %ebx,%ebx
+801005ba:	eb 04                	jmp    801005c0 <printint+0x20>
+  }while((x /= base) != 0);
+801005bc:	89 c1                	mov    %eax,%ecx
+    buf[i++] = digits[x % base];
+801005be:	89 fb                	mov    %edi,%ebx
+801005c0:	89 c8                	mov    %ecx,%eax
+801005c2:	31 d2                	xor    %edx,%edx
+801005c4:	8d 7b 01             	lea    0x1(%ebx),%edi
+801005c7:	f7 75 d4             	divl   -0x2c(%ebp)
+801005ca:	0f b6 92 d0 6f 10 80 	movzbl -0x7fef9030(%edx),%edx
+801005d1:	88 54 3d d7          	mov    %dl,-0x29(%ebp,%edi,1)
+  }while((x /= base) != 0);
+801005d5:	39 4d d4             	cmp    %ecx,-0x2c(%ebp)
+801005d8:	76 e2                	jbe    801005bc <printint+0x1c>
+  if(sign)
+801005da:	85 f6                	test   %esi,%esi
+801005dc:	75 32                	jne    80100610 <printint+0x70>
+801005de:	0f be c2             	movsbl %dl,%eax
+801005e1:	89 df                	mov    %ebx,%edi
+  if(panicked){
+801005e3:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
+801005e9:	85 c9                	test   %ecx,%ecx
+801005eb:	75 20                	jne    8010060d <printint+0x6d>
+801005ed:	8d 5c 3d d7          	lea    -0x29(%ebp,%edi,1),%ebx
+801005f1:	e8 1a fe ff ff       	call   80100410 <consputc.part.0>
+  while(--i >= 0)
+801005f6:	8d 45 d7             	lea    -0x29(%ebp),%eax
+801005f9:	39 d8                	cmp    %ebx,%eax
+801005fb:	74 27                	je     80100624 <printint+0x84>
+  if(panicked){
+801005fd:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+    consputc(buf[i]);
+80100603:	0f be 03             	movsbl (%ebx),%eax
+  if(panicked){
+80100606:	83 eb 01             	sub    $0x1,%ebx
+80100609:	85 d2                	test   %edx,%edx
+8010060b:	74 e4                	je     801005f1 <printint+0x51>
+  asm volatile("cli");
+8010060d:	fa                   	cli    
+      ;
+8010060e:	eb fe                	jmp    8010060e <printint+0x6e>
+    buf[i++] = '-';
+80100610:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+80100615:	b8 2d 00 00 00       	mov    $0x2d,%eax
+8010061a:	eb c7                	jmp    801005e3 <printint+0x43>
+    x = -xx;
+8010061c:	f7 d8                	neg    %eax
+8010061e:	89 ce                	mov    %ecx,%esi
+80100620:	89 c1                	mov    %eax,%ecx
+80100622:	eb 94                	jmp    801005b8 <printint+0x18>
+}
+80100624:	83 c4 2c             	add    $0x2c,%esp
+80100627:	5b                   	pop    %ebx
+80100628:	5e                   	pop    %esi
+80100629:	5f                   	pop    %edi
+8010062a:	5d                   	pop    %ebp
+8010062b:	c3                   	ret    
+8010062c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100630 <consolewrite>:
+
+int
+consolewrite(struct inode *ip, char *buf, int n)
+{
+80100630:	55                   	push   %ebp
+80100631:	89 e5                	mov    %esp,%ebp
+80100633:	57                   	push   %edi
+80100634:	56                   	push   %esi
+80100635:	53                   	push   %ebx
+80100636:	83 ec 18             	sub    $0x18,%esp
+80100639:	8b 7d 10             	mov    0x10(%ebp),%edi
+8010063c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  int i;
+
+  iunlock(ip);
+8010063f:	ff 75 08             	pushl  0x8(%ebp)
+80100642:	e8 a9 11 00 00       	call   801017f0 <iunlock>
+  acquire(&cons.lock);
+80100647:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
+8010064e:	e8 fd 3d 00 00       	call   80104450 <acquire>
+  for(i = 0; i < n; i++)
+80100653:	83 c4 10             	add    $0x10,%esp
+80100656:	85 ff                	test   %edi,%edi
+80100658:	7e 36                	jle    80100690 <consolewrite+0x60>
+  if(panicked){
+8010065a:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
+80100660:	85 c9                	test   %ecx,%ecx
+80100662:	75 21                	jne    80100685 <consolewrite+0x55>
+    consputc(buf[i] & 0xff);
+80100664:	0f b6 03             	movzbl (%ebx),%eax
+80100667:	8d 73 01             	lea    0x1(%ebx),%esi
+8010066a:	01 fb                	add    %edi,%ebx
+8010066c:	e8 9f fd ff ff       	call   80100410 <consputc.part.0>
+  for(i = 0; i < n; i++)
+80100671:	39 de                	cmp    %ebx,%esi
+80100673:	74 1b                	je     80100690 <consolewrite+0x60>
+  if(panicked){
+80100675:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+    consputc(buf[i] & 0xff);
+8010067b:	0f b6 06             	movzbl (%esi),%eax
+  if(panicked){
+8010067e:	83 c6 01             	add    $0x1,%esi
+80100681:	85 d2                	test   %edx,%edx
+80100683:	74 e7                	je     8010066c <consolewrite+0x3c>
+80100685:	fa                   	cli    
+      ;
+80100686:	eb fe                	jmp    80100686 <consolewrite+0x56>
+80100688:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010068f:	90                   	nop
+  release(&cons.lock);
+80100690:	83 ec 0c             	sub    $0xc,%esp
+80100693:	68 20 a5 10 80       	push   $0x8010a520
+80100698:	e8 73 3e 00 00       	call   80104510 <release>
+  ilock(ip);
+8010069d:	58                   	pop    %eax
+8010069e:	ff 75 08             	pushl  0x8(%ebp)
+801006a1:	e8 6a 10 00 00       	call   80101710 <ilock>
+
+  return n;
+}
+801006a6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801006a9:	89 f8                	mov    %edi,%eax
+801006ab:	5b                   	pop    %ebx
+801006ac:	5e                   	pop    %esi
+801006ad:	5f                   	pop    %edi
+801006ae:	5d                   	pop    %ebp
+801006af:	c3                   	ret    
+
+801006b0 <cprintf>:
+{
+801006b0:	55                   	push   %ebp
+801006b1:	89 e5                	mov    %esp,%ebp
+801006b3:	57                   	push   %edi
+801006b4:	56                   	push   %esi
+801006b5:	53                   	push   %ebx
+801006b6:	83 ec 1c             	sub    $0x1c,%esp
+  locking = cons.locking;
+801006b9:	a1 54 a5 10 80       	mov    0x8010a554,%eax
+801006be:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(locking)
+801006c1:	85 c0                	test   %eax,%eax
+801006c3:	0f 85 df 00 00 00    	jne    801007a8 <cprintf+0xf8>
+  if (fmt == 0)
+801006c9:	8b 45 08             	mov    0x8(%ebp),%eax
+801006cc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801006cf:	85 c0                	test   %eax,%eax
+801006d1:	0f 84 5e 01 00 00    	je     80100835 <cprintf+0x185>
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+801006d7:	0f b6 00             	movzbl (%eax),%eax
+801006da:	85 c0                	test   %eax,%eax
+801006dc:	74 32                	je     80100710 <cprintf+0x60>
+  argp = (uint*)(void*)(&fmt + 1);
+801006de:	8d 5d 0c             	lea    0xc(%ebp),%ebx
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+801006e1:	31 f6                	xor    %esi,%esi
+    if(c != '%'){
+801006e3:	83 f8 25             	cmp    $0x25,%eax
+801006e6:	74 40                	je     80100728 <cprintf+0x78>
+  if(panicked){
+801006e8:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
+801006ee:	85 c9                	test   %ecx,%ecx
+801006f0:	74 0b                	je     801006fd <cprintf+0x4d>
+801006f2:	fa                   	cli    
+      ;
+801006f3:	eb fe                	jmp    801006f3 <cprintf+0x43>
+801006f5:	8d 76 00             	lea    0x0(%esi),%esi
+801006f8:	b8 25 00 00 00       	mov    $0x25,%eax
+801006fd:	e8 0e fd ff ff       	call   80100410 <consputc.part.0>
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+80100702:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100705:	83 c6 01             	add    $0x1,%esi
+80100708:	0f b6 04 30          	movzbl (%eax,%esi,1),%eax
+8010070c:	85 c0                	test   %eax,%eax
+8010070e:	75 d3                	jne    801006e3 <cprintf+0x33>
+  if(locking)
+80100710:	8b 5d e0             	mov    -0x20(%ebp),%ebx
+80100713:	85 db                	test   %ebx,%ebx
+80100715:	0f 85 05 01 00 00    	jne    80100820 <cprintf+0x170>
+}
+8010071b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010071e:	5b                   	pop    %ebx
+8010071f:	5e                   	pop    %esi
+80100720:	5f                   	pop    %edi
+80100721:	5d                   	pop    %ebp
+80100722:	c3                   	ret    
+80100723:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100727:	90                   	nop
+    c = fmt[++i] & 0xff;
+80100728:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010072b:	83 c6 01             	add    $0x1,%esi
+8010072e:	0f b6 3c 30          	movzbl (%eax,%esi,1),%edi
+    if(c == 0)
+80100732:	85 ff                	test   %edi,%edi
+80100734:	74 da                	je     80100710 <cprintf+0x60>
+    switch(c){
+80100736:	83 ff 70             	cmp    $0x70,%edi
+80100739:	0f 84 7e 00 00 00    	je     801007bd <cprintf+0x10d>
+8010073f:	7f 26                	jg     80100767 <cprintf+0xb7>
+80100741:	83 ff 25             	cmp    $0x25,%edi
+80100744:	0f 84 be 00 00 00    	je     80100808 <cprintf+0x158>
+8010074a:	83 ff 64             	cmp    $0x64,%edi
+8010074d:	75 46                	jne    80100795 <cprintf+0xe5>
+      printint(*argp++, 10, 1);
+8010074f:	8b 03                	mov    (%ebx),%eax
+80100751:	8d 7b 04             	lea    0x4(%ebx),%edi
+80100754:	b9 01 00 00 00       	mov    $0x1,%ecx
+80100759:	ba 0a 00 00 00       	mov    $0xa,%edx
+8010075e:	89 fb                	mov    %edi,%ebx
+80100760:	e8 3b fe ff ff       	call   801005a0 <printint>
+      break;
+80100765:	eb 9b                	jmp    80100702 <cprintf+0x52>
+    switch(c){
+80100767:	83 ff 73             	cmp    $0x73,%edi
+8010076a:	75 24                	jne    80100790 <cprintf+0xe0>
+      if((s = (char*)*argp++) == 0)
+8010076c:	8d 7b 04             	lea    0x4(%ebx),%edi
+8010076f:	8b 1b                	mov    (%ebx),%ebx
+80100771:	85 db                	test   %ebx,%ebx
+80100773:	75 68                	jne    801007dd <cprintf+0x12d>
+80100775:	b8 28 00 00 00       	mov    $0x28,%eax
+        s = "(null)";
+8010077a:	bb b8 6f 10 80       	mov    $0x80106fb8,%ebx
+  if(panicked){
+8010077f:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100785:	85 d2                	test   %edx,%edx
+80100787:	74 4c                	je     801007d5 <cprintf+0x125>
+80100789:	fa                   	cli    
+      ;
+8010078a:	eb fe                	jmp    8010078a <cprintf+0xda>
+8010078c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    switch(c){
+80100790:	83 ff 78             	cmp    $0x78,%edi
+80100793:	74 28                	je     801007bd <cprintf+0x10d>
+  if(panicked){
+80100795:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+8010079b:	85 d2                	test   %edx,%edx
+8010079d:	74 4c                	je     801007eb <cprintf+0x13b>
+8010079f:	fa                   	cli    
+      ;
+801007a0:	eb fe                	jmp    801007a0 <cprintf+0xf0>
+801007a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    acquire(&cons.lock);
+801007a8:	83 ec 0c             	sub    $0xc,%esp
+801007ab:	68 20 a5 10 80       	push   $0x8010a520
+801007b0:	e8 9b 3c 00 00       	call   80104450 <acquire>
+801007b5:	83 c4 10             	add    $0x10,%esp
+801007b8:	e9 0c ff ff ff       	jmp    801006c9 <cprintf+0x19>
+      printint(*argp++, 16, 0);
+801007bd:	8b 03                	mov    (%ebx),%eax
+801007bf:	8d 7b 04             	lea    0x4(%ebx),%edi
+801007c2:	31 c9                	xor    %ecx,%ecx
+801007c4:	ba 10 00 00 00       	mov    $0x10,%edx
+801007c9:	89 fb                	mov    %edi,%ebx
+801007cb:	e8 d0 fd ff ff       	call   801005a0 <printint>
+      break;
+801007d0:	e9 2d ff ff ff       	jmp    80100702 <cprintf+0x52>
+801007d5:	e8 36 fc ff ff       	call   80100410 <consputc.part.0>
+      for(; *s; s++)
+801007da:	83 c3 01             	add    $0x1,%ebx
+801007dd:	0f be 03             	movsbl (%ebx),%eax
+801007e0:	84 c0                	test   %al,%al
+801007e2:	75 9b                	jne    8010077f <cprintf+0xcf>
+      if((s = (char*)*argp++) == 0)
+801007e4:	89 fb                	mov    %edi,%ebx
+801007e6:	e9 17 ff ff ff       	jmp    80100702 <cprintf+0x52>
+801007eb:	b8 25 00 00 00       	mov    $0x25,%eax
+801007f0:	e8 1b fc ff ff       	call   80100410 <consputc.part.0>
+  if(panicked){
+801007f5:	a1 58 a5 10 80       	mov    0x8010a558,%eax
+801007fa:	85 c0                	test   %eax,%eax
+801007fc:	74 4a                	je     80100848 <cprintf+0x198>
+801007fe:	fa                   	cli    
+      ;
+801007ff:	eb fe                	jmp    801007ff <cprintf+0x14f>
+80100801:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  if(panicked){
+80100808:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
+8010080e:	85 c9                	test   %ecx,%ecx
+80100810:	0f 84 e2 fe ff ff    	je     801006f8 <cprintf+0x48>
+80100816:	fa                   	cli    
+      ;
+80100817:	eb fe                	jmp    80100817 <cprintf+0x167>
+80100819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    release(&cons.lock);
+80100820:	83 ec 0c             	sub    $0xc,%esp
+80100823:	68 20 a5 10 80       	push   $0x8010a520
+80100828:	e8 e3 3c 00 00       	call   80104510 <release>
+8010082d:	83 c4 10             	add    $0x10,%esp
+}
+80100830:	e9 e6 fe ff ff       	jmp    8010071b <cprintf+0x6b>
+    panic("null fmt");
+80100835:	83 ec 0c             	sub    $0xc,%esp
+80100838:	68 bf 6f 10 80       	push   $0x80106fbf
+8010083d:	e8 4e fb ff ff       	call   80100390 <panic>
+80100842:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80100848:	89 f8                	mov    %edi,%eax
+8010084a:	e8 c1 fb ff ff       	call   80100410 <consputc.part.0>
+8010084f:	e9 ae fe ff ff       	jmp    80100702 <cprintf+0x52>
+80100854:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010085b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010085f:	90                   	nop
+
+80100860 <consoleintr>:
+{
+80100860:	55                   	push   %ebp
+80100861:	89 e5                	mov    %esp,%ebp
+80100863:	57                   	push   %edi
+80100864:	56                   	push   %esi
+  int c, doprocdump = 0;
+80100865:	31 f6                	xor    %esi,%esi
+{
+80100867:	53                   	push   %ebx
+80100868:	83 ec 18             	sub    $0x18,%esp
+8010086b:	8b 7d 08             	mov    0x8(%ebp),%edi
+  acquire(&cons.lock);
+8010086e:	68 20 a5 10 80       	push   $0x8010a520
+80100873:	e8 d8 3b 00 00       	call   80104450 <acquire>
+  while((c = getc()) >= 0){
+80100878:	83 c4 10             	add    $0x10,%esp
+8010087b:	ff d7                	call   *%edi
+8010087d:	89 c3                	mov    %eax,%ebx
+8010087f:	85 c0                	test   %eax,%eax
+80100881:	0f 88 38 01 00 00    	js     801009bf <consoleintr+0x15f>
+    switch(c){
+80100887:	83 fb 10             	cmp    $0x10,%ebx
+8010088a:	0f 84 f0 00 00 00    	je     80100980 <consoleintr+0x120>
+80100890:	0f 8e ba 00 00 00    	jle    80100950 <consoleintr+0xf0>
+80100896:	83 fb 15             	cmp    $0x15,%ebx
+80100899:	75 35                	jne    801008d0 <consoleintr+0x70>
+      while(input.e != input.w &&
+8010089b:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+801008a0:	39 05 a4 ff 10 80    	cmp    %eax,0x8010ffa4
+801008a6:	74 d3                	je     8010087b <consoleintr+0x1b>
+            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
+801008a8:	83 e8 01             	sub    $0x1,%eax
+801008ab:	89 c2                	mov    %eax,%edx
+801008ad:	83 e2 7f             	and    $0x7f,%edx
+      while(input.e != input.w &&
+801008b0:	80 ba 20 ff 10 80 0a 	cmpb   $0xa,-0x7fef00e0(%edx)
+801008b7:	74 c2                	je     8010087b <consoleintr+0x1b>
+  if(panicked){
+801008b9:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+        input.e--;
+801008bf:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
+  if(panicked){
+801008c4:	85 d2                	test   %edx,%edx
+801008c6:	0f 84 be 00 00 00    	je     8010098a <consoleintr+0x12a>
+801008cc:	fa                   	cli    
+      ;
+801008cd:	eb fe                	jmp    801008cd <consoleintr+0x6d>
+801008cf:	90                   	nop
+    switch(c){
+801008d0:	83 fb 7f             	cmp    $0x7f,%ebx
+801008d3:	0f 84 7c 00 00 00    	je     80100955 <consoleintr+0xf5>
+      if(c != 0 && input.e-input.r < INPUT_BUF){
+801008d9:	85 db                	test   %ebx,%ebx
+801008db:	74 9e                	je     8010087b <consoleintr+0x1b>
+801008dd:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+801008e2:	89 c2                	mov    %eax,%edx
+801008e4:	2b 15 a0 ff 10 80    	sub    0x8010ffa0,%edx
+801008ea:	83 fa 7f             	cmp    $0x7f,%edx
+801008ed:	77 8c                	ja     8010087b <consoleintr+0x1b>
+        c = (c == '\r') ? '\n' : c;
+801008ef:	8d 48 01             	lea    0x1(%eax),%ecx
+801008f2:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+801008f8:	83 e0 7f             	and    $0x7f,%eax
+        input.buf[input.e++ % INPUT_BUF] = c;
+801008fb:	89 0d a8 ff 10 80    	mov    %ecx,0x8010ffa8
+        c = (c == '\r') ? '\n' : c;
+80100901:	83 fb 0d             	cmp    $0xd,%ebx
+80100904:	0f 84 d1 00 00 00    	je     801009db <consoleintr+0x17b>
+        input.buf[input.e++ % INPUT_BUF] = c;
+8010090a:	88 98 20 ff 10 80    	mov    %bl,-0x7fef00e0(%eax)
+  if(panicked){
+80100910:	85 d2                	test   %edx,%edx
+80100912:	0f 85 ce 00 00 00    	jne    801009e6 <consoleintr+0x186>
+80100918:	89 d8                	mov    %ebx,%eax
+8010091a:	e8 f1 fa ff ff       	call   80100410 <consputc.part.0>
+        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
+8010091f:	83 fb 0a             	cmp    $0xa,%ebx
+80100922:	0f 84 d2 00 00 00    	je     801009fa <consoleintr+0x19a>
+80100928:	83 fb 04             	cmp    $0x4,%ebx
+8010092b:	0f 84 c9 00 00 00    	je     801009fa <consoleintr+0x19a>
+80100931:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
+80100936:	83 e8 80             	sub    $0xffffff80,%eax
+80100939:	39 05 a8 ff 10 80    	cmp    %eax,0x8010ffa8
+8010093f:	0f 85 36 ff ff ff    	jne    8010087b <consoleintr+0x1b>
+80100945:	e9 b5 00 00 00       	jmp    801009ff <consoleintr+0x19f>
+8010094a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    switch(c){
+80100950:	83 fb 08             	cmp    $0x8,%ebx
+80100953:	75 84                	jne    801008d9 <consoleintr+0x79>
+      if(input.e != input.w){
+80100955:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+8010095a:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+80100960:	0f 84 15 ff ff ff    	je     8010087b <consoleintr+0x1b>
+        input.e--;
+80100966:	83 e8 01             	sub    $0x1,%eax
+80100969:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
+  if(panicked){
+8010096e:	a1 58 a5 10 80       	mov    0x8010a558,%eax
+80100973:	85 c0                	test   %eax,%eax
+80100975:	74 39                	je     801009b0 <consoleintr+0x150>
+80100977:	fa                   	cli    
+      ;
+80100978:	eb fe                	jmp    80100978 <consoleintr+0x118>
+8010097a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      doprocdump = 1;
+80100980:	be 01 00 00 00       	mov    $0x1,%esi
+80100985:	e9 f1 fe ff ff       	jmp    8010087b <consoleintr+0x1b>
+8010098a:	b8 00 01 00 00       	mov    $0x100,%eax
+8010098f:	e8 7c fa ff ff       	call   80100410 <consputc.part.0>
+      while(input.e != input.w &&
+80100994:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+80100999:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+8010099f:	0f 85 03 ff ff ff    	jne    801008a8 <consoleintr+0x48>
+801009a5:	e9 d1 fe ff ff       	jmp    8010087b <consoleintr+0x1b>
+801009aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801009b0:	b8 00 01 00 00       	mov    $0x100,%eax
+801009b5:	e8 56 fa ff ff       	call   80100410 <consputc.part.0>
+801009ba:	e9 bc fe ff ff       	jmp    8010087b <consoleintr+0x1b>
+  release(&cons.lock);
+801009bf:	83 ec 0c             	sub    $0xc,%esp
+801009c2:	68 20 a5 10 80       	push   $0x8010a520
+801009c7:	e8 44 3b 00 00       	call   80104510 <release>
+  if(doprocdump) {
+801009cc:	83 c4 10             	add    $0x10,%esp
+801009cf:	85 f6                	test   %esi,%esi
+801009d1:	75 46                	jne    80100a19 <consoleintr+0x1b9>
+}
+801009d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801009d6:	5b                   	pop    %ebx
+801009d7:	5e                   	pop    %esi
+801009d8:	5f                   	pop    %edi
+801009d9:	5d                   	pop    %ebp
+801009da:	c3                   	ret    
+        input.buf[input.e++ % INPUT_BUF] = c;
+801009db:	c6 80 20 ff 10 80 0a 	movb   $0xa,-0x7fef00e0(%eax)
+  if(panicked){
+801009e2:	85 d2                	test   %edx,%edx
+801009e4:	74 0a                	je     801009f0 <consoleintr+0x190>
+801009e6:	fa                   	cli    
+      ;
+801009e7:	eb fe                	jmp    801009e7 <consoleintr+0x187>
+801009e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801009f0:	b8 0a 00 00 00       	mov    $0xa,%eax
+801009f5:	e8 16 fa ff ff       	call   80100410 <consputc.part.0>
+        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
+801009fa:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+          wakeup(&input.r);
+801009ff:	83 ec 0c             	sub    $0xc,%esp
+          input.w = input.e;
+80100a02:	a3 a4 ff 10 80       	mov    %eax,0x8010ffa4
+          wakeup(&input.r);
+80100a07:	68 a0 ff 10 80       	push   $0x8010ffa0
+80100a0c:	e8 0f 36 00 00       	call   80104020 <wakeup>
+80100a11:	83 c4 10             	add    $0x10,%esp
+80100a14:	e9 62 fe ff ff       	jmp    8010087b <consoleintr+0x1b>
+}
+80100a19:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100a1c:	5b                   	pop    %ebx
+80100a1d:	5e                   	pop    %esi
+80100a1e:	5f                   	pop    %edi
+80100a1f:	5d                   	pop    %ebp
+    procdump();  // now call procdump() wo. cons.lock held
+80100a20:	e9 db 36 00 00       	jmp    80104100 <procdump>
+80100a25:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100a2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100a30 <consoleinit>:
+
+void
+consoleinit(void)
+{
+80100a30:	55                   	push   %ebp
+80100a31:	89 e5                	mov    %esp,%ebp
+80100a33:	83 ec 10             	sub    $0x10,%esp
+  initlock(&cons.lock, "console");
+80100a36:	68 c8 6f 10 80       	push   $0x80106fc8
+80100a3b:	68 20 a5 10 80       	push   $0x8010a520
+80100a40:	e8 ab 38 00 00       	call   801042f0 <initlock>
+
+  devsw[CONSOLE].write = consolewrite;
+  devsw[CONSOLE].read = consoleread;
+  cons.locking = 1;
+
+  ioapicenable(IRQ_KBD, 0);
+80100a45:	58                   	pop    %eax
+80100a46:	5a                   	pop    %edx
+80100a47:	6a 00                	push   $0x0
+80100a49:	6a 01                	push   $0x1
+  devsw[CONSOLE].write = consolewrite;
+80100a4b:	c7 05 6c 09 11 80 30 	movl   $0x80100630,0x8011096c
+80100a52:	06 10 80 
+  devsw[CONSOLE].read = consoleread;
+80100a55:	c7 05 68 09 11 80 80 	movl   $0x80100280,0x80110968
+80100a5c:	02 10 80 
+  cons.locking = 1;
+80100a5f:	c7 05 54 a5 10 80 01 	movl   $0x1,0x8010a554
+80100a66:	00 00 00 
+  ioapicenable(IRQ_KBD, 0);
+80100a69:	e8 32 19 00 00       	call   801023a0 <ioapicenable>
+}
+80100a6e:	83 c4 10             	add    $0x10,%esp
+80100a71:	c9                   	leave  
+80100a72:	c3                   	ret    
+80100a73:	66 90                	xchg   %ax,%ax
+80100a75:	66 90                	xchg   %ax,%ax
+80100a77:	66 90                	xchg   %ax,%ax
+80100a79:	66 90                	xchg   %ax,%ax
+80100a7b:	66 90                	xchg   %ax,%ax
+80100a7d:	66 90                	xchg   %ax,%ax
+80100a7f:	90                   	nop
+
+80100a80 <exec>:
+#include "x86.h"
+#include "elf.h"
+
+int
+exec(char *path, char **argv)
+{
+80100a80:	55                   	push   %ebp
+80100a81:	89 e5                	mov    %esp,%ebp
+80100a83:	57                   	push   %edi
+80100a84:	56                   	push   %esi
+80100a85:	53                   	push   %ebx
+80100a86:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
+  uint argc, sz, sp, ustack[3+MAXARG+1];
+  struct elfhdr elf;
+  struct inode *ip;
+  struct proghdr ph;
+  pde_t *pgdir, *oldpgdir;
+  struct proc *curproc = myproc();
+80100a8c:	e8 3f 2e 00 00       	call   801038d0 <myproc>
+80100a91:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
+
+  begin_op();
+80100a97:	e8 f4 21 00 00       	call   80102c90 <begin_op>
+
+  if((ip = namei(path)) == 0){
+80100a9c:	83 ec 0c             	sub    $0xc,%esp
+80100a9f:	ff 75 08             	pushl  0x8(%ebp)
+80100aa2:	e8 09 15 00 00       	call   80101fb0 <namei>
+80100aa7:	83 c4 10             	add    $0x10,%esp
+80100aaa:	85 c0                	test   %eax,%eax
+80100aac:	0f 84 02 03 00 00    	je     80100db4 <exec+0x334>
+    end_op();
+    cprintf("exec: fail\n");
+    return -1;
+  }
+  ilock(ip);
+80100ab2:	83 ec 0c             	sub    $0xc,%esp
+80100ab5:	89 c3                	mov    %eax,%ebx
+80100ab7:	50                   	push   %eax
+80100ab8:	e8 53 0c 00 00       	call   80101710 <ilock>
+  pgdir = 0;
+
+  // Check ELF header
+  if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
+80100abd:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
+80100ac3:	6a 34                	push   $0x34
+80100ac5:	6a 00                	push   $0x0
+80100ac7:	50                   	push   %eax
+80100ac8:	53                   	push   %ebx
+80100ac9:	e8 22 0f 00 00       	call   801019f0 <readi>
+80100ace:	83 c4 20             	add    $0x20,%esp
+80100ad1:	83 f8 34             	cmp    $0x34,%eax
+80100ad4:	74 22                	je     80100af8 <exec+0x78>
+
+ bad:
+  if(pgdir)
+    freevm(pgdir);
+  if(ip){
+    iunlockput(ip);
+80100ad6:	83 ec 0c             	sub    $0xc,%esp
+80100ad9:	53                   	push   %ebx
+80100ada:	e8 c1 0e 00 00       	call   801019a0 <iunlockput>
+    end_op();
+80100adf:	e8 1c 22 00 00       	call   80102d00 <end_op>
+80100ae4:	83 c4 10             	add    $0x10,%esp
+  }
+  return -1;
+80100ae7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80100aec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100aef:	5b                   	pop    %ebx
+80100af0:	5e                   	pop    %esi
+80100af1:	5f                   	pop    %edi
+80100af2:	5d                   	pop    %ebp
+80100af3:	c3                   	ret    
+80100af4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if(elf.magic != ELF_MAGIC)
+80100af8:	81 bd 24 ff ff ff 7f 	cmpl   $0x464c457f,-0xdc(%ebp)
+80100aff:	45 4c 46 
+80100b02:	75 d2                	jne    80100ad6 <exec+0x56>
+  if((pgdir = setupkvm()) == 0)
+80100b04:	e8 c7 61 00 00       	call   80106cd0 <setupkvm>
+80100b09:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
+80100b0f:	85 c0                	test   %eax,%eax
+80100b11:	74 c3                	je     80100ad6 <exec+0x56>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100b13:	66 83 bd 50 ff ff ff 	cmpw   $0x0,-0xb0(%ebp)
+80100b1a:	00 
+80100b1b:	8b b5 40 ff ff ff    	mov    -0xc0(%ebp),%esi
+80100b21:	0f 84 ac 02 00 00    	je     80100dd3 <exec+0x353>
+  sz = 0;
+80100b27:	c7 85 f0 fe ff ff 00 	movl   $0x0,-0x110(%ebp)
+80100b2e:	00 00 00 
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100b31:	31 ff                	xor    %edi,%edi
+80100b33:	e9 8e 00 00 00       	jmp    80100bc6 <exec+0x146>
+80100b38:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100b3f:	90                   	nop
+    if(ph.type != ELF_PROG_LOAD)
+80100b40:	83 bd 04 ff ff ff 01 	cmpl   $0x1,-0xfc(%ebp)
+80100b47:	75 6c                	jne    80100bb5 <exec+0x135>
+    if(ph.memsz < ph.filesz)
+80100b49:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
+80100b4f:	3b 85 14 ff ff ff    	cmp    -0xec(%ebp),%eax
+80100b55:	0f 82 87 00 00 00    	jb     80100be2 <exec+0x162>
+    if(ph.vaddr + ph.memsz < ph.vaddr)
+80100b5b:	03 85 0c ff ff ff    	add    -0xf4(%ebp),%eax
+80100b61:	72 7f                	jb     80100be2 <exec+0x162>
+    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
+80100b63:	83 ec 04             	sub    $0x4,%esp
+80100b66:	50                   	push   %eax
+80100b67:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100b6d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80100b73:	e8 78 5f 00 00       	call   80106af0 <allocuvm>
+80100b78:	83 c4 10             	add    $0x10,%esp
+80100b7b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
+80100b81:	85 c0                	test   %eax,%eax
+80100b83:	74 5d                	je     80100be2 <exec+0x162>
+    if(ph.vaddr % PGSIZE != 0)
+80100b85:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
+80100b8b:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80100b90:	75 50                	jne    80100be2 <exec+0x162>
+    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
+80100b92:	83 ec 0c             	sub    $0xc,%esp
+80100b95:	ff b5 14 ff ff ff    	pushl  -0xec(%ebp)
+80100b9b:	ff b5 08 ff ff ff    	pushl  -0xf8(%ebp)
+80100ba1:	53                   	push   %ebx
+80100ba2:	50                   	push   %eax
+80100ba3:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80100ba9:	e8 82 5e 00 00       	call   80106a30 <loaduvm>
+80100bae:	83 c4 20             	add    $0x20,%esp
+80100bb1:	85 c0                	test   %eax,%eax
+80100bb3:	78 2d                	js     80100be2 <exec+0x162>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100bb5:	0f b7 85 50 ff ff ff 	movzwl -0xb0(%ebp),%eax
+80100bbc:	83 c7 01             	add    $0x1,%edi
+80100bbf:	83 c6 20             	add    $0x20,%esi
+80100bc2:	39 f8                	cmp    %edi,%eax
+80100bc4:	7e 3a                	jle    80100c00 <exec+0x180>
+    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
+80100bc6:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
+80100bcc:	6a 20                	push   $0x20
+80100bce:	56                   	push   %esi
+80100bcf:	50                   	push   %eax
+80100bd0:	53                   	push   %ebx
+80100bd1:	e8 1a 0e 00 00       	call   801019f0 <readi>
+80100bd6:	83 c4 10             	add    $0x10,%esp
+80100bd9:	83 f8 20             	cmp    $0x20,%eax
+80100bdc:	0f 84 5e ff ff ff    	je     80100b40 <exec+0xc0>
+    freevm(pgdir);
+80100be2:	83 ec 0c             	sub    $0xc,%esp
+80100be5:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80100beb:	e8 60 60 00 00       	call   80106c50 <freevm>
+  if(ip){
+80100bf0:	83 c4 10             	add    $0x10,%esp
+80100bf3:	e9 de fe ff ff       	jmp    80100ad6 <exec+0x56>
+80100bf8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100bff:	90                   	nop
+80100c00:	8b bd f0 fe ff ff    	mov    -0x110(%ebp),%edi
+80100c06:	81 c7 ff 0f 00 00    	add    $0xfff,%edi
+80100c0c:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80100c12:	8d b7 00 20 00 00    	lea    0x2000(%edi),%esi
+  iunlockput(ip);
+80100c18:	83 ec 0c             	sub    $0xc,%esp
+80100c1b:	53                   	push   %ebx
+80100c1c:	e8 7f 0d 00 00       	call   801019a0 <iunlockput>
+  end_op();
+80100c21:	e8 da 20 00 00       	call   80102d00 <end_op>
+  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
+80100c26:	83 c4 0c             	add    $0xc,%esp
+80100c29:	56                   	push   %esi
+80100c2a:	57                   	push   %edi
+80100c2b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
+80100c31:	57                   	push   %edi
+80100c32:	e8 b9 5e 00 00       	call   80106af0 <allocuvm>
+80100c37:	83 c4 10             	add    $0x10,%esp
+80100c3a:	89 c6                	mov    %eax,%esi
+80100c3c:	85 c0                	test   %eax,%eax
+80100c3e:	0f 84 94 00 00 00    	je     80100cd8 <exec+0x258>
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80100c44:	83 ec 08             	sub    $0x8,%esp
+80100c47:	8d 80 00 e0 ff ff    	lea    -0x2000(%eax),%eax
+  for(argc = 0; argv[argc]; argc++) {
+80100c4d:	89 f3                	mov    %esi,%ebx
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80100c4f:	50                   	push   %eax
+80100c50:	57                   	push   %edi
+  for(argc = 0; argv[argc]; argc++) {
+80100c51:	31 ff                	xor    %edi,%edi
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80100c53:	e8 18 61 00 00       	call   80106d70 <clearpteu>
+  for(argc = 0; argv[argc]; argc++) {
+80100c58:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100c5b:	83 c4 10             	add    $0x10,%esp
+80100c5e:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+80100c64:	8b 00                	mov    (%eax),%eax
+80100c66:	85 c0                	test   %eax,%eax
+80100c68:	0f 84 8b 00 00 00    	je     80100cf9 <exec+0x279>
+80100c6e:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
+80100c74:	8b b5 f4 fe ff ff    	mov    -0x10c(%ebp),%esi
+80100c7a:	eb 23                	jmp    80100c9f <exec+0x21f>
+80100c7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100c80:	8b 45 0c             	mov    0xc(%ebp),%eax
+    ustack[3+argc] = sp;
+80100c83:	89 9c bd 64 ff ff ff 	mov    %ebx,-0x9c(%ebp,%edi,4)
+  for(argc = 0; argv[argc]; argc++) {
+80100c8a:	83 c7 01             	add    $0x1,%edi
+    ustack[3+argc] = sp;
+80100c8d:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+  for(argc = 0; argv[argc]; argc++) {
+80100c93:	8b 04 b8             	mov    (%eax,%edi,4),%eax
+80100c96:	85 c0                	test   %eax,%eax
+80100c98:	74 59                	je     80100cf3 <exec+0x273>
+    if(argc >= MAXARG)
+80100c9a:	83 ff 20             	cmp    $0x20,%edi
+80100c9d:	74 39                	je     80100cd8 <exec+0x258>
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+80100c9f:	83 ec 0c             	sub    $0xc,%esp
+80100ca2:	50                   	push   %eax
+80100ca3:	e8 c8 3a 00 00       	call   80104770 <strlen>
+80100ca8:	f7 d0                	not    %eax
+80100caa:	01 c3                	add    %eax,%ebx
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+80100cac:	58                   	pop    %eax
+80100cad:	8b 45 0c             	mov    0xc(%ebp),%eax
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+80100cb0:	83 e3 fc             	and    $0xfffffffc,%ebx
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+80100cb3:	ff 34 b8             	pushl  (%eax,%edi,4)
+80100cb6:	e8 b5 3a 00 00       	call   80104770 <strlen>
+80100cbb:	83 c0 01             	add    $0x1,%eax
+80100cbe:	50                   	push   %eax
+80100cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100cc2:	ff 34 b8             	pushl  (%eax,%edi,4)
+80100cc5:	53                   	push   %ebx
+80100cc6:	56                   	push   %esi
+80100cc7:	e8 04 62 00 00       	call   80106ed0 <copyout>
+80100ccc:	83 c4 20             	add    $0x20,%esp
+80100ccf:	85 c0                	test   %eax,%eax
+80100cd1:	79 ad                	jns    80100c80 <exec+0x200>
+80100cd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100cd7:	90                   	nop
+    freevm(pgdir);
+80100cd8:	83 ec 0c             	sub    $0xc,%esp
+80100cdb:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80100ce1:	e8 6a 5f 00 00       	call   80106c50 <freevm>
+80100ce6:	83 c4 10             	add    $0x10,%esp
+  return -1;
+80100ce9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100cee:	e9 f9 fd ff ff       	jmp    80100aec <exec+0x6c>
+80100cf3:	8b b5 f0 fe ff ff    	mov    -0x110(%ebp),%esi
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+80100cf9:	8d 04 bd 04 00 00 00 	lea    0x4(,%edi,4),%eax
+80100d00:	89 d9                	mov    %ebx,%ecx
+  ustack[3+argc] = 0;
+80100d02:	c7 84 bd 64 ff ff ff 	movl   $0x0,-0x9c(%ebp,%edi,4)
+80100d09:	00 00 00 00 
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+80100d0d:	29 c1                	sub    %eax,%ecx
+  sp -= (3+argc+1) * 4;
+80100d0f:	83 c0 0c             	add    $0xc,%eax
+  ustack[1] = argc;
+80100d12:	89 bd 5c ff ff ff    	mov    %edi,-0xa4(%ebp)
+  sp -= (3+argc+1) * 4;
+80100d18:	29 c3                	sub    %eax,%ebx
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+80100d1a:	50                   	push   %eax
+80100d1b:	52                   	push   %edx
+80100d1c:	53                   	push   %ebx
+80100d1d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+  ustack[0] = 0xffffffff;  // fake return PC
+80100d23:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
+80100d2a:	ff ff ff 
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+80100d2d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+80100d33:	e8 98 61 00 00       	call   80106ed0 <copyout>
+80100d38:	83 c4 10             	add    $0x10,%esp
+80100d3b:	85 c0                	test   %eax,%eax
+80100d3d:	78 99                	js     80100cd8 <exec+0x258>
+  for(last=s=path; *s; s++)
+80100d3f:	8b 45 08             	mov    0x8(%ebp),%eax
+80100d42:	8b 55 08             	mov    0x8(%ebp),%edx
+80100d45:	0f b6 00             	movzbl (%eax),%eax
+80100d48:	84 c0                	test   %al,%al
+80100d4a:	74 13                	je     80100d5f <exec+0x2df>
+80100d4c:	89 d1                	mov    %edx,%ecx
+80100d4e:	66 90                	xchg   %ax,%ax
+    if(*s == '/')
+80100d50:	83 c1 01             	add    $0x1,%ecx
+80100d53:	3c 2f                	cmp    $0x2f,%al
+  for(last=s=path; *s; s++)
+80100d55:	0f b6 01             	movzbl (%ecx),%eax
+    if(*s == '/')
+80100d58:	0f 44 d1             	cmove  %ecx,%edx
+  for(last=s=path; *s; s++)
+80100d5b:	84 c0                	test   %al,%al
+80100d5d:	75 f1                	jne    80100d50 <exec+0x2d0>
+  safestrcpy(curproc->name, last, sizeof(curproc->name));
+80100d5f:	8b bd ec fe ff ff    	mov    -0x114(%ebp),%edi
+80100d65:	83 ec 04             	sub    $0x4,%esp
+80100d68:	6a 10                	push   $0x10
+80100d6a:	89 f8                	mov    %edi,%eax
+80100d6c:	52                   	push   %edx
+80100d6d:	83 c0 6c             	add    $0x6c,%eax
+80100d70:	50                   	push   %eax
+80100d71:	e8 ba 39 00 00       	call   80104730 <safestrcpy>
+  curproc->pgdir = pgdir;
+80100d76:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
+  oldpgdir = curproc->pgdir;
+80100d7c:	89 f8                	mov    %edi,%eax
+80100d7e:	8b 7f 04             	mov    0x4(%edi),%edi
+  curproc->sz = sz;
+80100d81:	89 30                	mov    %esi,(%eax)
+  curproc->pgdir = pgdir;
+80100d83:	89 48 04             	mov    %ecx,0x4(%eax)
+  curproc->tf->eip = elf.entry;  // main
+80100d86:	89 c1                	mov    %eax,%ecx
+80100d88:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
+80100d8e:	8b 40 18             	mov    0x18(%eax),%eax
+80100d91:	89 50 38             	mov    %edx,0x38(%eax)
+  curproc->tf->esp = sp;
+80100d94:	8b 41 18             	mov    0x18(%ecx),%eax
+80100d97:	89 58 44             	mov    %ebx,0x44(%eax)
+  switchuvm(curproc);
+80100d9a:	89 0c 24             	mov    %ecx,(%esp)
+80100d9d:	e8 fe 5a 00 00       	call   801068a0 <switchuvm>
+  freevm(oldpgdir);
+80100da2:	89 3c 24             	mov    %edi,(%esp)
+80100da5:	e8 a6 5e 00 00       	call   80106c50 <freevm>
+  return 0;
+80100daa:	83 c4 10             	add    $0x10,%esp
+80100dad:	31 c0                	xor    %eax,%eax
+80100daf:	e9 38 fd ff ff       	jmp    80100aec <exec+0x6c>
+    end_op();
+80100db4:	e8 47 1f 00 00       	call   80102d00 <end_op>
+    cprintf("exec: fail\n");
+80100db9:	83 ec 0c             	sub    $0xc,%esp
+80100dbc:	68 e1 6f 10 80       	push   $0x80106fe1
+80100dc1:	e8 ea f8 ff ff       	call   801006b0 <cprintf>
+    return -1;
+80100dc6:	83 c4 10             	add    $0x10,%esp
+80100dc9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100dce:	e9 19 fd ff ff       	jmp    80100aec <exec+0x6c>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100dd3:	31 ff                	xor    %edi,%edi
+80100dd5:	be 00 20 00 00       	mov    $0x2000,%esi
+80100dda:	e9 39 fe ff ff       	jmp    80100c18 <exec+0x198>
+80100ddf:	90                   	nop
+
+80100de0 <fileinit>:
+  struct file file[NFILE];
+} ftable;
+
+void
+fileinit(void)
+{
+80100de0:	55                   	push   %ebp
+80100de1:	89 e5                	mov    %esp,%ebp
+80100de3:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ftable.lock, "ftable");
+80100de6:	68 ed 6f 10 80       	push   $0x80106fed
+80100deb:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100df0:	e8 fb 34 00 00       	call   801042f0 <initlock>
+}
+80100df5:	83 c4 10             	add    $0x10,%esp
+80100df8:	c9                   	leave  
+80100df9:	c3                   	ret    
+80100dfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80100e00 <filealloc>:
+
+// Allocate a file structure.
+struct file*
+filealloc(void)
+{
+80100e00:	55                   	push   %ebp
+80100e01:	89 e5                	mov    %esp,%ebp
+80100e03:	53                   	push   %ebx
+  struct file *f;
+
+  acquire(&ftable.lock);
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+80100e04:	bb f4 ff 10 80       	mov    $0x8010fff4,%ebx
+{
+80100e09:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ftable.lock);
+80100e0c:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100e11:	e8 3a 36 00 00       	call   80104450 <acquire>
+80100e16:	83 c4 10             	add    $0x10,%esp
+80100e19:	eb 10                	jmp    80100e2b <filealloc+0x2b>
+80100e1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100e1f:	90                   	nop
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+80100e20:	83 c3 18             	add    $0x18,%ebx
+80100e23:	81 fb 54 09 11 80    	cmp    $0x80110954,%ebx
+80100e29:	74 25                	je     80100e50 <filealloc+0x50>
+    if(f->ref == 0){
+80100e2b:	8b 43 04             	mov    0x4(%ebx),%eax
+80100e2e:	85 c0                	test   %eax,%eax
+80100e30:	75 ee                	jne    80100e20 <filealloc+0x20>
+      f->ref = 1;
+      release(&ftable.lock);
+80100e32:	83 ec 0c             	sub    $0xc,%esp
+      f->ref = 1;
+80100e35:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
+      release(&ftable.lock);
+80100e3c:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100e41:	e8 ca 36 00 00       	call   80104510 <release>
+      return f;
+    }
+  }
+  release(&ftable.lock);
+  return 0;
+}
+80100e46:	89 d8                	mov    %ebx,%eax
+      return f;
+80100e48:	83 c4 10             	add    $0x10,%esp
+}
+80100e4b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100e4e:	c9                   	leave  
+80100e4f:	c3                   	ret    
+  release(&ftable.lock);
+80100e50:	83 ec 0c             	sub    $0xc,%esp
+  return 0;
+80100e53:	31 db                	xor    %ebx,%ebx
+  release(&ftable.lock);
+80100e55:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100e5a:	e8 b1 36 00 00       	call   80104510 <release>
+}
+80100e5f:	89 d8                	mov    %ebx,%eax
+  return 0;
+80100e61:	83 c4 10             	add    $0x10,%esp
+}
+80100e64:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100e67:	c9                   	leave  
+80100e68:	c3                   	ret    
+80100e69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80100e70 <filedup>:
+
+// Increment ref count for file f.
+struct file*
+filedup(struct file *f)
+{
+80100e70:	55                   	push   %ebp
+80100e71:	89 e5                	mov    %esp,%ebp
+80100e73:	53                   	push   %ebx
+80100e74:	83 ec 10             	sub    $0x10,%esp
+80100e77:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&ftable.lock);
+80100e7a:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100e7f:	e8 cc 35 00 00       	call   80104450 <acquire>
+  if(f->ref < 1)
+80100e84:	8b 43 04             	mov    0x4(%ebx),%eax
+80100e87:	83 c4 10             	add    $0x10,%esp
+80100e8a:	85 c0                	test   %eax,%eax
+80100e8c:	7e 1a                	jle    80100ea8 <filedup+0x38>
+    panic("filedup");
+  f->ref++;
+80100e8e:	83 c0 01             	add    $0x1,%eax
+  release(&ftable.lock);
+80100e91:	83 ec 0c             	sub    $0xc,%esp
+  f->ref++;
+80100e94:	89 43 04             	mov    %eax,0x4(%ebx)
+  release(&ftable.lock);
+80100e97:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100e9c:	e8 6f 36 00 00       	call   80104510 <release>
+  return f;
+}
+80100ea1:	89 d8                	mov    %ebx,%eax
+80100ea3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100ea6:	c9                   	leave  
+80100ea7:	c3                   	ret    
+    panic("filedup");
+80100ea8:	83 ec 0c             	sub    $0xc,%esp
+80100eab:	68 f4 6f 10 80       	push   $0x80106ff4
+80100eb0:	e8 db f4 ff ff       	call   80100390 <panic>
+80100eb5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100ebc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100ec0 <fileclose>:
+
+// Close file f.  (Decrement ref count, close when reaches 0.)
+void
+fileclose(struct file *f)
+{
+80100ec0:	55                   	push   %ebp
+80100ec1:	89 e5                	mov    %esp,%ebp
+80100ec3:	57                   	push   %edi
+80100ec4:	56                   	push   %esi
+80100ec5:	53                   	push   %ebx
+80100ec6:	83 ec 28             	sub    $0x28,%esp
+80100ec9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct file ff;
+
+  acquire(&ftable.lock);
+80100ecc:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100ed1:	e8 7a 35 00 00       	call   80104450 <acquire>
+  if(f->ref < 1)
+80100ed6:	8b 43 04             	mov    0x4(%ebx),%eax
+80100ed9:	83 c4 10             	add    $0x10,%esp
+80100edc:	85 c0                	test   %eax,%eax
+80100ede:	0f 8e a3 00 00 00    	jle    80100f87 <fileclose+0xc7>
+    panic("fileclose");
+  if(--f->ref > 0){
+80100ee4:	83 e8 01             	sub    $0x1,%eax
+80100ee7:	89 43 04             	mov    %eax,0x4(%ebx)
+80100eea:	75 44                	jne    80100f30 <fileclose+0x70>
+    release(&ftable.lock);
+    return;
+  }
+  ff = *f;
+80100eec:	0f b6 43 09          	movzbl 0x9(%ebx),%eax
+  f->ref = 0;
+  f->type = FD_NONE;
+  release(&ftable.lock);
+80100ef0:	83 ec 0c             	sub    $0xc,%esp
+  ff = *f;
+80100ef3:	8b 3b                	mov    (%ebx),%edi
+  f->type = FD_NONE;
+80100ef5:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  ff = *f;
+80100efb:	8b 73 0c             	mov    0xc(%ebx),%esi
+80100efe:	88 45 e7             	mov    %al,-0x19(%ebp)
+80100f01:	8b 43 10             	mov    0x10(%ebx),%eax
+  release(&ftable.lock);
+80100f04:	68 c0 ff 10 80       	push   $0x8010ffc0
+  ff = *f;
+80100f09:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  release(&ftable.lock);
+80100f0c:	e8 ff 35 00 00       	call   80104510 <release>
+
+  if(ff.type == FD_PIPE)
+80100f11:	83 c4 10             	add    $0x10,%esp
+80100f14:	83 ff 01             	cmp    $0x1,%edi
+80100f17:	74 2f                	je     80100f48 <fileclose+0x88>
+    pipeclose(ff.pipe, ff.writable);
+  else if(ff.type == FD_INODE){
+80100f19:	83 ff 02             	cmp    $0x2,%edi
+80100f1c:	74 4a                	je     80100f68 <fileclose+0xa8>
+    begin_op();
+    iput(ff.ip);
+    end_op();
+  }
+}
+80100f1e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100f21:	5b                   	pop    %ebx
+80100f22:	5e                   	pop    %esi
+80100f23:	5f                   	pop    %edi
+80100f24:	5d                   	pop    %ebp
+80100f25:	c3                   	ret    
+80100f26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100f2d:	8d 76 00             	lea    0x0(%esi),%esi
+    release(&ftable.lock);
+80100f30:	c7 45 08 c0 ff 10 80 	movl   $0x8010ffc0,0x8(%ebp)
+}
+80100f37:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100f3a:	5b                   	pop    %ebx
+80100f3b:	5e                   	pop    %esi
+80100f3c:	5f                   	pop    %edi
+80100f3d:	5d                   	pop    %ebp
+    release(&ftable.lock);
+80100f3e:	e9 cd 35 00 00       	jmp    80104510 <release>
+80100f43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100f47:	90                   	nop
+    pipeclose(ff.pipe, ff.writable);
+80100f48:	0f be 5d e7          	movsbl -0x19(%ebp),%ebx
+80100f4c:	83 ec 08             	sub    $0x8,%esp
+80100f4f:	53                   	push   %ebx
+80100f50:	56                   	push   %esi
+80100f51:	e8 ea 24 00 00       	call   80103440 <pipeclose>
+80100f56:	83 c4 10             	add    $0x10,%esp
+}
+80100f59:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100f5c:	5b                   	pop    %ebx
+80100f5d:	5e                   	pop    %esi
+80100f5e:	5f                   	pop    %edi
+80100f5f:	5d                   	pop    %ebp
+80100f60:	c3                   	ret    
+80100f61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    begin_op();
+80100f68:	e8 23 1d 00 00       	call   80102c90 <begin_op>
+    iput(ff.ip);
+80100f6d:	83 ec 0c             	sub    $0xc,%esp
+80100f70:	ff 75 e0             	pushl  -0x20(%ebp)
+80100f73:	e8 c8 08 00 00       	call   80101840 <iput>
+    end_op();
+80100f78:	83 c4 10             	add    $0x10,%esp
+}
+80100f7b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100f7e:	5b                   	pop    %ebx
+80100f7f:	5e                   	pop    %esi
+80100f80:	5f                   	pop    %edi
+80100f81:	5d                   	pop    %ebp
+    end_op();
+80100f82:	e9 79 1d 00 00       	jmp    80102d00 <end_op>
+    panic("fileclose");
+80100f87:	83 ec 0c             	sub    $0xc,%esp
+80100f8a:	68 fc 6f 10 80       	push   $0x80106ffc
+80100f8f:	e8 fc f3 ff ff       	call   80100390 <panic>
+80100f94:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100f9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100f9f:	90                   	nop
+
+80100fa0 <filestat>:
+
+// Get metadata about file f.
+int
+filestat(struct file *f, struct stat *st)
+{
+80100fa0:	55                   	push   %ebp
+80100fa1:	89 e5                	mov    %esp,%ebp
+80100fa3:	53                   	push   %ebx
+80100fa4:	83 ec 04             	sub    $0x4,%esp
+80100fa7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(f->type == FD_INODE){
+80100faa:	83 3b 02             	cmpl   $0x2,(%ebx)
+80100fad:	75 31                	jne    80100fe0 <filestat+0x40>
+    ilock(f->ip);
+80100faf:	83 ec 0c             	sub    $0xc,%esp
+80100fb2:	ff 73 10             	pushl  0x10(%ebx)
+80100fb5:	e8 56 07 00 00       	call   80101710 <ilock>
+    stati(f->ip, st);
+80100fba:	58                   	pop    %eax
+80100fbb:	5a                   	pop    %edx
+80100fbc:	ff 75 0c             	pushl  0xc(%ebp)
+80100fbf:	ff 73 10             	pushl  0x10(%ebx)
+80100fc2:	e8 f9 09 00 00       	call   801019c0 <stati>
+    iunlock(f->ip);
+80100fc7:	59                   	pop    %ecx
+80100fc8:	ff 73 10             	pushl  0x10(%ebx)
+80100fcb:	e8 20 08 00 00       	call   801017f0 <iunlock>
+    return 0;
+80100fd0:	83 c4 10             	add    $0x10,%esp
+80100fd3:	31 c0                	xor    %eax,%eax
+  }
+  return -1;
+}
+80100fd5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100fd8:	c9                   	leave  
+80100fd9:	c3                   	ret    
+80100fda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  return -1;
+80100fe0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80100fe5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100fe8:	c9                   	leave  
+80100fe9:	c3                   	ret    
+80100fea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80100ff0 <fileread>:
+
+// Read from file f.
+int
+fileread(struct file *f, char *addr, int n)
+{
+80100ff0:	55                   	push   %ebp
+80100ff1:	89 e5                	mov    %esp,%ebp
+80100ff3:	57                   	push   %edi
+80100ff4:	56                   	push   %esi
+80100ff5:	53                   	push   %ebx
+80100ff6:	83 ec 0c             	sub    $0xc,%esp
+80100ff9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80100ffc:	8b 75 0c             	mov    0xc(%ebp),%esi
+80100fff:	8b 7d 10             	mov    0x10(%ebp),%edi
+  int r;
+
+  if(f->readable == 0)
+80101002:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
+80101006:	74 60                	je     80101068 <fileread+0x78>
+    return -1;
+  if(f->type == FD_PIPE)
+80101008:	8b 03                	mov    (%ebx),%eax
+8010100a:	83 f8 01             	cmp    $0x1,%eax
+8010100d:	74 41                	je     80101050 <fileread+0x60>
+    return piperead(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+8010100f:	83 f8 02             	cmp    $0x2,%eax
+80101012:	75 5b                	jne    8010106f <fileread+0x7f>
+    ilock(f->ip);
+80101014:	83 ec 0c             	sub    $0xc,%esp
+80101017:	ff 73 10             	pushl  0x10(%ebx)
+8010101a:	e8 f1 06 00 00       	call   80101710 <ilock>
+    if((r = readi(f->ip, addr, f->off, n)) > 0)
+8010101f:	57                   	push   %edi
+80101020:	ff 73 14             	pushl  0x14(%ebx)
+80101023:	56                   	push   %esi
+80101024:	ff 73 10             	pushl  0x10(%ebx)
+80101027:	e8 c4 09 00 00       	call   801019f0 <readi>
+8010102c:	83 c4 20             	add    $0x20,%esp
+8010102f:	89 c6                	mov    %eax,%esi
+80101031:	85 c0                	test   %eax,%eax
+80101033:	7e 03                	jle    80101038 <fileread+0x48>
+      f->off += r;
+80101035:	01 43 14             	add    %eax,0x14(%ebx)
+    iunlock(f->ip);
+80101038:	83 ec 0c             	sub    $0xc,%esp
+8010103b:	ff 73 10             	pushl  0x10(%ebx)
+8010103e:	e8 ad 07 00 00       	call   801017f0 <iunlock>
+    return r;
+80101043:	83 c4 10             	add    $0x10,%esp
+  }
+  panic("fileread");
+}
+80101046:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101049:	89 f0                	mov    %esi,%eax
+8010104b:	5b                   	pop    %ebx
+8010104c:	5e                   	pop    %esi
+8010104d:	5f                   	pop    %edi
+8010104e:	5d                   	pop    %ebp
+8010104f:	c3                   	ret    
+    return piperead(f->pipe, addr, n);
+80101050:	8b 43 0c             	mov    0xc(%ebx),%eax
+80101053:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+80101056:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101059:	5b                   	pop    %ebx
+8010105a:	5e                   	pop    %esi
+8010105b:	5f                   	pop    %edi
+8010105c:	5d                   	pop    %ebp
+    return piperead(f->pipe, addr, n);
+8010105d:	e9 8e 25 00 00       	jmp    801035f0 <piperead>
+80101062:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+80101068:	be ff ff ff ff       	mov    $0xffffffff,%esi
+8010106d:	eb d7                	jmp    80101046 <fileread+0x56>
+  panic("fileread");
+8010106f:	83 ec 0c             	sub    $0xc,%esp
+80101072:	68 06 70 10 80       	push   $0x80107006
+80101077:	e8 14 f3 ff ff       	call   80100390 <panic>
+8010107c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101080 <filewrite>:
+
+//PAGEBREAK!
+// Write to file f.
+int
+filewrite(struct file *f, char *addr, int n)
+{
+80101080:	55                   	push   %ebp
+80101081:	89 e5                	mov    %esp,%ebp
+80101083:	57                   	push   %edi
+80101084:	56                   	push   %esi
+80101085:	53                   	push   %ebx
+80101086:	83 ec 1c             	sub    $0x1c,%esp
+80101089:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010108c:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010108f:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80101092:	8b 45 10             	mov    0x10(%ebp),%eax
+  int r;
+
+  if(f->writable == 0)
+80101095:	80 7b 09 00          	cmpb   $0x0,0x9(%ebx)
+{
+80101099:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(f->writable == 0)
+8010109c:	0f 84 bb 00 00 00    	je     8010115d <filewrite+0xdd>
+    return -1;
+  if(f->type == FD_PIPE)
+801010a2:	8b 03                	mov    (%ebx),%eax
+801010a4:	83 f8 01             	cmp    $0x1,%eax
+801010a7:	0f 84 bf 00 00 00    	je     8010116c <filewrite+0xec>
+    return pipewrite(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+801010ad:	83 f8 02             	cmp    $0x2,%eax
+801010b0:	0f 85 c8 00 00 00    	jne    8010117e <filewrite+0xfe>
+    // and 2 blocks of slop for non-aligned writes.
+    // this really belongs lower down, since writei()
+    // might be writing a device like the console.
+    int max = ((MAXOPBLOCKS-1-1-2) / 2) * 512;
+    int i = 0;
+    while(i < n){
+801010b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    int i = 0;
+801010b9:	31 ff                	xor    %edi,%edi
+    while(i < n){
+801010bb:	85 c0                	test   %eax,%eax
+801010bd:	7f 30                	jg     801010ef <filewrite+0x6f>
+801010bf:	e9 94 00 00 00       	jmp    80101158 <filewrite+0xd8>
+801010c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        n1 = max;
+
+      begin_op();
+      ilock(f->ip);
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+        f->off += r;
+801010c8:	01 43 14             	add    %eax,0x14(%ebx)
+      iunlock(f->ip);
+801010cb:	83 ec 0c             	sub    $0xc,%esp
+801010ce:	ff 73 10             	pushl  0x10(%ebx)
+        f->off += r;
+801010d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
+      iunlock(f->ip);
+801010d4:	e8 17 07 00 00       	call   801017f0 <iunlock>
+      end_op();
+801010d9:	e8 22 1c 00 00       	call   80102d00 <end_op>
+
+      if(r < 0)
+        break;
+      if(r != n1)
+801010de:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801010e1:	83 c4 10             	add    $0x10,%esp
+801010e4:	39 f0                	cmp    %esi,%eax
+801010e6:	75 60                	jne    80101148 <filewrite+0xc8>
+        panic("short filewrite");
+      i += r;
+801010e8:	01 c7                	add    %eax,%edi
+    while(i < n){
+801010ea:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+801010ed:	7e 69                	jle    80101158 <filewrite+0xd8>
+      int n1 = n - i;
+801010ef:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+801010f2:	b8 00 06 00 00       	mov    $0x600,%eax
+801010f7:	29 fe                	sub    %edi,%esi
+      if(n1 > max)
+801010f9:	81 fe 00 06 00 00    	cmp    $0x600,%esi
+801010ff:	0f 4f f0             	cmovg  %eax,%esi
+      begin_op();
+80101102:	e8 89 1b 00 00       	call   80102c90 <begin_op>
+      ilock(f->ip);
+80101107:	83 ec 0c             	sub    $0xc,%esp
+8010110a:	ff 73 10             	pushl  0x10(%ebx)
+8010110d:	e8 fe 05 00 00       	call   80101710 <ilock>
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+80101112:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101115:	56                   	push   %esi
+80101116:	ff 73 14             	pushl  0x14(%ebx)
+80101119:	01 f8                	add    %edi,%eax
+8010111b:	50                   	push   %eax
+8010111c:	ff 73 10             	pushl  0x10(%ebx)
+8010111f:	e8 cc 09 00 00       	call   80101af0 <writei>
+80101124:	83 c4 20             	add    $0x20,%esp
+80101127:	85 c0                	test   %eax,%eax
+80101129:	7f 9d                	jg     801010c8 <filewrite+0x48>
+      iunlock(f->ip);
+8010112b:	83 ec 0c             	sub    $0xc,%esp
+8010112e:	ff 73 10             	pushl  0x10(%ebx)
+80101131:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80101134:	e8 b7 06 00 00       	call   801017f0 <iunlock>
+      end_op();
+80101139:	e8 c2 1b 00 00       	call   80102d00 <end_op>
+      if(r < 0)
+8010113e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101141:	83 c4 10             	add    $0x10,%esp
+80101144:	85 c0                	test   %eax,%eax
+80101146:	75 15                	jne    8010115d <filewrite+0xdd>
+        panic("short filewrite");
+80101148:	83 ec 0c             	sub    $0xc,%esp
+8010114b:	68 0f 70 10 80       	push   $0x8010700f
+80101150:	e8 3b f2 ff ff       	call   80100390 <panic>
+80101155:	8d 76 00             	lea    0x0(%esi),%esi
+    }
+    return i == n ? n : -1;
+80101158:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+8010115b:	74 05                	je     80101162 <filewrite+0xe2>
+8010115d:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+  }
+  panic("filewrite");
+}
+80101162:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101165:	89 f8                	mov    %edi,%eax
+80101167:	5b                   	pop    %ebx
+80101168:	5e                   	pop    %esi
+80101169:	5f                   	pop    %edi
+8010116a:	5d                   	pop    %ebp
+8010116b:	c3                   	ret    
+    return pipewrite(f->pipe, addr, n);
+8010116c:	8b 43 0c             	mov    0xc(%ebx),%eax
+8010116f:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+80101172:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101175:	5b                   	pop    %ebx
+80101176:	5e                   	pop    %esi
+80101177:	5f                   	pop    %edi
+80101178:	5d                   	pop    %ebp
+    return pipewrite(f->pipe, addr, n);
+80101179:	e9 62 23 00 00       	jmp    801034e0 <pipewrite>
+  panic("filewrite");
+8010117e:	83 ec 0c             	sub    $0xc,%esp
+80101181:	68 15 70 10 80       	push   $0x80107015
+80101186:	e8 05 f2 ff ff       	call   80100390 <panic>
+8010118b:	66 90                	xchg   %ax,%ax
+8010118d:	66 90                	xchg   %ax,%ax
+8010118f:	90                   	nop
+
+80101190 <bfree>:
+}
+
+// Free a disk block.
+static void
+bfree(int dev, uint b)
+{
+80101190:	55                   	push   %ebp
+80101191:	89 e5                	mov    %esp,%ebp
+80101193:	56                   	push   %esi
+80101194:	53                   	push   %ebx
+80101195:	89 d3                	mov    %edx,%ebx
+  struct buf *bp;
+  int bi, m;
+
+  bp = bread(dev, BBLOCK(b, sb));
+80101197:	c1 ea 0c             	shr    $0xc,%edx
+8010119a:	03 15 d8 09 11 80    	add    0x801109d8,%edx
+801011a0:	83 ec 08             	sub    $0x8,%esp
+801011a3:	52                   	push   %edx
+801011a4:	50                   	push   %eax
+801011a5:	e8 26 ef ff ff       	call   801000d0 <bread>
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+801011aa:	89 d9                	mov    %ebx,%ecx
+  if((bp->data[bi/8] & m) == 0)
+801011ac:	c1 fb 03             	sar    $0x3,%ebx
+  m = 1 << (bi % 8);
+801011af:	ba 01 00 00 00       	mov    $0x1,%edx
+801011b4:	83 e1 07             	and    $0x7,%ecx
+  if((bp->data[bi/8] & m) == 0)
+801011b7:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
+801011bd:	83 c4 10             	add    $0x10,%esp
+  m = 1 << (bi % 8);
+801011c0:	d3 e2                	shl    %cl,%edx
+  if((bp->data[bi/8] & m) == 0)
+801011c2:	0f b6 4c 18 5c       	movzbl 0x5c(%eax,%ebx,1),%ecx
+801011c7:	85 d1                	test   %edx,%ecx
+801011c9:	74 25                	je     801011f0 <bfree+0x60>
+    panic("freeing free block");
+  bp->data[bi/8] &= ~m;
+801011cb:	f7 d2                	not    %edx
+801011cd:	89 c6                	mov    %eax,%esi
+  log_write(bp);
+801011cf:	83 ec 0c             	sub    $0xc,%esp
+  bp->data[bi/8] &= ~m;
+801011d2:	21 ca                	and    %ecx,%edx
+801011d4:	88 54 1e 5c          	mov    %dl,0x5c(%esi,%ebx,1)
+  log_write(bp);
+801011d8:	56                   	push   %esi
+801011d9:	e8 92 1c 00 00       	call   80102e70 <log_write>
+  brelse(bp);
+801011de:	89 34 24             	mov    %esi,(%esp)
+801011e1:	e8 0a f0 ff ff       	call   801001f0 <brelse>
+}
+801011e6:	83 c4 10             	add    $0x10,%esp
+801011e9:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801011ec:	5b                   	pop    %ebx
+801011ed:	5e                   	pop    %esi
+801011ee:	5d                   	pop    %ebp
+801011ef:	c3                   	ret    
+    panic("freeing free block");
+801011f0:	83 ec 0c             	sub    $0xc,%esp
+801011f3:	68 1f 70 10 80       	push   $0x8010701f
+801011f8:	e8 93 f1 ff ff       	call   80100390 <panic>
+801011fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80101200 <balloc>:
+{
+80101200:	55                   	push   %ebp
+80101201:	89 e5                	mov    %esp,%ebp
+80101203:	57                   	push   %edi
+80101204:	56                   	push   %esi
+80101205:	53                   	push   %ebx
+80101206:	83 ec 1c             	sub    $0x1c,%esp
+  for(b = 0; b < sb.size; b += BPB){
+80101209:	8b 0d c0 09 11 80    	mov    0x801109c0,%ecx
+{
+8010120f:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  for(b = 0; b < sb.size; b += BPB){
+80101212:	85 c9                	test   %ecx,%ecx
+80101214:	0f 84 87 00 00 00    	je     801012a1 <balloc+0xa1>
+8010121a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+    bp = bread(dev, BBLOCK(b, sb));
+80101221:	8b 75 dc             	mov    -0x24(%ebp),%esi
+80101224:	83 ec 08             	sub    $0x8,%esp
+80101227:	89 f0                	mov    %esi,%eax
+80101229:	c1 f8 0c             	sar    $0xc,%eax
+8010122c:	03 05 d8 09 11 80    	add    0x801109d8,%eax
+80101232:	50                   	push   %eax
+80101233:	ff 75 d8             	pushl  -0x28(%ebp)
+80101236:	e8 95 ee ff ff       	call   801000d0 <bread>
+8010123b:	83 c4 10             	add    $0x10,%esp
+8010123e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+80101241:	a1 c0 09 11 80       	mov    0x801109c0,%eax
+80101246:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80101249:	31 c0                	xor    %eax,%eax
+8010124b:	eb 2f                	jmp    8010127c <balloc+0x7c>
+8010124d:	8d 76 00             	lea    0x0(%esi),%esi
+      m = 1 << (bi % 8);
+80101250:	89 c1                	mov    %eax,%ecx
+80101252:	bb 01 00 00 00       	mov    $0x1,%ebx
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+80101257:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+      m = 1 << (bi % 8);
+8010125a:	83 e1 07             	and    $0x7,%ecx
+8010125d:	d3 e3                	shl    %cl,%ebx
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+8010125f:	89 c1                	mov    %eax,%ecx
+80101261:	c1 f9 03             	sar    $0x3,%ecx
+80101264:	0f b6 7c 0a 5c       	movzbl 0x5c(%edx,%ecx,1),%edi
+80101269:	89 fa                	mov    %edi,%edx
+8010126b:	85 df                	test   %ebx,%edi
+8010126d:	74 41                	je     801012b0 <balloc+0xb0>
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+8010126f:	83 c0 01             	add    $0x1,%eax
+80101272:	83 c6 01             	add    $0x1,%esi
+80101275:	3d 00 10 00 00       	cmp    $0x1000,%eax
+8010127a:	74 05                	je     80101281 <balloc+0x81>
+8010127c:	39 75 e0             	cmp    %esi,-0x20(%ebp)
+8010127f:	77 cf                	ja     80101250 <balloc+0x50>
+    brelse(bp);
+80101281:	83 ec 0c             	sub    $0xc,%esp
+80101284:	ff 75 e4             	pushl  -0x1c(%ebp)
+80101287:	e8 64 ef ff ff       	call   801001f0 <brelse>
+  for(b = 0; b < sb.size; b += BPB){
+8010128c:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
+80101293:	83 c4 10             	add    $0x10,%esp
+80101296:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101299:	39 05 c0 09 11 80    	cmp    %eax,0x801109c0
+8010129f:	77 80                	ja     80101221 <balloc+0x21>
+  panic("balloc: out of blocks");
+801012a1:	83 ec 0c             	sub    $0xc,%esp
+801012a4:	68 32 70 10 80       	push   $0x80107032
+801012a9:	e8 e2 f0 ff ff       	call   80100390 <panic>
+801012ae:	66 90                	xchg   %ax,%ax
+        bp->data[bi/8] |= m;  // Mark block in use.
+801012b0:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+        log_write(bp);
+801012b3:	83 ec 0c             	sub    $0xc,%esp
+        bp->data[bi/8] |= m;  // Mark block in use.
+801012b6:	09 da                	or     %ebx,%edx
+801012b8:	88 54 0f 5c          	mov    %dl,0x5c(%edi,%ecx,1)
+        log_write(bp);
+801012bc:	57                   	push   %edi
+801012bd:	e8 ae 1b 00 00       	call   80102e70 <log_write>
+        brelse(bp);
+801012c2:	89 3c 24             	mov    %edi,(%esp)
+801012c5:	e8 26 ef ff ff       	call   801001f0 <brelse>
+  bp = bread(dev, bno);
+801012ca:	58                   	pop    %eax
+801012cb:	5a                   	pop    %edx
+801012cc:	56                   	push   %esi
+801012cd:	ff 75 d8             	pushl  -0x28(%ebp)
+801012d0:	e8 fb ed ff ff       	call   801000d0 <bread>
+  memset(bp->data, 0, BSIZE);
+801012d5:	83 c4 0c             	add    $0xc,%esp
+  bp = bread(dev, bno);
+801012d8:	89 c3                	mov    %eax,%ebx
+  memset(bp->data, 0, BSIZE);
+801012da:	8d 40 5c             	lea    0x5c(%eax),%eax
+801012dd:	68 00 02 00 00       	push   $0x200
+801012e2:	6a 00                	push   $0x0
+801012e4:	50                   	push   %eax
+801012e5:	e8 76 32 00 00       	call   80104560 <memset>
+  log_write(bp);
+801012ea:	89 1c 24             	mov    %ebx,(%esp)
+801012ed:	e8 7e 1b 00 00       	call   80102e70 <log_write>
+  brelse(bp);
+801012f2:	89 1c 24             	mov    %ebx,(%esp)
+801012f5:	e8 f6 ee ff ff       	call   801001f0 <brelse>
+}
+801012fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801012fd:	89 f0                	mov    %esi,%eax
+801012ff:	5b                   	pop    %ebx
+80101300:	5e                   	pop    %esi
+80101301:	5f                   	pop    %edi
+80101302:	5d                   	pop    %ebp
+80101303:	c3                   	ret    
+80101304:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010130b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010130f:	90                   	nop
+
+80101310 <iget>:
+// Find the inode with number inum on device dev
+// and return the in-memory copy. Does not lock
+// the inode and does not read it from disk.
+static struct inode*
+iget(uint dev, uint inum)
+{
+80101310:	55                   	push   %ebp
+80101311:	89 e5                	mov    %esp,%ebp
+80101313:	57                   	push   %edi
+80101314:	89 c7                	mov    %eax,%edi
+80101316:	56                   	push   %esi
+  struct inode *ip, *empty;
+
+  acquire(&icache.lock);
+
+  // Is the inode already cached?
+  empty = 0;
+80101317:	31 f6                	xor    %esi,%esi
+{
+80101319:	53                   	push   %ebx
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+8010131a:	bb 14 0a 11 80       	mov    $0x80110a14,%ebx
+{
+8010131f:	83 ec 28             	sub    $0x28,%esp
+80101322:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  acquire(&icache.lock);
+80101325:	68 e0 09 11 80       	push   $0x801109e0
+8010132a:	e8 21 31 00 00       	call   80104450 <acquire>
+8010132f:	83 c4 10             	add    $0x10,%esp
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+80101332:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80101335:	eb 1b                	jmp    80101352 <iget+0x42>
+80101337:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010133e:	66 90                	xchg   %ax,%ax
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+80101340:	39 3b                	cmp    %edi,(%ebx)
+80101342:	74 6c                	je     801013b0 <iget+0xa0>
+80101344:	81 c3 90 00 00 00    	add    $0x90,%ebx
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+8010134a:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+80101350:	73 26                	jae    80101378 <iget+0x68>
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+80101352:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80101355:	85 c9                	test   %ecx,%ecx
+80101357:	7f e7                	jg     80101340 <iget+0x30>
+      ip->ref++;
+      release(&icache.lock);
+      return ip;
+    }
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+80101359:	85 f6                	test   %esi,%esi
+8010135b:	75 e7                	jne    80101344 <iget+0x34>
+8010135d:	8d 83 90 00 00 00    	lea    0x90(%ebx),%eax
+80101363:	85 c9                	test   %ecx,%ecx
+80101365:	75 70                	jne    801013d7 <iget+0xc7>
+80101367:	89 de                	mov    %ebx,%esi
+80101369:	89 c3                	mov    %eax,%ebx
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+8010136b:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+80101371:	72 df                	jb     80101352 <iget+0x42>
+80101373:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101377:	90                   	nop
+      empty = ip;
+  }
+
+  // Recycle an inode cache entry.
+  if(empty == 0)
+80101378:	85 f6                	test   %esi,%esi
+8010137a:	74 74                	je     801013f0 <iget+0xe0>
+  ip = empty;
+  ip->dev = dev;
+  ip->inum = inum;
+  ip->ref = 1;
+  ip->valid = 0;
+  release(&icache.lock);
+8010137c:	83 ec 0c             	sub    $0xc,%esp
+  ip->dev = dev;
+8010137f:	89 3e                	mov    %edi,(%esi)
+  ip->inum = inum;
+80101381:	89 56 04             	mov    %edx,0x4(%esi)
+  ip->ref = 1;
+80101384:	c7 46 08 01 00 00 00 	movl   $0x1,0x8(%esi)
+  ip->valid = 0;
+8010138b:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
+  release(&icache.lock);
+80101392:	68 e0 09 11 80       	push   $0x801109e0
+80101397:	e8 74 31 00 00       	call   80104510 <release>
+
+  return ip;
+8010139c:	83 c4 10             	add    $0x10,%esp
+}
+8010139f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801013a2:	89 f0                	mov    %esi,%eax
+801013a4:	5b                   	pop    %ebx
+801013a5:	5e                   	pop    %esi
+801013a6:	5f                   	pop    %edi
+801013a7:	5d                   	pop    %ebp
+801013a8:	c3                   	ret    
+801013a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+801013b0:	39 53 04             	cmp    %edx,0x4(%ebx)
+801013b3:	75 8f                	jne    80101344 <iget+0x34>
+      release(&icache.lock);
+801013b5:	83 ec 0c             	sub    $0xc,%esp
+      ip->ref++;
+801013b8:	83 c1 01             	add    $0x1,%ecx
+      return ip;
+801013bb:	89 de                	mov    %ebx,%esi
+      ip->ref++;
+801013bd:	89 4b 08             	mov    %ecx,0x8(%ebx)
+      release(&icache.lock);
+801013c0:	68 e0 09 11 80       	push   $0x801109e0
+801013c5:	e8 46 31 00 00       	call   80104510 <release>
+      return ip;
+801013ca:	83 c4 10             	add    $0x10,%esp
+}
+801013cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801013d0:	89 f0                	mov    %esi,%eax
+801013d2:	5b                   	pop    %ebx
+801013d3:	5e                   	pop    %esi
+801013d4:	5f                   	pop    %edi
+801013d5:	5d                   	pop    %ebp
+801013d6:	c3                   	ret    
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+801013d7:	3d 34 26 11 80       	cmp    $0x80112634,%eax
+801013dc:	73 12                	jae    801013f0 <iget+0xe0>
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+801013de:	8b 48 08             	mov    0x8(%eax),%ecx
+801013e1:	89 c3                	mov    %eax,%ebx
+801013e3:	85 c9                	test   %ecx,%ecx
+801013e5:	0f 8f 55 ff ff ff    	jg     80101340 <iget+0x30>
+801013eb:	e9 6d ff ff ff       	jmp    8010135d <iget+0x4d>
+    panic("iget: no inodes");
+801013f0:	83 ec 0c             	sub    $0xc,%esp
+801013f3:	68 48 70 10 80       	push   $0x80107048
+801013f8:	e8 93 ef ff ff       	call   80100390 <panic>
+801013fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80101400 <bmap>:
+
+// Return the disk block address of the nth block in inode ip.
+// If there is no such block, bmap allocates one.
+static uint
+bmap(struct inode *ip, uint bn)
+{
+80101400:	55                   	push   %ebp
+80101401:	89 e5                	mov    %esp,%ebp
+80101403:	57                   	push   %edi
+80101404:	56                   	push   %esi
+80101405:	89 c6                	mov    %eax,%esi
+80101407:	53                   	push   %ebx
+80101408:	83 ec 1c             	sub    $0x1c,%esp
+  uint addr, *a;
+  struct buf *bp;
+
+  if(bn < NDIRECT){
+8010140b:	83 fa 0b             	cmp    $0xb,%edx
+8010140e:	0f 86 84 00 00 00    	jbe    80101498 <bmap+0x98>
+    if((addr = ip->addrs[bn]) == 0)
+      ip->addrs[bn] = addr = balloc(ip->dev);
+    return addr;
+  }
+  bn -= NDIRECT;
+80101414:	8d 5a f4             	lea    -0xc(%edx),%ebx
+
+  if(bn < NINDIRECT){
+80101417:	83 fb 7f             	cmp    $0x7f,%ebx
+8010141a:	0f 87 98 00 00 00    	ja     801014b8 <bmap+0xb8>
+    // Load indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT]) == 0)
+80101420:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
+80101426:	8b 00                	mov    (%eax),%eax
+80101428:	85 d2                	test   %edx,%edx
+8010142a:	74 54                	je     80101480 <bmap+0x80>
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+    bp = bread(ip->dev, addr);
+8010142c:	83 ec 08             	sub    $0x8,%esp
+8010142f:	52                   	push   %edx
+80101430:	50                   	push   %eax
+80101431:	e8 9a ec ff ff       	call   801000d0 <bread>
+    a = (uint*)bp->data;
+    if((addr = a[bn]) == 0){
+80101436:	83 c4 10             	add    $0x10,%esp
+80101439:	8d 54 98 5c          	lea    0x5c(%eax,%ebx,4),%edx
+    bp = bread(ip->dev, addr);
+8010143d:	89 c7                	mov    %eax,%edi
+    if((addr = a[bn]) == 0){
+8010143f:	8b 1a                	mov    (%edx),%ebx
+80101441:	85 db                	test   %ebx,%ebx
+80101443:	74 1b                	je     80101460 <bmap+0x60>
+      a[bn] = addr = balloc(ip->dev);
+      log_write(bp);
+    }
+    brelse(bp);
+80101445:	83 ec 0c             	sub    $0xc,%esp
+80101448:	57                   	push   %edi
+80101449:	e8 a2 ed ff ff       	call   801001f0 <brelse>
+    return addr;
+8010144e:	83 c4 10             	add    $0x10,%esp
+  }
+
+  panic("bmap: out of range");
+}
+80101451:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101454:	89 d8                	mov    %ebx,%eax
+80101456:	5b                   	pop    %ebx
+80101457:	5e                   	pop    %esi
+80101458:	5f                   	pop    %edi
+80101459:	5d                   	pop    %ebp
+8010145a:	c3                   	ret    
+8010145b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010145f:	90                   	nop
+      a[bn] = addr = balloc(ip->dev);
+80101460:	8b 06                	mov    (%esi),%eax
+80101462:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80101465:	e8 96 fd ff ff       	call   80101200 <balloc>
+8010146a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+      log_write(bp);
+8010146d:	83 ec 0c             	sub    $0xc,%esp
+      a[bn] = addr = balloc(ip->dev);
+80101470:	89 c3                	mov    %eax,%ebx
+80101472:	89 02                	mov    %eax,(%edx)
+      log_write(bp);
+80101474:	57                   	push   %edi
+80101475:	e8 f6 19 00 00       	call   80102e70 <log_write>
+8010147a:	83 c4 10             	add    $0x10,%esp
+8010147d:	eb c6                	jmp    80101445 <bmap+0x45>
+8010147f:	90                   	nop
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+80101480:	e8 7b fd ff ff       	call   80101200 <balloc>
+80101485:	89 c2                	mov    %eax,%edx
+80101487:	89 86 8c 00 00 00    	mov    %eax,0x8c(%esi)
+8010148d:	8b 06                	mov    (%esi),%eax
+8010148f:	eb 9b                	jmp    8010142c <bmap+0x2c>
+80101491:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if((addr = ip->addrs[bn]) == 0)
+80101498:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+8010149b:	8b 5f 5c             	mov    0x5c(%edi),%ebx
+8010149e:	85 db                	test   %ebx,%ebx
+801014a0:	75 af                	jne    80101451 <bmap+0x51>
+      ip->addrs[bn] = addr = balloc(ip->dev);
+801014a2:	8b 00                	mov    (%eax),%eax
+801014a4:	e8 57 fd ff ff       	call   80101200 <balloc>
+801014a9:	89 47 5c             	mov    %eax,0x5c(%edi)
+801014ac:	89 c3                	mov    %eax,%ebx
+}
+801014ae:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801014b1:	89 d8                	mov    %ebx,%eax
+801014b3:	5b                   	pop    %ebx
+801014b4:	5e                   	pop    %esi
+801014b5:	5f                   	pop    %edi
+801014b6:	5d                   	pop    %ebp
+801014b7:	c3                   	ret    
+  panic("bmap: out of range");
+801014b8:	83 ec 0c             	sub    $0xc,%esp
+801014bb:	68 58 70 10 80       	push   $0x80107058
+801014c0:	e8 cb ee ff ff       	call   80100390 <panic>
+801014c5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801014cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801014d0 <readsb>:
+{
+801014d0:	55                   	push   %ebp
+801014d1:	89 e5                	mov    %esp,%ebp
+801014d3:	56                   	push   %esi
+801014d4:	53                   	push   %ebx
+801014d5:	8b 75 0c             	mov    0xc(%ebp),%esi
+  bp = bread(dev, 1);
+801014d8:	83 ec 08             	sub    $0x8,%esp
+801014db:	6a 01                	push   $0x1
+801014dd:	ff 75 08             	pushl  0x8(%ebp)
+801014e0:	e8 eb eb ff ff       	call   801000d0 <bread>
+  memmove(sb, bp->data, sizeof(*sb));
+801014e5:	83 c4 0c             	add    $0xc,%esp
+  bp = bread(dev, 1);
+801014e8:	89 c3                	mov    %eax,%ebx
+  memmove(sb, bp->data, sizeof(*sb));
+801014ea:	8d 40 5c             	lea    0x5c(%eax),%eax
+801014ed:	6a 1c                	push   $0x1c
+801014ef:	50                   	push   %eax
+801014f0:	56                   	push   %esi
+801014f1:	e8 0a 31 00 00       	call   80104600 <memmove>
+  brelse(bp);
+801014f6:	89 5d 08             	mov    %ebx,0x8(%ebp)
+801014f9:	83 c4 10             	add    $0x10,%esp
+}
+801014fc:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801014ff:	5b                   	pop    %ebx
+80101500:	5e                   	pop    %esi
+80101501:	5d                   	pop    %ebp
+  brelse(bp);
+80101502:	e9 e9 ec ff ff       	jmp    801001f0 <brelse>
+80101507:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010150e:	66 90                	xchg   %ax,%ax
+
+80101510 <iinit>:
+{
+80101510:	55                   	push   %ebp
+80101511:	89 e5                	mov    %esp,%ebp
+80101513:	53                   	push   %ebx
+80101514:	bb 20 0a 11 80       	mov    $0x80110a20,%ebx
+80101519:	83 ec 0c             	sub    $0xc,%esp
+  initlock(&icache.lock, "icache");
+8010151c:	68 6b 70 10 80       	push   $0x8010706b
+80101521:	68 e0 09 11 80       	push   $0x801109e0
+80101526:	e8 c5 2d 00 00       	call   801042f0 <initlock>
+  for(i = 0; i < NINODE; i++) {
+8010152b:	83 c4 10             	add    $0x10,%esp
+8010152e:	66 90                	xchg   %ax,%ax
+    initsleeplock(&icache.inode[i].lock, "inode");
+80101530:	83 ec 08             	sub    $0x8,%esp
+80101533:	68 72 70 10 80       	push   $0x80107072
+80101538:	53                   	push   %ebx
+80101539:	81 c3 90 00 00 00    	add    $0x90,%ebx
+8010153f:	e8 7c 2c 00 00       	call   801041c0 <initsleeplock>
+  for(i = 0; i < NINODE; i++) {
+80101544:	83 c4 10             	add    $0x10,%esp
+80101547:	81 fb 40 26 11 80    	cmp    $0x80112640,%ebx
+8010154d:	75 e1                	jne    80101530 <iinit+0x20>
+  readsb(dev, &sb);
+8010154f:	83 ec 08             	sub    $0x8,%esp
+80101552:	68 c0 09 11 80       	push   $0x801109c0
+80101557:	ff 75 08             	pushl  0x8(%ebp)
+8010155a:	e8 71 ff ff ff       	call   801014d0 <readsb>
+  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
+8010155f:	ff 35 d8 09 11 80    	pushl  0x801109d8
+80101565:	ff 35 d4 09 11 80    	pushl  0x801109d4
+8010156b:	ff 35 d0 09 11 80    	pushl  0x801109d0
+80101571:	ff 35 cc 09 11 80    	pushl  0x801109cc
+80101577:	ff 35 c8 09 11 80    	pushl  0x801109c8
+8010157d:	ff 35 c4 09 11 80    	pushl  0x801109c4
+80101583:	ff 35 c0 09 11 80    	pushl  0x801109c0
+80101589:	68 d8 70 10 80       	push   $0x801070d8
+8010158e:	e8 1d f1 ff ff       	call   801006b0 <cprintf>
+}
+80101593:	83 c4 30             	add    $0x30,%esp
+80101596:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101599:	c9                   	leave  
+8010159a:	c3                   	ret    
+8010159b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010159f:	90                   	nop
+
+801015a0 <ialloc>:
+{
+801015a0:	55                   	push   %ebp
+801015a1:	89 e5                	mov    %esp,%ebp
+801015a3:	57                   	push   %edi
+801015a4:	56                   	push   %esi
+801015a5:	53                   	push   %ebx
+801015a6:	83 ec 1c             	sub    $0x1c,%esp
+801015a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+  for(inum = 1; inum < sb.ninodes; inum++){
+801015ac:	83 3d c8 09 11 80 01 	cmpl   $0x1,0x801109c8
+{
+801015b3:	8b 75 08             	mov    0x8(%ebp),%esi
+801015b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  for(inum = 1; inum < sb.ninodes; inum++){
+801015b9:	0f 86 91 00 00 00    	jbe    80101650 <ialloc+0xb0>
+801015bf:	bb 01 00 00 00       	mov    $0x1,%ebx
+801015c4:	eb 21                	jmp    801015e7 <ialloc+0x47>
+801015c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801015cd:	8d 76 00             	lea    0x0(%esi),%esi
+    brelse(bp);
+801015d0:	83 ec 0c             	sub    $0xc,%esp
+  for(inum = 1; inum < sb.ninodes; inum++){
+801015d3:	83 c3 01             	add    $0x1,%ebx
+    brelse(bp);
+801015d6:	57                   	push   %edi
+801015d7:	e8 14 ec ff ff       	call   801001f0 <brelse>
+  for(inum = 1; inum < sb.ninodes; inum++){
+801015dc:	83 c4 10             	add    $0x10,%esp
+801015df:	3b 1d c8 09 11 80    	cmp    0x801109c8,%ebx
+801015e5:	73 69                	jae    80101650 <ialloc+0xb0>
+    bp = bread(dev, IBLOCK(inum, sb));
+801015e7:	89 d8                	mov    %ebx,%eax
+801015e9:	83 ec 08             	sub    $0x8,%esp
+801015ec:	c1 e8 03             	shr    $0x3,%eax
+801015ef:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+801015f5:	50                   	push   %eax
+801015f6:	56                   	push   %esi
+801015f7:	e8 d4 ea ff ff       	call   801000d0 <bread>
+    if(dip->type == 0){  // a free inode
+801015fc:	83 c4 10             	add    $0x10,%esp
+    bp = bread(dev, IBLOCK(inum, sb));
+801015ff:	89 c7                	mov    %eax,%edi
+    dip = (struct dinode*)bp->data + inum%IPB;
+80101601:	89 d8                	mov    %ebx,%eax
+80101603:	83 e0 07             	and    $0x7,%eax
+80101606:	c1 e0 06             	shl    $0x6,%eax
+80101609:	8d 4c 07 5c          	lea    0x5c(%edi,%eax,1),%ecx
+    if(dip->type == 0){  // a free inode
+8010160d:	66 83 39 00          	cmpw   $0x0,(%ecx)
+80101611:	75 bd                	jne    801015d0 <ialloc+0x30>
+      memset(dip, 0, sizeof(*dip));
+80101613:	83 ec 04             	sub    $0x4,%esp
+80101616:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80101619:	6a 40                	push   $0x40
+8010161b:	6a 00                	push   $0x0
+8010161d:	51                   	push   %ecx
+8010161e:	e8 3d 2f 00 00       	call   80104560 <memset>
+      dip->type = type;
+80101623:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
+80101627:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+8010162a:	66 89 01             	mov    %ax,(%ecx)
+      log_write(bp);   // mark it allocated on the disk
+8010162d:	89 3c 24             	mov    %edi,(%esp)
+80101630:	e8 3b 18 00 00       	call   80102e70 <log_write>
+      brelse(bp);
+80101635:	89 3c 24             	mov    %edi,(%esp)
+80101638:	e8 b3 eb ff ff       	call   801001f0 <brelse>
+      return iget(dev, inum);
+8010163d:	83 c4 10             	add    $0x10,%esp
+}
+80101640:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return iget(dev, inum);
+80101643:	89 da                	mov    %ebx,%edx
+80101645:	89 f0                	mov    %esi,%eax
+}
+80101647:	5b                   	pop    %ebx
+80101648:	5e                   	pop    %esi
+80101649:	5f                   	pop    %edi
+8010164a:	5d                   	pop    %ebp
+      return iget(dev, inum);
+8010164b:	e9 c0 fc ff ff       	jmp    80101310 <iget>
+  panic("ialloc: no inodes");
+80101650:	83 ec 0c             	sub    $0xc,%esp
+80101653:	68 78 70 10 80       	push   $0x80107078
+80101658:	e8 33 ed ff ff       	call   80100390 <panic>
+8010165d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80101660 <iupdate>:
+{
+80101660:	55                   	push   %ebp
+80101661:	89 e5                	mov    %esp,%ebp
+80101663:	56                   	push   %esi
+80101664:	53                   	push   %ebx
+80101665:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+80101668:	8b 43 04             	mov    0x4(%ebx),%eax
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+8010166b:	83 c3 5c             	add    $0x5c,%ebx
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+8010166e:	83 ec 08             	sub    $0x8,%esp
+80101671:	c1 e8 03             	shr    $0x3,%eax
+80101674:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+8010167a:	50                   	push   %eax
+8010167b:	ff 73 a4             	pushl  -0x5c(%ebx)
+8010167e:	e8 4d ea ff ff       	call   801000d0 <bread>
+  dip->type = ip->type;
+80101683:	0f b7 53 f4          	movzwl -0xc(%ebx),%edx
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+80101687:	83 c4 0c             	add    $0xc,%esp
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+8010168a:	89 c6                	mov    %eax,%esi
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+8010168c:	8b 43 a8             	mov    -0x58(%ebx),%eax
+8010168f:	83 e0 07             	and    $0x7,%eax
+80101692:	c1 e0 06             	shl    $0x6,%eax
+80101695:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+  dip->type = ip->type;
+80101699:	66 89 10             	mov    %dx,(%eax)
+  dip->major = ip->major;
+8010169c:	0f b7 53 f6          	movzwl -0xa(%ebx),%edx
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801016a0:	83 c0 0c             	add    $0xc,%eax
+  dip->major = ip->major;
+801016a3:	66 89 50 f6          	mov    %dx,-0xa(%eax)
+  dip->minor = ip->minor;
+801016a7:	0f b7 53 f8          	movzwl -0x8(%ebx),%edx
+801016ab:	66 89 50 f8          	mov    %dx,-0x8(%eax)
+  dip->nlink = ip->nlink;
+801016af:	0f b7 53 fa          	movzwl -0x6(%ebx),%edx
+801016b3:	66 89 50 fa          	mov    %dx,-0x6(%eax)
+  dip->size = ip->size;
+801016b7:	8b 53 fc             	mov    -0x4(%ebx),%edx
+801016ba:	89 50 fc             	mov    %edx,-0x4(%eax)
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801016bd:	6a 34                	push   $0x34
+801016bf:	53                   	push   %ebx
+801016c0:	50                   	push   %eax
+801016c1:	e8 3a 2f 00 00       	call   80104600 <memmove>
+  log_write(bp);
+801016c6:	89 34 24             	mov    %esi,(%esp)
+801016c9:	e8 a2 17 00 00       	call   80102e70 <log_write>
+  brelse(bp);
+801016ce:	89 75 08             	mov    %esi,0x8(%ebp)
+801016d1:	83 c4 10             	add    $0x10,%esp
+}
+801016d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801016d7:	5b                   	pop    %ebx
+801016d8:	5e                   	pop    %esi
+801016d9:	5d                   	pop    %ebp
+  brelse(bp);
+801016da:	e9 11 eb ff ff       	jmp    801001f0 <brelse>
+801016df:	90                   	nop
+
+801016e0 <idup>:
+{
+801016e0:	55                   	push   %ebp
+801016e1:	89 e5                	mov    %esp,%ebp
+801016e3:	53                   	push   %ebx
+801016e4:	83 ec 10             	sub    $0x10,%esp
+801016e7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&icache.lock);
+801016ea:	68 e0 09 11 80       	push   $0x801109e0
+801016ef:	e8 5c 2d 00 00       	call   80104450 <acquire>
+  ip->ref++;
+801016f4:	83 43 08 01          	addl   $0x1,0x8(%ebx)
+  release(&icache.lock);
+801016f8:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
+801016ff:	e8 0c 2e 00 00       	call   80104510 <release>
+}
+80101704:	89 d8                	mov    %ebx,%eax
+80101706:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101709:	c9                   	leave  
+8010170a:	c3                   	ret    
+8010170b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010170f:	90                   	nop
+
+80101710 <ilock>:
+{
+80101710:	55                   	push   %ebp
+80101711:	89 e5                	mov    %esp,%ebp
+80101713:	56                   	push   %esi
+80101714:	53                   	push   %ebx
+80101715:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(ip == 0 || ip->ref < 1)
+80101718:	85 db                	test   %ebx,%ebx
+8010171a:	0f 84 b7 00 00 00    	je     801017d7 <ilock+0xc7>
+80101720:	8b 53 08             	mov    0x8(%ebx),%edx
+80101723:	85 d2                	test   %edx,%edx
+80101725:	0f 8e ac 00 00 00    	jle    801017d7 <ilock+0xc7>
+  acquiresleep(&ip->lock);
+8010172b:	83 ec 0c             	sub    $0xc,%esp
+8010172e:	8d 43 0c             	lea    0xc(%ebx),%eax
+80101731:	50                   	push   %eax
+80101732:	e8 c9 2a 00 00       	call   80104200 <acquiresleep>
+  if(ip->valid == 0){
+80101737:	8b 43 4c             	mov    0x4c(%ebx),%eax
+8010173a:	83 c4 10             	add    $0x10,%esp
+8010173d:	85 c0                	test   %eax,%eax
+8010173f:	74 0f                	je     80101750 <ilock+0x40>
+}
+80101741:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101744:	5b                   	pop    %ebx
+80101745:	5e                   	pop    %esi
+80101746:	5d                   	pop    %ebp
+80101747:	c3                   	ret    
+80101748:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010174f:	90                   	nop
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+80101750:	8b 43 04             	mov    0x4(%ebx),%eax
+80101753:	83 ec 08             	sub    $0x8,%esp
+80101756:	c1 e8 03             	shr    $0x3,%eax
+80101759:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+8010175f:	50                   	push   %eax
+80101760:	ff 33                	pushl  (%ebx)
+80101762:	e8 69 e9 ff ff       	call   801000d0 <bread>
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+80101767:	83 c4 0c             	add    $0xc,%esp
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+8010176a:	89 c6                	mov    %eax,%esi
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+8010176c:	8b 43 04             	mov    0x4(%ebx),%eax
+8010176f:	83 e0 07             	and    $0x7,%eax
+80101772:	c1 e0 06             	shl    $0x6,%eax
+80101775:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+    ip->type = dip->type;
+80101779:	0f b7 10             	movzwl (%eax),%edx
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+8010177c:	83 c0 0c             	add    $0xc,%eax
+    ip->type = dip->type;
+8010177f:	66 89 53 50          	mov    %dx,0x50(%ebx)
+    ip->major = dip->major;
+80101783:	0f b7 50 f6          	movzwl -0xa(%eax),%edx
+80101787:	66 89 53 52          	mov    %dx,0x52(%ebx)
+    ip->minor = dip->minor;
+8010178b:	0f b7 50 f8          	movzwl -0x8(%eax),%edx
+8010178f:	66 89 53 54          	mov    %dx,0x54(%ebx)
+    ip->nlink = dip->nlink;
+80101793:	0f b7 50 fa          	movzwl -0x6(%eax),%edx
+80101797:	66 89 53 56          	mov    %dx,0x56(%ebx)
+    ip->size = dip->size;
+8010179b:	8b 50 fc             	mov    -0x4(%eax),%edx
+8010179e:	89 53 58             	mov    %edx,0x58(%ebx)
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+801017a1:	6a 34                	push   $0x34
+801017a3:	50                   	push   %eax
+801017a4:	8d 43 5c             	lea    0x5c(%ebx),%eax
+801017a7:	50                   	push   %eax
+801017a8:	e8 53 2e 00 00       	call   80104600 <memmove>
+    brelse(bp);
+801017ad:	89 34 24             	mov    %esi,(%esp)
+801017b0:	e8 3b ea ff ff       	call   801001f0 <brelse>
+    if(ip->type == 0)
+801017b5:	83 c4 10             	add    $0x10,%esp
+801017b8:	66 83 7b 50 00       	cmpw   $0x0,0x50(%ebx)
+    ip->valid = 1;
+801017bd:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+    if(ip->type == 0)
+801017c4:	0f 85 77 ff ff ff    	jne    80101741 <ilock+0x31>
+      panic("ilock: no type");
+801017ca:	83 ec 0c             	sub    $0xc,%esp
+801017cd:	68 90 70 10 80       	push   $0x80107090
+801017d2:	e8 b9 eb ff ff       	call   80100390 <panic>
+    panic("ilock");
+801017d7:	83 ec 0c             	sub    $0xc,%esp
+801017da:	68 8a 70 10 80       	push   $0x8010708a
+801017df:	e8 ac eb ff ff       	call   80100390 <panic>
+801017e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801017eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801017ef:	90                   	nop
+
+801017f0 <iunlock>:
+{
+801017f0:	55                   	push   %ebp
+801017f1:	89 e5                	mov    %esp,%ebp
+801017f3:	56                   	push   %esi
+801017f4:	53                   	push   %ebx
+801017f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+801017f8:	85 db                	test   %ebx,%ebx
+801017fa:	74 28                	je     80101824 <iunlock+0x34>
+801017fc:	83 ec 0c             	sub    $0xc,%esp
+801017ff:	8d 73 0c             	lea    0xc(%ebx),%esi
+80101802:	56                   	push   %esi
+80101803:	e8 98 2a 00 00       	call   801042a0 <holdingsleep>
+80101808:	83 c4 10             	add    $0x10,%esp
+8010180b:	85 c0                	test   %eax,%eax
+8010180d:	74 15                	je     80101824 <iunlock+0x34>
+8010180f:	8b 43 08             	mov    0x8(%ebx),%eax
+80101812:	85 c0                	test   %eax,%eax
+80101814:	7e 0e                	jle    80101824 <iunlock+0x34>
+  releasesleep(&ip->lock);
+80101816:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+80101819:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010181c:	5b                   	pop    %ebx
+8010181d:	5e                   	pop    %esi
+8010181e:	5d                   	pop    %ebp
+  releasesleep(&ip->lock);
+8010181f:	e9 3c 2a 00 00       	jmp    80104260 <releasesleep>
+    panic("iunlock");
+80101824:	83 ec 0c             	sub    $0xc,%esp
+80101827:	68 9f 70 10 80       	push   $0x8010709f
+8010182c:	e8 5f eb ff ff       	call   80100390 <panic>
+80101831:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101838:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010183f:	90                   	nop
+
+80101840 <iput>:
+{
+80101840:	55                   	push   %ebp
+80101841:	89 e5                	mov    %esp,%ebp
+80101843:	57                   	push   %edi
+80101844:	56                   	push   %esi
+80101845:	53                   	push   %ebx
+80101846:	83 ec 28             	sub    $0x28,%esp
+80101849:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquiresleep(&ip->lock);
+8010184c:	8d 7b 0c             	lea    0xc(%ebx),%edi
+8010184f:	57                   	push   %edi
+80101850:	e8 ab 29 00 00       	call   80104200 <acquiresleep>
+  if(ip->valid && ip->nlink == 0){
+80101855:	8b 53 4c             	mov    0x4c(%ebx),%edx
+80101858:	83 c4 10             	add    $0x10,%esp
+8010185b:	85 d2                	test   %edx,%edx
+8010185d:	74 07                	je     80101866 <iput+0x26>
+8010185f:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+80101864:	74 32                	je     80101898 <iput+0x58>
+  releasesleep(&ip->lock);
+80101866:	83 ec 0c             	sub    $0xc,%esp
+80101869:	57                   	push   %edi
+8010186a:	e8 f1 29 00 00       	call   80104260 <releasesleep>
+  acquire(&icache.lock);
+8010186f:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
+80101876:	e8 d5 2b 00 00       	call   80104450 <acquire>
+  ip->ref--;
+8010187b:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
+  release(&icache.lock);
+8010187f:	83 c4 10             	add    $0x10,%esp
+80101882:	c7 45 08 e0 09 11 80 	movl   $0x801109e0,0x8(%ebp)
+}
+80101889:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010188c:	5b                   	pop    %ebx
+8010188d:	5e                   	pop    %esi
+8010188e:	5f                   	pop    %edi
+8010188f:	5d                   	pop    %ebp
+  release(&icache.lock);
+80101890:	e9 7b 2c 00 00       	jmp    80104510 <release>
+80101895:	8d 76 00             	lea    0x0(%esi),%esi
+    acquire(&icache.lock);
+80101898:	83 ec 0c             	sub    $0xc,%esp
+8010189b:	68 e0 09 11 80       	push   $0x801109e0
+801018a0:	e8 ab 2b 00 00       	call   80104450 <acquire>
+    int r = ip->ref;
+801018a5:	8b 73 08             	mov    0x8(%ebx),%esi
+    release(&icache.lock);
+801018a8:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
+801018af:	e8 5c 2c 00 00       	call   80104510 <release>
+    if(r == 1){
+801018b4:	83 c4 10             	add    $0x10,%esp
+801018b7:	83 fe 01             	cmp    $0x1,%esi
+801018ba:	75 aa                	jne    80101866 <iput+0x26>
+801018bc:	8d 8b 8c 00 00 00    	lea    0x8c(%ebx),%ecx
+801018c2:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+801018c5:	8d 73 5c             	lea    0x5c(%ebx),%esi
+801018c8:	89 cf                	mov    %ecx,%edi
+801018ca:	eb 0b                	jmp    801018d7 <iput+0x97>
+801018cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801018d0:	83 c6 04             	add    $0x4,%esi
+{
+  int i, j;
+  struct buf *bp;
+  uint *a;
+
+  for(i = 0; i < NDIRECT; i++){
+801018d3:	39 fe                	cmp    %edi,%esi
+801018d5:	74 19                	je     801018f0 <iput+0xb0>
+    if(ip->addrs[i]){
+801018d7:	8b 16                	mov    (%esi),%edx
+801018d9:	85 d2                	test   %edx,%edx
+801018db:	74 f3                	je     801018d0 <iput+0x90>
+      bfree(ip->dev, ip->addrs[i]);
+801018dd:	8b 03                	mov    (%ebx),%eax
+801018df:	e8 ac f8 ff ff       	call   80101190 <bfree>
+      ip->addrs[i] = 0;
+801018e4:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+801018ea:	eb e4                	jmp    801018d0 <iput+0x90>
+801018ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+
+  if(ip->addrs[NDIRECT]){
+801018f0:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
+801018f6:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+801018f9:	85 c0                	test   %eax,%eax
+801018fb:	75 33                	jne    80101930 <iput+0xf0>
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    ip->addrs[NDIRECT] = 0;
+  }
+
+  ip->size = 0;
+  iupdate(ip);
+801018fd:	83 ec 0c             	sub    $0xc,%esp
+  ip->size = 0;
+80101900:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+  iupdate(ip);
+80101907:	53                   	push   %ebx
+80101908:	e8 53 fd ff ff       	call   80101660 <iupdate>
+      ip->type = 0;
+8010190d:	31 c0                	xor    %eax,%eax
+8010190f:	66 89 43 50          	mov    %ax,0x50(%ebx)
+      iupdate(ip);
+80101913:	89 1c 24             	mov    %ebx,(%esp)
+80101916:	e8 45 fd ff ff       	call   80101660 <iupdate>
+      ip->valid = 0;
+8010191b:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
+80101922:	83 c4 10             	add    $0x10,%esp
+80101925:	e9 3c ff ff ff       	jmp    80101866 <iput+0x26>
+8010192a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+80101930:	83 ec 08             	sub    $0x8,%esp
+80101933:	50                   	push   %eax
+80101934:	ff 33                	pushl  (%ebx)
+80101936:	e8 95 e7 ff ff       	call   801000d0 <bread>
+8010193b:	89 7d e0             	mov    %edi,-0x20(%ebp)
+8010193e:	83 c4 10             	add    $0x10,%esp
+80101941:	8d 88 5c 02 00 00    	lea    0x25c(%eax),%ecx
+80101947:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    for(j = 0; j < NINDIRECT; j++){
+8010194a:	8d 70 5c             	lea    0x5c(%eax),%esi
+8010194d:	89 cf                	mov    %ecx,%edi
+8010194f:	eb 0e                	jmp    8010195f <iput+0x11f>
+80101951:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101958:	83 c6 04             	add    $0x4,%esi
+8010195b:	39 f7                	cmp    %esi,%edi
+8010195d:	74 11                	je     80101970 <iput+0x130>
+      if(a[j])
+8010195f:	8b 16                	mov    (%esi),%edx
+80101961:	85 d2                	test   %edx,%edx
+80101963:	74 f3                	je     80101958 <iput+0x118>
+        bfree(ip->dev, a[j]);
+80101965:	8b 03                	mov    (%ebx),%eax
+80101967:	e8 24 f8 ff ff       	call   80101190 <bfree>
+8010196c:	eb ea                	jmp    80101958 <iput+0x118>
+8010196e:	66 90                	xchg   %ax,%ax
+    brelse(bp);
+80101970:	83 ec 0c             	sub    $0xc,%esp
+80101973:	ff 75 e4             	pushl  -0x1c(%ebp)
+80101976:	8b 7d e0             	mov    -0x20(%ebp),%edi
+80101979:	e8 72 e8 ff ff       	call   801001f0 <brelse>
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+8010197e:	8b 93 8c 00 00 00    	mov    0x8c(%ebx),%edx
+80101984:	8b 03                	mov    (%ebx),%eax
+80101986:	e8 05 f8 ff ff       	call   80101190 <bfree>
+    ip->addrs[NDIRECT] = 0;
+8010198b:	83 c4 10             	add    $0x10,%esp
+8010198e:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%ebx)
+80101995:	00 00 00 
+80101998:	e9 60 ff ff ff       	jmp    801018fd <iput+0xbd>
+8010199d:	8d 76 00             	lea    0x0(%esi),%esi
+
+801019a0 <iunlockput>:
+{
+801019a0:	55                   	push   %ebp
+801019a1:	89 e5                	mov    %esp,%ebp
+801019a3:	53                   	push   %ebx
+801019a4:	83 ec 10             	sub    $0x10,%esp
+801019a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  iunlock(ip);
+801019aa:	53                   	push   %ebx
+801019ab:	e8 40 fe ff ff       	call   801017f0 <iunlock>
+  iput(ip);
+801019b0:	89 5d 08             	mov    %ebx,0x8(%ebp)
+801019b3:	83 c4 10             	add    $0x10,%esp
+}
+801019b6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801019b9:	c9                   	leave  
+  iput(ip);
+801019ba:	e9 81 fe ff ff       	jmp    80101840 <iput>
+801019bf:	90                   	nop
+
+801019c0 <stati>:
+
+// Copy stat information from inode.
+// Caller must hold ip->lock.
+void
+stati(struct inode *ip, struct stat *st)
+{
+801019c0:	55                   	push   %ebp
+801019c1:	89 e5                	mov    %esp,%ebp
+801019c3:	8b 55 08             	mov    0x8(%ebp),%edx
+801019c6:	8b 45 0c             	mov    0xc(%ebp),%eax
+  st->dev = ip->dev;
+801019c9:	8b 0a                	mov    (%edx),%ecx
+801019cb:	89 48 04             	mov    %ecx,0x4(%eax)
+  st->ino = ip->inum;
+801019ce:	8b 4a 04             	mov    0x4(%edx),%ecx
+801019d1:	89 48 08             	mov    %ecx,0x8(%eax)
+  st->type = ip->type;
+801019d4:	0f b7 4a 50          	movzwl 0x50(%edx),%ecx
+801019d8:	66 89 08             	mov    %cx,(%eax)
+  st->nlink = ip->nlink;
+801019db:	0f b7 4a 56          	movzwl 0x56(%edx),%ecx
+801019df:	66 89 48 0c          	mov    %cx,0xc(%eax)
+  st->size = ip->size;
+801019e3:	8b 52 58             	mov    0x58(%edx),%edx
+801019e6:	89 50 10             	mov    %edx,0x10(%eax)
+}
+801019e9:	5d                   	pop    %ebp
+801019ea:	c3                   	ret    
+801019eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801019ef:	90                   	nop
+
+801019f0 <readi>:
+//PAGEBREAK!
+// Read data from inode.
+// Caller must hold ip->lock.
+int
+readi(struct inode *ip, char *dst, uint off, uint n)
+{
+801019f0:	55                   	push   %ebp
+801019f1:	89 e5                	mov    %esp,%ebp
+801019f3:	57                   	push   %edi
+801019f4:	56                   	push   %esi
+801019f5:	53                   	push   %ebx
+801019f6:	83 ec 1c             	sub    $0x1c,%esp
+801019f9:	8b 7d 0c             	mov    0xc(%ebp),%edi
+801019fc:	8b 45 08             	mov    0x8(%ebp),%eax
+801019ff:	8b 75 10             	mov    0x10(%ebp),%esi
+80101a02:	89 7d e0             	mov    %edi,-0x20(%ebp)
+80101a05:	8b 7d 14             	mov    0x14(%ebp),%edi
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+80101a08:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+{
+80101a0d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80101a10:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+  if(ip->type == T_DEV){
+80101a13:	0f 84 a7 00 00 00    	je     80101ac0 <readi+0xd0>
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+      return -1;
+    return devsw[ip->major].read(ip, dst, n);
+  }
+
+  if(off > ip->size || off + n < off)
+80101a19:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101a1c:	8b 40 58             	mov    0x58(%eax),%eax
+80101a1f:	39 c6                	cmp    %eax,%esi
+80101a21:	0f 87 ba 00 00 00    	ja     80101ae1 <readi+0xf1>
+80101a27:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80101a2a:	31 c9                	xor    %ecx,%ecx
+80101a2c:	89 da                	mov    %ebx,%edx
+80101a2e:	01 f2                	add    %esi,%edx
+80101a30:	0f 92 c1             	setb   %cl
+80101a33:	89 cf                	mov    %ecx,%edi
+80101a35:	0f 82 a6 00 00 00    	jb     80101ae1 <readi+0xf1>
+    return -1;
+  if(off + n > ip->size)
+    n = ip->size - off;
+80101a3b:	89 c1                	mov    %eax,%ecx
+80101a3d:	29 f1                	sub    %esi,%ecx
+80101a3f:	39 d0                	cmp    %edx,%eax
+80101a41:	0f 43 cb             	cmovae %ebx,%ecx
+80101a44:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80101a47:	85 c9                	test   %ecx,%ecx
+80101a49:	74 67                	je     80101ab2 <readi+0xc2>
+80101a4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101a4f:	90                   	nop
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+80101a50:	8b 5d d8             	mov    -0x28(%ebp),%ebx
+80101a53:	89 f2                	mov    %esi,%edx
+80101a55:	c1 ea 09             	shr    $0x9,%edx
+80101a58:	89 d8                	mov    %ebx,%eax
+80101a5a:	e8 a1 f9 ff ff       	call   80101400 <bmap>
+80101a5f:	83 ec 08             	sub    $0x8,%esp
+80101a62:	50                   	push   %eax
+80101a63:	ff 33                	pushl  (%ebx)
+80101a65:	e8 66 e6 ff ff       	call   801000d0 <bread>
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101a6a:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80101a6d:	b9 00 02 00 00       	mov    $0x200,%ecx
+80101a72:	83 c4 0c             	add    $0xc,%esp
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+80101a75:	89 c2                	mov    %eax,%edx
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101a77:	89 f0                	mov    %esi,%eax
+80101a79:	25 ff 01 00 00       	and    $0x1ff,%eax
+80101a7e:	29 fb                	sub    %edi,%ebx
+    memmove(dst, bp->data + off%BSIZE, m);
+80101a80:	89 55 dc             	mov    %edx,-0x24(%ebp)
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101a83:	29 c1                	sub    %eax,%ecx
+    memmove(dst, bp->data + off%BSIZE, m);
+80101a85:	8d 44 02 5c          	lea    0x5c(%edx,%eax,1),%eax
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101a89:	39 d9                	cmp    %ebx,%ecx
+80101a8b:	0f 46 d9             	cmovbe %ecx,%ebx
+    memmove(dst, bp->data + off%BSIZE, m);
+80101a8e:	53                   	push   %ebx
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80101a8f:	01 df                	add    %ebx,%edi
+80101a91:	01 de                	add    %ebx,%esi
+    memmove(dst, bp->data + off%BSIZE, m);
+80101a93:	50                   	push   %eax
+80101a94:	ff 75 e0             	pushl  -0x20(%ebp)
+80101a97:	e8 64 2b 00 00       	call   80104600 <memmove>
+    brelse(bp);
+80101a9c:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80101a9f:	89 14 24             	mov    %edx,(%esp)
+80101aa2:	e8 49 e7 ff ff       	call   801001f0 <brelse>
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80101aa7:	01 5d e0             	add    %ebx,-0x20(%ebp)
+80101aaa:	83 c4 10             	add    $0x10,%esp
+80101aad:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80101ab0:	77 9e                	ja     80101a50 <readi+0x60>
+  }
+  return n;
+80101ab2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+}
+80101ab5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101ab8:	5b                   	pop    %ebx
+80101ab9:	5e                   	pop    %esi
+80101aba:	5f                   	pop    %edi
+80101abb:	5d                   	pop    %ebp
+80101abc:	c3                   	ret    
+80101abd:	8d 76 00             	lea    0x0(%esi),%esi
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+80101ac0:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80101ac4:	66 83 f8 09          	cmp    $0x9,%ax
+80101ac8:	77 17                	ja     80101ae1 <readi+0xf1>
+80101aca:	8b 04 c5 60 09 11 80 	mov    -0x7feef6a0(,%eax,8),%eax
+80101ad1:	85 c0                	test   %eax,%eax
+80101ad3:	74 0c                	je     80101ae1 <readi+0xf1>
+    return devsw[ip->major].read(ip, dst, n);
+80101ad5:	89 7d 10             	mov    %edi,0x10(%ebp)
+}
+80101ad8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101adb:	5b                   	pop    %ebx
+80101adc:	5e                   	pop    %esi
+80101add:	5f                   	pop    %edi
+80101ade:	5d                   	pop    %ebp
+    return devsw[ip->major].read(ip, dst, n);
+80101adf:	ff e0                	jmp    *%eax
+      return -1;
+80101ae1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101ae6:	eb cd                	jmp    80101ab5 <readi+0xc5>
+80101ae8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101aef:	90                   	nop
+
+80101af0 <writei>:
+// PAGEBREAK!
+// Write data to inode.
+// Caller must hold ip->lock.
+int
+writei(struct inode *ip, char *src, uint off, uint n)
+{
+80101af0:	55                   	push   %ebp
+80101af1:	89 e5                	mov    %esp,%ebp
+80101af3:	57                   	push   %edi
+80101af4:	56                   	push   %esi
+80101af5:	53                   	push   %ebx
+80101af6:	83 ec 1c             	sub    $0x1c,%esp
+80101af9:	8b 45 08             	mov    0x8(%ebp),%eax
+80101afc:	8b 75 0c             	mov    0xc(%ebp),%esi
+80101aff:	8b 7d 14             	mov    0x14(%ebp),%edi
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+80101b02:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+{
+80101b07:	89 75 dc             	mov    %esi,-0x24(%ebp)
+80101b0a:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80101b0d:	8b 75 10             	mov    0x10(%ebp),%esi
+80101b10:	89 7d e0             	mov    %edi,-0x20(%ebp)
+  if(ip->type == T_DEV){
+80101b13:	0f 84 b7 00 00 00    	je     80101bd0 <writei+0xe0>
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+      return -1;
+    return devsw[ip->major].write(ip, src, n);
+  }
+
+  if(off > ip->size || off + n < off)
+80101b19:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101b1c:	39 70 58             	cmp    %esi,0x58(%eax)
+80101b1f:	0f 82 e7 00 00 00    	jb     80101c0c <writei+0x11c>
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+80101b25:	8b 7d e0             	mov    -0x20(%ebp),%edi
+80101b28:	89 f8                	mov    %edi,%eax
+80101b2a:	01 f0                	add    %esi,%eax
+80101b2c:	0f 82 da 00 00 00    	jb     80101c0c <writei+0x11c>
+80101b32:	3d 00 18 01 00       	cmp    $0x11800,%eax
+80101b37:	0f 87 cf 00 00 00    	ja     80101c0c <writei+0x11c>
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80101b3d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80101b44:	85 ff                	test   %edi,%edi
+80101b46:	74 79                	je     80101bc1 <writei+0xd1>
+80101b48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101b4f:	90                   	nop
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+80101b50:	8b 7d d8             	mov    -0x28(%ebp),%edi
+80101b53:	89 f2                	mov    %esi,%edx
+80101b55:	c1 ea 09             	shr    $0x9,%edx
+80101b58:	89 f8                	mov    %edi,%eax
+80101b5a:	e8 a1 f8 ff ff       	call   80101400 <bmap>
+80101b5f:	83 ec 08             	sub    $0x8,%esp
+80101b62:	50                   	push   %eax
+80101b63:	ff 37                	pushl  (%edi)
+80101b65:	e8 66 e5 ff ff       	call   801000d0 <bread>
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101b6a:	b9 00 02 00 00       	mov    $0x200,%ecx
+80101b6f:	8b 5d e0             	mov    -0x20(%ebp),%ebx
+80101b72:	2b 5d e4             	sub    -0x1c(%ebp),%ebx
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+80101b75:	89 c7                	mov    %eax,%edi
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101b77:	89 f0                	mov    %esi,%eax
+80101b79:	83 c4 0c             	add    $0xc,%esp
+80101b7c:	25 ff 01 00 00       	and    $0x1ff,%eax
+80101b81:	29 c1                	sub    %eax,%ecx
+    memmove(bp->data + off%BSIZE, src, m);
+80101b83:	8d 44 07 5c          	lea    0x5c(%edi,%eax,1),%eax
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101b87:	39 d9                	cmp    %ebx,%ecx
+80101b89:	0f 46 d9             	cmovbe %ecx,%ebx
+    memmove(bp->data + off%BSIZE, src, m);
+80101b8c:	53                   	push   %ebx
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80101b8d:	01 de                	add    %ebx,%esi
+    memmove(bp->data + off%BSIZE, src, m);
+80101b8f:	ff 75 dc             	pushl  -0x24(%ebp)
+80101b92:	50                   	push   %eax
+80101b93:	e8 68 2a 00 00       	call   80104600 <memmove>
+    log_write(bp);
+80101b98:	89 3c 24             	mov    %edi,(%esp)
+80101b9b:	e8 d0 12 00 00       	call   80102e70 <log_write>
+    brelse(bp);
+80101ba0:	89 3c 24             	mov    %edi,(%esp)
+80101ba3:	e8 48 e6 ff ff       	call   801001f0 <brelse>
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80101ba8:	01 5d e4             	add    %ebx,-0x1c(%ebp)
+80101bab:	83 c4 10             	add    $0x10,%esp
+80101bae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101bb1:	01 5d dc             	add    %ebx,-0x24(%ebp)
+80101bb4:	39 45 e0             	cmp    %eax,-0x20(%ebp)
+80101bb7:	77 97                	ja     80101b50 <writei+0x60>
+  }
+
+  if(n > 0 && off > ip->size){
+80101bb9:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101bbc:	3b 70 58             	cmp    0x58(%eax),%esi
+80101bbf:	77 37                	ja     80101bf8 <writei+0x108>
+    ip->size = off;
+    iupdate(ip);
+  }
+  return n;
+80101bc1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+}
+80101bc4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101bc7:	5b                   	pop    %ebx
+80101bc8:	5e                   	pop    %esi
+80101bc9:	5f                   	pop    %edi
+80101bca:	5d                   	pop    %ebp
+80101bcb:	c3                   	ret    
+80101bcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+80101bd0:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80101bd4:	66 83 f8 09          	cmp    $0x9,%ax
+80101bd8:	77 32                	ja     80101c0c <writei+0x11c>
+80101bda:	8b 04 c5 64 09 11 80 	mov    -0x7feef69c(,%eax,8),%eax
+80101be1:	85 c0                	test   %eax,%eax
+80101be3:	74 27                	je     80101c0c <writei+0x11c>
+    return devsw[ip->major].write(ip, src, n);
+80101be5:	89 7d 10             	mov    %edi,0x10(%ebp)
+}
+80101be8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101beb:	5b                   	pop    %ebx
+80101bec:	5e                   	pop    %esi
+80101bed:	5f                   	pop    %edi
+80101bee:	5d                   	pop    %ebp
+    return devsw[ip->major].write(ip, src, n);
+80101bef:	ff e0                	jmp    *%eax
+80101bf1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    ip->size = off;
+80101bf8:	8b 45 d8             	mov    -0x28(%ebp),%eax
+    iupdate(ip);
+80101bfb:	83 ec 0c             	sub    $0xc,%esp
+    ip->size = off;
+80101bfe:	89 70 58             	mov    %esi,0x58(%eax)
+    iupdate(ip);
+80101c01:	50                   	push   %eax
+80101c02:	e8 59 fa ff ff       	call   80101660 <iupdate>
+80101c07:	83 c4 10             	add    $0x10,%esp
+80101c0a:	eb b5                	jmp    80101bc1 <writei+0xd1>
+      return -1;
+80101c0c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101c11:	eb b1                	jmp    80101bc4 <writei+0xd4>
+80101c13:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101c1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80101c20 <namecmp>:
+//PAGEBREAK!
+// Directories
+
+int
+namecmp(const char *s, const char *t)
+{
+80101c20:	55                   	push   %ebp
+80101c21:	89 e5                	mov    %esp,%ebp
+80101c23:	83 ec 0c             	sub    $0xc,%esp
+  return strncmp(s, t, DIRSIZ);
+80101c26:	6a 0e                	push   $0xe
+80101c28:	ff 75 0c             	pushl  0xc(%ebp)
+80101c2b:	ff 75 08             	pushl  0x8(%ebp)
+80101c2e:	e8 3d 2a 00 00       	call   80104670 <strncmp>
+}
+80101c33:	c9                   	leave  
+80101c34:	c3                   	ret    
+80101c35:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101c3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101c40 <dirlookup>:
+
+// Look for a directory entry in a directory.
+// If found, set *poff to byte offset of entry.
+struct inode*
+dirlookup(struct inode *dp, char *name, uint *poff)
+{
+80101c40:	55                   	push   %ebp
+80101c41:	89 e5                	mov    %esp,%ebp
+80101c43:	57                   	push   %edi
+80101c44:	56                   	push   %esi
+80101c45:	53                   	push   %ebx
+80101c46:	83 ec 1c             	sub    $0x1c,%esp
+80101c49:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  uint off, inum;
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+80101c4c:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80101c51:	0f 85 85 00 00 00    	jne    80101cdc <dirlookup+0x9c>
+    panic("dirlookup not DIR");
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80101c57:	8b 53 58             	mov    0x58(%ebx),%edx
+80101c5a:	31 ff                	xor    %edi,%edi
+80101c5c:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101c5f:	85 d2                	test   %edx,%edx
+80101c61:	74 3e                	je     80101ca1 <dirlookup+0x61>
+80101c63:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101c67:	90                   	nop
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101c68:	6a 10                	push   $0x10
+80101c6a:	57                   	push   %edi
+80101c6b:	56                   	push   %esi
+80101c6c:	53                   	push   %ebx
+80101c6d:	e8 7e fd ff ff       	call   801019f0 <readi>
+80101c72:	83 c4 10             	add    $0x10,%esp
+80101c75:	83 f8 10             	cmp    $0x10,%eax
+80101c78:	75 55                	jne    80101ccf <dirlookup+0x8f>
+      panic("dirlookup read");
+    if(de.inum == 0)
+80101c7a:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80101c7f:	74 18                	je     80101c99 <dirlookup+0x59>
+  return strncmp(s, t, DIRSIZ);
+80101c81:	83 ec 04             	sub    $0x4,%esp
+80101c84:	8d 45 da             	lea    -0x26(%ebp),%eax
+80101c87:	6a 0e                	push   $0xe
+80101c89:	50                   	push   %eax
+80101c8a:	ff 75 0c             	pushl  0xc(%ebp)
+80101c8d:	e8 de 29 00 00       	call   80104670 <strncmp>
+      continue;
+    if(namecmp(name, de.name) == 0){
+80101c92:	83 c4 10             	add    $0x10,%esp
+80101c95:	85 c0                	test   %eax,%eax
+80101c97:	74 17                	je     80101cb0 <dirlookup+0x70>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80101c99:	83 c7 10             	add    $0x10,%edi
+80101c9c:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80101c9f:	72 c7                	jb     80101c68 <dirlookup+0x28>
+      return iget(dp->dev, inum);
+    }
+  }
+
+  return 0;
+}
+80101ca1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80101ca4:	31 c0                	xor    %eax,%eax
+}
+80101ca6:	5b                   	pop    %ebx
+80101ca7:	5e                   	pop    %esi
+80101ca8:	5f                   	pop    %edi
+80101ca9:	5d                   	pop    %ebp
+80101caa:	c3                   	ret    
+80101cab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101caf:	90                   	nop
+      if(poff)
+80101cb0:	8b 45 10             	mov    0x10(%ebp),%eax
+80101cb3:	85 c0                	test   %eax,%eax
+80101cb5:	74 05                	je     80101cbc <dirlookup+0x7c>
+        *poff = off;
+80101cb7:	8b 45 10             	mov    0x10(%ebp),%eax
+80101cba:	89 38                	mov    %edi,(%eax)
+      inum = de.inum;
+80101cbc:	0f b7 55 d8          	movzwl -0x28(%ebp),%edx
+      return iget(dp->dev, inum);
+80101cc0:	8b 03                	mov    (%ebx),%eax
+80101cc2:	e8 49 f6 ff ff       	call   80101310 <iget>
+}
+80101cc7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101cca:	5b                   	pop    %ebx
+80101ccb:	5e                   	pop    %esi
+80101ccc:	5f                   	pop    %edi
+80101ccd:	5d                   	pop    %ebp
+80101cce:	c3                   	ret    
+      panic("dirlookup read");
+80101ccf:	83 ec 0c             	sub    $0xc,%esp
+80101cd2:	68 b9 70 10 80       	push   $0x801070b9
+80101cd7:	e8 b4 e6 ff ff       	call   80100390 <panic>
+    panic("dirlookup not DIR");
+80101cdc:	83 ec 0c             	sub    $0xc,%esp
+80101cdf:	68 a7 70 10 80       	push   $0x801070a7
+80101ce4:	e8 a7 e6 ff ff       	call   80100390 <panic>
+80101ce9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80101cf0 <namex>:
+// If parent != 0, return the inode for the parent and copy the final
+// path element into name, which must have room for DIRSIZ bytes.
+// Must be called inside a transaction since it calls iput().
+static struct inode*
+namex(char *path, int nameiparent, char *name)
+{
+80101cf0:	55                   	push   %ebp
+80101cf1:	89 e5                	mov    %esp,%ebp
+80101cf3:	57                   	push   %edi
+80101cf4:	56                   	push   %esi
+80101cf5:	53                   	push   %ebx
+80101cf6:	89 c3                	mov    %eax,%ebx
+80101cf8:	83 ec 1c             	sub    $0x1c,%esp
+  struct inode *ip, *next;
+
+  if(*path == '/')
+80101cfb:	80 38 2f             	cmpb   $0x2f,(%eax)
+{
+80101cfe:	89 55 e0             	mov    %edx,-0x20(%ebp)
+80101d01:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+  if(*path == '/')
+80101d04:	0f 84 86 01 00 00    	je     80101e90 <namex+0x1a0>
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(myproc()->cwd);
+80101d0a:	e8 c1 1b 00 00       	call   801038d0 <myproc>
+  acquire(&icache.lock);
+80101d0f:	83 ec 0c             	sub    $0xc,%esp
+80101d12:	89 df                	mov    %ebx,%edi
+    ip = idup(myproc()->cwd);
+80101d14:	8b 70 68             	mov    0x68(%eax),%esi
+  acquire(&icache.lock);
+80101d17:	68 e0 09 11 80       	push   $0x801109e0
+80101d1c:	e8 2f 27 00 00       	call   80104450 <acquire>
+  ip->ref++;
+80101d21:	83 46 08 01          	addl   $0x1,0x8(%esi)
+  release(&icache.lock);
+80101d25:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
+80101d2c:	e8 df 27 00 00       	call   80104510 <release>
+80101d31:	83 c4 10             	add    $0x10,%esp
+80101d34:	eb 0d                	jmp    80101d43 <namex+0x53>
+80101d36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101d3d:	8d 76 00             	lea    0x0(%esi),%esi
+    path++;
+80101d40:	83 c7 01             	add    $0x1,%edi
+  while(*path == '/')
+80101d43:	0f b6 07             	movzbl (%edi),%eax
+80101d46:	3c 2f                	cmp    $0x2f,%al
+80101d48:	74 f6                	je     80101d40 <namex+0x50>
+  if(*path == 0)
+80101d4a:	84 c0                	test   %al,%al
+80101d4c:	0f 84 ee 00 00 00    	je     80101e40 <namex+0x150>
+  while(*path != '/' && *path != 0)
+80101d52:	0f b6 07             	movzbl (%edi),%eax
+80101d55:	84 c0                	test   %al,%al
+80101d57:	0f 84 fb 00 00 00    	je     80101e58 <namex+0x168>
+80101d5d:	89 fb                	mov    %edi,%ebx
+80101d5f:	3c 2f                	cmp    $0x2f,%al
+80101d61:	0f 84 f1 00 00 00    	je     80101e58 <namex+0x168>
+80101d67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101d6e:	66 90                	xchg   %ax,%ax
+    path++;
+80101d70:	83 c3 01             	add    $0x1,%ebx
+  while(*path != '/' && *path != 0)
+80101d73:	0f b6 03             	movzbl (%ebx),%eax
+80101d76:	3c 2f                	cmp    $0x2f,%al
+80101d78:	74 04                	je     80101d7e <namex+0x8e>
+80101d7a:	84 c0                	test   %al,%al
+80101d7c:	75 f2                	jne    80101d70 <namex+0x80>
+  len = path - s;
+80101d7e:	89 d8                	mov    %ebx,%eax
+80101d80:	29 f8                	sub    %edi,%eax
+  if(len >= DIRSIZ)
+80101d82:	83 f8 0d             	cmp    $0xd,%eax
+80101d85:	0f 8e 85 00 00 00    	jle    80101e10 <namex+0x120>
+    memmove(name, s, DIRSIZ);
+80101d8b:	83 ec 04             	sub    $0x4,%esp
+80101d8e:	6a 0e                	push   $0xe
+80101d90:	57                   	push   %edi
+    path++;
+80101d91:	89 df                	mov    %ebx,%edi
+    memmove(name, s, DIRSIZ);
+80101d93:	ff 75 e4             	pushl  -0x1c(%ebp)
+80101d96:	e8 65 28 00 00       	call   80104600 <memmove>
+80101d9b:	83 c4 10             	add    $0x10,%esp
+  while(*path == '/')
+80101d9e:	80 3b 2f             	cmpb   $0x2f,(%ebx)
+80101da1:	75 0d                	jne    80101db0 <namex+0xc0>
+80101da3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101da7:	90                   	nop
+    path++;
+80101da8:	83 c7 01             	add    $0x1,%edi
+  while(*path == '/')
+80101dab:	80 3f 2f             	cmpb   $0x2f,(%edi)
+80101dae:	74 f8                	je     80101da8 <namex+0xb8>
+
+  while((path = skipelem(path, name)) != 0){
+    ilock(ip);
+80101db0:	83 ec 0c             	sub    $0xc,%esp
+80101db3:	56                   	push   %esi
+80101db4:	e8 57 f9 ff ff       	call   80101710 <ilock>
+    if(ip->type != T_DIR){
+80101db9:	83 c4 10             	add    $0x10,%esp
+80101dbc:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80101dc1:	0f 85 a1 00 00 00    	jne    80101e68 <namex+0x178>
+      iunlockput(ip);
+      return 0;
+    }
+    if(nameiparent && *path == '\0'){
+80101dc7:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80101dca:	85 d2                	test   %edx,%edx
+80101dcc:	74 09                	je     80101dd7 <namex+0xe7>
+80101dce:	80 3f 00             	cmpb   $0x0,(%edi)
+80101dd1:	0f 84 d9 00 00 00    	je     80101eb0 <namex+0x1c0>
+      // Stop one level early.
+      iunlock(ip);
+      return ip;
+    }
+    if((next = dirlookup(ip, name, 0)) == 0){
+80101dd7:	83 ec 04             	sub    $0x4,%esp
+80101dda:	6a 00                	push   $0x0
+80101ddc:	ff 75 e4             	pushl  -0x1c(%ebp)
+80101ddf:	56                   	push   %esi
+80101de0:	e8 5b fe ff ff       	call   80101c40 <dirlookup>
+80101de5:	83 c4 10             	add    $0x10,%esp
+80101de8:	89 c3                	mov    %eax,%ebx
+80101dea:	85 c0                	test   %eax,%eax
+80101dec:	74 7a                	je     80101e68 <namex+0x178>
+  iunlock(ip);
+80101dee:	83 ec 0c             	sub    $0xc,%esp
+80101df1:	56                   	push   %esi
+80101df2:	e8 f9 f9 ff ff       	call   801017f0 <iunlock>
+  iput(ip);
+80101df7:	89 34 24             	mov    %esi,(%esp)
+80101dfa:	89 de                	mov    %ebx,%esi
+80101dfc:	e8 3f fa ff ff       	call   80101840 <iput>
+  while(*path == '/')
+80101e01:	83 c4 10             	add    $0x10,%esp
+80101e04:	e9 3a ff ff ff       	jmp    80101d43 <namex+0x53>
+80101e09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101e10:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80101e13:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
+80101e16:	89 4d dc             	mov    %ecx,-0x24(%ebp)
+    memmove(name, s, len);
+80101e19:	83 ec 04             	sub    $0x4,%esp
+80101e1c:	50                   	push   %eax
+80101e1d:	57                   	push   %edi
+    name[len] = 0;
+80101e1e:	89 df                	mov    %ebx,%edi
+    memmove(name, s, len);
+80101e20:	ff 75 e4             	pushl  -0x1c(%ebp)
+80101e23:	e8 d8 27 00 00       	call   80104600 <memmove>
+    name[len] = 0;
+80101e28:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101e2b:	83 c4 10             	add    $0x10,%esp
+80101e2e:	c6 00 00             	movb   $0x0,(%eax)
+80101e31:	e9 68 ff ff ff       	jmp    80101d9e <namex+0xae>
+80101e36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101e3d:	8d 76 00             	lea    0x0(%esi),%esi
+      return 0;
+    }
+    iunlockput(ip);
+    ip = next;
+  }
+  if(nameiparent){
+80101e40:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101e43:	85 c0                	test   %eax,%eax
+80101e45:	0f 85 85 00 00 00    	jne    80101ed0 <namex+0x1e0>
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+80101e4b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101e4e:	89 f0                	mov    %esi,%eax
+80101e50:	5b                   	pop    %ebx
+80101e51:	5e                   	pop    %esi
+80101e52:	5f                   	pop    %edi
+80101e53:	5d                   	pop    %ebp
+80101e54:	c3                   	ret    
+80101e55:	8d 76 00             	lea    0x0(%esi),%esi
+  while(*path != '/' && *path != 0)
+80101e58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101e5b:	89 fb                	mov    %edi,%ebx
+80101e5d:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80101e60:	31 c0                	xor    %eax,%eax
+80101e62:	eb b5                	jmp    80101e19 <namex+0x129>
+80101e64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  iunlock(ip);
+80101e68:	83 ec 0c             	sub    $0xc,%esp
+80101e6b:	56                   	push   %esi
+80101e6c:	e8 7f f9 ff ff       	call   801017f0 <iunlock>
+  iput(ip);
+80101e71:	89 34 24             	mov    %esi,(%esp)
+      return 0;
+80101e74:	31 f6                	xor    %esi,%esi
+  iput(ip);
+80101e76:	e8 c5 f9 ff ff       	call   80101840 <iput>
+      return 0;
+80101e7b:	83 c4 10             	add    $0x10,%esp
+}
+80101e7e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101e81:	89 f0                	mov    %esi,%eax
+80101e83:	5b                   	pop    %ebx
+80101e84:	5e                   	pop    %esi
+80101e85:	5f                   	pop    %edi
+80101e86:	5d                   	pop    %ebp
+80101e87:	c3                   	ret    
+80101e88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101e8f:	90                   	nop
+    ip = iget(ROOTDEV, ROOTINO);
+80101e90:	ba 01 00 00 00       	mov    $0x1,%edx
+80101e95:	b8 01 00 00 00       	mov    $0x1,%eax
+80101e9a:	89 df                	mov    %ebx,%edi
+80101e9c:	e8 6f f4 ff ff       	call   80101310 <iget>
+80101ea1:	89 c6                	mov    %eax,%esi
+80101ea3:	e9 9b fe ff ff       	jmp    80101d43 <namex+0x53>
+80101ea8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101eaf:	90                   	nop
+      iunlock(ip);
+80101eb0:	83 ec 0c             	sub    $0xc,%esp
+80101eb3:	56                   	push   %esi
+80101eb4:	e8 37 f9 ff ff       	call   801017f0 <iunlock>
+      return ip;
+80101eb9:	83 c4 10             	add    $0x10,%esp
+}
+80101ebc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101ebf:	89 f0                	mov    %esi,%eax
+80101ec1:	5b                   	pop    %ebx
+80101ec2:	5e                   	pop    %esi
+80101ec3:	5f                   	pop    %edi
+80101ec4:	5d                   	pop    %ebp
+80101ec5:	c3                   	ret    
+80101ec6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101ecd:	8d 76 00             	lea    0x0(%esi),%esi
+    iput(ip);
+80101ed0:	83 ec 0c             	sub    $0xc,%esp
+80101ed3:	56                   	push   %esi
+    return 0;
+80101ed4:	31 f6                	xor    %esi,%esi
+    iput(ip);
+80101ed6:	e8 65 f9 ff ff       	call   80101840 <iput>
+    return 0;
+80101edb:	83 c4 10             	add    $0x10,%esp
+80101ede:	e9 68 ff ff ff       	jmp    80101e4b <namex+0x15b>
+80101ee3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101eea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80101ef0 <dirlink>:
+{
+80101ef0:	55                   	push   %ebp
+80101ef1:	89 e5                	mov    %esp,%ebp
+80101ef3:	57                   	push   %edi
+80101ef4:	56                   	push   %esi
+80101ef5:	53                   	push   %ebx
+80101ef6:	83 ec 20             	sub    $0x20,%esp
+80101ef9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if((ip = dirlookup(dp, name, 0)) != 0){
+80101efc:	6a 00                	push   $0x0
+80101efe:	ff 75 0c             	pushl  0xc(%ebp)
+80101f01:	53                   	push   %ebx
+80101f02:	e8 39 fd ff ff       	call   80101c40 <dirlookup>
+80101f07:	83 c4 10             	add    $0x10,%esp
+80101f0a:	85 c0                	test   %eax,%eax
+80101f0c:	75 67                	jne    80101f75 <dirlink+0x85>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80101f0e:	8b 7b 58             	mov    0x58(%ebx),%edi
+80101f11:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101f14:	85 ff                	test   %edi,%edi
+80101f16:	74 29                	je     80101f41 <dirlink+0x51>
+80101f18:	31 ff                	xor    %edi,%edi
+80101f1a:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101f1d:	eb 09                	jmp    80101f28 <dirlink+0x38>
+80101f1f:	90                   	nop
+80101f20:	83 c7 10             	add    $0x10,%edi
+80101f23:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80101f26:	73 19                	jae    80101f41 <dirlink+0x51>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101f28:	6a 10                	push   $0x10
+80101f2a:	57                   	push   %edi
+80101f2b:	56                   	push   %esi
+80101f2c:	53                   	push   %ebx
+80101f2d:	e8 be fa ff ff       	call   801019f0 <readi>
+80101f32:	83 c4 10             	add    $0x10,%esp
+80101f35:	83 f8 10             	cmp    $0x10,%eax
+80101f38:	75 4e                	jne    80101f88 <dirlink+0x98>
+    if(de.inum == 0)
+80101f3a:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80101f3f:	75 df                	jne    80101f20 <dirlink+0x30>
+  strncpy(de.name, name, DIRSIZ);
+80101f41:	83 ec 04             	sub    $0x4,%esp
+80101f44:	8d 45 da             	lea    -0x26(%ebp),%eax
+80101f47:	6a 0e                	push   $0xe
+80101f49:	ff 75 0c             	pushl  0xc(%ebp)
+80101f4c:	50                   	push   %eax
+80101f4d:	e8 7e 27 00 00       	call   801046d0 <strncpy>
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101f52:	6a 10                	push   $0x10
+  de.inum = inum;
+80101f54:	8b 45 10             	mov    0x10(%ebp),%eax
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101f57:	57                   	push   %edi
+80101f58:	56                   	push   %esi
+80101f59:	53                   	push   %ebx
+  de.inum = inum;
+80101f5a:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101f5e:	e8 8d fb ff ff       	call   80101af0 <writei>
+80101f63:	83 c4 20             	add    $0x20,%esp
+80101f66:	83 f8 10             	cmp    $0x10,%eax
+80101f69:	75 2a                	jne    80101f95 <dirlink+0xa5>
+  return 0;
+80101f6b:	31 c0                	xor    %eax,%eax
+}
+80101f6d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101f70:	5b                   	pop    %ebx
+80101f71:	5e                   	pop    %esi
+80101f72:	5f                   	pop    %edi
+80101f73:	5d                   	pop    %ebp
+80101f74:	c3                   	ret    
+    iput(ip);
+80101f75:	83 ec 0c             	sub    $0xc,%esp
+80101f78:	50                   	push   %eax
+80101f79:	e8 c2 f8 ff ff       	call   80101840 <iput>
+    return -1;
+80101f7e:	83 c4 10             	add    $0x10,%esp
+80101f81:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101f86:	eb e5                	jmp    80101f6d <dirlink+0x7d>
+      panic("dirlink read");
+80101f88:	83 ec 0c             	sub    $0xc,%esp
+80101f8b:	68 c8 70 10 80       	push   $0x801070c8
+80101f90:	e8 fb e3 ff ff       	call   80100390 <panic>
+    panic("dirlink");
+80101f95:	83 ec 0c             	sub    $0xc,%esp
+80101f98:	68 be 76 10 80       	push   $0x801076be
+80101f9d:	e8 ee e3 ff ff       	call   80100390 <panic>
+80101fa2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101fa9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80101fb0 <namei>:
+
+struct inode*
+namei(char *path)
+{
+80101fb0:	55                   	push   %ebp
+  char name[DIRSIZ];
+  return namex(path, 0, name);
+80101fb1:	31 d2                	xor    %edx,%edx
+{
+80101fb3:	89 e5                	mov    %esp,%ebp
+80101fb5:	83 ec 18             	sub    $0x18,%esp
+  return namex(path, 0, name);
+80101fb8:	8b 45 08             	mov    0x8(%ebp),%eax
+80101fbb:	8d 4d ea             	lea    -0x16(%ebp),%ecx
+80101fbe:	e8 2d fd ff ff       	call   80101cf0 <namex>
+}
+80101fc3:	c9                   	leave  
+80101fc4:	c3                   	ret    
+80101fc5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101fcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101fd0 <nameiparent>:
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+80101fd0:	55                   	push   %ebp
+  return namex(path, 1, name);
+80101fd1:	ba 01 00 00 00       	mov    $0x1,%edx
+{
+80101fd6:	89 e5                	mov    %esp,%ebp
+  return namex(path, 1, name);
+80101fd8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80101fdb:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+80101fde:	5d                   	pop    %ebp
+  return namex(path, 1, name);
+80101fdf:	e9 0c fd ff ff       	jmp    80101cf0 <namex>
+80101fe4:	66 90                	xchg   %ax,%ax
+80101fe6:	66 90                	xchg   %ax,%ax
+80101fe8:	66 90                	xchg   %ax,%ax
+80101fea:	66 90                	xchg   %ax,%ax
+80101fec:	66 90                	xchg   %ax,%ax
+80101fee:	66 90                	xchg   %ax,%ax
+
+80101ff0 <idestart>:
+}
+
+// Start the request for b.  Caller must hold idelock.
+static void
+idestart(struct buf *b)
+{
+80101ff0:	55                   	push   %ebp
+80101ff1:	89 e5                	mov    %esp,%ebp
+80101ff3:	57                   	push   %edi
+80101ff4:	56                   	push   %esi
+80101ff5:	53                   	push   %ebx
+80101ff6:	83 ec 0c             	sub    $0xc,%esp
+  if(b == 0)
+80101ff9:	85 c0                	test   %eax,%eax
+80101ffb:	0f 84 b4 00 00 00    	je     801020b5 <idestart+0xc5>
+    panic("idestart");
+  if(b->blockno >= FSSIZE)
+80102001:	8b 70 08             	mov    0x8(%eax),%esi
+80102004:	89 c3                	mov    %eax,%ebx
+80102006:	81 fe e7 03 00 00    	cmp    $0x3e7,%esi
+8010200c:	0f 87 96 00 00 00    	ja     801020a8 <idestart+0xb8>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102012:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
+80102017:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010201e:	66 90                	xchg   %ax,%ax
+80102020:	89 ca                	mov    %ecx,%edx
+80102022:	ec                   	in     (%dx),%al
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80102023:	83 e0 c0             	and    $0xffffffc0,%eax
+80102026:	3c 40                	cmp    $0x40,%al
+80102028:	75 f6                	jne    80102020 <idestart+0x30>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010202a:	31 ff                	xor    %edi,%edi
+8010202c:	ba f6 03 00 00       	mov    $0x3f6,%edx
+80102031:	89 f8                	mov    %edi,%eax
+80102033:	ee                   	out    %al,(%dx)
+80102034:	b8 01 00 00 00       	mov    $0x1,%eax
+80102039:	ba f2 01 00 00       	mov    $0x1f2,%edx
+8010203e:	ee                   	out    %al,(%dx)
+8010203f:	ba f3 01 00 00       	mov    $0x1f3,%edx
+80102044:	89 f0                	mov    %esi,%eax
+80102046:	ee                   	out    %al,(%dx)
+
+  idewait(0);
+  outb(0x3f6, 0);  // generate interrupt
+  outb(0x1f2, sector_per_block);  // number of sectors
+  outb(0x1f3, sector & 0xff);
+  outb(0x1f4, (sector >> 8) & 0xff);
+80102047:	89 f0                	mov    %esi,%eax
+80102049:	ba f4 01 00 00       	mov    $0x1f4,%edx
+8010204e:	c1 f8 08             	sar    $0x8,%eax
+80102051:	ee                   	out    %al,(%dx)
+80102052:	ba f5 01 00 00       	mov    $0x1f5,%edx
+80102057:	89 f8                	mov    %edi,%eax
+80102059:	ee                   	out    %al,(%dx)
+  outb(0x1f5, (sector >> 16) & 0xff);
+  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
+8010205a:	0f b6 43 04          	movzbl 0x4(%ebx),%eax
+8010205e:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80102063:	c1 e0 04             	shl    $0x4,%eax
+80102066:	83 e0 10             	and    $0x10,%eax
+80102069:	83 c8 e0             	or     $0xffffffe0,%eax
+8010206c:	ee                   	out    %al,(%dx)
+  if(b->flags & B_DIRTY){
+8010206d:	f6 03 04             	testb  $0x4,(%ebx)
+80102070:	75 16                	jne    80102088 <idestart+0x98>
+80102072:	b8 20 00 00 00       	mov    $0x20,%eax
+80102077:	89 ca                	mov    %ecx,%edx
+80102079:	ee                   	out    %al,(%dx)
+    outb(0x1f7, write_cmd);
+    outsl(0x1f0, b->data, BSIZE/4);
+  } else {
+    outb(0x1f7, read_cmd);
+  }
+}
+8010207a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010207d:	5b                   	pop    %ebx
+8010207e:	5e                   	pop    %esi
+8010207f:	5f                   	pop    %edi
+80102080:	5d                   	pop    %ebp
+80102081:	c3                   	ret    
+80102082:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102088:	b8 30 00 00 00       	mov    $0x30,%eax
+8010208d:	89 ca                	mov    %ecx,%edx
+8010208f:	ee                   	out    %al,(%dx)
+  asm volatile("cld; rep outsl" :
+80102090:	b9 80 00 00 00       	mov    $0x80,%ecx
+    outsl(0x1f0, b->data, BSIZE/4);
+80102095:	8d 73 5c             	lea    0x5c(%ebx),%esi
+80102098:	ba f0 01 00 00       	mov    $0x1f0,%edx
+8010209d:	fc                   	cld    
+8010209e:	f3 6f                	rep outsl %ds:(%esi),(%dx)
+}
+801020a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801020a3:	5b                   	pop    %ebx
+801020a4:	5e                   	pop    %esi
+801020a5:	5f                   	pop    %edi
+801020a6:	5d                   	pop    %ebp
+801020a7:	c3                   	ret    
+    panic("incorrect blockno");
+801020a8:	83 ec 0c             	sub    $0xc,%esp
+801020ab:	68 34 71 10 80       	push   $0x80107134
+801020b0:	e8 db e2 ff ff       	call   80100390 <panic>
+    panic("idestart");
+801020b5:	83 ec 0c             	sub    $0xc,%esp
+801020b8:	68 2b 71 10 80       	push   $0x8010712b
+801020bd:	e8 ce e2 ff ff       	call   80100390 <panic>
+801020c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801020c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801020d0 <ideinit>:
+{
+801020d0:	55                   	push   %ebp
+801020d1:	89 e5                	mov    %esp,%ebp
+801020d3:	83 ec 10             	sub    $0x10,%esp
+  initlock(&idelock, "ide");
+801020d6:	68 46 71 10 80       	push   $0x80107146
+801020db:	68 80 a5 10 80       	push   $0x8010a580
+801020e0:	e8 0b 22 00 00       	call   801042f0 <initlock>
+  ioapicenable(IRQ_IDE, ncpu - 1);
+801020e5:	58                   	pop    %eax
+801020e6:	a1 00 2d 11 80       	mov    0x80112d00,%eax
+801020eb:	5a                   	pop    %edx
+801020ec:	83 e8 01             	sub    $0x1,%eax
+801020ef:	50                   	push   %eax
+801020f0:	6a 0e                	push   $0xe
+801020f2:	e8 a9 02 00 00       	call   801023a0 <ioapicenable>
+801020f7:	83 c4 10             	add    $0x10,%esp
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801020fa:	ba f7 01 00 00       	mov    $0x1f7,%edx
+801020ff:	90                   	nop
+80102100:	ec                   	in     (%dx),%al
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80102101:	83 e0 c0             	and    $0xffffffc0,%eax
+80102104:	3c 40                	cmp    $0x40,%al
+80102106:	75 f8                	jne    80102100 <ideinit+0x30>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102108:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
+8010210d:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80102112:	ee                   	out    %al,(%dx)
+80102113:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102118:	ba f7 01 00 00       	mov    $0x1f7,%edx
+8010211d:	eb 06                	jmp    80102125 <ideinit+0x55>
+8010211f:	90                   	nop
+  for(i=0; i<1000; i++){
+80102120:	83 e9 01             	sub    $0x1,%ecx
+80102123:	74 0f                	je     80102134 <ideinit+0x64>
+80102125:	ec                   	in     (%dx),%al
+    if(inb(0x1f7) != 0){
+80102126:	84 c0                	test   %al,%al
+80102128:	74 f6                	je     80102120 <ideinit+0x50>
+      havedisk1 = 1;
+8010212a:	c7 05 60 a5 10 80 01 	movl   $0x1,0x8010a560
+80102131:	00 00 00 
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102134:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
+80102139:	ba f6 01 00 00       	mov    $0x1f6,%edx
+8010213e:	ee                   	out    %al,(%dx)
+}
+8010213f:	c9                   	leave  
+80102140:	c3                   	ret    
+80102141:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102148:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010214f:	90                   	nop
+
+80102150 <ideintr>:
+
+// Interrupt handler.
+void
+ideintr(void)
+{
+80102150:	55                   	push   %ebp
+80102151:	89 e5                	mov    %esp,%ebp
+80102153:	57                   	push   %edi
+80102154:	56                   	push   %esi
+80102155:	53                   	push   %ebx
+80102156:	83 ec 18             	sub    $0x18,%esp
+  struct buf *b;
+
+  // First queued buffer is the active request.
+  acquire(&idelock);
+80102159:	68 80 a5 10 80       	push   $0x8010a580
+8010215e:	e8 ed 22 00 00       	call   80104450 <acquire>
+
+  if((b = idequeue) == 0){
+80102163:	8b 1d 64 a5 10 80    	mov    0x8010a564,%ebx
+80102169:	83 c4 10             	add    $0x10,%esp
+8010216c:	85 db                	test   %ebx,%ebx
+8010216e:	74 63                	je     801021d3 <ideintr+0x83>
+    release(&idelock);
+    return;
+  }
+  idequeue = b->qnext;
+80102170:	8b 43 58             	mov    0x58(%ebx),%eax
+80102173:	a3 64 a5 10 80       	mov    %eax,0x8010a564
+
+  // Read data if needed.
+  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
+80102178:	8b 33                	mov    (%ebx),%esi
+8010217a:	f7 c6 04 00 00 00    	test   $0x4,%esi
+80102180:	75 2f                	jne    801021b1 <ideintr+0x61>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102182:	ba f7 01 00 00       	mov    $0x1f7,%edx
+80102187:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010218e:	66 90                	xchg   %ax,%ax
+80102190:	ec                   	in     (%dx),%al
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80102191:	89 c1                	mov    %eax,%ecx
+80102193:	83 e1 c0             	and    $0xffffffc0,%ecx
+80102196:	80 f9 40             	cmp    $0x40,%cl
+80102199:	75 f5                	jne    80102190 <ideintr+0x40>
+  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
+8010219b:	a8 21                	test   $0x21,%al
+8010219d:	75 12                	jne    801021b1 <ideintr+0x61>
+    insl(0x1f0, b->data, BSIZE/4);
+8010219f:	8d 7b 5c             	lea    0x5c(%ebx),%edi
+  asm volatile("cld; rep insl" :
+801021a2:	b9 80 00 00 00       	mov    $0x80,%ecx
+801021a7:	ba f0 01 00 00       	mov    $0x1f0,%edx
+801021ac:	fc                   	cld    
+801021ad:	f3 6d                	rep insl (%dx),%es:(%edi)
+801021af:	8b 33                	mov    (%ebx),%esi
+
+  // Wake process waiting for this buf.
+  b->flags |= B_VALID;
+  b->flags &= ~B_DIRTY;
+801021b1:	83 e6 fb             	and    $0xfffffffb,%esi
+  wakeup(b);
+801021b4:	83 ec 0c             	sub    $0xc,%esp
+  b->flags &= ~B_DIRTY;
+801021b7:	83 ce 02             	or     $0x2,%esi
+801021ba:	89 33                	mov    %esi,(%ebx)
+  wakeup(b);
+801021bc:	53                   	push   %ebx
+801021bd:	e8 5e 1e 00 00       	call   80104020 <wakeup>
+
+  // Start disk on next buf in queue.
+  if(idequeue != 0)
+801021c2:	a1 64 a5 10 80       	mov    0x8010a564,%eax
+801021c7:	83 c4 10             	add    $0x10,%esp
+801021ca:	85 c0                	test   %eax,%eax
+801021cc:	74 05                	je     801021d3 <ideintr+0x83>
+    idestart(idequeue);
+801021ce:	e8 1d fe ff ff       	call   80101ff0 <idestart>
+    release(&idelock);
+801021d3:	83 ec 0c             	sub    $0xc,%esp
+801021d6:	68 80 a5 10 80       	push   $0x8010a580
+801021db:	e8 30 23 00 00       	call   80104510 <release>
+
+  release(&idelock);
+}
+801021e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801021e3:	5b                   	pop    %ebx
+801021e4:	5e                   	pop    %esi
+801021e5:	5f                   	pop    %edi
+801021e6:	5d                   	pop    %ebp
+801021e7:	c3                   	ret    
+801021e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801021ef:	90                   	nop
+
+801021f0 <iderw>:
+// Sync buf with disk.
+// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
+// Else if B_VALID is not set, read buf from disk, set B_VALID.
+void
+iderw(struct buf *b)
+{
+801021f0:	55                   	push   %ebp
+801021f1:	89 e5                	mov    %esp,%ebp
+801021f3:	53                   	push   %ebx
+801021f4:	83 ec 10             	sub    $0x10,%esp
+801021f7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct buf **pp;
+
+  if(!holdingsleep(&b->lock))
+801021fa:	8d 43 0c             	lea    0xc(%ebx),%eax
+801021fd:	50                   	push   %eax
+801021fe:	e8 9d 20 00 00       	call   801042a0 <holdingsleep>
+80102203:	83 c4 10             	add    $0x10,%esp
+80102206:	85 c0                	test   %eax,%eax
+80102208:	0f 84 d3 00 00 00    	je     801022e1 <iderw+0xf1>
+    panic("iderw: buf not locked");
+  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
+8010220e:	8b 03                	mov    (%ebx),%eax
+80102210:	83 e0 06             	and    $0x6,%eax
+80102213:	83 f8 02             	cmp    $0x2,%eax
+80102216:	0f 84 b8 00 00 00    	je     801022d4 <iderw+0xe4>
+    panic("iderw: nothing to do");
+  if(b->dev != 0 && !havedisk1)
+8010221c:	8b 53 04             	mov    0x4(%ebx),%edx
+8010221f:	85 d2                	test   %edx,%edx
+80102221:	74 0d                	je     80102230 <iderw+0x40>
+80102223:	a1 60 a5 10 80       	mov    0x8010a560,%eax
+80102228:	85 c0                	test   %eax,%eax
+8010222a:	0f 84 97 00 00 00    	je     801022c7 <iderw+0xd7>
+    panic("iderw: ide disk 1 not present");
+
+  acquire(&idelock);  //DOC:acquire-lock
+80102230:	83 ec 0c             	sub    $0xc,%esp
+80102233:	68 80 a5 10 80       	push   $0x8010a580
+80102238:	e8 13 22 00 00       	call   80104450 <acquire>
+
+  // Append b to idequeue.
+  b->qnext = 0;
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+8010223d:	8b 15 64 a5 10 80    	mov    0x8010a564,%edx
+  b->qnext = 0;
+80102243:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+8010224a:	83 c4 10             	add    $0x10,%esp
+8010224d:	85 d2                	test   %edx,%edx
+8010224f:	75 09                	jne    8010225a <iderw+0x6a>
+80102251:	eb 6d                	jmp    801022c0 <iderw+0xd0>
+80102253:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102257:	90                   	nop
+80102258:	89 c2                	mov    %eax,%edx
+8010225a:	8b 42 58             	mov    0x58(%edx),%eax
+8010225d:	85 c0                	test   %eax,%eax
+8010225f:	75 f7                	jne    80102258 <iderw+0x68>
+80102261:	83 c2 58             	add    $0x58,%edx
+    ;
+  *pp = b;
+80102264:	89 1a                	mov    %ebx,(%edx)
+
+  // Start disk if necessary.
+  if(idequeue == b)
+80102266:	39 1d 64 a5 10 80    	cmp    %ebx,0x8010a564
+8010226c:	74 42                	je     801022b0 <iderw+0xc0>
+    idestart(b);
+
+  // Wait for request to finish.
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+8010226e:	8b 03                	mov    (%ebx),%eax
+80102270:	83 e0 06             	and    $0x6,%eax
+80102273:	83 f8 02             	cmp    $0x2,%eax
+80102276:	74 23                	je     8010229b <iderw+0xab>
+80102278:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010227f:	90                   	nop
+    sleep(b, &idelock);
+80102280:	83 ec 08             	sub    $0x8,%esp
+80102283:	68 80 a5 10 80       	push   $0x8010a580
+80102288:	53                   	push   %ebx
+80102289:	e8 e2 1b 00 00       	call   80103e70 <sleep>
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+8010228e:	8b 03                	mov    (%ebx),%eax
+80102290:	83 c4 10             	add    $0x10,%esp
+80102293:	83 e0 06             	and    $0x6,%eax
+80102296:	83 f8 02             	cmp    $0x2,%eax
+80102299:	75 e5                	jne    80102280 <iderw+0x90>
+  }
+
+
+  release(&idelock);
+8010229b:	c7 45 08 80 a5 10 80 	movl   $0x8010a580,0x8(%ebp)
+}
+801022a2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801022a5:	c9                   	leave  
+  release(&idelock);
+801022a6:	e9 65 22 00 00       	jmp    80104510 <release>
+801022ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801022af:	90                   	nop
+    idestart(b);
+801022b0:	89 d8                	mov    %ebx,%eax
+801022b2:	e8 39 fd ff ff       	call   80101ff0 <idestart>
+801022b7:	eb b5                	jmp    8010226e <iderw+0x7e>
+801022b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+801022c0:	ba 64 a5 10 80       	mov    $0x8010a564,%edx
+801022c5:	eb 9d                	jmp    80102264 <iderw+0x74>
+    panic("iderw: ide disk 1 not present");
+801022c7:	83 ec 0c             	sub    $0xc,%esp
+801022ca:	68 75 71 10 80       	push   $0x80107175
+801022cf:	e8 bc e0 ff ff       	call   80100390 <panic>
+    panic("iderw: nothing to do");
+801022d4:	83 ec 0c             	sub    $0xc,%esp
+801022d7:	68 60 71 10 80       	push   $0x80107160
+801022dc:	e8 af e0 ff ff       	call   80100390 <panic>
+    panic("iderw: buf not locked");
+801022e1:	83 ec 0c             	sub    $0xc,%esp
+801022e4:	68 4a 71 10 80       	push   $0x8010714a
+801022e9:	e8 a2 e0 ff ff       	call   80100390 <panic>
+801022ee:	66 90                	xchg   %ax,%ax
+
+801022f0 <ioapicinit>:
+  ioapic->data = data;
+}
+
+void
+ioapicinit(void)
+{
+801022f0:	55                   	push   %ebp
+  int i, id, maxintr;
+
+  ioapic = (volatile struct ioapic*)IOAPIC;
+801022f1:	c7 05 34 26 11 80 00 	movl   $0xfec00000,0x80112634
+801022f8:	00 c0 fe 
+{
+801022fb:	89 e5                	mov    %esp,%ebp
+801022fd:	56                   	push   %esi
+801022fe:	53                   	push   %ebx
+  ioapic->reg = reg;
+801022ff:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
+80102306:	00 00 00 
+  return ioapic->data;
+80102309:	8b 15 34 26 11 80    	mov    0x80112634,%edx
+8010230f:	8b 72 10             	mov    0x10(%edx),%esi
+  ioapic->reg = reg;
+80102312:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
+  return ioapic->data;
+80102318:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+  id = ioapicread(REG_ID) >> 24;
+  if(id != ioapicid)
+8010231e:	0f b6 15 60 27 11 80 	movzbl 0x80112760,%edx
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+80102325:	c1 ee 10             	shr    $0x10,%esi
+80102328:	89 f0                	mov    %esi,%eax
+8010232a:	0f b6 f0             	movzbl %al,%esi
+  return ioapic->data;
+8010232d:	8b 41 10             	mov    0x10(%ecx),%eax
+  id = ioapicread(REG_ID) >> 24;
+80102330:	c1 e8 18             	shr    $0x18,%eax
+  if(id != ioapicid)
+80102333:	39 c2                	cmp    %eax,%edx
+80102335:	74 16                	je     8010234d <ioapicinit+0x5d>
+    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
+80102337:	83 ec 0c             	sub    $0xc,%esp
+8010233a:	68 94 71 10 80       	push   $0x80107194
+8010233f:	e8 6c e3 ff ff       	call   801006b0 <cprintf>
+80102344:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+8010234a:	83 c4 10             	add    $0x10,%esp
+8010234d:	83 c6 21             	add    $0x21,%esi
+{
+80102350:	ba 10 00 00 00       	mov    $0x10,%edx
+80102355:	b8 20 00 00 00       	mov    $0x20,%eax
+8010235a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  ioapic->reg = reg;
+80102360:	89 11                	mov    %edx,(%ecx)
+
+  // Mark all interrupts edge-triggered, active high, disabled,
+  // and not routed to any CPUs.
+  for(i = 0; i <= maxintr; i++){
+    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
+80102362:	89 c3                	mov    %eax,%ebx
+  ioapic->data = data;
+80102364:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+8010236a:	83 c0 01             	add    $0x1,%eax
+    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
+8010236d:	81 cb 00 00 01 00    	or     $0x10000,%ebx
+  ioapic->data = data;
+80102373:	89 59 10             	mov    %ebx,0x10(%ecx)
+  ioapic->reg = reg;
+80102376:	8d 5a 01             	lea    0x1(%edx),%ebx
+80102379:	83 c2 02             	add    $0x2,%edx
+8010237c:	89 19                	mov    %ebx,(%ecx)
+  ioapic->data = data;
+8010237e:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102384:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
+  for(i = 0; i <= maxintr; i++){
+8010238b:	39 f0                	cmp    %esi,%eax
+8010238d:	75 d1                	jne    80102360 <ioapicinit+0x70>
+    ioapicwrite(REG_TABLE+2*i+1, 0);
+  }
+}
+8010238f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102392:	5b                   	pop    %ebx
+80102393:	5e                   	pop    %esi
+80102394:	5d                   	pop    %ebp
+80102395:	c3                   	ret    
+80102396:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010239d:	8d 76 00             	lea    0x0(%esi),%esi
+
+801023a0 <ioapicenable>:
+
+void
+ioapicenable(int irq, int cpunum)
+{
+801023a0:	55                   	push   %ebp
+  ioapic->reg = reg;
+801023a1:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+{
+801023a7:	89 e5                	mov    %esp,%ebp
+801023a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  // Mark interrupt edge-triggered, active high,
+  // enabled, and routed to the given cpunum,
+  // which happens to be that cpu's APIC ID.
+  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
+801023ac:	8d 50 20             	lea    0x20(%eax),%edx
+801023af:	8d 44 00 10          	lea    0x10(%eax,%eax,1),%eax
+  ioapic->reg = reg;
+801023b3:	89 01                	mov    %eax,(%ecx)
+  ioapic->data = data;
+801023b5:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+801023bb:	83 c0 01             	add    $0x1,%eax
+  ioapic->data = data;
+801023be:	89 51 10             	mov    %edx,0x10(%ecx)
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+801023c1:	8b 55 0c             	mov    0xc(%ebp),%edx
+  ioapic->reg = reg;
+801023c4:	89 01                	mov    %eax,(%ecx)
+  ioapic->data = data;
+801023c6:	a1 34 26 11 80       	mov    0x80112634,%eax
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+801023cb:	c1 e2 18             	shl    $0x18,%edx
+  ioapic->data = data;
+801023ce:	89 50 10             	mov    %edx,0x10(%eax)
+}
+801023d1:	5d                   	pop    %ebp
+801023d2:	c3                   	ret    
+801023d3:	66 90                	xchg   %ax,%ax
+801023d5:	66 90                	xchg   %ax,%ax
+801023d7:	66 90                	xchg   %ax,%ax
+801023d9:	66 90                	xchg   %ax,%ax
+801023db:	66 90                	xchg   %ax,%ax
+801023dd:	66 90                	xchg   %ax,%ax
+801023df:	90                   	nop
+
+801023e0 <kfree>:
+// which normally should have been returned by a
+// call to kalloc().  (The exception is when
+// initializing the allocator; see kinit above.)
+void
+kfree(char *v)
+{
+801023e0:	55                   	push   %ebp
+801023e1:	89 e5                	mov    %esp,%ebp
+801023e3:	53                   	push   %ebx
+801023e4:	83 ec 04             	sub    $0x4,%esp
+801023e7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct run *r;
+
+  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
+801023ea:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
+801023f0:	75 76                	jne    80102468 <kfree+0x88>
+801023f2:	81 fb a8 54 11 80    	cmp    $0x801154a8,%ebx
+801023f8:	72 6e                	jb     80102468 <kfree+0x88>
+801023fa:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80102400:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
+80102405:	77 61                	ja     80102468 <kfree+0x88>
+    panic("kfree");
+
+  // Fill with junk to catch dangling refs.
+  memset(v, 1, PGSIZE);
+80102407:	83 ec 04             	sub    $0x4,%esp
+8010240a:	68 00 10 00 00       	push   $0x1000
+8010240f:	6a 01                	push   $0x1
+80102411:	53                   	push   %ebx
+80102412:	e8 49 21 00 00       	call   80104560 <memset>
+
+  if(kmem.use_lock)
+80102417:	8b 15 74 26 11 80    	mov    0x80112674,%edx
+8010241d:	83 c4 10             	add    $0x10,%esp
+80102420:	85 d2                	test   %edx,%edx
+80102422:	75 1c                	jne    80102440 <kfree+0x60>
+    acquire(&kmem.lock);
+  r = (struct run*)v;
+  r->next = kmem.freelist;
+80102424:	a1 78 26 11 80       	mov    0x80112678,%eax
+80102429:	89 03                	mov    %eax,(%ebx)
+  kmem.freelist = r;
+  if(kmem.use_lock)
+8010242b:	a1 74 26 11 80       	mov    0x80112674,%eax
+  kmem.freelist = r;
+80102430:	89 1d 78 26 11 80    	mov    %ebx,0x80112678
+  if(kmem.use_lock)
+80102436:	85 c0                	test   %eax,%eax
+80102438:	75 1e                	jne    80102458 <kfree+0x78>
+    release(&kmem.lock);
+}
+8010243a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010243d:	c9                   	leave  
+8010243e:	c3                   	ret    
+8010243f:	90                   	nop
+    acquire(&kmem.lock);
+80102440:	83 ec 0c             	sub    $0xc,%esp
+80102443:	68 40 26 11 80       	push   $0x80112640
+80102448:	e8 03 20 00 00       	call   80104450 <acquire>
+8010244d:	83 c4 10             	add    $0x10,%esp
+80102450:	eb d2                	jmp    80102424 <kfree+0x44>
+80102452:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    release(&kmem.lock);
+80102458:	c7 45 08 40 26 11 80 	movl   $0x80112640,0x8(%ebp)
+}
+8010245f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102462:	c9                   	leave  
+    release(&kmem.lock);
+80102463:	e9 a8 20 00 00       	jmp    80104510 <release>
+    panic("kfree");
+80102468:	83 ec 0c             	sub    $0xc,%esp
+8010246b:	68 c6 71 10 80       	push   $0x801071c6
+80102470:	e8 1b df ff ff       	call   80100390 <panic>
+80102475:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010247c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102480 <freerange>:
+{
+80102480:	55                   	push   %ebp
+80102481:	89 e5                	mov    %esp,%ebp
+80102483:	56                   	push   %esi
+  p = (char*)PGROUNDUP((uint)vstart);
+80102484:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+80102487:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010248a:	53                   	push   %ebx
+  p = (char*)PGROUNDUP((uint)vstart);
+8010248b:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102491:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102497:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010249d:	39 de                	cmp    %ebx,%esi
+8010249f:	72 23                	jb     801024c4 <freerange+0x44>
+801024a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    kfree(p);
+801024a8:	83 ec 0c             	sub    $0xc,%esp
+801024ab:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801024b1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+801024b7:	50                   	push   %eax
+801024b8:	e8 23 ff ff ff       	call   801023e0 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801024bd:	83 c4 10             	add    $0x10,%esp
+801024c0:	39 f3                	cmp    %esi,%ebx
+801024c2:	76 e4                	jbe    801024a8 <freerange+0x28>
+}
+801024c4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801024c7:	5b                   	pop    %ebx
+801024c8:	5e                   	pop    %esi
+801024c9:	5d                   	pop    %ebp
+801024ca:	c3                   	ret    
+801024cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801024cf:	90                   	nop
+
+801024d0 <kinit1>:
+{
+801024d0:	55                   	push   %ebp
+801024d1:	89 e5                	mov    %esp,%ebp
+801024d3:	56                   	push   %esi
+801024d4:	53                   	push   %ebx
+801024d5:	8b 75 0c             	mov    0xc(%ebp),%esi
+  initlock(&kmem.lock, "kmem");
+801024d8:	83 ec 08             	sub    $0x8,%esp
+801024db:	68 cc 71 10 80       	push   $0x801071cc
+801024e0:	68 40 26 11 80       	push   $0x80112640
+801024e5:	e8 06 1e 00 00       	call   801042f0 <initlock>
+  p = (char*)PGROUNDUP((uint)vstart);
+801024ea:	8b 45 08             	mov    0x8(%ebp),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801024ed:	83 c4 10             	add    $0x10,%esp
+  kmem.use_lock = 0;
+801024f0:	c7 05 74 26 11 80 00 	movl   $0x0,0x80112674
+801024f7:	00 00 00 
+  p = (char*)PGROUNDUP((uint)vstart);
+801024fa:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102500:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102506:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010250c:	39 de                	cmp    %ebx,%esi
+8010250e:	72 1c                	jb     8010252c <kinit1+0x5c>
+    kfree(p);
+80102510:	83 ec 0c             	sub    $0xc,%esp
+80102513:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102519:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+8010251f:	50                   	push   %eax
+80102520:	e8 bb fe ff ff       	call   801023e0 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102525:	83 c4 10             	add    $0x10,%esp
+80102528:	39 de                	cmp    %ebx,%esi
+8010252a:	73 e4                	jae    80102510 <kinit1+0x40>
+}
+8010252c:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010252f:	5b                   	pop    %ebx
+80102530:	5e                   	pop    %esi
+80102531:	5d                   	pop    %ebp
+80102532:	c3                   	ret    
+80102533:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010253a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102540 <kinit2>:
+{
+80102540:	55                   	push   %ebp
+80102541:	89 e5                	mov    %esp,%ebp
+80102543:	56                   	push   %esi
+  p = (char*)PGROUNDUP((uint)vstart);
+80102544:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+80102547:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010254a:	53                   	push   %ebx
+  p = (char*)PGROUNDUP((uint)vstart);
+8010254b:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102551:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102557:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010255d:	39 de                	cmp    %ebx,%esi
+8010255f:	72 23                	jb     80102584 <kinit2+0x44>
+80102561:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    kfree(p);
+80102568:	83 ec 0c             	sub    $0xc,%esp
+8010256b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102571:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+80102577:	50                   	push   %eax
+80102578:	e8 63 fe ff ff       	call   801023e0 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+8010257d:	83 c4 10             	add    $0x10,%esp
+80102580:	39 de                	cmp    %ebx,%esi
+80102582:	73 e4                	jae    80102568 <kinit2+0x28>
+  kmem.use_lock = 1;
+80102584:	c7 05 74 26 11 80 01 	movl   $0x1,0x80112674
+8010258b:	00 00 00 
+}
+8010258e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102591:	5b                   	pop    %ebx
+80102592:	5e                   	pop    %esi
+80102593:	5d                   	pop    %ebp
+80102594:	c3                   	ret    
+80102595:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010259c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801025a0 <kalloc>:
+// Allocate one 4096-byte page of physical memory.
+// Returns a pointer that the kernel can use.
+// Returns 0 if the memory cannot be allocated.
+char*
+kalloc(void)
+{
+801025a0:	55                   	push   %ebp
+801025a1:	89 e5                	mov    %esp,%ebp
+801025a3:	53                   	push   %ebx
+801025a4:	83 ec 04             	sub    $0x4,%esp
+  struct run *r;
+
+  if(kmem.use_lock)
+801025a7:	a1 74 26 11 80       	mov    0x80112674,%eax
+801025ac:	85 c0                	test   %eax,%eax
+801025ae:	75 20                	jne    801025d0 <kalloc+0x30>
+    acquire(&kmem.lock);
+  r = kmem.freelist;
+801025b0:	8b 1d 78 26 11 80    	mov    0x80112678,%ebx
+  if(r)
+801025b6:	85 db                	test   %ebx,%ebx
+801025b8:	74 07                	je     801025c1 <kalloc+0x21>
+    kmem.freelist = r->next;
+801025ba:	8b 03                	mov    (%ebx),%eax
+801025bc:	a3 78 26 11 80       	mov    %eax,0x80112678
+  if(kmem.use_lock)
+    release(&kmem.lock);
+  return (char*)r;
+}
+801025c1:	89 d8                	mov    %ebx,%eax
+801025c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801025c6:	c9                   	leave  
+801025c7:	c3                   	ret    
+801025c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801025cf:	90                   	nop
+    acquire(&kmem.lock);
+801025d0:	83 ec 0c             	sub    $0xc,%esp
+801025d3:	68 40 26 11 80       	push   $0x80112640
+801025d8:	e8 73 1e 00 00       	call   80104450 <acquire>
+  r = kmem.freelist;
+801025dd:	8b 1d 78 26 11 80    	mov    0x80112678,%ebx
+  if(r)
+801025e3:	83 c4 10             	add    $0x10,%esp
+801025e6:	a1 74 26 11 80       	mov    0x80112674,%eax
+801025eb:	85 db                	test   %ebx,%ebx
+801025ed:	74 08                	je     801025f7 <kalloc+0x57>
+    kmem.freelist = r->next;
+801025ef:	8b 13                	mov    (%ebx),%edx
+801025f1:	89 15 78 26 11 80    	mov    %edx,0x80112678
+  if(kmem.use_lock)
+801025f7:	85 c0                	test   %eax,%eax
+801025f9:	74 c6                	je     801025c1 <kalloc+0x21>
+    release(&kmem.lock);
+801025fb:	83 ec 0c             	sub    $0xc,%esp
+801025fe:	68 40 26 11 80       	push   $0x80112640
+80102603:	e8 08 1f 00 00       	call   80104510 <release>
+}
+80102608:	89 d8                	mov    %ebx,%eax
+    release(&kmem.lock);
+8010260a:	83 c4 10             	add    $0x10,%esp
+}
+8010260d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102610:	c9                   	leave  
+80102611:	c3                   	ret    
+80102612:	66 90                	xchg   %ax,%ax
+80102614:	66 90                	xchg   %ax,%ax
+80102616:	66 90                	xchg   %ax,%ax
+80102618:	66 90                	xchg   %ax,%ax
+8010261a:	66 90                	xchg   %ax,%ax
+8010261c:	66 90                	xchg   %ax,%ax
+8010261e:	66 90                	xchg   %ax,%ax
+
+80102620 <kbdgetc>:
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102620:	ba 64 00 00 00       	mov    $0x64,%edx
+80102625:	ec                   	in     (%dx),%al
+    normalmap, shiftmap, ctlmap, ctlmap
+  };
+  uint st, data, c;
+
+  st = inb(KBSTATP);
+  if((st & KBS_DIB) == 0)
+80102626:	a8 01                	test   $0x1,%al
+80102628:	0f 84 c2 00 00 00    	je     801026f0 <kbdgetc+0xd0>
+{
+8010262e:	55                   	push   %ebp
+8010262f:	ba 60 00 00 00       	mov    $0x60,%edx
+80102634:	89 e5                	mov    %esp,%ebp
+80102636:	53                   	push   %ebx
+80102637:	ec                   	in     (%dx),%al
+    return -1;
+  data = inb(KBDATAP);
+80102638:	0f b6 d0             	movzbl %al,%edx
+
+  if(data == 0xE0){
+8010263b:	8b 1d b4 a5 10 80    	mov    0x8010a5b4,%ebx
+80102641:	81 fa e0 00 00 00    	cmp    $0xe0,%edx
+80102647:	74 57                	je     801026a0 <kbdgetc+0x80>
+    shift |= E0ESC;
+    return 0;
+  } else if(data & 0x80){
+80102649:	89 d9                	mov    %ebx,%ecx
+8010264b:	83 e1 40             	and    $0x40,%ecx
+8010264e:	84 c0                	test   %al,%al
+80102650:	78 5e                	js     801026b0 <kbdgetc+0x90>
+    // Key released
+    data = (shift & E0ESC ? data : data & 0x7F);
+    shift &= ~(shiftcode[data] | E0ESC);
+    return 0;
+  } else if(shift & E0ESC){
+80102652:	85 c9                	test   %ecx,%ecx
+80102654:	74 09                	je     8010265f <kbdgetc+0x3f>
+    // Last character was an E0 escape; or with 0x80
+    data |= 0x80;
+80102656:	83 c8 80             	or     $0xffffff80,%eax
+    shift &= ~E0ESC;
+80102659:	83 e3 bf             	and    $0xffffffbf,%ebx
+    data |= 0x80;
+8010265c:	0f b6 d0             	movzbl %al,%edx
+  }
+
+  shift |= shiftcode[data];
+8010265f:	0f b6 8a 00 73 10 80 	movzbl -0x7fef8d00(%edx),%ecx
+  shift ^= togglecode[data];
+80102666:	0f b6 82 00 72 10 80 	movzbl -0x7fef8e00(%edx),%eax
+  shift |= shiftcode[data];
+8010266d:	09 d9                	or     %ebx,%ecx
+  shift ^= togglecode[data];
+8010266f:	31 c1                	xor    %eax,%ecx
+  c = charcode[shift & (CTL | SHIFT)][data];
+80102671:	89 c8                	mov    %ecx,%eax
+  shift ^= togglecode[data];
+80102673:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
+  c = charcode[shift & (CTL | SHIFT)][data];
+80102679:	83 e0 03             	and    $0x3,%eax
+  if(shift & CAPSLOCK){
+8010267c:	83 e1 08             	and    $0x8,%ecx
+  c = charcode[shift & (CTL | SHIFT)][data];
+8010267f:	8b 04 85 e0 71 10 80 	mov    -0x7fef8e20(,%eax,4),%eax
+80102686:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
+  if(shift & CAPSLOCK){
+8010268a:	74 0b                	je     80102697 <kbdgetc+0x77>
+    if('a' <= c && c <= 'z')
+8010268c:	8d 50 9f             	lea    -0x61(%eax),%edx
+8010268f:	83 fa 19             	cmp    $0x19,%edx
+80102692:	77 44                	ja     801026d8 <kbdgetc+0xb8>
+      c += 'A' - 'a';
+80102694:	83 e8 20             	sub    $0x20,%eax
+    else if('A' <= c && c <= 'Z')
+      c += 'a' - 'A';
+  }
+  return c;
+}
+80102697:	5b                   	pop    %ebx
+80102698:	5d                   	pop    %ebp
+80102699:	c3                   	ret    
+8010269a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    shift |= E0ESC;
+801026a0:	83 cb 40             	or     $0x40,%ebx
+    return 0;
+801026a3:	31 c0                	xor    %eax,%eax
+    shift |= E0ESC;
+801026a5:	89 1d b4 a5 10 80    	mov    %ebx,0x8010a5b4
+}
+801026ab:	5b                   	pop    %ebx
+801026ac:	5d                   	pop    %ebp
+801026ad:	c3                   	ret    
+801026ae:	66 90                	xchg   %ax,%ax
+    data = (shift & E0ESC ? data : data & 0x7F);
+801026b0:	83 e0 7f             	and    $0x7f,%eax
+801026b3:	85 c9                	test   %ecx,%ecx
+801026b5:	0f 44 d0             	cmove  %eax,%edx
+    return 0;
+801026b8:	31 c0                	xor    %eax,%eax
+    shift &= ~(shiftcode[data] | E0ESC);
+801026ba:	0f b6 8a 00 73 10 80 	movzbl -0x7fef8d00(%edx),%ecx
+801026c1:	83 c9 40             	or     $0x40,%ecx
+801026c4:	0f b6 c9             	movzbl %cl,%ecx
+801026c7:	f7 d1                	not    %ecx
+801026c9:	21 d9                	and    %ebx,%ecx
+}
+801026cb:	5b                   	pop    %ebx
+801026cc:	5d                   	pop    %ebp
+    shift &= ~(shiftcode[data] | E0ESC);
+801026cd:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
+}
+801026d3:	c3                   	ret    
+801026d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    else if('A' <= c && c <= 'Z')
+801026d8:	8d 48 bf             	lea    -0x41(%eax),%ecx
+      c += 'a' - 'A';
+801026db:	8d 50 20             	lea    0x20(%eax),%edx
+}
+801026de:	5b                   	pop    %ebx
+801026df:	5d                   	pop    %ebp
+      c += 'a' - 'A';
+801026e0:	83 f9 1a             	cmp    $0x1a,%ecx
+801026e3:	0f 42 c2             	cmovb  %edx,%eax
+}
+801026e6:	c3                   	ret    
+801026e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801026ee:	66 90                	xchg   %ax,%ax
+    return -1;
+801026f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801026f5:	c3                   	ret    
+801026f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801026fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102700 <kbdintr>:
+
+void
+kbdintr(void)
+{
+80102700:	55                   	push   %ebp
+80102701:	89 e5                	mov    %esp,%ebp
+80102703:	83 ec 14             	sub    $0x14,%esp
+  consoleintr(kbdgetc);
+80102706:	68 20 26 10 80       	push   $0x80102620
+8010270b:	e8 50 e1 ff ff       	call   80100860 <consoleintr>
+}
+80102710:	83 c4 10             	add    $0x10,%esp
+80102713:	c9                   	leave  
+80102714:	c3                   	ret    
+80102715:	66 90                	xchg   %ax,%ax
+80102717:	66 90                	xchg   %ax,%ax
+80102719:	66 90                	xchg   %ax,%ax
+8010271b:	66 90                	xchg   %ax,%ax
+8010271d:	66 90                	xchg   %ax,%ax
+8010271f:	90                   	nop
+
+80102720 <lapicinit>:
+}
+
+void
+lapicinit(void)
+{
+  if(!lapic)
+80102720:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+80102725:	85 c0                	test   %eax,%eax
+80102727:	0f 84 cb 00 00 00    	je     801027f8 <lapicinit+0xd8>
+  lapic[index] = value;
+8010272d:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
+80102734:	01 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102737:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+8010273a:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
+80102741:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102744:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102747:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
+8010274e:	00 02 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102751:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102754:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
+8010275b:	96 98 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010275e:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102761:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
+80102768:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010276b:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+8010276e:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
+80102775:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102778:	8b 50 20             	mov    0x20(%eax),%edx
+  lapicw(LINT0, MASKED);
+  lapicw(LINT1, MASKED);
+
+  // Disable performance counter overflow interrupts
+  // on machines that provide that interrupt entry.
+  if(((lapic[VER]>>16) & 0xFF) >= 4)
+8010277b:	8b 50 30             	mov    0x30(%eax),%edx
+8010277e:	c1 ea 10             	shr    $0x10,%edx
+80102781:	81 e2 fc 00 00 00    	and    $0xfc,%edx
+80102787:	75 77                	jne    80102800 <lapicinit+0xe0>
+  lapic[index] = value;
+80102789:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
+80102790:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102793:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80102796:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+8010279d:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801027a0:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801027a3:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+801027aa:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801027ad:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801027b0:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+801027b7:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801027ba:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801027bd:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
+801027c4:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801027c7:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801027ca:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
+801027d1:	85 08 00 
+  lapic[ID];  // wait for write to finish, by reading
+801027d4:	8b 50 20             	mov    0x20(%eax),%edx
+801027d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801027de:	66 90                	xchg   %ax,%ax
+  lapicw(EOI, 0);
+
+  // Send an Init Level De-Assert to synchronise arbitration ID's.
+  lapicw(ICRHI, 0);
+  lapicw(ICRLO, BCAST | INIT | LEVEL);
+  while(lapic[ICRLO] & DELIVS)
+801027e0:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
+801027e6:	80 e6 10             	and    $0x10,%dh
+801027e9:	75 f5                	jne    801027e0 <lapicinit+0xc0>
+  lapic[index] = value;
+801027eb:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
+801027f2:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801027f5:	8b 40 20             	mov    0x20(%eax),%eax
+    ;
+
+  // Enable interrupts on the APIC (but not on the processor).
+  lapicw(TPR, 0);
+}
+801027f8:	c3                   	ret    
+801027f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  lapic[index] = value;
+80102800:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
+80102807:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010280a:	8b 50 20             	mov    0x20(%eax),%edx
+8010280d:	e9 77 ff ff ff       	jmp    80102789 <lapicinit+0x69>
+80102812:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80102820 <lapicid>:
+
+int
+lapicid(void)
+{
+  if (!lapic)
+80102820:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+80102825:	85 c0                	test   %eax,%eax
+80102827:	74 07                	je     80102830 <lapicid+0x10>
+    return 0;
+  return lapic[ID] >> 24;
+80102829:	8b 40 20             	mov    0x20(%eax),%eax
+8010282c:	c1 e8 18             	shr    $0x18,%eax
+8010282f:	c3                   	ret    
+    return 0;
+80102830:	31 c0                	xor    %eax,%eax
+}
+80102832:	c3                   	ret    
+80102833:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010283a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102840 <lapiceoi>:
+
+// Acknowledge interrupt.
+void
+lapiceoi(void)
+{
+  if(lapic)
+80102840:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+80102845:	85 c0                	test   %eax,%eax
+80102847:	74 0d                	je     80102856 <lapiceoi+0x16>
+  lapic[index] = value;
+80102849:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+80102850:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102853:	8b 40 20             	mov    0x20(%eax),%eax
+    lapicw(EOI, 0);
+}
+80102856:	c3                   	ret    
+80102857:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010285e:	66 90                	xchg   %ax,%ax
+
+80102860 <microdelay>:
+// Spin for a given number of microseconds.
+// On real hardware would want to tune this dynamically.
+void
+microdelay(int us)
+{
+}
+80102860:	c3                   	ret    
+80102861:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102868:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010286f:	90                   	nop
+
+80102870 <lapicstartap>:
+
+// Start additional processor running entry code at addr.
+// See Appendix B of MultiProcessor Specification.
+void
+lapicstartap(uchar apicid, uint addr)
+{
+80102870:	55                   	push   %ebp
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102871:	b8 0f 00 00 00       	mov    $0xf,%eax
+80102876:	ba 70 00 00 00       	mov    $0x70,%edx
+8010287b:	89 e5                	mov    %esp,%ebp
+8010287d:	53                   	push   %ebx
+8010287e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80102881:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102884:	ee                   	out    %al,(%dx)
+80102885:	b8 0a 00 00 00       	mov    $0xa,%eax
+8010288a:	ba 71 00 00 00       	mov    $0x71,%edx
+8010288f:	ee                   	out    %al,(%dx)
+  // and the warm reset vector (DWORD based at 40:67) to point at
+  // the AP startup code prior to the [universal startup algorithm]."
+  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
+  outb(CMOS_PORT+1, 0x0A);
+  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
+  wrv[0] = 0;
+80102890:	31 c0                	xor    %eax,%eax
+  wrv[1] = addr >> 4;
+
+  // "Universal startup algorithm."
+  // Send INIT (level-triggered) interrupt to reset other CPU.
+  lapicw(ICRHI, apicid<<24);
+80102892:	c1 e3 18             	shl    $0x18,%ebx
+  wrv[0] = 0;
+80102895:	66 a3 67 04 00 80    	mov    %ax,0x80000467
+  wrv[1] = addr >> 4;
+8010289b:	89 c8                	mov    %ecx,%eax
+  // when it is in the halted state due to an INIT.  So the second
+  // should be ignored, but it is part of the official Intel algorithm.
+  // Bochs complains about the second one.  Too bad for Bochs.
+  for(i = 0; i < 2; i++){
+    lapicw(ICRHI, apicid<<24);
+    lapicw(ICRLO, STARTUP | (addr>>12));
+8010289d:	c1 e9 0c             	shr    $0xc,%ecx
+  lapicw(ICRHI, apicid<<24);
+801028a0:	89 da                	mov    %ebx,%edx
+  wrv[1] = addr >> 4;
+801028a2:	c1 e8 04             	shr    $0x4,%eax
+    lapicw(ICRLO, STARTUP | (addr>>12));
+801028a5:	80 cd 06             	or     $0x6,%ch
+  wrv[1] = addr >> 4;
+801028a8:	66 a3 69 04 00 80    	mov    %ax,0x80000469
+  lapic[index] = value;
+801028ae:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+801028b3:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+801028b9:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+801028bc:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
+801028c3:	c5 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801028c6:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+801028c9:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
+801028d0:	85 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801028d3:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+801028d6:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+801028dc:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+801028df:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+801028e5:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+801028e8:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+801028ee:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801028f1:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+    microdelay(200);
+  }
+}
+801028f7:	5b                   	pop    %ebx
+  lapic[ID];  // wait for write to finish, by reading
+801028f8:	8b 40 20             	mov    0x20(%eax),%eax
+}
+801028fb:	5d                   	pop    %ebp
+801028fc:	c3                   	ret    
+801028fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102900 <cmostime>:
+}
+
+// qemu seems to use 24-hour GWT and the values are BCD encoded
+void
+cmostime(struct rtcdate *r)
+{
+80102900:	55                   	push   %ebp
+80102901:	b8 0b 00 00 00       	mov    $0xb,%eax
+80102906:	ba 70 00 00 00       	mov    $0x70,%edx
+8010290b:	89 e5                	mov    %esp,%ebp
+8010290d:	57                   	push   %edi
+8010290e:	56                   	push   %esi
+8010290f:	53                   	push   %ebx
+80102910:	83 ec 4c             	sub    $0x4c,%esp
+80102913:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102914:	ba 71 00 00 00       	mov    $0x71,%edx
+80102919:	ec                   	in     (%dx),%al
+  struct rtcdate t1, t2;
+  int sb, bcd;
+
+  sb = cmos_read(CMOS_STATB);
+
+  bcd = (sb & (1 << 2)) == 0;
+8010291a:	83 e0 04             	and    $0x4,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010291d:	bb 70 00 00 00       	mov    $0x70,%ebx
+80102922:	88 45 b3             	mov    %al,-0x4d(%ebp)
+80102925:	8d 76 00             	lea    0x0(%esi),%esi
+80102928:	31 c0                	xor    %eax,%eax
+8010292a:	89 da                	mov    %ebx,%edx
+8010292c:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010292d:	b9 71 00 00 00       	mov    $0x71,%ecx
+80102932:	89 ca                	mov    %ecx,%edx
+80102934:	ec                   	in     (%dx),%al
+80102935:	88 45 b7             	mov    %al,-0x49(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102938:	89 da                	mov    %ebx,%edx
+8010293a:	b8 02 00 00 00       	mov    $0x2,%eax
+8010293f:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102940:	89 ca                	mov    %ecx,%edx
+80102942:	ec                   	in     (%dx),%al
+80102943:	88 45 b6             	mov    %al,-0x4a(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102946:	89 da                	mov    %ebx,%edx
+80102948:	b8 04 00 00 00       	mov    $0x4,%eax
+8010294d:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010294e:	89 ca                	mov    %ecx,%edx
+80102950:	ec                   	in     (%dx),%al
+80102951:	88 45 b5             	mov    %al,-0x4b(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102954:	89 da                	mov    %ebx,%edx
+80102956:	b8 07 00 00 00       	mov    $0x7,%eax
+8010295b:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010295c:	89 ca                	mov    %ecx,%edx
+8010295e:	ec                   	in     (%dx),%al
+8010295f:	88 45 b4             	mov    %al,-0x4c(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102962:	89 da                	mov    %ebx,%edx
+80102964:	b8 08 00 00 00       	mov    $0x8,%eax
+80102969:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010296a:	89 ca                	mov    %ecx,%edx
+8010296c:	ec                   	in     (%dx),%al
+8010296d:	89 c7                	mov    %eax,%edi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010296f:	89 da                	mov    %ebx,%edx
+80102971:	b8 09 00 00 00       	mov    $0x9,%eax
+80102976:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102977:	89 ca                	mov    %ecx,%edx
+80102979:	ec                   	in     (%dx),%al
+8010297a:	89 c6                	mov    %eax,%esi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010297c:	89 da                	mov    %ebx,%edx
+8010297e:	b8 0a 00 00 00       	mov    $0xa,%eax
+80102983:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102984:	89 ca                	mov    %ecx,%edx
+80102986:	ec                   	in     (%dx),%al
+
+  // make sure CMOS doesn't modify time while we read it
+  for(;;) {
+    fill_rtcdate(&t1);
+    if(cmos_read(CMOS_STATA) & CMOS_UIP)
+80102987:	84 c0                	test   %al,%al
+80102989:	78 9d                	js     80102928 <cmostime+0x28>
+  return inb(CMOS_RETURN);
+8010298b:	0f b6 45 b7          	movzbl -0x49(%ebp),%eax
+8010298f:	89 fa                	mov    %edi,%edx
+80102991:	0f b6 fa             	movzbl %dl,%edi
+80102994:	89 f2                	mov    %esi,%edx
+80102996:	89 45 b8             	mov    %eax,-0x48(%ebp)
+80102999:	0f b6 45 b6          	movzbl -0x4a(%ebp),%eax
+8010299d:	0f b6 f2             	movzbl %dl,%esi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801029a0:	89 da                	mov    %ebx,%edx
+801029a2:	89 7d c8             	mov    %edi,-0x38(%ebp)
+801029a5:	89 45 bc             	mov    %eax,-0x44(%ebp)
+801029a8:	0f b6 45 b5          	movzbl -0x4b(%ebp),%eax
+801029ac:	89 75 cc             	mov    %esi,-0x34(%ebp)
+801029af:	89 45 c0             	mov    %eax,-0x40(%ebp)
+801029b2:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
+801029b6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+801029b9:	31 c0                	xor    %eax,%eax
+801029bb:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801029bc:	89 ca                	mov    %ecx,%edx
+801029be:	ec                   	in     (%dx),%al
+801029bf:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801029c2:	89 da                	mov    %ebx,%edx
+801029c4:	89 45 d0             	mov    %eax,-0x30(%ebp)
+801029c7:	b8 02 00 00 00       	mov    $0x2,%eax
+801029cc:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801029cd:	89 ca                	mov    %ecx,%edx
+801029cf:	ec                   	in     (%dx),%al
+801029d0:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801029d3:	89 da                	mov    %ebx,%edx
+801029d5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+801029d8:	b8 04 00 00 00       	mov    $0x4,%eax
+801029dd:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801029de:	89 ca                	mov    %ecx,%edx
+801029e0:	ec                   	in     (%dx),%al
+801029e1:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801029e4:	89 da                	mov    %ebx,%edx
+801029e6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+801029e9:	b8 07 00 00 00       	mov    $0x7,%eax
+801029ee:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801029ef:	89 ca                	mov    %ecx,%edx
+801029f1:	ec                   	in     (%dx),%al
+801029f2:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801029f5:	89 da                	mov    %ebx,%edx
+801029f7:	89 45 dc             	mov    %eax,-0x24(%ebp)
+801029fa:	b8 08 00 00 00       	mov    $0x8,%eax
+801029ff:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102a00:	89 ca                	mov    %ecx,%edx
+80102a02:	ec                   	in     (%dx),%al
+80102a03:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102a06:	89 da                	mov    %ebx,%edx
+80102a08:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80102a0b:	b8 09 00 00 00       	mov    $0x9,%eax
+80102a10:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102a11:	89 ca                	mov    %ecx,%edx
+80102a13:	ec                   	in     (%dx),%al
+80102a14:	0f b6 c0             	movzbl %al,%eax
+        continue;
+    fill_rtcdate(&t2);
+    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
+80102a17:	83 ec 04             	sub    $0x4,%esp
+  return inb(CMOS_RETURN);
+80102a1a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
+80102a1d:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80102a20:	6a 18                	push   $0x18
+80102a22:	50                   	push   %eax
+80102a23:	8d 45 b8             	lea    -0x48(%ebp),%eax
+80102a26:	50                   	push   %eax
+80102a27:	e8 84 1b 00 00       	call   801045b0 <memcmp>
+80102a2c:	83 c4 10             	add    $0x10,%esp
+80102a2f:	85 c0                	test   %eax,%eax
+80102a31:	0f 85 f1 fe ff ff    	jne    80102928 <cmostime+0x28>
+      break;
+  }
+
+  // convert
+  if(bcd) {
+80102a37:	80 7d b3 00          	cmpb   $0x0,-0x4d(%ebp)
+80102a3b:	75 78                	jne    80102ab5 <cmostime+0x1b5>
+#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
+    CONV(second);
+80102a3d:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80102a40:	89 c2                	mov    %eax,%edx
+80102a42:	83 e0 0f             	and    $0xf,%eax
+80102a45:	c1 ea 04             	shr    $0x4,%edx
+80102a48:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102a4b:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102a4e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+    CONV(minute);
+80102a51:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80102a54:	89 c2                	mov    %eax,%edx
+80102a56:	83 e0 0f             	and    $0xf,%eax
+80102a59:	c1 ea 04             	shr    $0x4,%edx
+80102a5c:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102a5f:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102a62:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    CONV(hour  );
+80102a65:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80102a68:	89 c2                	mov    %eax,%edx
+80102a6a:	83 e0 0f             	and    $0xf,%eax
+80102a6d:	c1 ea 04             	shr    $0x4,%edx
+80102a70:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102a73:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102a76:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    CONV(day   );
+80102a79:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80102a7c:	89 c2                	mov    %eax,%edx
+80102a7e:	83 e0 0f             	and    $0xf,%eax
+80102a81:	c1 ea 04             	shr    $0x4,%edx
+80102a84:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102a87:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102a8a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    CONV(month );
+80102a8d:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80102a90:	89 c2                	mov    %eax,%edx
+80102a92:	83 e0 0f             	and    $0xf,%eax
+80102a95:	c1 ea 04             	shr    $0x4,%edx
+80102a98:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102a9b:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102a9e:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    CONV(year  );
+80102aa1:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80102aa4:	89 c2                	mov    %eax,%edx
+80102aa6:	83 e0 0f             	and    $0xf,%eax
+80102aa9:	c1 ea 04             	shr    $0x4,%edx
+80102aac:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102aaf:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102ab2:	89 45 cc             	mov    %eax,-0x34(%ebp)
+#undef     CONV
+  }
+
+  *r = t1;
+80102ab5:	8b 75 08             	mov    0x8(%ebp),%esi
+80102ab8:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80102abb:	89 06                	mov    %eax,(%esi)
+80102abd:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80102ac0:	89 46 04             	mov    %eax,0x4(%esi)
+80102ac3:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80102ac6:	89 46 08             	mov    %eax,0x8(%esi)
+80102ac9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80102acc:	89 46 0c             	mov    %eax,0xc(%esi)
+80102acf:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80102ad2:	89 46 10             	mov    %eax,0x10(%esi)
+80102ad5:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80102ad8:	89 46 14             	mov    %eax,0x14(%esi)
+  r->year += 2000;
+80102adb:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
+}
+80102ae2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102ae5:	5b                   	pop    %ebx
+80102ae6:	5e                   	pop    %esi
+80102ae7:	5f                   	pop    %edi
+80102ae8:	5d                   	pop    %ebp
+80102ae9:	c3                   	ret    
+80102aea:	66 90                	xchg   %ax,%ax
+80102aec:	66 90                	xchg   %ax,%ax
+80102aee:	66 90                	xchg   %ax,%ax
+
+80102af0 <install_trans>:
+static void
+install_trans(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102af0:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
+80102af6:	85 c9                	test   %ecx,%ecx
+80102af8:	0f 8e 8a 00 00 00    	jle    80102b88 <install_trans+0x98>
+{
+80102afe:	55                   	push   %ebp
+80102aff:	89 e5                	mov    %esp,%ebp
+80102b01:	57                   	push   %edi
+80102b02:	56                   	push   %esi
+80102b03:	53                   	push   %ebx
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102b04:	31 db                	xor    %ebx,%ebx
+{
+80102b06:	83 ec 0c             	sub    $0xc,%esp
+80102b09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
+80102b10:	a1 b4 26 11 80       	mov    0x801126b4,%eax
+80102b15:	83 ec 08             	sub    $0x8,%esp
+80102b18:	01 d8                	add    %ebx,%eax
+80102b1a:	83 c0 01             	add    $0x1,%eax
+80102b1d:	50                   	push   %eax
+80102b1e:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102b24:	e8 a7 d5 ff ff       	call   801000d0 <bread>
+80102b29:	89 c7                	mov    %eax,%edi
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+80102b2b:	58                   	pop    %eax
+80102b2c:	5a                   	pop    %edx
+80102b2d:	ff 34 9d cc 26 11 80 	pushl  -0x7feed934(,%ebx,4)
+80102b34:	ff 35 c4 26 11 80    	pushl  0x801126c4
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102b3a:	83 c3 01             	add    $0x1,%ebx
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+80102b3d:	e8 8e d5 ff ff       	call   801000d0 <bread>
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+80102b42:	83 c4 0c             	add    $0xc,%esp
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+80102b45:	89 c6                	mov    %eax,%esi
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+80102b47:	8d 47 5c             	lea    0x5c(%edi),%eax
+80102b4a:	68 00 02 00 00       	push   $0x200
+80102b4f:	50                   	push   %eax
+80102b50:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102b53:	50                   	push   %eax
+80102b54:	e8 a7 1a 00 00       	call   80104600 <memmove>
+    bwrite(dbuf);  // write dst to disk
+80102b59:	89 34 24             	mov    %esi,(%esp)
+80102b5c:	e8 4f d6 ff ff       	call   801001b0 <bwrite>
+    brelse(lbuf);
+80102b61:	89 3c 24             	mov    %edi,(%esp)
+80102b64:	e8 87 d6 ff ff       	call   801001f0 <brelse>
+    brelse(dbuf);
+80102b69:	89 34 24             	mov    %esi,(%esp)
+80102b6c:	e8 7f d6 ff ff       	call   801001f0 <brelse>
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102b71:	83 c4 10             	add    $0x10,%esp
+80102b74:	39 1d c8 26 11 80    	cmp    %ebx,0x801126c8
+80102b7a:	7f 94                	jg     80102b10 <install_trans+0x20>
+  }
+}
+80102b7c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102b7f:	5b                   	pop    %ebx
+80102b80:	5e                   	pop    %esi
+80102b81:	5f                   	pop    %edi
+80102b82:	5d                   	pop    %ebp
+80102b83:	c3                   	ret    
+80102b84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102b88:	c3                   	ret    
+80102b89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80102b90 <write_head>:
+// Write in-memory log header to disk.
+// This is the true point at which the
+// current transaction commits.
+static void
+write_head(void)
+{
+80102b90:	55                   	push   %ebp
+80102b91:	89 e5                	mov    %esp,%ebp
+80102b93:	53                   	push   %ebx
+80102b94:	83 ec 0c             	sub    $0xc,%esp
+  struct buf *buf = bread(log.dev, log.start);
+80102b97:	ff 35 b4 26 11 80    	pushl  0x801126b4
+80102b9d:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102ba3:	e8 28 d5 ff ff       	call   801000d0 <bread>
+  struct logheader *hb = (struct logheader *) (buf->data);
+  int i;
+  hb->n = log.lh.n;
+  for (i = 0; i < log.lh.n; i++) {
+80102ba8:	83 c4 10             	add    $0x10,%esp
+  struct buf *buf = bread(log.dev, log.start);
+80102bab:	89 c3                	mov    %eax,%ebx
+  hb->n = log.lh.n;
+80102bad:	a1 c8 26 11 80       	mov    0x801126c8,%eax
+80102bb2:	89 43 5c             	mov    %eax,0x5c(%ebx)
+  for (i = 0; i < log.lh.n; i++) {
+80102bb5:	85 c0                	test   %eax,%eax
+80102bb7:	7e 19                	jle    80102bd2 <write_head+0x42>
+80102bb9:	31 d2                	xor    %edx,%edx
+80102bbb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102bbf:	90                   	nop
+    hb->block[i] = log.lh.block[i];
+80102bc0:	8b 0c 95 cc 26 11 80 	mov    -0x7feed934(,%edx,4),%ecx
+80102bc7:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
+  for (i = 0; i < log.lh.n; i++) {
+80102bcb:	83 c2 01             	add    $0x1,%edx
+80102bce:	39 d0                	cmp    %edx,%eax
+80102bd0:	75 ee                	jne    80102bc0 <write_head+0x30>
+  }
+  bwrite(buf);
+80102bd2:	83 ec 0c             	sub    $0xc,%esp
+80102bd5:	53                   	push   %ebx
+80102bd6:	e8 d5 d5 ff ff       	call   801001b0 <bwrite>
+  brelse(buf);
+80102bdb:	89 1c 24             	mov    %ebx,(%esp)
+80102bde:	e8 0d d6 ff ff       	call   801001f0 <brelse>
+}
+80102be3:	83 c4 10             	add    $0x10,%esp
+80102be6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102be9:	c9                   	leave  
+80102bea:	c3                   	ret    
+80102beb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102bef:	90                   	nop
+
+80102bf0 <initlog>:
+{
+80102bf0:	55                   	push   %ebp
+80102bf1:	89 e5                	mov    %esp,%ebp
+80102bf3:	53                   	push   %ebx
+80102bf4:	83 ec 2c             	sub    $0x2c,%esp
+80102bf7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  initlock(&log.lock, "log");
+80102bfa:	68 00 74 10 80       	push   $0x80107400
+80102bff:	68 80 26 11 80       	push   $0x80112680
+80102c04:	e8 e7 16 00 00       	call   801042f0 <initlock>
+  readsb(dev, &sb);
+80102c09:	58                   	pop    %eax
+80102c0a:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80102c0d:	5a                   	pop    %edx
+80102c0e:	50                   	push   %eax
+80102c0f:	53                   	push   %ebx
+80102c10:	e8 bb e8 ff ff       	call   801014d0 <readsb>
+  log.start = sb.logstart;
+80102c15:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  struct buf *buf = bread(log.dev, log.start);
+80102c18:	59                   	pop    %ecx
+  log.dev = dev;
+80102c19:	89 1d c4 26 11 80    	mov    %ebx,0x801126c4
+  log.size = sb.nlog;
+80102c1f:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  log.start = sb.logstart;
+80102c22:	a3 b4 26 11 80       	mov    %eax,0x801126b4
+  log.size = sb.nlog;
+80102c27:	89 15 b8 26 11 80    	mov    %edx,0x801126b8
+  struct buf *buf = bread(log.dev, log.start);
+80102c2d:	5a                   	pop    %edx
+80102c2e:	50                   	push   %eax
+80102c2f:	53                   	push   %ebx
+80102c30:	e8 9b d4 ff ff       	call   801000d0 <bread>
+  for (i = 0; i < log.lh.n; i++) {
+80102c35:	83 c4 10             	add    $0x10,%esp
+  log.lh.n = lh->n;
+80102c38:	8b 48 5c             	mov    0x5c(%eax),%ecx
+80102c3b:	89 0d c8 26 11 80    	mov    %ecx,0x801126c8
+  for (i = 0; i < log.lh.n; i++) {
+80102c41:	85 c9                	test   %ecx,%ecx
+80102c43:	7e 1d                	jle    80102c62 <initlog+0x72>
+80102c45:	31 d2                	xor    %edx,%edx
+80102c47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102c4e:	66 90                	xchg   %ax,%ax
+    log.lh.block[i] = lh->block[i];
+80102c50:	8b 5c 90 60          	mov    0x60(%eax,%edx,4),%ebx
+80102c54:	89 1c 95 cc 26 11 80 	mov    %ebx,-0x7feed934(,%edx,4)
+  for (i = 0; i < log.lh.n; i++) {
+80102c5b:	83 c2 01             	add    $0x1,%edx
+80102c5e:	39 d1                	cmp    %edx,%ecx
+80102c60:	75 ee                	jne    80102c50 <initlog+0x60>
+  brelse(buf);
+80102c62:	83 ec 0c             	sub    $0xc,%esp
+80102c65:	50                   	push   %eax
+80102c66:	e8 85 d5 ff ff       	call   801001f0 <brelse>
+
+static void
+recover_from_log(void)
+{
+  read_head();
+  install_trans(); // if committed, copy from log to disk
+80102c6b:	e8 80 fe ff ff       	call   80102af0 <install_trans>
+  log.lh.n = 0;
+80102c70:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
+80102c77:	00 00 00 
+  write_head(); // clear the log
+80102c7a:	e8 11 ff ff ff       	call   80102b90 <write_head>
+}
+80102c7f:	83 c4 10             	add    $0x10,%esp
+80102c82:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102c85:	c9                   	leave  
+80102c86:	c3                   	ret    
+80102c87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102c8e:	66 90                	xchg   %ax,%ax
+
+80102c90 <begin_op>:
+}
+
+// called at the start of each FS system call.
+void
+begin_op(void)
+{
+80102c90:	55                   	push   %ebp
+80102c91:	89 e5                	mov    %esp,%ebp
+80102c93:	83 ec 14             	sub    $0x14,%esp
+  acquire(&log.lock);
+80102c96:	68 80 26 11 80       	push   $0x80112680
+80102c9b:	e8 b0 17 00 00       	call   80104450 <acquire>
+80102ca0:	83 c4 10             	add    $0x10,%esp
+80102ca3:	eb 18                	jmp    80102cbd <begin_op+0x2d>
+80102ca5:	8d 76 00             	lea    0x0(%esi),%esi
+  while(1){
+    if(log.committing){
+      sleep(&log, &log.lock);
+80102ca8:	83 ec 08             	sub    $0x8,%esp
+80102cab:	68 80 26 11 80       	push   $0x80112680
+80102cb0:	68 80 26 11 80       	push   $0x80112680
+80102cb5:	e8 b6 11 00 00       	call   80103e70 <sleep>
+80102cba:	83 c4 10             	add    $0x10,%esp
+    if(log.committing){
+80102cbd:	a1 c0 26 11 80       	mov    0x801126c0,%eax
+80102cc2:	85 c0                	test   %eax,%eax
+80102cc4:	75 e2                	jne    80102ca8 <begin_op+0x18>
+    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
+80102cc6:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+80102ccb:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+80102cd1:	83 c0 01             	add    $0x1,%eax
+80102cd4:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
+80102cd7:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
+80102cda:	83 fa 1e             	cmp    $0x1e,%edx
+80102cdd:	7f c9                	jg     80102ca8 <begin_op+0x18>
+      // this op might exhaust log space; wait for commit.
+      sleep(&log, &log.lock);
+    } else {
+      log.outstanding += 1;
+      release(&log.lock);
+80102cdf:	83 ec 0c             	sub    $0xc,%esp
+      log.outstanding += 1;
+80102ce2:	a3 bc 26 11 80       	mov    %eax,0x801126bc
+      release(&log.lock);
+80102ce7:	68 80 26 11 80       	push   $0x80112680
+80102cec:	e8 1f 18 00 00       	call   80104510 <release>
+      break;
+    }
+  }
+}
+80102cf1:	83 c4 10             	add    $0x10,%esp
+80102cf4:	c9                   	leave  
+80102cf5:	c3                   	ret    
+80102cf6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102cfd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102d00 <end_op>:
+
+// called at the end of each FS system call.
+// commits if this was the last outstanding operation.
+void
+end_op(void)
+{
+80102d00:	55                   	push   %ebp
+80102d01:	89 e5                	mov    %esp,%ebp
+80102d03:	57                   	push   %edi
+80102d04:	56                   	push   %esi
+80102d05:	53                   	push   %ebx
+80102d06:	83 ec 18             	sub    $0x18,%esp
+  int do_commit = 0;
+
+  acquire(&log.lock);
+80102d09:	68 80 26 11 80       	push   $0x80112680
+80102d0e:	e8 3d 17 00 00       	call   80104450 <acquire>
+  log.outstanding -= 1;
+80102d13:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+  if(log.committing)
+80102d18:	8b 35 c0 26 11 80    	mov    0x801126c0,%esi
+80102d1e:	83 c4 10             	add    $0x10,%esp
+  log.outstanding -= 1;
+80102d21:	8d 58 ff             	lea    -0x1(%eax),%ebx
+80102d24:	89 1d bc 26 11 80    	mov    %ebx,0x801126bc
+  if(log.committing)
+80102d2a:	85 f6                	test   %esi,%esi
+80102d2c:	0f 85 22 01 00 00    	jne    80102e54 <end_op+0x154>
+    panic("log.committing");
+  if(log.outstanding == 0){
+80102d32:	85 db                	test   %ebx,%ebx
+80102d34:	0f 85 f6 00 00 00    	jne    80102e30 <end_op+0x130>
+    do_commit = 1;
+    log.committing = 1;
+80102d3a:	c7 05 c0 26 11 80 01 	movl   $0x1,0x801126c0
+80102d41:	00 00 00 
+    // begin_op() may be waiting for log space,
+    // and decrementing log.outstanding has decreased
+    // the amount of reserved space.
+    wakeup(&log);
+  }
+  release(&log.lock);
+80102d44:	83 ec 0c             	sub    $0xc,%esp
+80102d47:	68 80 26 11 80       	push   $0x80112680
+80102d4c:	e8 bf 17 00 00       	call   80104510 <release>
+}
+
+static void
+commit()
+{
+  if (log.lh.n > 0) {
+80102d51:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
+80102d57:	83 c4 10             	add    $0x10,%esp
+80102d5a:	85 c9                	test   %ecx,%ecx
+80102d5c:	7f 42                	jg     80102da0 <end_op+0xa0>
+    acquire(&log.lock);
+80102d5e:	83 ec 0c             	sub    $0xc,%esp
+80102d61:	68 80 26 11 80       	push   $0x80112680
+80102d66:	e8 e5 16 00 00       	call   80104450 <acquire>
+    wakeup(&log);
+80102d6b:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
+    log.committing = 0;
+80102d72:	c7 05 c0 26 11 80 00 	movl   $0x0,0x801126c0
+80102d79:	00 00 00 
+    wakeup(&log);
+80102d7c:	e8 9f 12 00 00       	call   80104020 <wakeup>
+    release(&log.lock);
+80102d81:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
+80102d88:	e8 83 17 00 00       	call   80104510 <release>
+80102d8d:	83 c4 10             	add    $0x10,%esp
+}
+80102d90:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102d93:	5b                   	pop    %ebx
+80102d94:	5e                   	pop    %esi
+80102d95:	5f                   	pop    %edi
+80102d96:	5d                   	pop    %ebp
+80102d97:	c3                   	ret    
+80102d98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102d9f:	90                   	nop
+    struct buf *to = bread(log.dev, log.start+tail+1); // log block
+80102da0:	a1 b4 26 11 80       	mov    0x801126b4,%eax
+80102da5:	83 ec 08             	sub    $0x8,%esp
+80102da8:	01 d8                	add    %ebx,%eax
+80102daa:	83 c0 01             	add    $0x1,%eax
+80102dad:	50                   	push   %eax
+80102dae:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102db4:	e8 17 d3 ff ff       	call   801000d0 <bread>
+80102db9:	89 c6                	mov    %eax,%esi
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+80102dbb:	58                   	pop    %eax
+80102dbc:	5a                   	pop    %edx
+80102dbd:	ff 34 9d cc 26 11 80 	pushl  -0x7feed934(,%ebx,4)
+80102dc4:	ff 35 c4 26 11 80    	pushl  0x801126c4
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102dca:	83 c3 01             	add    $0x1,%ebx
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+80102dcd:	e8 fe d2 ff ff       	call   801000d0 <bread>
+    memmove(to->data, from->data, BSIZE);
+80102dd2:	83 c4 0c             	add    $0xc,%esp
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+80102dd5:	89 c7                	mov    %eax,%edi
+    memmove(to->data, from->data, BSIZE);
+80102dd7:	8d 40 5c             	lea    0x5c(%eax),%eax
+80102dda:	68 00 02 00 00       	push   $0x200
+80102ddf:	50                   	push   %eax
+80102de0:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102de3:	50                   	push   %eax
+80102de4:	e8 17 18 00 00       	call   80104600 <memmove>
+    bwrite(to);  // write the log
+80102de9:	89 34 24             	mov    %esi,(%esp)
+80102dec:	e8 bf d3 ff ff       	call   801001b0 <bwrite>
+    brelse(from);
+80102df1:	89 3c 24             	mov    %edi,(%esp)
+80102df4:	e8 f7 d3 ff ff       	call   801001f0 <brelse>
+    brelse(to);
+80102df9:	89 34 24             	mov    %esi,(%esp)
+80102dfc:	e8 ef d3 ff ff       	call   801001f0 <brelse>
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102e01:	83 c4 10             	add    $0x10,%esp
+80102e04:	3b 1d c8 26 11 80    	cmp    0x801126c8,%ebx
+80102e0a:	7c 94                	jl     80102da0 <end_op+0xa0>
+    write_log();     // Write modified blocks from cache to log
+    write_head();    // Write header to disk -- the real commit
+80102e0c:	e8 7f fd ff ff       	call   80102b90 <write_head>
+    install_trans(); // Now install writes to home locations
+80102e11:	e8 da fc ff ff       	call   80102af0 <install_trans>
+    log.lh.n = 0;
+80102e16:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
+80102e1d:	00 00 00 
+    write_head();    // Erase the transaction from the log
+80102e20:	e8 6b fd ff ff       	call   80102b90 <write_head>
+80102e25:	e9 34 ff ff ff       	jmp    80102d5e <end_op+0x5e>
+80102e2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    wakeup(&log);
+80102e30:	83 ec 0c             	sub    $0xc,%esp
+80102e33:	68 80 26 11 80       	push   $0x80112680
+80102e38:	e8 e3 11 00 00       	call   80104020 <wakeup>
+  release(&log.lock);
+80102e3d:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
+80102e44:	e8 c7 16 00 00       	call   80104510 <release>
+80102e49:	83 c4 10             	add    $0x10,%esp
+}
+80102e4c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102e4f:	5b                   	pop    %ebx
+80102e50:	5e                   	pop    %esi
+80102e51:	5f                   	pop    %edi
+80102e52:	5d                   	pop    %ebp
+80102e53:	c3                   	ret    
+    panic("log.committing");
+80102e54:	83 ec 0c             	sub    $0xc,%esp
+80102e57:	68 04 74 10 80       	push   $0x80107404
+80102e5c:	e8 2f d5 ff ff       	call   80100390 <panic>
+80102e61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102e68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102e6f:	90                   	nop
+
+80102e70 <log_write>:
+//   modify bp->data[]
+//   log_write(bp)
+//   brelse(bp)
+void
+log_write(struct buf *b)
+{
+80102e70:	55                   	push   %ebp
+80102e71:	89 e5                	mov    %esp,%ebp
+80102e73:	53                   	push   %ebx
+80102e74:	83 ec 04             	sub    $0x4,%esp
+  int i;
+
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+80102e77:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+{
+80102e7d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+80102e80:	83 fa 1d             	cmp    $0x1d,%edx
+80102e83:	0f 8f 94 00 00 00    	jg     80102f1d <log_write+0xad>
+80102e89:	a1 b8 26 11 80       	mov    0x801126b8,%eax
+80102e8e:	83 e8 01             	sub    $0x1,%eax
+80102e91:	39 c2                	cmp    %eax,%edx
+80102e93:	0f 8d 84 00 00 00    	jge    80102f1d <log_write+0xad>
+    panic("too big a transaction");
+  if (log.outstanding < 1)
+80102e99:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+80102e9e:	85 c0                	test   %eax,%eax
+80102ea0:	0f 8e 84 00 00 00    	jle    80102f2a <log_write+0xba>
+    panic("log_write outside of trans");
+
+  acquire(&log.lock);
+80102ea6:	83 ec 0c             	sub    $0xc,%esp
+80102ea9:	68 80 26 11 80       	push   $0x80112680
+80102eae:	e8 9d 15 00 00       	call   80104450 <acquire>
+  for (i = 0; i < log.lh.n; i++) {
+80102eb3:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+80102eb9:	83 c4 10             	add    $0x10,%esp
+80102ebc:	85 d2                	test   %edx,%edx
+80102ebe:	7e 51                	jle    80102f11 <log_write+0xa1>
+    if (log.lh.block[i] == b->blockno)   // log absorbtion
+80102ec0:	8b 4b 08             	mov    0x8(%ebx),%ecx
+  for (i = 0; i < log.lh.n; i++) {
+80102ec3:	31 c0                	xor    %eax,%eax
+    if (log.lh.block[i] == b->blockno)   // log absorbtion
+80102ec5:	3b 0d cc 26 11 80    	cmp    0x801126cc,%ecx
+80102ecb:	75 0c                	jne    80102ed9 <log_write+0x69>
+80102ecd:	eb 39                	jmp    80102f08 <log_write+0x98>
+80102ecf:	90                   	nop
+80102ed0:	39 0c 85 cc 26 11 80 	cmp    %ecx,-0x7feed934(,%eax,4)
+80102ed7:	74 2f                	je     80102f08 <log_write+0x98>
+  for (i = 0; i < log.lh.n; i++) {
+80102ed9:	83 c0 01             	add    $0x1,%eax
+80102edc:	39 c2                	cmp    %eax,%edx
+80102ede:	75 f0                	jne    80102ed0 <log_write+0x60>
+      break;
+  }
+  log.lh.block[i] = b->blockno;
+80102ee0:	89 0c 95 cc 26 11 80 	mov    %ecx,-0x7feed934(,%edx,4)
+  if (i == log.lh.n)
+    log.lh.n++;
+80102ee7:	83 c2 01             	add    $0x1,%edx
+80102eea:	89 15 c8 26 11 80    	mov    %edx,0x801126c8
+  b->flags |= B_DIRTY; // prevent eviction
+80102ef0:	83 0b 04             	orl    $0x4,(%ebx)
+  release(&log.lock);
+}
+80102ef3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  release(&log.lock);
+80102ef6:	c7 45 08 80 26 11 80 	movl   $0x80112680,0x8(%ebp)
+}
+80102efd:	c9                   	leave  
+  release(&log.lock);
+80102efe:	e9 0d 16 00 00       	jmp    80104510 <release>
+80102f03:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102f07:	90                   	nop
+  log.lh.block[i] = b->blockno;
+80102f08:	89 0c 85 cc 26 11 80 	mov    %ecx,-0x7feed934(,%eax,4)
+  if (i == log.lh.n)
+80102f0f:	eb df                	jmp    80102ef0 <log_write+0x80>
+  log.lh.block[i] = b->blockno;
+80102f11:	8b 43 08             	mov    0x8(%ebx),%eax
+80102f14:	a3 cc 26 11 80       	mov    %eax,0x801126cc
+  if (i == log.lh.n)
+80102f19:	75 d5                	jne    80102ef0 <log_write+0x80>
+80102f1b:	eb ca                	jmp    80102ee7 <log_write+0x77>
+    panic("too big a transaction");
+80102f1d:	83 ec 0c             	sub    $0xc,%esp
+80102f20:	68 13 74 10 80       	push   $0x80107413
+80102f25:	e8 66 d4 ff ff       	call   80100390 <panic>
+    panic("log_write outside of trans");
+80102f2a:	83 ec 0c             	sub    $0xc,%esp
+80102f2d:	68 29 74 10 80       	push   $0x80107429
+80102f32:	e8 59 d4 ff ff       	call   80100390 <panic>
+80102f37:	66 90                	xchg   %ax,%ax
+80102f39:	66 90                	xchg   %ax,%ax
+80102f3b:	66 90                	xchg   %ax,%ax
+80102f3d:	66 90                	xchg   %ax,%ax
+80102f3f:	90                   	nop
+
+80102f40 <mpmain>:
+}
+
+// Common CPU setup code.
+static void
+mpmain(void)
+{
+80102f40:	55                   	push   %ebp
+80102f41:	89 e5                	mov    %esp,%ebp
+80102f43:	53                   	push   %ebx
+80102f44:	83 ec 04             	sub    $0x4,%esp
+  cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
+80102f47:	e8 64 09 00 00       	call   801038b0 <cpuid>
+80102f4c:	89 c3                	mov    %eax,%ebx
+80102f4e:	e8 5d 09 00 00       	call   801038b0 <cpuid>
+80102f53:	83 ec 04             	sub    $0x4,%esp
+80102f56:	53                   	push   %ebx
+80102f57:	50                   	push   %eax
+80102f58:	68 44 74 10 80       	push   $0x80107444
+80102f5d:	e8 4e d7 ff ff       	call   801006b0 <cprintf>
+  idtinit();       // load idt register
+80102f62:	e8 29 28 00 00       	call   80105790 <idtinit>
+  xchg(&(mycpu()->started), 1); // tell startothers() we're up
+80102f67:	e8 c4 08 00 00       	call   80103830 <mycpu>
+80102f6c:	89 c2                	mov    %eax,%edx
+xchg(volatile uint *addr, uint newval)
+{
+  uint result;
+
+  // The + in "+m" denotes a read-modify-write operand.
+  asm volatile("lock; xchgl %0, %1" :
+80102f6e:	b8 01 00 00 00       	mov    $0x1,%eax
+80102f73:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
+  scheduler();     // start running processes
+80102f7a:	e8 11 0c 00 00       	call   80103b90 <scheduler>
+80102f7f:	90                   	nop
+
+80102f80 <mpenter>:
+{
+80102f80:	55                   	push   %ebp
+80102f81:	89 e5                	mov    %esp,%ebp
+80102f83:	83 ec 08             	sub    $0x8,%esp
+  switchkvm();
+80102f86:	e8 05 39 00 00       	call   80106890 <switchkvm>
+  seginit();
+80102f8b:	e8 70 38 00 00       	call   80106800 <seginit>
+  lapicinit();
+80102f90:	e8 8b f7 ff ff       	call   80102720 <lapicinit>
+  mpmain();
+80102f95:	e8 a6 ff ff ff       	call   80102f40 <mpmain>
+80102f9a:	66 90                	xchg   %ax,%ax
+80102f9c:	66 90                	xchg   %ax,%ax
+80102f9e:	66 90                	xchg   %ax,%ax
+
+80102fa0 <main>:
+{
+80102fa0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+80102fa4:	83 e4 f0             	and    $0xfffffff0,%esp
+80102fa7:	ff 71 fc             	pushl  -0x4(%ecx)
+80102faa:	55                   	push   %ebp
+80102fab:	89 e5                	mov    %esp,%ebp
+80102fad:	53                   	push   %ebx
+80102fae:	51                   	push   %ecx
+  kinit1(end, P2V(4*1024*1024)); // phys page allocator
+80102faf:	83 ec 08             	sub    $0x8,%esp
+80102fb2:	68 00 00 40 80       	push   $0x80400000
+80102fb7:	68 a8 54 11 80       	push   $0x801154a8
+80102fbc:	e8 0f f5 ff ff       	call   801024d0 <kinit1>
+  kvmalloc();      // kernel page table
+80102fc1:	e8 8a 3d 00 00       	call   80106d50 <kvmalloc>
+  mpinit();        // detect other processors
+80102fc6:	e8 85 01 00 00       	call   80103150 <mpinit>
+  lapicinit();     // interrupt controller
+80102fcb:	e8 50 f7 ff ff       	call   80102720 <lapicinit>
+  seginit();       // segment descriptors
+80102fd0:	e8 2b 38 00 00       	call   80106800 <seginit>
+  picinit();       // disable pic
+80102fd5:	e8 46 03 00 00       	call   80103320 <picinit>
+  ioapicinit();    // another interrupt controller
+80102fda:	e8 11 f3 ff ff       	call   801022f0 <ioapicinit>
+  consoleinit();   // console hardware
+80102fdf:	e8 4c da ff ff       	call   80100a30 <consoleinit>
+  uartinit();      // serial port
+80102fe4:	e8 d7 2a 00 00       	call   80105ac0 <uartinit>
+  pinit();         // process table
+80102fe9:	e8 22 08 00 00       	call   80103810 <pinit>
+  tvinit();        // trap vectors
+80102fee:	e8 1d 27 00 00       	call   80105710 <tvinit>
+  binit();         // buffer cache
+80102ff3:	e8 48 d0 ff ff       	call   80100040 <binit>
+  fileinit();      // file table
+80102ff8:	e8 e3 dd ff ff       	call   80100de0 <fileinit>
+  ideinit();       // disk 
+80102ffd:	e8 ce f0 ff ff       	call   801020d0 <ideinit>
+
+  // Write entry code to unused memory at 0x7000.
+  // The linker has placed the image of entryother.S in
+  // _binary_entryother_start.
+  code = P2V(0x7000);
+  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
+80103002:	83 c4 0c             	add    $0xc,%esp
+80103005:	68 8a 00 00 00       	push   $0x8a
+8010300a:	68 8c a4 10 80       	push   $0x8010a48c
+8010300f:	68 00 70 00 80       	push   $0x80007000
+80103014:	e8 e7 15 00 00       	call   80104600 <memmove>
+
+  for(c = cpus; c < cpus+ncpu; c++){
+80103019:	83 c4 10             	add    $0x10,%esp
+8010301c:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
+80103023:	00 00 00 
+80103026:	05 80 27 11 80       	add    $0x80112780,%eax
+8010302b:	3d 80 27 11 80       	cmp    $0x80112780,%eax
+80103030:	76 7e                	jbe    801030b0 <main+0x110>
+80103032:	bb 80 27 11 80       	mov    $0x80112780,%ebx
+80103037:	eb 20                	jmp    80103059 <main+0xb9>
+80103039:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103040:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
+80103047:	00 00 00 
+8010304a:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
+80103050:	05 80 27 11 80       	add    $0x80112780,%eax
+80103055:	39 c3                	cmp    %eax,%ebx
+80103057:	73 57                	jae    801030b0 <main+0x110>
+    if(c == mycpu())  // We've started already.
+80103059:	e8 d2 07 00 00       	call   80103830 <mycpu>
+8010305e:	39 d8                	cmp    %ebx,%eax
+80103060:	74 de                	je     80103040 <main+0xa0>
+      continue;
+
+    // Tell entryother.S what stack to use, where to enter, and what
+    // pgdir to use. We cannot use kpgdir yet, because the AP processor
+    // is running in low  memory, so we use entrypgdir for the APs too.
+    stack = kalloc();
+80103062:	e8 39 f5 ff ff       	call   801025a0 <kalloc>
+    *(void**)(code-4) = stack + KSTACKSIZE;
+    *(void(**)(void))(code-8) = mpenter;
+    *(int**)(code-12) = (void *) V2P(entrypgdir);
+
+    lapicstartap(c->apicid, V2P(code));
+80103067:	83 ec 08             	sub    $0x8,%esp
+    *(void(**)(void))(code-8) = mpenter;
+8010306a:	c7 05 f8 6f 00 80 80 	movl   $0x80102f80,0x80006ff8
+80103071:	2f 10 80 
+    *(int**)(code-12) = (void *) V2P(entrypgdir);
+80103074:	c7 05 f4 6f 00 80 00 	movl   $0x109000,0x80006ff4
+8010307b:	90 10 00 
+    *(void**)(code-4) = stack + KSTACKSIZE;
+8010307e:	05 00 10 00 00       	add    $0x1000,%eax
+80103083:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
+    lapicstartap(c->apicid, V2P(code));
+80103088:	0f b6 03             	movzbl (%ebx),%eax
+8010308b:	68 00 70 00 00       	push   $0x7000
+80103090:	50                   	push   %eax
+80103091:	e8 da f7 ff ff       	call   80102870 <lapicstartap>
+80103096:	83 c4 10             	add    $0x10,%esp
+80103099:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+    // wait for cpu to finish mpmain()
+    while(c->started == 0)
+801030a0:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
+801030a6:	85 c0                	test   %eax,%eax
+801030a8:	74 f6                	je     801030a0 <main+0x100>
+801030aa:	eb 94                	jmp    80103040 <main+0xa0>
+801030ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
+801030b0:	83 ec 08             	sub    $0x8,%esp
+801030b3:	68 00 00 00 8e       	push   $0x8e000000
+801030b8:	68 00 00 40 80       	push   $0x80400000
+801030bd:	e8 7e f4 ff ff       	call   80102540 <kinit2>
+  userinit();      // first user process
+801030c2:	e8 39 08 00 00       	call   80103900 <userinit>
+  mpmain();        // finish this processor's setup
+801030c7:	e8 74 fe ff ff       	call   80102f40 <mpmain>
+801030cc:	66 90                	xchg   %ax,%ax
+801030ce:	66 90                	xchg   %ax,%ax
+
+801030d0 <mpsearch1>:
+}
+
+// Look for an MP structure in the len bytes at addr.
+static struct mp*
+mpsearch1(uint a, int len)
+{
+801030d0:	55                   	push   %ebp
+801030d1:	89 e5                	mov    %esp,%ebp
+801030d3:	57                   	push   %edi
+801030d4:	56                   	push   %esi
+  uchar *e, *p, *addr;
+
+  addr = P2V(a);
+801030d5:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
+{
+801030db:	53                   	push   %ebx
+  e = addr+len;
+801030dc:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
+{
+801030df:	83 ec 0c             	sub    $0xc,%esp
+  for(p = addr; p < e; p += sizeof(struct mp))
+801030e2:	39 de                	cmp    %ebx,%esi
+801030e4:	72 10                	jb     801030f6 <mpsearch1+0x26>
+801030e6:	eb 50                	jmp    80103138 <mpsearch1+0x68>
+801030e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801030ef:	90                   	nop
+801030f0:	89 fe                	mov    %edi,%esi
+801030f2:	39 fb                	cmp    %edi,%ebx
+801030f4:	76 42                	jbe    80103138 <mpsearch1+0x68>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+801030f6:	83 ec 04             	sub    $0x4,%esp
+801030f9:	8d 7e 10             	lea    0x10(%esi),%edi
+801030fc:	6a 04                	push   $0x4
+801030fe:	68 58 74 10 80       	push   $0x80107458
+80103103:	56                   	push   %esi
+80103104:	e8 a7 14 00 00       	call   801045b0 <memcmp>
+80103109:	83 c4 10             	add    $0x10,%esp
+8010310c:	85 c0                	test   %eax,%eax
+8010310e:	75 e0                	jne    801030f0 <mpsearch1+0x20>
+80103110:	89 f1                	mov    %esi,%ecx
+80103112:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    sum += addr[i];
+80103118:	0f b6 11             	movzbl (%ecx),%edx
+8010311b:	83 c1 01             	add    $0x1,%ecx
+8010311e:	01 d0                	add    %edx,%eax
+  for(i=0; i<len; i++)
+80103120:	39 f9                	cmp    %edi,%ecx
+80103122:	75 f4                	jne    80103118 <mpsearch1+0x48>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+80103124:	84 c0                	test   %al,%al
+80103126:	75 c8                	jne    801030f0 <mpsearch1+0x20>
+      return (struct mp*)p;
+  return 0;
+}
+80103128:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010312b:	89 f0                	mov    %esi,%eax
+8010312d:	5b                   	pop    %ebx
+8010312e:	5e                   	pop    %esi
+8010312f:	5f                   	pop    %edi
+80103130:	5d                   	pop    %ebp
+80103131:	c3                   	ret    
+80103132:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103138:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+8010313b:	31 f6                	xor    %esi,%esi
+}
+8010313d:	5b                   	pop    %ebx
+8010313e:	89 f0                	mov    %esi,%eax
+80103140:	5e                   	pop    %esi
+80103141:	5f                   	pop    %edi
+80103142:	5d                   	pop    %ebp
+80103143:	c3                   	ret    
+80103144:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010314b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010314f:	90                   	nop
+
+80103150 <mpinit>:
+  return conf;
+}
+
+void
+mpinit(void)
+{
+80103150:	55                   	push   %ebp
+80103151:	89 e5                	mov    %esp,%ebp
+80103153:	57                   	push   %edi
+80103154:	56                   	push   %esi
+80103155:	53                   	push   %ebx
+80103156:	83 ec 1c             	sub    $0x1c,%esp
+  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
+80103159:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
+80103160:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
+80103167:	c1 e0 08             	shl    $0x8,%eax
+8010316a:	09 d0                	or     %edx,%eax
+8010316c:	c1 e0 04             	shl    $0x4,%eax
+8010316f:	75 1b                	jne    8010318c <mpinit+0x3c>
+    p = ((bda[0x14]<<8)|bda[0x13])*1024;
+80103171:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
+80103178:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
+8010317f:	c1 e0 08             	shl    $0x8,%eax
+80103182:	09 d0                	or     %edx,%eax
+80103184:	c1 e0 0a             	shl    $0xa,%eax
+    if((mp = mpsearch1(p-1024, 1024)))
+80103187:	2d 00 04 00 00       	sub    $0x400,%eax
+    if((mp = mpsearch1(p, 1024)))
+8010318c:	ba 00 04 00 00       	mov    $0x400,%edx
+80103191:	e8 3a ff ff ff       	call   801030d0 <mpsearch1>
+80103196:	89 c7                	mov    %eax,%edi
+80103198:	85 c0                	test   %eax,%eax
+8010319a:	0f 84 c0 00 00 00    	je     80103260 <mpinit+0x110>
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+801031a0:	8b 5f 04             	mov    0x4(%edi),%ebx
+801031a3:	85 db                	test   %ebx,%ebx
+801031a5:	0f 84 d5 00 00 00    	je     80103280 <mpinit+0x130>
+  if(memcmp(conf, "PCMP", 4) != 0)
+801031ab:	83 ec 04             	sub    $0x4,%esp
+  conf = (struct mpconf*) P2V((uint) mp->physaddr);
+801031ae:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+  if(memcmp(conf, "PCMP", 4) != 0)
+801031b4:	6a 04                	push   $0x4
+801031b6:	68 75 74 10 80       	push   $0x80107475
+801031bb:	50                   	push   %eax
+  conf = (struct mpconf*) P2V((uint) mp->physaddr);
+801031bc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(memcmp(conf, "PCMP", 4) != 0)
+801031bf:	e8 ec 13 00 00       	call   801045b0 <memcmp>
+801031c4:	83 c4 10             	add    $0x10,%esp
+801031c7:	85 c0                	test   %eax,%eax
+801031c9:	0f 85 b1 00 00 00    	jne    80103280 <mpinit+0x130>
+  if(conf->version != 1 && conf->version != 4)
+801031cf:	0f b6 83 06 00 00 80 	movzbl -0x7ffffffa(%ebx),%eax
+801031d6:	3c 01                	cmp    $0x1,%al
+801031d8:	0f 95 c2             	setne  %dl
+801031db:	3c 04                	cmp    $0x4,%al
+801031dd:	0f 95 c0             	setne  %al
+801031e0:	20 c2                	and    %al,%dl
+801031e2:	0f 85 98 00 00 00    	jne    80103280 <mpinit+0x130>
+  if(sum((uchar*)conf, conf->length) != 0)
+801031e8:	0f b7 8b 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%ecx
+  for(i=0; i<len; i++)
+801031ef:	66 85 c9             	test   %cx,%cx
+801031f2:	74 21                	je     80103215 <mpinit+0xc5>
+801031f4:	89 d8                	mov    %ebx,%eax
+801031f6:	8d 34 19             	lea    (%ecx,%ebx,1),%esi
+  sum = 0;
+801031f9:	31 d2                	xor    %edx,%edx
+801031fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801031ff:	90                   	nop
+    sum += addr[i];
+80103200:	0f b6 88 00 00 00 80 	movzbl -0x80000000(%eax),%ecx
+80103207:	83 c0 01             	add    $0x1,%eax
+8010320a:	01 ca                	add    %ecx,%edx
+  for(i=0; i<len; i++)
+8010320c:	39 c6                	cmp    %eax,%esi
+8010320e:	75 f0                	jne    80103200 <mpinit+0xb0>
+80103210:	84 d2                	test   %dl,%dl
+80103212:	0f 95 c2             	setne  %dl
+  struct mp *mp;
+  struct mpconf *conf;
+  struct mpproc *proc;
+  struct mpioapic *ioapic;
+
+  if((conf = mpconfig(&mp)) == 0)
+80103215:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80103218:	85 c9                	test   %ecx,%ecx
+8010321a:	74 64                	je     80103280 <mpinit+0x130>
+8010321c:	84 d2                	test   %dl,%dl
+8010321e:	75 60                	jne    80103280 <mpinit+0x130>
+    panic("Expect to run on an SMP");
+  ismp = 1;
+  lapic = (uint*)conf->lapicaddr;
+80103220:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
+80103226:	a3 7c 26 11 80       	mov    %eax,0x8011267c
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+8010322b:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
+80103232:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
+  ismp = 1;
+80103238:	bb 01 00 00 00       	mov    $0x1,%ebx
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+8010323d:	01 d1                	add    %edx,%ecx
+8010323f:	89 ce                	mov    %ecx,%esi
+80103241:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103248:	39 c6                	cmp    %eax,%esi
+8010324a:	76 4b                	jbe    80103297 <mpinit+0x147>
+    switch(*p){
+8010324c:	0f b6 10             	movzbl (%eax),%edx
+8010324f:	80 fa 04             	cmp    $0x4,%dl
+80103252:	0f 87 bf 00 00 00    	ja     80103317 <mpinit+0x1c7>
+80103258:	ff 24 95 9c 74 10 80 	jmp    *-0x7fef8b64(,%edx,4)
+8010325f:	90                   	nop
+  return mpsearch1(0xF0000, 0x10000);
+80103260:	ba 00 00 01 00       	mov    $0x10000,%edx
+80103265:	b8 00 00 0f 00       	mov    $0xf0000,%eax
+8010326a:	e8 61 fe ff ff       	call   801030d0 <mpsearch1>
+8010326f:	89 c7                	mov    %eax,%edi
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+80103271:	85 c0                	test   %eax,%eax
+80103273:	0f 85 27 ff ff ff    	jne    801031a0 <mpinit+0x50>
+80103279:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    panic("Expect to run on an SMP");
+80103280:	83 ec 0c             	sub    $0xc,%esp
+80103283:	68 5d 74 10 80       	push   $0x8010745d
+80103288:	e8 03 d1 ff ff       	call   80100390 <panic>
+8010328d:	8d 76 00             	lea    0x0(%esi),%esi
+      p += sizeof(struct mpioapic);
+      continue;
+    case MPBUS:
+    case MPIOINTR:
+    case MPLINTR:
+      p += 8;
+80103290:	83 c0 08             	add    $0x8,%eax
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+80103293:	39 c6                	cmp    %eax,%esi
+80103295:	77 b5                	ja     8010324c <mpinit+0xfc>
+    default:
+      ismp = 0;
+      break;
+    }
+  }
+  if(!ismp)
+80103297:	85 db                	test   %ebx,%ebx
+80103299:	74 6f                	je     8010330a <mpinit+0x1ba>
+    panic("Didn't find a suitable machine");
+
+  if(mp->imcrp){
+8010329b:	80 7f 0c 00          	cmpb   $0x0,0xc(%edi)
+8010329f:	74 15                	je     801032b6 <mpinit+0x166>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801032a1:	b8 70 00 00 00       	mov    $0x70,%eax
+801032a6:	ba 22 00 00 00       	mov    $0x22,%edx
+801032ab:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801032ac:	ba 23 00 00 00       	mov    $0x23,%edx
+801032b1:	ec                   	in     (%dx),%al
+    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
+    // But it would on real hardware.
+    outb(0x22, 0x70);   // Select IMCR
+    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
+801032b2:	83 c8 01             	or     $0x1,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801032b5:	ee                   	out    %al,(%dx)
+  }
+}
+801032b6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801032b9:	5b                   	pop    %ebx
+801032ba:	5e                   	pop    %esi
+801032bb:	5f                   	pop    %edi
+801032bc:	5d                   	pop    %ebp
+801032bd:	c3                   	ret    
+801032be:	66 90                	xchg   %ax,%ax
+      if(ncpu < NCPU) {
+801032c0:	8b 15 00 2d 11 80    	mov    0x80112d00,%edx
+801032c6:	83 fa 07             	cmp    $0x7,%edx
+801032c9:	7f 1f                	jg     801032ea <mpinit+0x19a>
+        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
+801032cb:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
+801032d1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+801032d4:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+801032d8:	88 91 80 27 11 80    	mov    %dl,-0x7feed880(%ecx)
+        ncpu++;
+801032de:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+801032e1:	83 c2 01             	add    $0x1,%edx
+801032e4:	89 15 00 2d 11 80    	mov    %edx,0x80112d00
+      p += sizeof(struct mpproc);
+801032ea:	83 c0 14             	add    $0x14,%eax
+      continue;
+801032ed:	e9 56 ff ff ff       	jmp    80103248 <mpinit+0xf8>
+801032f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      ioapicid = ioapic->apicno;
+801032f8:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+      p += sizeof(struct mpioapic);
+801032fc:	83 c0 08             	add    $0x8,%eax
+      ioapicid = ioapic->apicno;
+801032ff:	88 15 60 27 11 80    	mov    %dl,0x80112760
+      continue;
+80103305:	e9 3e ff ff ff       	jmp    80103248 <mpinit+0xf8>
+    panic("Didn't find a suitable machine");
+8010330a:	83 ec 0c             	sub    $0xc,%esp
+8010330d:	68 7c 74 10 80       	push   $0x8010747c
+80103312:	e8 79 d0 ff ff       	call   80100390 <panic>
+      ismp = 0;
+80103317:	31 db                	xor    %ebx,%ebx
+80103319:	e9 31 ff ff ff       	jmp    8010324f <mpinit+0xff>
+8010331e:	66 90                	xchg   %ax,%ax
+
+80103320 <picinit>:
+80103320:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103325:	ba 21 00 00 00       	mov    $0x21,%edx
+8010332a:	ee                   	out    %al,(%dx)
+8010332b:	ba a1 00 00 00       	mov    $0xa1,%edx
+80103330:	ee                   	out    %al,(%dx)
+picinit(void)
+{
+  // mask all interrupts
+  outb(IO_PIC1+1, 0xFF);
+  outb(IO_PIC2+1, 0xFF);
+}
+80103331:	c3                   	ret    
+80103332:	66 90                	xchg   %ax,%ax
+80103334:	66 90                	xchg   %ax,%ax
+80103336:	66 90                	xchg   %ax,%ax
+80103338:	66 90                	xchg   %ax,%ax
+8010333a:	66 90                	xchg   %ax,%ax
+8010333c:	66 90                	xchg   %ax,%ax
+8010333e:	66 90                	xchg   %ax,%ax
+
+80103340 <pipealloc>:
+  int writeopen;  // write fd is still open
+};
+
+int
+pipealloc(struct file **f0, struct file **f1)
+{
+80103340:	55                   	push   %ebp
+80103341:	89 e5                	mov    %esp,%ebp
+80103343:	57                   	push   %edi
+80103344:	56                   	push   %esi
+80103345:	53                   	push   %ebx
+80103346:	83 ec 0c             	sub    $0xc,%esp
+80103349:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010334c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  struct pipe *p;
+
+  p = 0;
+  *f0 = *f1 = 0;
+8010334f:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80103355:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
+8010335b:	e8 a0 da ff ff       	call   80100e00 <filealloc>
+80103360:	89 03                	mov    %eax,(%ebx)
+80103362:	85 c0                	test   %eax,%eax
+80103364:	0f 84 a8 00 00 00    	je     80103412 <pipealloc+0xd2>
+8010336a:	e8 91 da ff ff       	call   80100e00 <filealloc>
+8010336f:	89 06                	mov    %eax,(%esi)
+80103371:	85 c0                	test   %eax,%eax
+80103373:	0f 84 87 00 00 00    	je     80103400 <pipealloc+0xc0>
+    goto bad;
+  if((p = (struct pipe*)kalloc()) == 0)
+80103379:	e8 22 f2 ff ff       	call   801025a0 <kalloc>
+8010337e:	89 c7                	mov    %eax,%edi
+80103380:	85 c0                	test   %eax,%eax
+80103382:	0f 84 b0 00 00 00    	je     80103438 <pipealloc+0xf8>
+    goto bad;
+  p->readopen = 1;
+80103388:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
+8010338f:	00 00 00 
+  p->writeopen = 1;
+  p->nwrite = 0;
+  p->nread = 0;
+  initlock(&p->lock, "pipe");
+80103392:	83 ec 08             	sub    $0x8,%esp
+  p->writeopen = 1;
+80103395:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
+8010339c:	00 00 00 
+  p->nwrite = 0;
+8010339f:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
+801033a6:	00 00 00 
+  p->nread = 0;
+801033a9:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
+801033b0:	00 00 00 
+  initlock(&p->lock, "pipe");
+801033b3:	68 b0 74 10 80       	push   $0x801074b0
+801033b8:	50                   	push   %eax
+801033b9:	e8 32 0f 00 00       	call   801042f0 <initlock>
+  (*f0)->type = FD_PIPE;
+801033be:	8b 03                	mov    (%ebx),%eax
+  (*f0)->pipe = p;
+  (*f1)->type = FD_PIPE;
+  (*f1)->readable = 0;
+  (*f1)->writable = 1;
+  (*f1)->pipe = p;
+  return 0;
+801033c0:	83 c4 10             	add    $0x10,%esp
+  (*f0)->type = FD_PIPE;
+801033c3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  (*f0)->readable = 1;
+801033c9:	8b 03                	mov    (%ebx),%eax
+801033cb:	c6 40 08 01          	movb   $0x1,0x8(%eax)
+  (*f0)->writable = 0;
+801033cf:	8b 03                	mov    (%ebx),%eax
+801033d1:	c6 40 09 00          	movb   $0x0,0x9(%eax)
+  (*f0)->pipe = p;
+801033d5:	8b 03                	mov    (%ebx),%eax
+801033d7:	89 78 0c             	mov    %edi,0xc(%eax)
+  (*f1)->type = FD_PIPE;
+801033da:	8b 06                	mov    (%esi),%eax
+801033dc:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  (*f1)->readable = 0;
+801033e2:	8b 06                	mov    (%esi),%eax
+801033e4:	c6 40 08 00          	movb   $0x0,0x8(%eax)
+  (*f1)->writable = 1;
+801033e8:	8b 06                	mov    (%esi),%eax
+801033ea:	c6 40 09 01          	movb   $0x1,0x9(%eax)
+  (*f1)->pipe = p;
+801033ee:	8b 06                	mov    (%esi),%eax
+801033f0:	89 78 0c             	mov    %edi,0xc(%eax)
+  if(*f0)
+    fileclose(*f0);
+  if(*f1)
+    fileclose(*f1);
+  return -1;
+}
+801033f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+801033f6:	31 c0                	xor    %eax,%eax
+}
+801033f8:	5b                   	pop    %ebx
+801033f9:	5e                   	pop    %esi
+801033fa:	5f                   	pop    %edi
+801033fb:	5d                   	pop    %ebp
+801033fc:	c3                   	ret    
+801033fd:	8d 76 00             	lea    0x0(%esi),%esi
+  if(*f0)
+80103400:	8b 03                	mov    (%ebx),%eax
+80103402:	85 c0                	test   %eax,%eax
+80103404:	74 1e                	je     80103424 <pipealloc+0xe4>
+    fileclose(*f0);
+80103406:	83 ec 0c             	sub    $0xc,%esp
+80103409:	50                   	push   %eax
+8010340a:	e8 b1 da ff ff       	call   80100ec0 <fileclose>
+8010340f:	83 c4 10             	add    $0x10,%esp
+  if(*f1)
+80103412:	8b 06                	mov    (%esi),%eax
+80103414:	85 c0                	test   %eax,%eax
+80103416:	74 0c                	je     80103424 <pipealloc+0xe4>
+    fileclose(*f1);
+80103418:	83 ec 0c             	sub    $0xc,%esp
+8010341b:	50                   	push   %eax
+8010341c:	e8 9f da ff ff       	call   80100ec0 <fileclose>
+80103421:	83 c4 10             	add    $0x10,%esp
+}
+80103424:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return -1;
+80103427:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010342c:	5b                   	pop    %ebx
+8010342d:	5e                   	pop    %esi
+8010342e:	5f                   	pop    %edi
+8010342f:	5d                   	pop    %ebp
+80103430:	c3                   	ret    
+80103431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  if(*f0)
+80103438:	8b 03                	mov    (%ebx),%eax
+8010343a:	85 c0                	test   %eax,%eax
+8010343c:	75 c8                	jne    80103406 <pipealloc+0xc6>
+8010343e:	eb d2                	jmp    80103412 <pipealloc+0xd2>
+
+80103440 <pipeclose>:
+
+void
+pipeclose(struct pipe *p, int writable)
+{
+80103440:	55                   	push   %ebp
+80103441:	89 e5                	mov    %esp,%ebp
+80103443:	56                   	push   %esi
+80103444:	53                   	push   %ebx
+80103445:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103448:	8b 75 0c             	mov    0xc(%ebp),%esi
+  acquire(&p->lock);
+8010344b:	83 ec 0c             	sub    $0xc,%esp
+8010344e:	53                   	push   %ebx
+8010344f:	e8 fc 0f 00 00       	call   80104450 <acquire>
+  if(writable){
+80103454:	83 c4 10             	add    $0x10,%esp
+80103457:	85 f6                	test   %esi,%esi
+80103459:	74 65                	je     801034c0 <pipeclose+0x80>
+    p->writeopen = 0;
+    wakeup(&p->nread);
+8010345b:	83 ec 0c             	sub    $0xc,%esp
+8010345e:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+    p->writeopen = 0;
+80103464:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
+8010346b:	00 00 00 
+    wakeup(&p->nread);
+8010346e:	50                   	push   %eax
+8010346f:	e8 ac 0b 00 00       	call   80104020 <wakeup>
+80103474:	83 c4 10             	add    $0x10,%esp
+  } else {
+    p->readopen = 0;
+    wakeup(&p->nwrite);
+  }
+  if(p->readopen == 0 && p->writeopen == 0){
+80103477:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
+8010347d:	85 d2                	test   %edx,%edx
+8010347f:	75 0a                	jne    8010348b <pipeclose+0x4b>
+80103481:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
+80103487:	85 c0                	test   %eax,%eax
+80103489:	74 15                	je     801034a0 <pipeclose+0x60>
+    release(&p->lock);
+    kfree((char*)p);
+  } else
+    release(&p->lock);
+8010348b:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+8010348e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103491:	5b                   	pop    %ebx
+80103492:	5e                   	pop    %esi
+80103493:	5d                   	pop    %ebp
+    release(&p->lock);
+80103494:	e9 77 10 00 00       	jmp    80104510 <release>
+80103499:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    release(&p->lock);
+801034a0:	83 ec 0c             	sub    $0xc,%esp
+801034a3:	53                   	push   %ebx
+801034a4:	e8 67 10 00 00       	call   80104510 <release>
+    kfree((char*)p);
+801034a9:	89 5d 08             	mov    %ebx,0x8(%ebp)
+801034ac:	83 c4 10             	add    $0x10,%esp
+}
+801034af:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801034b2:	5b                   	pop    %ebx
+801034b3:	5e                   	pop    %esi
+801034b4:	5d                   	pop    %ebp
+    kfree((char*)p);
+801034b5:	e9 26 ef ff ff       	jmp    801023e0 <kfree>
+801034ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    wakeup(&p->nwrite);
+801034c0:	83 ec 0c             	sub    $0xc,%esp
+801034c3:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
+    p->readopen = 0;
+801034c9:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
+801034d0:	00 00 00 
+    wakeup(&p->nwrite);
+801034d3:	50                   	push   %eax
+801034d4:	e8 47 0b 00 00       	call   80104020 <wakeup>
+801034d9:	83 c4 10             	add    $0x10,%esp
+801034dc:	eb 99                	jmp    80103477 <pipeclose+0x37>
+801034de:	66 90                	xchg   %ax,%ax
+
+801034e0 <pipewrite>:
+
+//PAGEBREAK: 40
+int
+pipewrite(struct pipe *p, char *addr, int n)
+{
+801034e0:	55                   	push   %ebp
+801034e1:	89 e5                	mov    %esp,%ebp
+801034e3:	57                   	push   %edi
+801034e4:	56                   	push   %esi
+801034e5:	53                   	push   %ebx
+801034e6:	83 ec 28             	sub    $0x28,%esp
+801034e9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int i;
+
+  acquire(&p->lock);
+801034ec:	53                   	push   %ebx
+801034ed:	e8 5e 0f 00 00       	call   80104450 <acquire>
+  for(i = 0; i < n; i++){
+801034f2:	8b 45 10             	mov    0x10(%ebp),%eax
+801034f5:	83 c4 10             	add    $0x10,%esp
+801034f8:	85 c0                	test   %eax,%eax
+801034fa:	0f 8e c8 00 00 00    	jle    801035c8 <pipewrite+0xe8>
+80103500:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80103503:	8b 83 38 02 00 00    	mov    0x238(%ebx),%eax
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+      if(p->readopen == 0 || myproc()->killed){
+        release(&p->lock);
+        return -1;
+      }
+      wakeup(&p->nread);
+80103509:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
+8010350f:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80103512:	03 4d 10             	add    0x10(%ebp),%ecx
+80103515:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80103518:	8b 8b 34 02 00 00    	mov    0x234(%ebx),%ecx
+8010351e:	8d 91 00 02 00 00    	lea    0x200(%ecx),%edx
+80103524:	39 d0                	cmp    %edx,%eax
+80103526:	75 71                	jne    80103599 <pipewrite+0xb9>
+      if(p->readopen == 0 || myproc()->killed){
+80103528:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
+8010352e:	85 c0                	test   %eax,%eax
+80103530:	74 4e                	je     80103580 <pipewrite+0xa0>
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+80103532:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
+80103538:	eb 3a                	jmp    80103574 <pipewrite+0x94>
+8010353a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      wakeup(&p->nread);
+80103540:	83 ec 0c             	sub    $0xc,%esp
+80103543:	57                   	push   %edi
+80103544:	e8 d7 0a 00 00       	call   80104020 <wakeup>
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+80103549:	5a                   	pop    %edx
+8010354a:	59                   	pop    %ecx
+8010354b:	53                   	push   %ebx
+8010354c:	56                   	push   %esi
+8010354d:	e8 1e 09 00 00       	call   80103e70 <sleep>
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80103552:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+80103558:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
+8010355e:	83 c4 10             	add    $0x10,%esp
+80103561:	05 00 02 00 00       	add    $0x200,%eax
+80103566:	39 c2                	cmp    %eax,%edx
+80103568:	75 36                	jne    801035a0 <pipewrite+0xc0>
+      if(p->readopen == 0 || myproc()->killed){
+8010356a:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
+80103570:	85 c0                	test   %eax,%eax
+80103572:	74 0c                	je     80103580 <pipewrite+0xa0>
+80103574:	e8 57 03 00 00       	call   801038d0 <myproc>
+80103579:	8b 40 24             	mov    0x24(%eax),%eax
+8010357c:	85 c0                	test   %eax,%eax
+8010357e:	74 c0                	je     80103540 <pipewrite+0x60>
+        release(&p->lock);
+80103580:	83 ec 0c             	sub    $0xc,%esp
+80103583:	53                   	push   %ebx
+80103584:	e8 87 0f 00 00       	call   80104510 <release>
+        return -1;
+80103589:	83 c4 10             	add    $0x10,%esp
+8010358c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+  }
+  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
+  release(&p->lock);
+  return n;
+}
+80103591:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103594:	5b                   	pop    %ebx
+80103595:	5e                   	pop    %esi
+80103596:	5f                   	pop    %edi
+80103597:	5d                   	pop    %ebp
+80103598:	c3                   	ret    
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80103599:	89 c2                	mov    %eax,%edx
+8010359b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010359f:	90                   	nop
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+801035a0:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+801035a3:	8d 42 01             	lea    0x1(%edx),%eax
+801035a6:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
+801035ac:	89 83 38 02 00 00    	mov    %eax,0x238(%ebx)
+801035b2:	0f b6 0e             	movzbl (%esi),%ecx
+801035b5:	83 c6 01             	add    $0x1,%esi
+801035b8:	89 75 e4             	mov    %esi,-0x1c(%ebp)
+801035bb:	88 4c 13 34          	mov    %cl,0x34(%ebx,%edx,1)
+  for(i = 0; i < n; i++){
+801035bf:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+801035c2:	0f 85 50 ff ff ff    	jne    80103518 <pipewrite+0x38>
+  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
+801035c8:	83 ec 0c             	sub    $0xc,%esp
+801035cb:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+801035d1:	50                   	push   %eax
+801035d2:	e8 49 0a 00 00       	call   80104020 <wakeup>
+  release(&p->lock);
+801035d7:	89 1c 24             	mov    %ebx,(%esp)
+801035da:	e8 31 0f 00 00       	call   80104510 <release>
+  return n;
+801035df:	83 c4 10             	add    $0x10,%esp
+801035e2:	8b 45 10             	mov    0x10(%ebp),%eax
+801035e5:	eb aa                	jmp    80103591 <pipewrite+0xb1>
+801035e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801035ee:	66 90                	xchg   %ax,%ax
+
+801035f0 <piperead>:
+
+int
+piperead(struct pipe *p, char *addr, int n)
+{
+801035f0:	55                   	push   %ebp
+801035f1:	89 e5                	mov    %esp,%ebp
+801035f3:	57                   	push   %edi
+801035f4:	56                   	push   %esi
+801035f5:	53                   	push   %ebx
+801035f6:	83 ec 18             	sub    $0x18,%esp
+801035f9:	8b 75 08             	mov    0x8(%ebp),%esi
+801035fc:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  int i;
+
+  acquire(&p->lock);
+801035ff:	56                   	push   %esi
+80103600:	e8 4b 0e 00 00       	call   80104450 <acquire>
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+80103605:	83 c4 10             	add    $0x10,%esp
+80103608:	8b 8e 34 02 00 00    	mov    0x234(%esi),%ecx
+8010360e:	3b 8e 38 02 00 00    	cmp    0x238(%esi),%ecx
+80103614:	75 6a                	jne    80103680 <piperead+0x90>
+80103616:	8b 9e 40 02 00 00    	mov    0x240(%esi),%ebx
+8010361c:	85 db                	test   %ebx,%ebx
+8010361e:	0f 84 c4 00 00 00    	je     801036e8 <piperead+0xf8>
+    if(myproc()->killed){
+      release(&p->lock);
+      return -1;
+    }
+    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
+80103624:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
+8010362a:	eb 2d                	jmp    80103659 <piperead+0x69>
+8010362c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103630:	83 ec 08             	sub    $0x8,%esp
+80103633:	56                   	push   %esi
+80103634:	53                   	push   %ebx
+80103635:	e8 36 08 00 00       	call   80103e70 <sleep>
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+8010363a:	83 c4 10             	add    $0x10,%esp
+8010363d:	8b 8e 34 02 00 00    	mov    0x234(%esi),%ecx
+80103643:	3b 8e 38 02 00 00    	cmp    0x238(%esi),%ecx
+80103649:	75 35                	jne    80103680 <piperead+0x90>
+8010364b:	8b 96 40 02 00 00    	mov    0x240(%esi),%edx
+80103651:	85 d2                	test   %edx,%edx
+80103653:	0f 84 8f 00 00 00    	je     801036e8 <piperead+0xf8>
+    if(myproc()->killed){
+80103659:	e8 72 02 00 00       	call   801038d0 <myproc>
+8010365e:	8b 48 24             	mov    0x24(%eax),%ecx
+80103661:	85 c9                	test   %ecx,%ecx
+80103663:	74 cb                	je     80103630 <piperead+0x40>
+      release(&p->lock);
+80103665:	83 ec 0c             	sub    $0xc,%esp
+      return -1;
+80103668:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+      release(&p->lock);
+8010366d:	56                   	push   %esi
+8010366e:	e8 9d 0e 00 00       	call   80104510 <release>
+      return -1;
+80103673:	83 c4 10             	add    $0x10,%esp
+    addr[i] = p->data[p->nread++ % PIPESIZE];
+  }
+  wakeup(&p->nwrite);  //DOC: piperead-wakeup
+  release(&p->lock);
+  return i;
+}
+80103676:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103679:	89 d8                	mov    %ebx,%eax
+8010367b:	5b                   	pop    %ebx
+8010367c:	5e                   	pop    %esi
+8010367d:	5f                   	pop    %edi
+8010367e:	5d                   	pop    %ebp
+8010367f:	c3                   	ret    
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+80103680:	8b 45 10             	mov    0x10(%ebp),%eax
+80103683:	85 c0                	test   %eax,%eax
+80103685:	7e 61                	jle    801036e8 <piperead+0xf8>
+    if(p->nread == p->nwrite)
+80103687:	31 db                	xor    %ebx,%ebx
+80103689:	eb 13                	jmp    8010369e <piperead+0xae>
+8010368b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010368f:	90                   	nop
+80103690:	8b 8e 34 02 00 00    	mov    0x234(%esi),%ecx
+80103696:	3b 8e 38 02 00 00    	cmp    0x238(%esi),%ecx
+8010369c:	74 1f                	je     801036bd <piperead+0xcd>
+    addr[i] = p->data[p->nread++ % PIPESIZE];
+8010369e:	8d 41 01             	lea    0x1(%ecx),%eax
+801036a1:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
+801036a7:	89 86 34 02 00 00    	mov    %eax,0x234(%esi)
+801036ad:	0f b6 44 0e 34       	movzbl 0x34(%esi,%ecx,1),%eax
+801036b2:	88 04 1f             	mov    %al,(%edi,%ebx,1)
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+801036b5:	83 c3 01             	add    $0x1,%ebx
+801036b8:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+801036bb:	75 d3                	jne    80103690 <piperead+0xa0>
+  wakeup(&p->nwrite);  //DOC: piperead-wakeup
+801036bd:	83 ec 0c             	sub    $0xc,%esp
+801036c0:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
+801036c6:	50                   	push   %eax
+801036c7:	e8 54 09 00 00       	call   80104020 <wakeup>
+  release(&p->lock);
+801036cc:	89 34 24             	mov    %esi,(%esp)
+801036cf:	e8 3c 0e 00 00       	call   80104510 <release>
+  return i;
+801036d4:	83 c4 10             	add    $0x10,%esp
+}
+801036d7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801036da:	89 d8                	mov    %ebx,%eax
+801036dc:	5b                   	pop    %ebx
+801036dd:	5e                   	pop    %esi
+801036de:	5f                   	pop    %edi
+801036df:	5d                   	pop    %ebp
+801036e0:	c3                   	ret    
+801036e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(p->nread == p->nwrite)
+801036e8:	31 db                	xor    %ebx,%ebx
+801036ea:	eb d1                	jmp    801036bd <piperead+0xcd>
+801036ec:	66 90                	xchg   %ax,%ax
+801036ee:	66 90                	xchg   %ax,%ax
+
+801036f0 <allocproc>:
+// If found, change state to EMBRYO and initialize
+// state required to run in the kernel.
+// Otherwise return 0.
+static struct proc*
+allocproc(void)
+{
+801036f0:	55                   	push   %ebp
+801036f1:	89 e5                	mov    %esp,%ebp
+801036f3:	53                   	push   %ebx
+  struct proc *p;
+  char *sp;
+
+  acquire(&ptable.lock);
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801036f4:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+{
+801036f9:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);
+801036fc:	68 20 2d 11 80       	push   $0x80112d20
+80103701:	e8 4a 0d 00 00       	call   80104450 <acquire>
+80103706:	83 c4 10             	add    $0x10,%esp
+80103709:	eb 10                	jmp    8010371b <allocproc+0x2b>
+8010370b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010370f:	90                   	nop
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103710:	83 c3 7c             	add    $0x7c,%ebx
+80103713:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+80103719:	74 75                	je     80103790 <allocproc+0xa0>
+    if(p->state == UNUSED)
+8010371b:	8b 43 0c             	mov    0xc(%ebx),%eax
+8010371e:	85 c0                	test   %eax,%eax
+80103720:	75 ee                	jne    80103710 <allocproc+0x20>
+  release(&ptable.lock);
+  return 0;
+
+found:
+  p->state = EMBRYO;
+  p->pid = nextpid++;
+80103722:	a1 04 a0 10 80       	mov    0x8010a004,%eax
+
+  release(&ptable.lock);
+80103727:	83 ec 0c             	sub    $0xc,%esp
+  p->state = EMBRYO;
+8010372a:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+  p->pid = nextpid++;
+80103731:	89 43 10             	mov    %eax,0x10(%ebx)
+80103734:	8d 50 01             	lea    0x1(%eax),%edx
+  release(&ptable.lock);
+80103737:	68 20 2d 11 80       	push   $0x80112d20
+  p->pid = nextpid++;
+8010373c:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
+  release(&ptable.lock);
+80103742:	e8 c9 0d 00 00       	call   80104510 <release>
+
+  // Allocate kernel stack.
+  if((p->kstack = kalloc()) == 0){
+80103747:	e8 54 ee ff ff       	call   801025a0 <kalloc>
+8010374c:	83 c4 10             	add    $0x10,%esp
+8010374f:	89 43 08             	mov    %eax,0x8(%ebx)
+80103752:	85 c0                	test   %eax,%eax
+80103754:	74 53                	je     801037a9 <allocproc+0xb9>
+    return 0;
+  }
+  sp = p->kstack + KSTACKSIZE;
+
+  // Leave room for trap frame.
+  sp -= sizeof *p->tf;
+80103756:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+  sp -= 4;
+  *(uint*)sp = (uint)trapret;
+
+  sp -= sizeof *p->context;
+  p->context = (struct context*)sp;
+  memset(p->context, 0, sizeof *p->context);
+8010375c:	83 ec 04             	sub    $0x4,%esp
+  sp -= sizeof *p->context;
+8010375f:	05 9c 0f 00 00       	add    $0xf9c,%eax
+  sp -= sizeof *p->tf;
+80103764:	89 53 18             	mov    %edx,0x18(%ebx)
+  *(uint*)sp = (uint)trapret;
+80103767:	c7 40 14 02 57 10 80 	movl   $0x80105702,0x14(%eax)
+  p->context = (struct context*)sp;
+8010376e:	89 43 1c             	mov    %eax,0x1c(%ebx)
+  memset(p->context, 0, sizeof *p->context);
+80103771:	6a 14                	push   $0x14
+80103773:	6a 00                	push   $0x0
+80103775:	50                   	push   %eax
+80103776:	e8 e5 0d 00 00       	call   80104560 <memset>
+  p->context->eip = (uint)forkret;
+8010377b:	8b 43 1c             	mov    0x1c(%ebx),%eax
+
+  return p;
+8010377e:	83 c4 10             	add    $0x10,%esp
+  p->context->eip = (uint)forkret;
+80103781:	c7 40 10 c0 37 10 80 	movl   $0x801037c0,0x10(%eax)
+}
+80103788:	89 d8                	mov    %ebx,%eax
+8010378a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010378d:	c9                   	leave  
+8010378e:	c3                   	ret    
+8010378f:	90                   	nop
+  release(&ptable.lock);
+80103790:	83 ec 0c             	sub    $0xc,%esp
+  return 0;
+80103793:	31 db                	xor    %ebx,%ebx
+  release(&ptable.lock);
+80103795:	68 20 2d 11 80       	push   $0x80112d20
+8010379a:	e8 71 0d 00 00       	call   80104510 <release>
+}
+8010379f:	89 d8                	mov    %ebx,%eax
+  return 0;
+801037a1:	83 c4 10             	add    $0x10,%esp
+}
+801037a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801037a7:	c9                   	leave  
+801037a8:	c3                   	ret    
+    p->state = UNUSED;
+801037a9:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+    return 0;
+801037b0:	31 db                	xor    %ebx,%ebx
+}
+801037b2:	89 d8                	mov    %ebx,%eax
+801037b4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801037b7:	c9                   	leave  
+801037b8:	c3                   	ret    
+801037b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801037c0 <forkret>:
+
+// A fork child's very first scheduling by scheduler()
+// will swtch here.  "Return" to user space.
+void
+forkret(void)
+{
+801037c0:	55                   	push   %ebp
+801037c1:	89 e5                	mov    %esp,%ebp
+801037c3:	83 ec 14             	sub    $0x14,%esp
+  static int first = 1;
+  // Still holding ptable.lock from scheduler.
+  release(&ptable.lock);
+801037c6:	68 20 2d 11 80       	push   $0x80112d20
+801037cb:	e8 40 0d 00 00       	call   80104510 <release>
+
+  if (first) {
+801037d0:	a1 00 a0 10 80       	mov    0x8010a000,%eax
+801037d5:	83 c4 10             	add    $0x10,%esp
+801037d8:	85 c0                	test   %eax,%eax
+801037da:	75 04                	jne    801037e0 <forkret+0x20>
+    iinit(ROOTDEV);
+    initlog(ROOTDEV);
+  }
+
+  // Return to "caller", actually trapret (see allocproc).
+}
+801037dc:	c9                   	leave  
+801037dd:	c3                   	ret    
+801037de:	66 90                	xchg   %ax,%ax
+    first = 0;
+801037e0:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
+801037e7:	00 00 00 
+    iinit(ROOTDEV);
+801037ea:	83 ec 0c             	sub    $0xc,%esp
+801037ed:	6a 01                	push   $0x1
+801037ef:	e8 1c dd ff ff       	call   80101510 <iinit>
+    initlog(ROOTDEV);
+801037f4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+801037fb:	e8 f0 f3 ff ff       	call   80102bf0 <initlog>
+80103800:	83 c4 10             	add    $0x10,%esp
+}
+80103803:	c9                   	leave  
+80103804:	c3                   	ret    
+80103805:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010380c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103810 <pinit>:
+{
+80103810:	55                   	push   %ebp
+80103811:	89 e5                	mov    %esp,%ebp
+80103813:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ptable.lock, "ptable");
+80103816:	68 b5 74 10 80       	push   $0x801074b5
+8010381b:	68 20 2d 11 80       	push   $0x80112d20
+80103820:	e8 cb 0a 00 00       	call   801042f0 <initlock>
+}
+80103825:	83 c4 10             	add    $0x10,%esp
+80103828:	c9                   	leave  
+80103829:	c3                   	ret    
+8010382a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103830 <mycpu>:
+{
+80103830:	55                   	push   %ebp
+80103831:	89 e5                	mov    %esp,%ebp
+80103833:	56                   	push   %esi
+80103834:	53                   	push   %ebx
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80103835:	9c                   	pushf  
+80103836:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+80103837:	f6 c4 02             	test   $0x2,%ah
+8010383a:	75 5d                	jne    80103899 <mycpu+0x69>
+  apicid = lapicid();
+8010383c:	e8 df ef ff ff       	call   80102820 <lapicid>
+  for (i = 0; i < ncpu; ++i) {
+80103841:	8b 35 00 2d 11 80    	mov    0x80112d00,%esi
+80103847:	85 f6                	test   %esi,%esi
+80103849:	7e 41                	jle    8010388c <mycpu+0x5c>
+    if (cpus[i].apicid == apicid)
+8010384b:	0f b6 15 80 27 11 80 	movzbl 0x80112780,%edx
+80103852:	39 d0                	cmp    %edx,%eax
+80103854:	74 2f                	je     80103885 <mycpu+0x55>
+  for (i = 0; i < ncpu; ++i) {
+80103856:	31 d2                	xor    %edx,%edx
+80103858:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010385f:	90                   	nop
+80103860:	83 c2 01             	add    $0x1,%edx
+80103863:	39 f2                	cmp    %esi,%edx
+80103865:	74 25                	je     8010388c <mycpu+0x5c>
+    if (cpus[i].apicid == apicid)
+80103867:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
+8010386d:	0f b6 99 80 27 11 80 	movzbl -0x7feed880(%ecx),%ebx
+80103874:	39 c3                	cmp    %eax,%ebx
+80103876:	75 e8                	jne    80103860 <mycpu+0x30>
+80103878:	8d 81 80 27 11 80    	lea    -0x7feed880(%ecx),%eax
+}
+8010387e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103881:	5b                   	pop    %ebx
+80103882:	5e                   	pop    %esi
+80103883:	5d                   	pop    %ebp
+80103884:	c3                   	ret    
+    if (cpus[i].apicid == apicid)
+80103885:	b8 80 27 11 80       	mov    $0x80112780,%eax
+      return &cpus[i];
+8010388a:	eb f2                	jmp    8010387e <mycpu+0x4e>
+  panic("unknown apicid\n");
+8010388c:	83 ec 0c             	sub    $0xc,%esp
+8010388f:	68 bc 74 10 80       	push   $0x801074bc
+80103894:	e8 f7 ca ff ff       	call   80100390 <panic>
+    panic("mycpu called with interrupts enabled\n");
+80103899:	83 ec 0c             	sub    $0xc,%esp
+8010389c:	68 98 75 10 80       	push   $0x80107598
+801038a1:	e8 ea ca ff ff       	call   80100390 <panic>
+801038a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801038ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+801038b0 <cpuid>:
+cpuid() {
+801038b0:	55                   	push   %ebp
+801038b1:	89 e5                	mov    %esp,%ebp
+801038b3:	83 ec 08             	sub    $0x8,%esp
+  return mycpu()-cpus;
+801038b6:	e8 75 ff ff ff       	call   80103830 <mycpu>
+}
+801038bb:	c9                   	leave  
+  return mycpu()-cpus;
+801038bc:	2d 80 27 11 80       	sub    $0x80112780,%eax
+801038c1:	c1 f8 04             	sar    $0x4,%eax
+801038c4:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+}
+801038ca:	c3                   	ret    
+801038cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801038cf:	90                   	nop
+
+801038d0 <myproc>:
+myproc(void) {
+801038d0:	55                   	push   %ebp
+801038d1:	89 e5                	mov    %esp,%ebp
+801038d3:	53                   	push   %ebx
+801038d4:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+801038d7:	e8 84 0a 00 00       	call   80104360 <pushcli>
+  c = mycpu();
+801038dc:	e8 4f ff ff ff       	call   80103830 <mycpu>
+  p = c->proc;
+801038e1:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+801038e7:	e8 c4 0a 00 00       	call   801043b0 <popcli>
+}
+801038ec:	83 c4 04             	add    $0x4,%esp
+801038ef:	89 d8                	mov    %ebx,%eax
+801038f1:	5b                   	pop    %ebx
+801038f2:	5d                   	pop    %ebp
+801038f3:	c3                   	ret    
+801038f4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801038fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801038ff:	90                   	nop
+
+80103900 <userinit>:
+{
+80103900:	55                   	push   %ebp
+80103901:	89 e5                	mov    %esp,%ebp
+80103903:	53                   	push   %ebx
+80103904:	83 ec 04             	sub    $0x4,%esp
+  p = allocproc();
+80103907:	e8 e4 fd ff ff       	call   801036f0 <allocproc>
+8010390c:	89 c3                	mov    %eax,%ebx
+  initproc = p;
+8010390e:	a3 b8 a5 10 80       	mov    %eax,0x8010a5b8
+  if((p->pgdir = setupkvm()) == 0)
+80103913:	e8 b8 33 00 00       	call   80106cd0 <setupkvm>
+80103918:	89 43 04             	mov    %eax,0x4(%ebx)
+8010391b:	85 c0                	test   %eax,%eax
+8010391d:	0f 84 bd 00 00 00    	je     801039e0 <userinit+0xe0>
+  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
+80103923:	83 ec 04             	sub    $0x4,%esp
+80103926:	68 2c 00 00 00       	push   $0x2c
+8010392b:	68 60 a4 10 80       	push   $0x8010a460
+80103930:	50                   	push   %eax
+80103931:	e8 7a 30 00 00       	call   801069b0 <inituvm>
+  memset(p->tf, 0, sizeof(*p->tf));
+80103936:	83 c4 0c             	add    $0xc,%esp
+  p->sz = PGSIZE;
+80103939:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+  memset(p->tf, 0, sizeof(*p->tf));
+8010393f:	6a 4c                	push   $0x4c
+80103941:	6a 00                	push   $0x0
+80103943:	ff 73 18             	pushl  0x18(%ebx)
+80103946:	e8 15 0c 00 00       	call   80104560 <memset>
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+8010394b:	8b 43 18             	mov    0x18(%ebx),%eax
+8010394e:	ba 1b 00 00 00       	mov    $0x1b,%edx
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+80103953:	83 c4 0c             	add    $0xc,%esp
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+80103956:	b9 23 00 00 00       	mov    $0x23,%ecx
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+8010395b:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+8010395f:	8b 43 18             	mov    0x18(%ebx),%eax
+80103962:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+  p->tf->es = p->tf->ds;
+80103966:	8b 43 18             	mov    0x18(%ebx),%eax
+80103969:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+8010396d:	66 89 50 28          	mov    %dx,0x28(%eax)
+  p->tf->ss = p->tf->ds;
+80103971:	8b 43 18             	mov    0x18(%ebx),%eax
+80103974:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103978:	66 89 50 48          	mov    %dx,0x48(%eax)
+  p->tf->eflags = FL_IF;
+8010397c:	8b 43 18             	mov    0x18(%ebx),%eax
+8010397f:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+  p->tf->esp = PGSIZE;
+80103986:	8b 43 18             	mov    0x18(%ebx),%eax
+80103989:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+  p->tf->eip = 0;  // beginning of initcode.S
+80103990:	8b 43 18             	mov    0x18(%ebx),%eax
+80103993:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+8010399a:	8d 43 6c             	lea    0x6c(%ebx),%eax
+8010399d:	6a 10                	push   $0x10
+8010399f:	68 e5 74 10 80       	push   $0x801074e5
+801039a4:	50                   	push   %eax
+801039a5:	e8 86 0d 00 00       	call   80104730 <safestrcpy>
+  p->cwd = namei("/");
+801039aa:	c7 04 24 ee 74 10 80 	movl   $0x801074ee,(%esp)
+801039b1:	e8 fa e5 ff ff       	call   80101fb0 <namei>
+801039b6:	89 43 68             	mov    %eax,0x68(%ebx)
+  acquire(&ptable.lock);
+801039b9:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+801039c0:	e8 8b 0a 00 00       	call   80104450 <acquire>
+  p->state = RUNNABLE;
+801039c5:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  release(&ptable.lock);
+801039cc:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+801039d3:	e8 38 0b 00 00       	call   80104510 <release>
+}
+801039d8:	83 c4 10             	add    $0x10,%esp
+801039db:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801039de:	c9                   	leave  
+801039df:	c3                   	ret    
+    panic("userinit: out of memory?");
+801039e0:	83 ec 0c             	sub    $0xc,%esp
+801039e3:	68 cc 74 10 80       	push   $0x801074cc
+801039e8:	e8 a3 c9 ff ff       	call   80100390 <panic>
+801039ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+801039f0 <growproc>:
+{
+801039f0:	55                   	push   %ebp
+801039f1:	89 e5                	mov    %esp,%ebp
+801039f3:	56                   	push   %esi
+801039f4:	53                   	push   %ebx
+801039f5:	8b 75 08             	mov    0x8(%ebp),%esi
+  pushcli();
+801039f8:	e8 63 09 00 00       	call   80104360 <pushcli>
+  c = mycpu();
+801039fd:	e8 2e fe ff ff       	call   80103830 <mycpu>
+  p = c->proc;
+80103a02:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103a08:	e8 a3 09 00 00       	call   801043b0 <popcli>
+  sz = curproc->sz;
+80103a0d:	8b 03                	mov    (%ebx),%eax
+  if(n > 0){
+80103a0f:	85 f6                	test   %esi,%esi
+80103a11:	7f 1d                	jg     80103a30 <growproc+0x40>
+  } else if(n < 0){
+80103a13:	75 3b                	jne    80103a50 <growproc+0x60>
+  switchuvm(curproc);
+80103a15:	83 ec 0c             	sub    $0xc,%esp
+  curproc->sz = sz;
+80103a18:	89 03                	mov    %eax,(%ebx)
+  switchuvm(curproc);
+80103a1a:	53                   	push   %ebx
+80103a1b:	e8 80 2e 00 00       	call   801068a0 <switchuvm>
+  return 0;
+80103a20:	83 c4 10             	add    $0x10,%esp
+80103a23:	31 c0                	xor    %eax,%eax
+}
+80103a25:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103a28:	5b                   	pop    %ebx
+80103a29:	5e                   	pop    %esi
+80103a2a:	5d                   	pop    %ebp
+80103a2b:	c3                   	ret    
+80103a2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+80103a30:	83 ec 04             	sub    $0x4,%esp
+80103a33:	01 c6                	add    %eax,%esi
+80103a35:	56                   	push   %esi
+80103a36:	50                   	push   %eax
+80103a37:	ff 73 04             	pushl  0x4(%ebx)
+80103a3a:	e8 b1 30 00 00       	call   80106af0 <allocuvm>
+80103a3f:	83 c4 10             	add    $0x10,%esp
+80103a42:	85 c0                	test   %eax,%eax
+80103a44:	75 cf                	jne    80103a15 <growproc+0x25>
+      return -1;
+80103a46:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103a4b:	eb d8                	jmp    80103a25 <growproc+0x35>
+80103a4d:	8d 76 00             	lea    0x0(%esi),%esi
+    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+80103a50:	83 ec 04             	sub    $0x4,%esp
+80103a53:	01 c6                	add    %eax,%esi
+80103a55:	56                   	push   %esi
+80103a56:	50                   	push   %eax
+80103a57:	ff 73 04             	pushl  0x4(%ebx)
+80103a5a:	e8 c1 31 00 00       	call   80106c20 <deallocuvm>
+80103a5f:	83 c4 10             	add    $0x10,%esp
+80103a62:	85 c0                	test   %eax,%eax
+80103a64:	75 af                	jne    80103a15 <growproc+0x25>
+80103a66:	eb de                	jmp    80103a46 <growproc+0x56>
+80103a68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103a6f:	90                   	nop
+
+80103a70 <fork>:
+{
+80103a70:	55                   	push   %ebp
+80103a71:	89 e5                	mov    %esp,%ebp
+80103a73:	57                   	push   %edi
+80103a74:	56                   	push   %esi
+80103a75:	53                   	push   %ebx
+80103a76:	83 ec 1c             	sub    $0x1c,%esp
+  pushcli();
+80103a79:	e8 e2 08 00 00       	call   80104360 <pushcli>
+  c = mycpu();
+80103a7e:	e8 ad fd ff ff       	call   80103830 <mycpu>
+  p = c->proc;
+80103a83:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103a89:	e8 22 09 00 00       	call   801043b0 <popcli>
+  if((np = allocproc()) == 0){
+80103a8e:	e8 5d fc ff ff       	call   801036f0 <allocproc>
+80103a93:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103a96:	85 c0                	test   %eax,%eax
+80103a98:	0f 84 b7 00 00 00    	je     80103b55 <fork+0xe5>
+  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+80103a9e:	83 ec 08             	sub    $0x8,%esp
+80103aa1:	ff 33                	pushl  (%ebx)
+80103aa3:	89 c7                	mov    %eax,%edi
+80103aa5:	ff 73 04             	pushl  0x4(%ebx)
+80103aa8:	e8 f3 32 00 00       	call   80106da0 <copyuvm>
+80103aad:	83 c4 10             	add    $0x10,%esp
+80103ab0:	89 47 04             	mov    %eax,0x4(%edi)
+80103ab3:	85 c0                	test   %eax,%eax
+80103ab5:	0f 84 a1 00 00 00    	je     80103b5c <fork+0xec>
+  np->sz = curproc->sz;
+80103abb:	8b 03                	mov    (%ebx),%eax
+80103abd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80103ac0:	89 01                	mov    %eax,(%ecx)
+  *np->tf = *curproc->tf;
+80103ac2:	8b 79 18             	mov    0x18(%ecx),%edi
+  np->parent = curproc;
+80103ac5:	89 c8                	mov    %ecx,%eax
+80103ac7:	89 59 14             	mov    %ebx,0x14(%ecx)
+  *np->tf = *curproc->tf;
+80103aca:	b9 13 00 00 00       	mov    $0x13,%ecx
+80103acf:	8b 73 18             	mov    0x18(%ebx),%esi
+80103ad2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  for(i = 0; i < NOFILE; i++)
+80103ad4:	31 f6                	xor    %esi,%esi
+  np->tf->eax = 0;
+80103ad6:	8b 40 18             	mov    0x18(%eax),%eax
+80103ad9:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+    if(curproc->ofile[i])
+80103ae0:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+80103ae4:	85 c0                	test   %eax,%eax
+80103ae6:	74 13                	je     80103afb <fork+0x8b>
+      np->ofile[i] = filedup(curproc->ofile[i]);
+80103ae8:	83 ec 0c             	sub    $0xc,%esp
+80103aeb:	50                   	push   %eax
+80103aec:	e8 7f d3 ff ff       	call   80100e70 <filedup>
+80103af1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80103af4:	83 c4 10             	add    $0x10,%esp
+80103af7:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+  for(i = 0; i < NOFILE; i++)
+80103afb:	83 c6 01             	add    $0x1,%esi
+80103afe:	83 fe 10             	cmp    $0x10,%esi
+80103b01:	75 dd                	jne    80103ae0 <fork+0x70>
+  np->cwd = idup(curproc->cwd);
+80103b03:	83 ec 0c             	sub    $0xc,%esp
+80103b06:	ff 73 68             	pushl  0x68(%ebx)
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+80103b09:	83 c3 6c             	add    $0x6c,%ebx
+  np->cwd = idup(curproc->cwd);
+80103b0c:	e8 cf db ff ff       	call   801016e0 <idup>
+80103b11:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+80103b14:	83 c4 0c             	add    $0xc,%esp
+  np->cwd = idup(curproc->cwd);
+80103b17:	89 47 68             	mov    %eax,0x68(%edi)
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+80103b1a:	8d 47 6c             	lea    0x6c(%edi),%eax
+80103b1d:	6a 10                	push   $0x10
+80103b1f:	53                   	push   %ebx
+80103b20:	50                   	push   %eax
+80103b21:	e8 0a 0c 00 00       	call   80104730 <safestrcpy>
+  pid = np->pid;
+80103b26:	8b 5f 10             	mov    0x10(%edi),%ebx
+  acquire(&ptable.lock);
+80103b29:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103b30:	e8 1b 09 00 00       	call   80104450 <acquire>
+  np->state = RUNNABLE;
+80103b35:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+  release(&ptable.lock);
+80103b3c:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103b43:	e8 c8 09 00 00       	call   80104510 <release>
+  return pid;
+80103b48:	83 c4 10             	add    $0x10,%esp
+}
+80103b4b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103b4e:	89 d8                	mov    %ebx,%eax
+80103b50:	5b                   	pop    %ebx
+80103b51:	5e                   	pop    %esi
+80103b52:	5f                   	pop    %edi
+80103b53:	5d                   	pop    %ebp
+80103b54:	c3                   	ret    
+    return -1;
+80103b55:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103b5a:	eb ef                	jmp    80103b4b <fork+0xdb>
+    kfree(np->kstack);
+80103b5c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80103b5f:	83 ec 0c             	sub    $0xc,%esp
+80103b62:	ff 73 08             	pushl  0x8(%ebx)
+80103b65:	e8 76 e8 ff ff       	call   801023e0 <kfree>
+    np->kstack = 0;
+80103b6a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+    return -1;
+80103b71:	83 c4 10             	add    $0x10,%esp
+    np->state = UNUSED;
+80103b74:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+    return -1;
+80103b7b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103b80:	eb c9                	jmp    80103b4b <fork+0xdb>
+80103b82:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103b89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103b90 <scheduler>:
+{
+80103b90:	55                   	push   %ebp
+80103b91:	89 e5                	mov    %esp,%ebp
+80103b93:	57                   	push   %edi
+80103b94:	56                   	push   %esi
+80103b95:	53                   	push   %ebx
+80103b96:	83 ec 0c             	sub    $0xc,%esp
+  struct cpu *c = mycpu();
+80103b99:	e8 92 fc ff ff       	call   80103830 <mycpu>
+  c->proc = 0;
+80103b9e:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+80103ba5:	00 00 00 
+  struct cpu *c = mycpu();
+80103ba8:	89 c6                	mov    %eax,%esi
+  c->proc = 0;
+80103baa:	8d 78 04             	lea    0x4(%eax),%edi
+80103bad:	8d 76 00             	lea    0x0(%esi),%esi
+  asm volatile("sti");
+80103bb0:	fb                   	sti    
+    acquire(&ptable.lock);
+80103bb1:	83 ec 0c             	sub    $0xc,%esp
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103bb4:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+    acquire(&ptable.lock);
+80103bb9:	68 20 2d 11 80       	push   $0x80112d20
+80103bbe:	e8 8d 08 00 00       	call   80104450 <acquire>
+80103bc3:	83 c4 10             	add    $0x10,%esp
+80103bc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103bcd:	8d 76 00             	lea    0x0(%esi),%esi
+      if(p->state != RUNNABLE)
+80103bd0:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
+80103bd4:	75 33                	jne    80103c09 <scheduler+0x79>
+      switchuvm(p);
+80103bd6:	83 ec 0c             	sub    $0xc,%esp
+      c->proc = p;
+80103bd9:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
+      switchuvm(p);
+80103bdf:	53                   	push   %ebx
+80103be0:	e8 bb 2c 00 00       	call   801068a0 <switchuvm>
+      swtch(&(c->scheduler), p->context);
+80103be5:	58                   	pop    %eax
+80103be6:	5a                   	pop    %edx
+80103be7:	ff 73 1c             	pushl  0x1c(%ebx)
+80103bea:	57                   	push   %edi
+      p->state = RUNNING;
+80103beb:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
+      swtch(&(c->scheduler), p->context);
+80103bf2:	e8 94 0b 00 00       	call   8010478b <swtch>
+      switchkvm();
+80103bf7:	e8 94 2c 00 00       	call   80106890 <switchkvm>
+      c->proc = 0;
+80103bfc:	83 c4 10             	add    $0x10,%esp
+80103bff:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
+80103c06:	00 00 00 
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103c09:	83 c3 7c             	add    $0x7c,%ebx
+80103c0c:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+80103c12:	75 bc                	jne    80103bd0 <scheduler+0x40>
+    release(&ptable.lock);
+80103c14:	83 ec 0c             	sub    $0xc,%esp
+80103c17:	68 20 2d 11 80       	push   $0x80112d20
+80103c1c:	e8 ef 08 00 00       	call   80104510 <release>
+    sti();
+80103c21:	83 c4 10             	add    $0x10,%esp
+80103c24:	eb 8a                	jmp    80103bb0 <scheduler+0x20>
+80103c26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c2d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103c30 <sched>:
+{
+80103c30:	55                   	push   %ebp
+80103c31:	89 e5                	mov    %esp,%ebp
+80103c33:	56                   	push   %esi
+80103c34:	53                   	push   %ebx
+  pushcli();
+80103c35:	e8 26 07 00 00       	call   80104360 <pushcli>
+  c = mycpu();
+80103c3a:	e8 f1 fb ff ff       	call   80103830 <mycpu>
+  p = c->proc;
+80103c3f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103c45:	e8 66 07 00 00       	call   801043b0 <popcli>
+  if(!holding(&ptable.lock))
+80103c4a:	83 ec 0c             	sub    $0xc,%esp
+80103c4d:	68 20 2d 11 80       	push   $0x80112d20
+80103c52:	e8 b9 07 00 00       	call   80104410 <holding>
+80103c57:	83 c4 10             	add    $0x10,%esp
+80103c5a:	85 c0                	test   %eax,%eax
+80103c5c:	74 4f                	je     80103cad <sched+0x7d>
+  if(mycpu()->ncli != 1)
+80103c5e:	e8 cd fb ff ff       	call   80103830 <mycpu>
+80103c63:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+80103c6a:	75 68                	jne    80103cd4 <sched+0xa4>
+  if(p->state == RUNNING)
+80103c6c:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80103c70:	74 55                	je     80103cc7 <sched+0x97>
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80103c72:	9c                   	pushf  
+80103c73:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+80103c74:	f6 c4 02             	test   $0x2,%ah
+80103c77:	75 41                	jne    80103cba <sched+0x8a>
+  intena = mycpu()->intena;
+80103c79:	e8 b2 fb ff ff       	call   80103830 <mycpu>
+  swtch(&p->context, mycpu()->scheduler);
+80103c7e:	83 c3 1c             	add    $0x1c,%ebx
+  intena = mycpu()->intena;
+80103c81:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+  swtch(&p->context, mycpu()->scheduler);
+80103c87:	e8 a4 fb ff ff       	call   80103830 <mycpu>
+80103c8c:	83 ec 08             	sub    $0x8,%esp
+80103c8f:	ff 70 04             	pushl  0x4(%eax)
+80103c92:	53                   	push   %ebx
+80103c93:	e8 f3 0a 00 00       	call   8010478b <swtch>
+  mycpu()->intena = intena;
+80103c98:	e8 93 fb ff ff       	call   80103830 <mycpu>
+}
+80103c9d:	83 c4 10             	add    $0x10,%esp
+  mycpu()->intena = intena;
+80103ca0:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+}
+80103ca6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103ca9:	5b                   	pop    %ebx
+80103caa:	5e                   	pop    %esi
+80103cab:	5d                   	pop    %ebp
+80103cac:	c3                   	ret    
+    panic("sched ptable.lock");
+80103cad:	83 ec 0c             	sub    $0xc,%esp
+80103cb0:	68 f0 74 10 80       	push   $0x801074f0
+80103cb5:	e8 d6 c6 ff ff       	call   80100390 <panic>
+    panic("sched interruptible");
+80103cba:	83 ec 0c             	sub    $0xc,%esp
+80103cbd:	68 1c 75 10 80       	push   $0x8010751c
+80103cc2:	e8 c9 c6 ff ff       	call   80100390 <panic>
+    panic("sched running");
+80103cc7:	83 ec 0c             	sub    $0xc,%esp
+80103cca:	68 0e 75 10 80       	push   $0x8010750e
+80103ccf:	e8 bc c6 ff ff       	call   80100390 <panic>
+    panic("sched locks");
+80103cd4:	83 ec 0c             	sub    $0xc,%esp
+80103cd7:	68 02 75 10 80       	push   $0x80107502
+80103cdc:	e8 af c6 ff ff       	call   80100390 <panic>
+80103ce1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103ce8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103cef:	90                   	nop
+
+80103cf0 <exit>:
+{
+80103cf0:	55                   	push   %ebp
+80103cf1:	89 e5                	mov    %esp,%ebp
+80103cf3:	57                   	push   %edi
+80103cf4:	56                   	push   %esi
+80103cf5:	53                   	push   %ebx
+80103cf6:	83 ec 0c             	sub    $0xc,%esp
+  pushcli();
+80103cf9:	e8 62 06 00 00       	call   80104360 <pushcli>
+  c = mycpu();
+80103cfe:	e8 2d fb ff ff       	call   80103830 <mycpu>
+  p = c->proc;
+80103d03:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80103d09:	e8 a2 06 00 00       	call   801043b0 <popcli>
+  if(curproc == initproc)
+80103d0e:	8d 5e 28             	lea    0x28(%esi),%ebx
+80103d11:	8d 7e 68             	lea    0x68(%esi),%edi
+80103d14:	39 35 b8 a5 10 80    	cmp    %esi,0x8010a5b8
+80103d1a:	0f 84 e7 00 00 00    	je     80103e07 <exit+0x117>
+    if(curproc->ofile[fd]){
+80103d20:	8b 03                	mov    (%ebx),%eax
+80103d22:	85 c0                	test   %eax,%eax
+80103d24:	74 12                	je     80103d38 <exit+0x48>
+      fileclose(curproc->ofile[fd]);
+80103d26:	83 ec 0c             	sub    $0xc,%esp
+80103d29:	50                   	push   %eax
+80103d2a:	e8 91 d1 ff ff       	call   80100ec0 <fileclose>
+      curproc->ofile[fd] = 0;
+80103d2f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80103d35:	83 c4 10             	add    $0x10,%esp
+80103d38:	83 c3 04             	add    $0x4,%ebx
+  for(fd = 0; fd < NOFILE; fd++){
+80103d3b:	39 df                	cmp    %ebx,%edi
+80103d3d:	75 e1                	jne    80103d20 <exit+0x30>
+  begin_op();
+80103d3f:	e8 4c ef ff ff       	call   80102c90 <begin_op>
+  iput(curproc->cwd);
+80103d44:	83 ec 0c             	sub    $0xc,%esp
+80103d47:	ff 76 68             	pushl  0x68(%esi)
+80103d4a:	e8 f1 da ff ff       	call   80101840 <iput>
+  end_op();
+80103d4f:	e8 ac ef ff ff       	call   80102d00 <end_op>
+  curproc->cwd = 0;
+80103d54:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
+  acquire(&ptable.lock);
+80103d5b:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103d62:	e8 e9 06 00 00       	call   80104450 <acquire>
+  wakeup1(curproc->parent);
+80103d67:	8b 56 14             	mov    0x14(%esi),%edx
+80103d6a:	83 c4 10             	add    $0x10,%esp
+static void
+wakeup1(void *chan)
+{
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103d6d:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103d72:	eb 0e                	jmp    80103d82 <exit+0x92>
+80103d74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103d78:	83 c0 7c             	add    $0x7c,%eax
+80103d7b:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103d80:	74 1c                	je     80103d9e <exit+0xae>
+    if(p->state == SLEEPING && p->chan == chan)
+80103d82:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103d86:	75 f0                	jne    80103d78 <exit+0x88>
+80103d88:	3b 50 20             	cmp    0x20(%eax),%edx
+80103d8b:	75 eb                	jne    80103d78 <exit+0x88>
+      p->state = RUNNABLE;
+80103d8d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103d94:	83 c0 7c             	add    $0x7c,%eax
+80103d97:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103d9c:	75 e4                	jne    80103d82 <exit+0x92>
+      p->parent = initproc;
+80103d9e:	8b 0d b8 a5 10 80    	mov    0x8010a5b8,%ecx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103da4:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
+80103da9:	eb 10                	jmp    80103dbb <exit+0xcb>
+80103dab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103daf:	90                   	nop
+80103db0:	83 c2 7c             	add    $0x7c,%edx
+80103db3:	81 fa 54 4c 11 80    	cmp    $0x80114c54,%edx
+80103db9:	74 33                	je     80103dee <exit+0xfe>
+    if(p->parent == curproc){
+80103dbb:	39 72 14             	cmp    %esi,0x14(%edx)
+80103dbe:	75 f0                	jne    80103db0 <exit+0xc0>
+      if(p->state == ZOMBIE)
+80103dc0:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+      p->parent = initproc;
+80103dc4:	89 4a 14             	mov    %ecx,0x14(%edx)
+      if(p->state == ZOMBIE)
+80103dc7:	75 e7                	jne    80103db0 <exit+0xc0>
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103dc9:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103dce:	eb 0a                	jmp    80103dda <exit+0xea>
+80103dd0:	83 c0 7c             	add    $0x7c,%eax
+80103dd3:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103dd8:	74 d6                	je     80103db0 <exit+0xc0>
+    if(p->state == SLEEPING && p->chan == chan)
+80103dda:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103dde:	75 f0                	jne    80103dd0 <exit+0xe0>
+80103de0:	3b 48 20             	cmp    0x20(%eax),%ecx
+80103de3:	75 eb                	jne    80103dd0 <exit+0xe0>
+      p->state = RUNNABLE;
+80103de5:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80103dec:	eb e2                	jmp    80103dd0 <exit+0xe0>
+  curproc->state = ZOMBIE;
+80103dee:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
+  sched();
+80103df5:	e8 36 fe ff ff       	call   80103c30 <sched>
+  panic("zombie exit");
+80103dfa:	83 ec 0c             	sub    $0xc,%esp
+80103dfd:	68 3d 75 10 80       	push   $0x8010753d
+80103e02:	e8 89 c5 ff ff       	call   80100390 <panic>
+    panic("init exiting");
+80103e07:	83 ec 0c             	sub    $0xc,%esp
+80103e0a:	68 30 75 10 80       	push   $0x80107530
+80103e0f:	e8 7c c5 ff ff       	call   80100390 <panic>
+80103e14:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103e1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103e1f:	90                   	nop
+
+80103e20 <yield>:
+{
+80103e20:	55                   	push   %ebp
+80103e21:	89 e5                	mov    %esp,%ebp
+80103e23:	53                   	push   %ebx
+80103e24:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);  //DOC: yieldlock
+80103e27:	68 20 2d 11 80       	push   $0x80112d20
+80103e2c:	e8 1f 06 00 00       	call   80104450 <acquire>
+  pushcli();
+80103e31:	e8 2a 05 00 00       	call   80104360 <pushcli>
+  c = mycpu();
+80103e36:	e8 f5 f9 ff ff       	call   80103830 <mycpu>
+  p = c->proc;
+80103e3b:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103e41:	e8 6a 05 00 00       	call   801043b0 <popcli>
+  myproc()->state = RUNNABLE;
+80103e46:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  sched();
+80103e4d:	e8 de fd ff ff       	call   80103c30 <sched>
+  release(&ptable.lock);
+80103e52:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103e59:	e8 b2 06 00 00       	call   80104510 <release>
+}
+80103e5e:	83 c4 10             	add    $0x10,%esp
+80103e61:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103e64:	c9                   	leave  
+80103e65:	c3                   	ret    
+80103e66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103e6d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103e70 <sleep>:
+{
+80103e70:	55                   	push   %ebp
+80103e71:	89 e5                	mov    %esp,%ebp
+80103e73:	57                   	push   %edi
+80103e74:	56                   	push   %esi
+80103e75:	53                   	push   %ebx
+80103e76:	83 ec 0c             	sub    $0xc,%esp
+80103e79:	8b 7d 08             	mov    0x8(%ebp),%edi
+80103e7c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  pushcli();
+80103e7f:	e8 dc 04 00 00       	call   80104360 <pushcli>
+  c = mycpu();
+80103e84:	e8 a7 f9 ff ff       	call   80103830 <mycpu>
+  p = c->proc;
+80103e89:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103e8f:	e8 1c 05 00 00       	call   801043b0 <popcli>
+  if(p == 0)
+80103e94:	85 db                	test   %ebx,%ebx
+80103e96:	0f 84 87 00 00 00    	je     80103f23 <sleep+0xb3>
+  if(lk == 0)
+80103e9c:	85 f6                	test   %esi,%esi
+80103e9e:	74 76                	je     80103f16 <sleep+0xa6>
+  if(lk != &ptable.lock){  //DOC: sleeplock0
+80103ea0:	81 fe 20 2d 11 80    	cmp    $0x80112d20,%esi
+80103ea6:	74 50                	je     80103ef8 <sleep+0x88>
+    acquire(&ptable.lock);  //DOC: sleeplock1
+80103ea8:	83 ec 0c             	sub    $0xc,%esp
+80103eab:	68 20 2d 11 80       	push   $0x80112d20
+80103eb0:	e8 9b 05 00 00       	call   80104450 <acquire>
+    release(lk);
+80103eb5:	89 34 24             	mov    %esi,(%esp)
+80103eb8:	e8 53 06 00 00       	call   80104510 <release>
+  p->chan = chan;
+80103ebd:	89 7b 20             	mov    %edi,0x20(%ebx)
+  p->state = SLEEPING;
+80103ec0:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+  sched();
+80103ec7:	e8 64 fd ff ff       	call   80103c30 <sched>
+  p->chan = 0;
+80103ecc:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+    release(&ptable.lock);
+80103ed3:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103eda:	e8 31 06 00 00       	call   80104510 <release>
+    acquire(lk);
+80103edf:	89 75 08             	mov    %esi,0x8(%ebp)
+80103ee2:	83 c4 10             	add    $0x10,%esp
+}
+80103ee5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103ee8:	5b                   	pop    %ebx
+80103ee9:	5e                   	pop    %esi
+80103eea:	5f                   	pop    %edi
+80103eeb:	5d                   	pop    %ebp
+    acquire(lk);
+80103eec:	e9 5f 05 00 00       	jmp    80104450 <acquire>
+80103ef1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  p->chan = chan;
+80103ef8:	89 7b 20             	mov    %edi,0x20(%ebx)
+  p->state = SLEEPING;
+80103efb:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+  sched();
+80103f02:	e8 29 fd ff ff       	call   80103c30 <sched>
+  p->chan = 0;
+80103f07:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+}
+80103f0e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103f11:	5b                   	pop    %ebx
+80103f12:	5e                   	pop    %esi
+80103f13:	5f                   	pop    %edi
+80103f14:	5d                   	pop    %ebp
+80103f15:	c3                   	ret    
+    panic("sleep without lk");
+80103f16:	83 ec 0c             	sub    $0xc,%esp
+80103f19:	68 4f 75 10 80       	push   $0x8010754f
+80103f1e:	e8 6d c4 ff ff       	call   80100390 <panic>
+    panic("sleep");
+80103f23:	83 ec 0c             	sub    $0xc,%esp
+80103f26:	68 49 75 10 80       	push   $0x80107549
+80103f2b:	e8 60 c4 ff ff       	call   80100390 <panic>
+
+80103f30 <wait>:
+{
+80103f30:	55                   	push   %ebp
+80103f31:	89 e5                	mov    %esp,%ebp
+80103f33:	56                   	push   %esi
+80103f34:	53                   	push   %ebx
+  pushcli();
+80103f35:	e8 26 04 00 00       	call   80104360 <pushcli>
+  c = mycpu();
+80103f3a:	e8 f1 f8 ff ff       	call   80103830 <mycpu>
+  p = c->proc;
+80103f3f:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80103f45:	e8 66 04 00 00       	call   801043b0 <popcli>
+  acquire(&ptable.lock);
+80103f4a:	83 ec 0c             	sub    $0xc,%esp
+80103f4d:	68 20 2d 11 80       	push   $0x80112d20
+80103f52:	e8 f9 04 00 00       	call   80104450 <acquire>
+80103f57:	83 c4 10             	add    $0x10,%esp
+    havekids = 0;
+80103f5a:	31 c0                	xor    %eax,%eax
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103f5c:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80103f61:	eb 10                	jmp    80103f73 <wait+0x43>
+80103f63:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103f67:	90                   	nop
+80103f68:	83 c3 7c             	add    $0x7c,%ebx
+80103f6b:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+80103f71:	74 1b                	je     80103f8e <wait+0x5e>
+      if(p->parent != curproc)
+80103f73:	39 73 14             	cmp    %esi,0x14(%ebx)
+80103f76:	75 f0                	jne    80103f68 <wait+0x38>
+      if(p->state == ZOMBIE){
+80103f78:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+80103f7c:	74 32                	je     80103fb0 <wait+0x80>
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103f7e:	83 c3 7c             	add    $0x7c,%ebx
+      havekids = 1;
+80103f81:	b8 01 00 00 00       	mov    $0x1,%eax
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103f86:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+80103f8c:	75 e5                	jne    80103f73 <wait+0x43>
+    if(!havekids || curproc->killed){
+80103f8e:	85 c0                	test   %eax,%eax
+80103f90:	74 74                	je     80104006 <wait+0xd6>
+80103f92:	8b 46 24             	mov    0x24(%esi),%eax
+80103f95:	85 c0                	test   %eax,%eax
+80103f97:	75 6d                	jne    80104006 <wait+0xd6>
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+80103f99:	83 ec 08             	sub    $0x8,%esp
+80103f9c:	68 20 2d 11 80       	push   $0x80112d20
+80103fa1:	56                   	push   %esi
+80103fa2:	e8 c9 fe ff ff       	call   80103e70 <sleep>
+    havekids = 0;
+80103fa7:	83 c4 10             	add    $0x10,%esp
+80103faa:	eb ae                	jmp    80103f5a <wait+0x2a>
+80103fac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        kfree(p->kstack);
+80103fb0:	83 ec 0c             	sub    $0xc,%esp
+80103fb3:	ff 73 08             	pushl  0x8(%ebx)
+        pid = p->pid;
+80103fb6:	8b 73 10             	mov    0x10(%ebx),%esi
+        kfree(p->kstack);
+80103fb9:	e8 22 e4 ff ff       	call   801023e0 <kfree>
+        freevm(p->pgdir);
+80103fbe:	5a                   	pop    %edx
+80103fbf:	ff 73 04             	pushl  0x4(%ebx)
+        p->kstack = 0;
+80103fc2:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+        freevm(p->pgdir);
+80103fc9:	e8 82 2c 00 00       	call   80106c50 <freevm>
+        release(&ptable.lock);
+80103fce:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+        p->pid = 0;
+80103fd5:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+        p->parent = 0;
+80103fdc:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+        p->name[0] = 0;
+80103fe3:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+        p->killed = 0;
+80103fe7:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+        p->state = UNUSED;
+80103fee:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+        release(&ptable.lock);
+80103ff5:	e8 16 05 00 00       	call   80104510 <release>
+        return pid;
+80103ffa:	83 c4 10             	add    $0x10,%esp
+}
+80103ffd:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104000:	89 f0                	mov    %esi,%eax
+80104002:	5b                   	pop    %ebx
+80104003:	5e                   	pop    %esi
+80104004:	5d                   	pop    %ebp
+80104005:	c3                   	ret    
+      release(&ptable.lock);
+80104006:	83 ec 0c             	sub    $0xc,%esp
+      return -1;
+80104009:	be ff ff ff ff       	mov    $0xffffffff,%esi
+      release(&ptable.lock);
+8010400e:	68 20 2d 11 80       	push   $0x80112d20
+80104013:	e8 f8 04 00 00       	call   80104510 <release>
+      return -1;
+80104018:	83 c4 10             	add    $0x10,%esp
+8010401b:	eb e0                	jmp    80103ffd <wait+0xcd>
+8010401d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104020 <wakeup>:
+}
+
+// Wake up all processes sleeping on chan.
+void
+wakeup(void *chan)
+{
+80104020:	55                   	push   %ebp
+80104021:	89 e5                	mov    %esp,%ebp
+80104023:	53                   	push   %ebx
+80104024:	83 ec 10             	sub    $0x10,%esp
+80104027:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&ptable.lock);
+8010402a:	68 20 2d 11 80       	push   $0x80112d20
+8010402f:	e8 1c 04 00 00       	call   80104450 <acquire>
+80104034:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104037:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+8010403c:	eb 0c                	jmp    8010404a <wakeup+0x2a>
+8010403e:	66 90                	xchg   %ax,%ax
+80104040:	83 c0 7c             	add    $0x7c,%eax
+80104043:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80104048:	74 1c                	je     80104066 <wakeup+0x46>
+    if(p->state == SLEEPING && p->chan == chan)
+8010404a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+8010404e:	75 f0                	jne    80104040 <wakeup+0x20>
+80104050:	3b 58 20             	cmp    0x20(%eax),%ebx
+80104053:	75 eb                	jne    80104040 <wakeup+0x20>
+      p->state = RUNNABLE;
+80104055:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+8010405c:	83 c0 7c             	add    $0x7c,%eax
+8010405f:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80104064:	75 e4                	jne    8010404a <wakeup+0x2a>
+  wakeup1(chan);
+  release(&ptable.lock);
+80104066:	c7 45 08 20 2d 11 80 	movl   $0x80112d20,0x8(%ebp)
+}
+8010406d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104070:	c9                   	leave  
+  release(&ptable.lock);
+80104071:	e9 9a 04 00 00       	jmp    80104510 <release>
+80104076:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010407d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104080 <kill>:
+// Kill the process with the given pid.
+// Process won't exit until it returns
+// to user space (see trap in trap.c).
+int
+kill(int pid)
+{
+80104080:	55                   	push   %ebp
+80104081:	89 e5                	mov    %esp,%ebp
+80104083:	53                   	push   %ebx
+80104084:	83 ec 10             	sub    $0x10,%esp
+80104087:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *p;
+
+  acquire(&ptable.lock);
+8010408a:	68 20 2d 11 80       	push   $0x80112d20
+8010408f:	e8 bc 03 00 00       	call   80104450 <acquire>
+80104094:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104097:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+8010409c:	eb 0c                	jmp    801040aa <kill+0x2a>
+8010409e:	66 90                	xchg   %ax,%ax
+801040a0:	83 c0 7c             	add    $0x7c,%eax
+801040a3:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+801040a8:	74 36                	je     801040e0 <kill+0x60>
+    if(p->pid == pid){
+801040aa:	39 58 10             	cmp    %ebx,0x10(%eax)
+801040ad:	75 f1                	jne    801040a0 <kill+0x20>
+      p->killed = 1;
+      // Wake process from sleep if necessary.
+      if(p->state == SLEEPING)
+801040af:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+      p->killed = 1;
+801040b3:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+      if(p->state == SLEEPING)
+801040ba:	75 07                	jne    801040c3 <kill+0x43>
+        p->state = RUNNABLE;
+801040bc:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+      release(&ptable.lock);
+801040c3:	83 ec 0c             	sub    $0xc,%esp
+801040c6:	68 20 2d 11 80       	push   $0x80112d20
+801040cb:	e8 40 04 00 00       	call   80104510 <release>
+      return 0;
+801040d0:	83 c4 10             	add    $0x10,%esp
+801040d3:	31 c0                	xor    %eax,%eax
+    }
+  }
+  release(&ptable.lock);
+  return -1;
+}
+801040d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801040d8:	c9                   	leave  
+801040d9:	c3                   	ret    
+801040da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  release(&ptable.lock);
+801040e0:	83 ec 0c             	sub    $0xc,%esp
+801040e3:	68 20 2d 11 80       	push   $0x80112d20
+801040e8:	e8 23 04 00 00       	call   80104510 <release>
+  return -1;
+801040ed:	83 c4 10             	add    $0x10,%esp
+801040f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801040f5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801040f8:	c9                   	leave  
+801040f9:	c3                   	ret    
+801040fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104100 <procdump>:
+// Print a process listing to console.  For debugging.
+// Runs when user types ^P on console.
+// No lock to avoid wedging a stuck machine further.
+void
+procdump(void)
+{
+80104100:	55                   	push   %ebp
+80104101:	89 e5                	mov    %esp,%ebp
+80104103:	57                   	push   %edi
+80104104:	56                   	push   %esi
+80104105:	8d 75 e8             	lea    -0x18(%ebp),%esi
+80104108:	53                   	push   %ebx
+80104109:	bb c0 2d 11 80       	mov    $0x80112dc0,%ebx
+8010410e:	83 ec 3c             	sub    $0x3c,%esp
+80104111:	eb 24                	jmp    80104137 <procdump+0x37>
+80104113:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104117:	90                   	nop
+    if(p->state == SLEEPING){
+      getcallerpcs((uint*)p->context->ebp+2, pc);
+      for(i=0; i<10 && pc[i] != 0; i++)
+        cprintf(" %p", pc[i]);
+    }
+    cprintf("\n");
+80104118:	83 ec 0c             	sub    $0xc,%esp
+8010411b:	68 d7 78 10 80       	push   $0x801078d7
+80104120:	e8 8b c5 ff ff       	call   801006b0 <cprintf>
+80104125:	83 c4 10             	add    $0x10,%esp
+80104128:	83 c3 7c             	add    $0x7c,%ebx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+8010412b:	81 fb c0 4c 11 80    	cmp    $0x80114cc0,%ebx
+80104131:	0f 84 81 00 00 00    	je     801041b8 <procdump+0xb8>
+    if(p->state == UNUSED)
+80104137:	8b 43 a0             	mov    -0x60(%ebx),%eax
+8010413a:	85 c0                	test   %eax,%eax
+8010413c:	74 ea                	je     80104128 <procdump+0x28>
+      state = "???";
+8010413e:	ba 60 75 10 80       	mov    $0x80107560,%edx
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+80104143:	83 f8 05             	cmp    $0x5,%eax
+80104146:	77 11                	ja     80104159 <procdump+0x59>
+80104148:	8b 14 85 c0 75 10 80 	mov    -0x7fef8a40(,%eax,4),%edx
+      state = "???";
+8010414f:	b8 60 75 10 80       	mov    $0x80107560,%eax
+80104154:	85 d2                	test   %edx,%edx
+80104156:	0f 44 d0             	cmove  %eax,%edx
+    cprintf("%d %s %s", p->pid, state, p->name);
+80104159:	53                   	push   %ebx
+8010415a:	52                   	push   %edx
+8010415b:	ff 73 a4             	pushl  -0x5c(%ebx)
+8010415e:	68 64 75 10 80       	push   $0x80107564
+80104163:	e8 48 c5 ff ff       	call   801006b0 <cprintf>
+    if(p->state == SLEEPING){
+80104168:	83 c4 10             	add    $0x10,%esp
+8010416b:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
+8010416f:	75 a7                	jne    80104118 <procdump+0x18>
+      getcallerpcs((uint*)p->context->ebp+2, pc);
+80104171:	83 ec 08             	sub    $0x8,%esp
+80104174:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80104177:	8d 7d c0             	lea    -0x40(%ebp),%edi
+8010417a:	50                   	push   %eax
+8010417b:	8b 43 b0             	mov    -0x50(%ebx),%eax
+8010417e:	8b 40 0c             	mov    0xc(%eax),%eax
+80104181:	83 c0 08             	add    $0x8,%eax
+80104184:	50                   	push   %eax
+80104185:	e8 86 01 00 00       	call   80104310 <getcallerpcs>
+      for(i=0; i<10 && pc[i] != 0; i++)
+8010418a:	83 c4 10             	add    $0x10,%esp
+8010418d:	8d 76 00             	lea    0x0(%esi),%esi
+80104190:	8b 17                	mov    (%edi),%edx
+80104192:	85 d2                	test   %edx,%edx
+80104194:	74 82                	je     80104118 <procdump+0x18>
+        cprintf(" %p", pc[i]);
+80104196:	83 ec 08             	sub    $0x8,%esp
+80104199:	83 c7 04             	add    $0x4,%edi
+8010419c:	52                   	push   %edx
+8010419d:	68 a1 6f 10 80       	push   $0x80106fa1
+801041a2:	e8 09 c5 ff ff       	call   801006b0 <cprintf>
+      for(i=0; i<10 && pc[i] != 0; i++)
+801041a7:	83 c4 10             	add    $0x10,%esp
+801041aa:	39 fe                	cmp    %edi,%esi
+801041ac:	75 e2                	jne    80104190 <procdump+0x90>
+801041ae:	e9 65 ff ff ff       	jmp    80104118 <procdump+0x18>
+801041b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801041b7:	90                   	nop
+  }
+}
+801041b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801041bb:	5b                   	pop    %ebx
+801041bc:	5e                   	pop    %esi
+801041bd:	5f                   	pop    %edi
+801041be:	5d                   	pop    %ebp
+801041bf:	c3                   	ret    
+
+801041c0 <initsleeplock>:
+#include "spinlock.h"
+#include "sleeplock.h"
+
+void
+initsleeplock(struct sleeplock *lk, char *name)
+{
+801041c0:	55                   	push   %ebp
+801041c1:	89 e5                	mov    %esp,%ebp
+801041c3:	53                   	push   %ebx
+801041c4:	83 ec 0c             	sub    $0xc,%esp
+801041c7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  initlock(&lk->lk, "sleep lock");
+801041ca:	68 d8 75 10 80       	push   $0x801075d8
+801041cf:	8d 43 04             	lea    0x4(%ebx),%eax
+801041d2:	50                   	push   %eax
+801041d3:	e8 18 01 00 00       	call   801042f0 <initlock>
+  lk->name = name;
+801041d8:	8b 45 0c             	mov    0xc(%ebp),%eax
+  lk->locked = 0;
+801041db:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  lk->pid = 0;
+}
+801041e1:	83 c4 10             	add    $0x10,%esp
+  lk->pid = 0;
+801041e4:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+  lk->name = name;
+801041eb:	89 43 38             	mov    %eax,0x38(%ebx)
+}
+801041ee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801041f1:	c9                   	leave  
+801041f2:	c3                   	ret    
+801041f3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801041fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104200 <acquiresleep>:
+
+void
+acquiresleep(struct sleeplock *lk)
+{
+80104200:	55                   	push   %ebp
+80104201:	89 e5                	mov    %esp,%ebp
+80104203:	56                   	push   %esi
+80104204:	53                   	push   %ebx
+80104205:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&lk->lk);
+80104208:	8d 73 04             	lea    0x4(%ebx),%esi
+8010420b:	83 ec 0c             	sub    $0xc,%esp
+8010420e:	56                   	push   %esi
+8010420f:	e8 3c 02 00 00       	call   80104450 <acquire>
+  while (lk->locked) {
+80104214:	8b 13                	mov    (%ebx),%edx
+80104216:	83 c4 10             	add    $0x10,%esp
+80104219:	85 d2                	test   %edx,%edx
+8010421b:	74 16                	je     80104233 <acquiresleep+0x33>
+8010421d:	8d 76 00             	lea    0x0(%esi),%esi
+    sleep(lk, &lk->lk);
+80104220:	83 ec 08             	sub    $0x8,%esp
+80104223:	56                   	push   %esi
+80104224:	53                   	push   %ebx
+80104225:	e8 46 fc ff ff       	call   80103e70 <sleep>
+  while (lk->locked) {
+8010422a:	8b 03                	mov    (%ebx),%eax
+8010422c:	83 c4 10             	add    $0x10,%esp
+8010422f:	85 c0                	test   %eax,%eax
+80104231:	75 ed                	jne    80104220 <acquiresleep+0x20>
+  }
+  lk->locked = 1;
+80104233:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  lk->pid = myproc()->pid;
+80104239:	e8 92 f6 ff ff       	call   801038d0 <myproc>
+8010423e:	8b 40 10             	mov    0x10(%eax),%eax
+80104241:	89 43 3c             	mov    %eax,0x3c(%ebx)
+  release(&lk->lk);
+80104244:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+80104247:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010424a:	5b                   	pop    %ebx
+8010424b:	5e                   	pop    %esi
+8010424c:	5d                   	pop    %ebp
+  release(&lk->lk);
+8010424d:	e9 be 02 00 00       	jmp    80104510 <release>
+80104252:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104259:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104260 <releasesleep>:
+
+void
+releasesleep(struct sleeplock *lk)
+{
+80104260:	55                   	push   %ebp
+80104261:	89 e5                	mov    %esp,%ebp
+80104263:	56                   	push   %esi
+80104264:	53                   	push   %ebx
+80104265:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&lk->lk);
+80104268:	8d 73 04             	lea    0x4(%ebx),%esi
+8010426b:	83 ec 0c             	sub    $0xc,%esp
+8010426e:	56                   	push   %esi
+8010426f:	e8 dc 01 00 00       	call   80104450 <acquire>
+  lk->locked = 0;
+80104274:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  lk->pid = 0;
+8010427a:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+  wakeup(lk);
+80104281:	89 1c 24             	mov    %ebx,(%esp)
+80104284:	e8 97 fd ff ff       	call   80104020 <wakeup>
+  release(&lk->lk);
+80104289:	89 75 08             	mov    %esi,0x8(%ebp)
+8010428c:	83 c4 10             	add    $0x10,%esp
+}
+8010428f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104292:	5b                   	pop    %ebx
+80104293:	5e                   	pop    %esi
+80104294:	5d                   	pop    %ebp
+  release(&lk->lk);
+80104295:	e9 76 02 00 00       	jmp    80104510 <release>
+8010429a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801042a0 <holdingsleep>:
+
+int
+holdingsleep(struct sleeplock *lk)
+{
+801042a0:	55                   	push   %ebp
+801042a1:	89 e5                	mov    %esp,%ebp
+801042a3:	57                   	push   %edi
+801042a4:	31 ff                	xor    %edi,%edi
+801042a6:	56                   	push   %esi
+801042a7:	53                   	push   %ebx
+801042a8:	83 ec 18             	sub    $0x18,%esp
+801042ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int r;
+  
+  acquire(&lk->lk);
+801042ae:	8d 73 04             	lea    0x4(%ebx),%esi
+801042b1:	56                   	push   %esi
+801042b2:	e8 99 01 00 00       	call   80104450 <acquire>
+  r = lk->locked && (lk->pid == myproc()->pid);
+801042b7:	8b 03                	mov    (%ebx),%eax
+801042b9:	83 c4 10             	add    $0x10,%esp
+801042bc:	85 c0                	test   %eax,%eax
+801042be:	75 18                	jne    801042d8 <holdingsleep+0x38>
+  release(&lk->lk);
+801042c0:	83 ec 0c             	sub    $0xc,%esp
+801042c3:	56                   	push   %esi
+801042c4:	e8 47 02 00 00       	call   80104510 <release>
+  return r;
+}
+801042c9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801042cc:	89 f8                	mov    %edi,%eax
+801042ce:	5b                   	pop    %ebx
+801042cf:	5e                   	pop    %esi
+801042d0:	5f                   	pop    %edi
+801042d1:	5d                   	pop    %ebp
+801042d2:	c3                   	ret    
+801042d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801042d7:	90                   	nop
+  r = lk->locked && (lk->pid == myproc()->pid);
+801042d8:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+801042db:	e8 f0 f5 ff ff       	call   801038d0 <myproc>
+801042e0:	39 58 10             	cmp    %ebx,0x10(%eax)
+801042e3:	0f 94 c0             	sete   %al
+801042e6:	0f b6 c0             	movzbl %al,%eax
+801042e9:	89 c7                	mov    %eax,%edi
+801042eb:	eb d3                	jmp    801042c0 <holdingsleep+0x20>
+801042ed:	66 90                	xchg   %ax,%ax
+801042ef:	90                   	nop
+
+801042f0 <initlock>:
+#include "proc.h"
+#include "spinlock.h"
+
+void
+initlock(struct spinlock *lk, char *name)
+{
+801042f0:	55                   	push   %ebp
+801042f1:	89 e5                	mov    %esp,%ebp
+801042f3:	8b 45 08             	mov    0x8(%ebp),%eax
+  lk->name = name;
+801042f6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  lk->locked = 0;
+801042f9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  lk->name = name;
+801042ff:	89 50 04             	mov    %edx,0x4(%eax)
+  lk->cpu = 0;
+80104302:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+}
+80104309:	5d                   	pop    %ebp
+8010430a:	c3                   	ret    
+8010430b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010430f:	90                   	nop
+
+80104310 <getcallerpcs>:
+}
+
+// Record the current call stack in pcs[] by following the %ebp chain.
+void
+getcallerpcs(void *v, uint pcs[])
+{
+80104310:	55                   	push   %ebp
+  uint *ebp;
+  int i;
+
+  ebp = (uint*)v - 2;
+  for(i = 0; i < 10; i++){
+80104311:	31 d2                	xor    %edx,%edx
+{
+80104313:	89 e5                	mov    %esp,%ebp
+80104315:	53                   	push   %ebx
+  ebp = (uint*)v - 2;
+80104316:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+80104319:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  ebp = (uint*)v - 2;
+8010431c:	83 e8 08             	sub    $0x8,%eax
+  for(i = 0; i < 10; i++){
+8010431f:	90                   	nop
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+80104320:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+80104326:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+8010432c:	77 1a                	ja     80104348 <getcallerpcs+0x38>
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+8010432e:	8b 58 04             	mov    0x4(%eax),%ebx
+80104331:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+  for(i = 0; i < 10; i++){
+80104334:	83 c2 01             	add    $0x1,%edx
+    ebp = (uint*)ebp[0]; // saved %ebp
+80104337:	8b 00                	mov    (%eax),%eax
+  for(i = 0; i < 10; i++){
+80104339:	83 fa 0a             	cmp    $0xa,%edx
+8010433c:	75 e2                	jne    80104320 <getcallerpcs+0x10>
+  }
+  for(; i < 10; i++)
+    pcs[i] = 0;
+}
+8010433e:	5b                   	pop    %ebx
+8010433f:	5d                   	pop    %ebp
+80104340:	c3                   	ret    
+80104341:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104348:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+8010434b:	8d 51 28             	lea    0x28(%ecx),%edx
+8010434e:	66 90                	xchg   %ax,%ax
+    pcs[i] = 0;
+80104350:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104356:	83 c0 04             	add    $0x4,%eax
+  for(; i < 10; i++)
+80104359:	39 d0                	cmp    %edx,%eax
+8010435b:	75 f3                	jne    80104350 <getcallerpcs+0x40>
+}
+8010435d:	5b                   	pop    %ebx
+8010435e:	5d                   	pop    %ebp
+8010435f:	c3                   	ret    
+
+80104360 <pushcli>:
+// it takes two popcli to undo two pushcli.  Also, if interrupts
+// are off, then pushcli, popcli leaves them off.
+
+void
+pushcli(void)
+{
+80104360:	55                   	push   %ebp
+80104361:	89 e5                	mov    %esp,%ebp
+80104363:	53                   	push   %ebx
+80104364:	83 ec 04             	sub    $0x4,%esp
+80104367:	9c                   	pushf  
+80104368:	5b                   	pop    %ebx
+  asm volatile("cli");
+80104369:	fa                   	cli    
+  int eflags;
+
+  eflags = readeflags();
+  cli();
+  if(mycpu()->ncli == 0)
+8010436a:	e8 c1 f4 ff ff       	call   80103830 <mycpu>
+8010436f:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+80104375:	85 c0                	test   %eax,%eax
+80104377:	74 17                	je     80104390 <pushcli+0x30>
+    mycpu()->intena = eflags & FL_IF;
+  mycpu()->ncli += 1;
+80104379:	e8 b2 f4 ff ff       	call   80103830 <mycpu>
+8010437e:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+}
+80104385:	83 c4 04             	add    $0x4,%esp
+80104388:	5b                   	pop    %ebx
+80104389:	5d                   	pop    %ebp
+8010438a:	c3                   	ret    
+8010438b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010438f:	90                   	nop
+    mycpu()->intena = eflags & FL_IF;
+80104390:	e8 9b f4 ff ff       	call   80103830 <mycpu>
+80104395:	81 e3 00 02 00 00    	and    $0x200,%ebx
+8010439b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+801043a1:	eb d6                	jmp    80104379 <pushcli+0x19>
+801043a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801043aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801043b0 <popcli>:
+
+void
+popcli(void)
+{
+801043b0:	55                   	push   %ebp
+801043b1:	89 e5                	mov    %esp,%ebp
+801043b3:	83 ec 08             	sub    $0x8,%esp
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+801043b6:	9c                   	pushf  
+801043b7:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+801043b8:	f6 c4 02             	test   $0x2,%ah
+801043bb:	75 35                	jne    801043f2 <popcli+0x42>
+    panic("popcli - interruptible");
+  if(--mycpu()->ncli < 0)
+801043bd:	e8 6e f4 ff ff       	call   80103830 <mycpu>
+801043c2:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+801043c9:	78 34                	js     801043ff <popcli+0x4f>
+    panic("popcli");
+  if(mycpu()->ncli == 0 && mycpu()->intena)
+801043cb:	e8 60 f4 ff ff       	call   80103830 <mycpu>
+801043d0:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+801043d6:	85 d2                	test   %edx,%edx
+801043d8:	74 06                	je     801043e0 <popcli+0x30>
+    sti();
+}
+801043da:	c9                   	leave  
+801043db:	c3                   	ret    
+801043dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if(mycpu()->ncli == 0 && mycpu()->intena)
+801043e0:	e8 4b f4 ff ff       	call   80103830 <mycpu>
+801043e5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+801043eb:	85 c0                	test   %eax,%eax
+801043ed:	74 eb                	je     801043da <popcli+0x2a>
+  asm volatile("sti");
+801043ef:	fb                   	sti    
+}
+801043f0:	c9                   	leave  
+801043f1:	c3                   	ret    
+    panic("popcli - interruptible");
+801043f2:	83 ec 0c             	sub    $0xc,%esp
+801043f5:	68 e3 75 10 80       	push   $0x801075e3
+801043fa:	e8 91 bf ff ff       	call   80100390 <panic>
+    panic("popcli");
+801043ff:	83 ec 0c             	sub    $0xc,%esp
+80104402:	68 fa 75 10 80       	push   $0x801075fa
+80104407:	e8 84 bf ff ff       	call   80100390 <panic>
+8010440c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104410 <holding>:
+{
+80104410:	55                   	push   %ebp
+80104411:	89 e5                	mov    %esp,%ebp
+80104413:	56                   	push   %esi
+80104414:	53                   	push   %ebx
+80104415:	8b 75 08             	mov    0x8(%ebp),%esi
+80104418:	31 db                	xor    %ebx,%ebx
+  pushcli();
+8010441a:	e8 41 ff ff ff       	call   80104360 <pushcli>
+  r = lock->locked && lock->cpu == mycpu();
+8010441f:	8b 06                	mov    (%esi),%eax
+80104421:	85 c0                	test   %eax,%eax
+80104423:	75 0b                	jne    80104430 <holding+0x20>
+  popcli();
+80104425:	e8 86 ff ff ff       	call   801043b0 <popcli>
+}
+8010442a:	89 d8                	mov    %ebx,%eax
+8010442c:	5b                   	pop    %ebx
+8010442d:	5e                   	pop    %esi
+8010442e:	5d                   	pop    %ebp
+8010442f:	c3                   	ret    
+  r = lock->locked && lock->cpu == mycpu();
+80104430:	8b 5e 08             	mov    0x8(%esi),%ebx
+80104433:	e8 f8 f3 ff ff       	call   80103830 <mycpu>
+80104438:	39 c3                	cmp    %eax,%ebx
+8010443a:	0f 94 c3             	sete   %bl
+  popcli();
+8010443d:	e8 6e ff ff ff       	call   801043b0 <popcli>
+  r = lock->locked && lock->cpu == mycpu();
+80104442:	0f b6 db             	movzbl %bl,%ebx
+}
+80104445:	89 d8                	mov    %ebx,%eax
+80104447:	5b                   	pop    %ebx
+80104448:	5e                   	pop    %esi
+80104449:	5d                   	pop    %ebp
+8010444a:	c3                   	ret    
+8010444b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010444f:	90                   	nop
+
+80104450 <acquire>:
+{
+80104450:	55                   	push   %ebp
+80104451:	89 e5                	mov    %esp,%ebp
+80104453:	56                   	push   %esi
+80104454:	53                   	push   %ebx
+  pushcli(); // disable interrupts to avoid deadlock.
+80104455:	e8 06 ff ff ff       	call   80104360 <pushcli>
+  if(holding(lk))
+8010445a:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010445d:	83 ec 0c             	sub    $0xc,%esp
+80104460:	53                   	push   %ebx
+80104461:	e8 aa ff ff ff       	call   80104410 <holding>
+80104466:	83 c4 10             	add    $0x10,%esp
+80104469:	85 c0                	test   %eax,%eax
+8010446b:	0f 85 83 00 00 00    	jne    801044f4 <acquire+0xa4>
+80104471:	89 c6                	mov    %eax,%esi
+  asm volatile("lock; xchgl %0, %1" :
+80104473:	ba 01 00 00 00       	mov    $0x1,%edx
+80104478:	eb 09                	jmp    80104483 <acquire+0x33>
+8010447a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104480:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104483:	89 d0                	mov    %edx,%eax
+80104485:	f0 87 03             	lock xchg %eax,(%ebx)
+  while(xchg(&lk->locked, 1) != 0)
+80104488:	85 c0                	test   %eax,%eax
+8010448a:	75 f4                	jne    80104480 <acquire+0x30>
+  __sync_synchronize();
+8010448c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+  lk->cpu = mycpu();
+80104491:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104494:	e8 97 f3 ff ff       	call   80103830 <mycpu>
+80104499:	89 43 08             	mov    %eax,0x8(%ebx)
+  ebp = (uint*)v - 2;
+8010449c:	89 e8                	mov    %ebp,%eax
+8010449e:	66 90                	xchg   %ax,%ax
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+801044a0:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
+801044a6:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
+801044ac:	77 22                	ja     801044d0 <acquire+0x80>
+    pcs[i] = ebp[1];     // saved %eip
+801044ae:	8b 50 04             	mov    0x4(%eax),%edx
+801044b1:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
+  for(i = 0; i < 10; i++){
+801044b5:	83 c6 01             	add    $0x1,%esi
+    ebp = (uint*)ebp[0]; // saved %ebp
+801044b8:	8b 00                	mov    (%eax),%eax
+  for(i = 0; i < 10; i++){
+801044ba:	83 fe 0a             	cmp    $0xa,%esi
+801044bd:	75 e1                	jne    801044a0 <acquire+0x50>
+}
+801044bf:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801044c2:	5b                   	pop    %ebx
+801044c3:	5e                   	pop    %esi
+801044c4:	5d                   	pop    %ebp
+801044c5:	c3                   	ret    
+801044c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801044cd:	8d 76 00             	lea    0x0(%esi),%esi
+801044d0:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
+801044d4:	83 c3 34             	add    $0x34,%ebx
+801044d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801044de:	66 90                	xchg   %ax,%ax
+    pcs[i] = 0;
+801044e0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+801044e6:	83 c0 04             	add    $0x4,%eax
+  for(; i < 10; i++)
+801044e9:	39 d8                	cmp    %ebx,%eax
+801044eb:	75 f3                	jne    801044e0 <acquire+0x90>
+}
+801044ed:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801044f0:	5b                   	pop    %ebx
+801044f1:	5e                   	pop    %esi
+801044f2:	5d                   	pop    %ebp
+801044f3:	c3                   	ret    
+    panic("acquire");
+801044f4:	83 ec 0c             	sub    $0xc,%esp
+801044f7:	68 01 76 10 80       	push   $0x80107601
+801044fc:	e8 8f be ff ff       	call   80100390 <panic>
+80104501:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104508:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010450f:	90                   	nop
+
+80104510 <release>:
+{
+80104510:	55                   	push   %ebp
+80104511:	89 e5                	mov    %esp,%ebp
+80104513:	53                   	push   %ebx
+80104514:	83 ec 10             	sub    $0x10,%esp
+80104517:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holding(lk))
+8010451a:	53                   	push   %ebx
+8010451b:	e8 f0 fe ff ff       	call   80104410 <holding>
+80104520:	83 c4 10             	add    $0x10,%esp
+80104523:	85 c0                	test   %eax,%eax
+80104525:	74 22                	je     80104549 <release+0x39>
+  lk->pcs[0] = 0;
+80104527:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+  lk->cpu = 0;
+8010452e:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+  __sync_synchronize();
+80104535:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+  asm volatile("movl $0, %0" : "+m" (lk->locked) : );
+8010453a:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+}
+80104540:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104543:	c9                   	leave  
+  popcli();
+80104544:	e9 67 fe ff ff       	jmp    801043b0 <popcli>
+    panic("release");
+80104549:	83 ec 0c             	sub    $0xc,%esp
+8010454c:	68 09 76 10 80       	push   $0x80107609
+80104551:	e8 3a be ff ff       	call   80100390 <panic>
+80104556:	66 90                	xchg   %ax,%ax
+80104558:	66 90                	xchg   %ax,%ax
+8010455a:	66 90                	xchg   %ax,%ax
+8010455c:	66 90                	xchg   %ax,%ax
+8010455e:	66 90                	xchg   %ax,%ax
+
+80104560 <memset>:
+#include "types.h"
+#include "x86.h"
+
+void*
+memset(void *dst, int c, uint n)
+{
+80104560:	55                   	push   %ebp
+80104561:	89 e5                	mov    %esp,%ebp
+80104563:	57                   	push   %edi
+80104564:	8b 55 08             	mov    0x8(%ebp),%edx
+80104567:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010456a:	53                   	push   %ebx
+  if ((int)dst%4 == 0 && n%4 == 0){
+8010456b:	89 d0                	mov    %edx,%eax
+8010456d:	09 c8                	or     %ecx,%eax
+8010456f:	a8 03                	test   $0x3,%al
+80104571:	75 2d                	jne    801045a0 <memset+0x40>
+    c &= 0xFF;
+80104573:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
+    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
+80104577:	c1 e9 02             	shr    $0x2,%ecx
+8010457a:	89 f8                	mov    %edi,%eax
+8010457c:	89 fb                	mov    %edi,%ebx
+8010457e:	c1 e0 18             	shl    $0x18,%eax
+80104581:	c1 e3 10             	shl    $0x10,%ebx
+80104584:	09 d8                	or     %ebx,%eax
+80104586:	09 f8                	or     %edi,%eax
+80104588:	c1 e7 08             	shl    $0x8,%edi
+8010458b:	09 f8                	or     %edi,%eax
+  asm volatile("cld; rep stosl" :
+8010458d:	89 d7                	mov    %edx,%edi
+8010458f:	fc                   	cld    
+80104590:	f3 ab                	rep stos %eax,%es:(%edi)
+  } else
+    stosb(dst, c, n);
+  return dst;
+}
+80104592:	5b                   	pop    %ebx
+80104593:	89 d0                	mov    %edx,%eax
+80104595:	5f                   	pop    %edi
+80104596:	5d                   	pop    %ebp
+80104597:	c3                   	ret    
+80104598:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010459f:	90                   	nop
+  asm volatile("cld; rep stosb" :
+801045a0:	89 d7                	mov    %edx,%edi
+801045a2:	8b 45 0c             	mov    0xc(%ebp),%eax
+801045a5:	fc                   	cld    
+801045a6:	f3 aa                	rep stos %al,%es:(%edi)
+801045a8:	5b                   	pop    %ebx
+801045a9:	89 d0                	mov    %edx,%eax
+801045ab:	5f                   	pop    %edi
+801045ac:	5d                   	pop    %ebp
+801045ad:	c3                   	ret    
+801045ae:	66 90                	xchg   %ax,%ax
+
+801045b0 <memcmp>:
+
+int
+memcmp(const void *v1, const void *v2, uint n)
+{
+801045b0:	55                   	push   %ebp
+801045b1:	89 e5                	mov    %esp,%ebp
+801045b3:	56                   	push   %esi
+801045b4:	8b 75 10             	mov    0x10(%ebp),%esi
+801045b7:	8b 45 08             	mov    0x8(%ebp),%eax
+801045ba:	53                   	push   %ebx
+801045bb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  const uchar *s1, *s2;
+
+  s1 = v1;
+  s2 = v2;
+  while(n-- > 0){
+801045be:	85 f6                	test   %esi,%esi
+801045c0:	74 22                	je     801045e4 <memcmp+0x34>
+    if(*s1 != *s2)
+801045c2:	0f b6 08             	movzbl (%eax),%ecx
+801045c5:	0f b6 1a             	movzbl (%edx),%ebx
+801045c8:	01 c6                	add    %eax,%esi
+801045ca:	38 cb                	cmp    %cl,%bl
+801045cc:	74 0c                	je     801045da <memcmp+0x2a>
+801045ce:	eb 20                	jmp    801045f0 <memcmp+0x40>
+801045d0:	0f b6 08             	movzbl (%eax),%ecx
+801045d3:	0f b6 1a             	movzbl (%edx),%ebx
+801045d6:	38 d9                	cmp    %bl,%cl
+801045d8:	75 16                	jne    801045f0 <memcmp+0x40>
+      return *s1 - *s2;
+    s1++, s2++;
+801045da:	83 c0 01             	add    $0x1,%eax
+801045dd:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0){
+801045e0:	39 c6                	cmp    %eax,%esi
+801045e2:	75 ec                	jne    801045d0 <memcmp+0x20>
+  }
+
+  return 0;
+}
+801045e4:	5b                   	pop    %ebx
+  return 0;
+801045e5:	31 c0                	xor    %eax,%eax
+}
+801045e7:	5e                   	pop    %esi
+801045e8:	5d                   	pop    %ebp
+801045e9:	c3                   	ret    
+801045ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      return *s1 - *s2;
+801045f0:	0f b6 c1             	movzbl %cl,%eax
+801045f3:	29 d8                	sub    %ebx,%eax
+}
+801045f5:	5b                   	pop    %ebx
+801045f6:	5e                   	pop    %esi
+801045f7:	5d                   	pop    %ebp
+801045f8:	c3                   	ret    
+801045f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104600 <memmove>:
+
+void*
+memmove(void *dst, const void *src, uint n)
+{
+80104600:	55                   	push   %ebp
+80104601:	89 e5                	mov    %esp,%ebp
+80104603:	57                   	push   %edi
+80104604:	8b 45 08             	mov    0x8(%ebp),%eax
+80104607:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010460a:	56                   	push   %esi
+8010460b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  const char *s;
+  char *d;
+
+  s = src;
+  d = dst;
+  if(s < d && s + n > d){
+8010460e:	39 c6                	cmp    %eax,%esi
+80104610:	73 26                	jae    80104638 <memmove+0x38>
+80104612:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
+80104615:	39 f8                	cmp    %edi,%eax
+80104617:	73 1f                	jae    80104638 <memmove+0x38>
+80104619:	8d 51 ff             	lea    -0x1(%ecx),%edx
+    s += n;
+    d += n;
+    while(n-- > 0)
+8010461c:	85 c9                	test   %ecx,%ecx
+8010461e:	74 0f                	je     8010462f <memmove+0x2f>
+      *--d = *--s;
+80104620:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+80104624:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+    while(n-- > 0)
+80104627:	83 ea 01             	sub    $0x1,%edx
+8010462a:	83 fa ff             	cmp    $0xffffffff,%edx
+8010462d:	75 f1                	jne    80104620 <memmove+0x20>
+  } else
+    while(n-- > 0)
+      *d++ = *s++;
+
+  return dst;
+}
+8010462f:	5e                   	pop    %esi
+80104630:	5f                   	pop    %edi
+80104631:	5d                   	pop    %ebp
+80104632:	c3                   	ret    
+80104633:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104637:	90                   	nop
+80104638:	8d 14 0e             	lea    (%esi,%ecx,1),%edx
+    while(n-- > 0)
+8010463b:	89 c7                	mov    %eax,%edi
+8010463d:	85 c9                	test   %ecx,%ecx
+8010463f:	74 ee                	je     8010462f <memmove+0x2f>
+80104641:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      *d++ = *s++;
+80104648:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+    while(n-- > 0)
+80104649:	39 d6                	cmp    %edx,%esi
+8010464b:	75 fb                	jne    80104648 <memmove+0x48>
+}
+8010464d:	5e                   	pop    %esi
+8010464e:	5f                   	pop    %edi
+8010464f:	5d                   	pop    %ebp
+80104650:	c3                   	ret    
+80104651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104658:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010465f:	90                   	nop
+
+80104660 <memcpy>:
+
+// memcpy exists to placate GCC.  Use memmove.
+void*
+memcpy(void *dst, const void *src, uint n)
+{
+  return memmove(dst, src, n);
+80104660:	eb 9e                	jmp    80104600 <memmove>
+80104662:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104669:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104670 <strncmp>:
+}
+
+int
+strncmp(const char *p, const char *q, uint n)
+{
+80104670:	55                   	push   %ebp
+80104671:	89 e5                	mov    %esp,%ebp
+80104673:	57                   	push   %edi
+80104674:	8b 7d 10             	mov    0x10(%ebp),%edi
+80104677:	8b 4d 08             	mov    0x8(%ebp),%ecx
+8010467a:	56                   	push   %esi
+8010467b:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010467e:	53                   	push   %ebx
+  while(n > 0 && *p && *p == *q)
+8010467f:	85 ff                	test   %edi,%edi
+80104681:	74 2f                	je     801046b2 <strncmp+0x42>
+80104683:	0f b6 11             	movzbl (%ecx),%edx
+80104686:	0f b6 1e             	movzbl (%esi),%ebx
+80104689:	84 d2                	test   %dl,%dl
+8010468b:	74 37                	je     801046c4 <strncmp+0x54>
+8010468d:	38 da                	cmp    %bl,%dl
+8010468f:	75 33                	jne    801046c4 <strncmp+0x54>
+80104691:	01 f7                	add    %esi,%edi
+80104693:	eb 13                	jmp    801046a8 <strncmp+0x38>
+80104695:	8d 76 00             	lea    0x0(%esi),%esi
+80104698:	0f b6 11             	movzbl (%ecx),%edx
+8010469b:	84 d2                	test   %dl,%dl
+8010469d:	74 21                	je     801046c0 <strncmp+0x50>
+8010469f:	0f b6 18             	movzbl (%eax),%ebx
+801046a2:	89 c6                	mov    %eax,%esi
+801046a4:	38 da                	cmp    %bl,%dl
+801046a6:	75 1c                	jne    801046c4 <strncmp+0x54>
+    n--, p++, q++;
+801046a8:	8d 46 01             	lea    0x1(%esi),%eax
+801046ab:	83 c1 01             	add    $0x1,%ecx
+  while(n > 0 && *p && *p == *q)
+801046ae:	39 f8                	cmp    %edi,%eax
+801046b0:	75 e6                	jne    80104698 <strncmp+0x28>
+  if(n == 0)
+    return 0;
+  return (uchar)*p - (uchar)*q;
+}
+801046b2:	5b                   	pop    %ebx
+    return 0;
+801046b3:	31 c0                	xor    %eax,%eax
+}
+801046b5:	5e                   	pop    %esi
+801046b6:	5f                   	pop    %edi
+801046b7:	5d                   	pop    %ebp
+801046b8:	c3                   	ret    
+801046b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801046c0:	0f b6 5e 01          	movzbl 0x1(%esi),%ebx
+  return (uchar)*p - (uchar)*q;
+801046c4:	0f b6 c2             	movzbl %dl,%eax
+801046c7:	29 d8                	sub    %ebx,%eax
+}
+801046c9:	5b                   	pop    %ebx
+801046ca:	5e                   	pop    %esi
+801046cb:	5f                   	pop    %edi
+801046cc:	5d                   	pop    %ebp
+801046cd:	c3                   	ret    
+801046ce:	66 90                	xchg   %ax,%ax
+
+801046d0 <strncpy>:
+
+char*
+strncpy(char *s, const char *t, int n)
+{
+801046d0:	55                   	push   %ebp
+801046d1:	89 e5                	mov    %esp,%ebp
+801046d3:	57                   	push   %edi
+801046d4:	8b 55 0c             	mov    0xc(%ebp),%edx
+  char *os;
+
+  os = s;
+  while(n-- > 0 && (*s++ = *t++) != 0)
+801046d7:	8b 4d 08             	mov    0x8(%ebp),%ecx
+{
+801046da:	56                   	push   %esi
+801046db:	53                   	push   %ebx
+801046dc:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  while(n-- > 0 && (*s++ = *t++) != 0)
+801046df:	eb 1a                	jmp    801046fb <strncpy+0x2b>
+801046e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801046e8:	83 c2 01             	add    $0x1,%edx
+801046eb:	0f b6 42 ff          	movzbl -0x1(%edx),%eax
+801046ef:	83 c1 01             	add    $0x1,%ecx
+801046f2:	88 41 ff             	mov    %al,-0x1(%ecx)
+801046f5:	84 c0                	test   %al,%al
+801046f7:	74 09                	je     80104702 <strncpy+0x32>
+801046f9:	89 fb                	mov    %edi,%ebx
+801046fb:	8d 7b ff             	lea    -0x1(%ebx),%edi
+801046fe:	85 db                	test   %ebx,%ebx
+80104700:	7f e6                	jg     801046e8 <strncpy+0x18>
+    ;
+  while(n-- > 0)
+80104702:	89 ce                	mov    %ecx,%esi
+80104704:	85 ff                	test   %edi,%edi
+80104706:	7e 1b                	jle    80104723 <strncpy+0x53>
+80104708:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010470f:	90                   	nop
+    *s++ = 0;
+80104710:	83 c6 01             	add    $0x1,%esi
+80104713:	c6 46 ff 00          	movb   $0x0,-0x1(%esi)
+80104717:	89 f2                	mov    %esi,%edx
+80104719:	f7 d2                	not    %edx
+8010471b:	01 ca                	add    %ecx,%edx
+8010471d:	01 da                	add    %ebx,%edx
+  while(n-- > 0)
+8010471f:	85 d2                	test   %edx,%edx
+80104721:	7f ed                	jg     80104710 <strncpy+0x40>
+  return os;
+}
+80104723:	5b                   	pop    %ebx
+80104724:	8b 45 08             	mov    0x8(%ebp),%eax
+80104727:	5e                   	pop    %esi
+80104728:	5f                   	pop    %edi
+80104729:	5d                   	pop    %ebp
+8010472a:	c3                   	ret    
+8010472b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010472f:	90                   	nop
+
+80104730 <safestrcpy>:
+
+// Like strncpy but guaranteed to NUL-terminate.
+char*
+safestrcpy(char *s, const char *t, int n)
+{
+80104730:	55                   	push   %ebp
+80104731:	89 e5                	mov    %esp,%ebp
+80104733:	56                   	push   %esi
+80104734:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80104737:	8b 45 08             	mov    0x8(%ebp),%eax
+8010473a:	53                   	push   %ebx
+8010473b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  char *os;
+
+  os = s;
+  if(n <= 0)
+8010473e:	85 c9                	test   %ecx,%ecx
+80104740:	7e 26                	jle    80104768 <safestrcpy+0x38>
+80104742:	8d 74 0a ff          	lea    -0x1(%edx,%ecx,1),%esi
+80104746:	89 c1                	mov    %eax,%ecx
+80104748:	eb 17                	jmp    80104761 <safestrcpy+0x31>
+8010474a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return os;
+  while(--n > 0 && (*s++ = *t++) != 0)
+80104750:	83 c2 01             	add    $0x1,%edx
+80104753:	0f b6 5a ff          	movzbl -0x1(%edx),%ebx
+80104757:	83 c1 01             	add    $0x1,%ecx
+8010475a:	88 59 ff             	mov    %bl,-0x1(%ecx)
+8010475d:	84 db                	test   %bl,%bl
+8010475f:	74 04                	je     80104765 <safestrcpy+0x35>
+80104761:	39 f2                	cmp    %esi,%edx
+80104763:	75 eb                	jne    80104750 <safestrcpy+0x20>
+    ;
+  *s = 0;
+80104765:	c6 01 00             	movb   $0x0,(%ecx)
+  return os;
+}
+80104768:	5b                   	pop    %ebx
+80104769:	5e                   	pop    %esi
+8010476a:	5d                   	pop    %ebp
+8010476b:	c3                   	ret    
+8010476c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104770 <strlen>:
+
+int
+strlen(const char *s)
+{
+80104770:	55                   	push   %ebp
+  int n;
+
+  for(n = 0; s[n]; n++)
+80104771:	31 c0                	xor    %eax,%eax
+{
+80104773:	89 e5                	mov    %esp,%ebp
+80104775:	8b 55 08             	mov    0x8(%ebp),%edx
+  for(n = 0; s[n]; n++)
+80104778:	80 3a 00             	cmpb   $0x0,(%edx)
+8010477b:	74 0c                	je     80104789 <strlen+0x19>
+8010477d:	8d 76 00             	lea    0x0(%esi),%esi
+80104780:	83 c0 01             	add    $0x1,%eax
+80104783:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+80104787:	75 f7                	jne    80104780 <strlen+0x10>
+    ;
+  return n;
+}
+80104789:	5d                   	pop    %ebp
+8010478a:	c3                   	ret    
+
+8010478b <swtch>:
+# a struct context, and save its address in *old.
+# Switch stacks to new and pop previously-saved registers.
+
+.globl swtch
+swtch:
+  movl 4(%esp), %eax
+8010478b:	8b 44 24 04          	mov    0x4(%esp),%eax
+  movl 8(%esp), %edx
+8010478f:	8b 54 24 08          	mov    0x8(%esp),%edx
+
+  # Save old callee-saved registers
+  pushl %ebp
+80104793:	55                   	push   %ebp
+  pushl %ebx
+80104794:	53                   	push   %ebx
+  pushl %esi
+80104795:	56                   	push   %esi
+  pushl %edi
+80104796:	57                   	push   %edi
+
+  # Switch stacks
+  movl %esp, (%eax)
+80104797:	89 20                	mov    %esp,(%eax)
+  movl %edx, %esp
+80104799:	89 d4                	mov    %edx,%esp
+
+  # Load new callee-saved registers
+  popl %edi
+8010479b:	5f                   	pop    %edi
+  popl %esi
+8010479c:	5e                   	pop    %esi
+  popl %ebx
+8010479d:	5b                   	pop    %ebx
+  popl %ebp
+8010479e:	5d                   	pop    %ebp
+  ret
+8010479f:	c3                   	ret    
+
+801047a0 <fetchint>:
+// to a saved program counter, and then the first argument.
+
+// Fetch the int at addr from the current process.
+int
+fetchint(uint addr, int *ip)
+{
+801047a0:	55                   	push   %ebp
+801047a1:	89 e5                	mov    %esp,%ebp
+801047a3:	53                   	push   %ebx
+801047a4:	83 ec 04             	sub    $0x4,%esp
+801047a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *curproc = myproc();
+801047aa:	e8 21 f1 ff ff       	call   801038d0 <myproc>
+
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+801047af:	8b 00                	mov    (%eax),%eax
+801047b1:	39 d8                	cmp    %ebx,%eax
+801047b3:	76 1b                	jbe    801047d0 <fetchint+0x30>
+801047b5:	8d 53 04             	lea    0x4(%ebx),%edx
+801047b8:	39 d0                	cmp    %edx,%eax
+801047ba:	72 14                	jb     801047d0 <fetchint+0x30>
+    return -1;
+  *ip = *(int*)(addr);
+801047bc:	8b 45 0c             	mov    0xc(%ebp),%eax
+801047bf:	8b 13                	mov    (%ebx),%edx
+801047c1:	89 10                	mov    %edx,(%eax)
+  return 0;
+801047c3:	31 c0                	xor    %eax,%eax
+}
+801047c5:	83 c4 04             	add    $0x4,%esp
+801047c8:	5b                   	pop    %ebx
+801047c9:	5d                   	pop    %ebp
+801047ca:	c3                   	ret    
+801047cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801047cf:	90                   	nop
+    return -1;
+801047d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801047d5:	eb ee                	jmp    801047c5 <fetchint+0x25>
+801047d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801047de:	66 90                	xchg   %ax,%ax
+
+801047e0 <fetchstr>:
+// Fetch the nul-terminated string at addr from the current process.
+// Doesn't actually copy the string - just sets *pp to point at it.
+// Returns length of string, not including nul.
+int
+fetchstr(uint addr, char **pp)
+{
+801047e0:	55                   	push   %ebp
+801047e1:	89 e5                	mov    %esp,%ebp
+801047e3:	53                   	push   %ebx
+801047e4:	83 ec 04             	sub    $0x4,%esp
+801047e7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  char *s, *ep;
+  struct proc *curproc = myproc();
+801047ea:	e8 e1 f0 ff ff       	call   801038d0 <myproc>
+
+  if(addr >= curproc->sz)
+801047ef:	39 18                	cmp    %ebx,(%eax)
+801047f1:	76 29                	jbe    8010481c <fetchstr+0x3c>
+    return -1;
+  *pp = (char*)addr;
+801047f3:	8b 55 0c             	mov    0xc(%ebp),%edx
+801047f6:	89 1a                	mov    %ebx,(%edx)
+  ep = (char*)curproc->sz;
+801047f8:	8b 10                	mov    (%eax),%edx
+  for(s = *pp; s < ep; s++){
+801047fa:	39 d3                	cmp    %edx,%ebx
+801047fc:	73 1e                	jae    8010481c <fetchstr+0x3c>
+    if(*s == 0)
+801047fe:	80 3b 00             	cmpb   $0x0,(%ebx)
+80104801:	74 35                	je     80104838 <fetchstr+0x58>
+80104803:	89 d8                	mov    %ebx,%eax
+80104805:	eb 0e                	jmp    80104815 <fetchstr+0x35>
+80104807:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010480e:	66 90                	xchg   %ax,%ax
+80104810:	80 38 00             	cmpb   $0x0,(%eax)
+80104813:	74 1b                	je     80104830 <fetchstr+0x50>
+  for(s = *pp; s < ep; s++){
+80104815:	83 c0 01             	add    $0x1,%eax
+80104818:	39 c2                	cmp    %eax,%edx
+8010481a:	77 f4                	ja     80104810 <fetchstr+0x30>
+    return -1;
+8010481c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+      return s - *pp;
+  }
+  return -1;
+}
+80104821:	83 c4 04             	add    $0x4,%esp
+80104824:	5b                   	pop    %ebx
+80104825:	5d                   	pop    %ebp
+80104826:	c3                   	ret    
+80104827:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010482e:	66 90                	xchg   %ax,%ax
+80104830:	83 c4 04             	add    $0x4,%esp
+80104833:	29 d8                	sub    %ebx,%eax
+80104835:	5b                   	pop    %ebx
+80104836:	5d                   	pop    %ebp
+80104837:	c3                   	ret    
+    if(*s == 0)
+80104838:	31 c0                	xor    %eax,%eax
+      return s - *pp;
+8010483a:	eb e5                	jmp    80104821 <fetchstr+0x41>
+8010483c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104840 <argint>:
+
+// Fetch the nth 32-bit system call argument.
+int
+argint(int n, int *ip)
+{
+80104840:	55                   	push   %ebp
+80104841:	89 e5                	mov    %esp,%ebp
+80104843:	56                   	push   %esi
+80104844:	53                   	push   %ebx
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80104845:	e8 86 f0 ff ff       	call   801038d0 <myproc>
+8010484a:	8b 55 08             	mov    0x8(%ebp),%edx
+8010484d:	8b 40 18             	mov    0x18(%eax),%eax
+80104850:	8b 40 44             	mov    0x44(%eax),%eax
+80104853:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+  struct proc *curproc = myproc();
+80104856:	e8 75 f0 ff ff       	call   801038d0 <myproc>
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+8010485b:	8d 73 04             	lea    0x4(%ebx),%esi
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+8010485e:	8b 00                	mov    (%eax),%eax
+80104860:	39 c6                	cmp    %eax,%esi
+80104862:	73 1c                	jae    80104880 <argint+0x40>
+80104864:	8d 53 08             	lea    0x8(%ebx),%edx
+80104867:	39 d0                	cmp    %edx,%eax
+80104869:	72 15                	jb     80104880 <argint+0x40>
+  *ip = *(int*)(addr);
+8010486b:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010486e:	8b 53 04             	mov    0x4(%ebx),%edx
+80104871:	89 10                	mov    %edx,(%eax)
+  return 0;
+80104873:	31 c0                	xor    %eax,%eax
+}
+80104875:	5b                   	pop    %ebx
+80104876:	5e                   	pop    %esi
+80104877:	5d                   	pop    %ebp
+80104878:	c3                   	ret    
+80104879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80104880:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80104885:	eb ee                	jmp    80104875 <argint+0x35>
+80104887:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010488e:	66 90                	xchg   %ax,%ax
+
+80104890 <argptr>:
+// Fetch the nth word-sized system call argument as a pointer
+// to a block of memory of size bytes.  Check that the pointer
+// lies within the process address space.
+int
+argptr(int n, char **pp, int size)
+{
+80104890:	55                   	push   %ebp
+80104891:	89 e5                	mov    %esp,%ebp
+80104893:	56                   	push   %esi
+80104894:	53                   	push   %ebx
+80104895:	83 ec 10             	sub    $0x10,%esp
+80104898:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  int i;
+  struct proc *curproc = myproc();
+8010489b:	e8 30 f0 ff ff       	call   801038d0 <myproc>
+ 
+  if(argint(n, &i) < 0)
+801048a0:	83 ec 08             	sub    $0x8,%esp
+  struct proc *curproc = myproc();
+801048a3:	89 c6                	mov    %eax,%esi
+  if(argint(n, &i) < 0)
+801048a5:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801048a8:	50                   	push   %eax
+801048a9:	ff 75 08             	pushl  0x8(%ebp)
+801048ac:	e8 8f ff ff ff       	call   80104840 <argint>
+    return -1;
+  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
+801048b1:	83 c4 10             	add    $0x10,%esp
+801048b4:	85 c0                	test   %eax,%eax
+801048b6:	78 28                	js     801048e0 <argptr+0x50>
+801048b8:	85 db                	test   %ebx,%ebx
+801048ba:	78 24                	js     801048e0 <argptr+0x50>
+801048bc:	8b 16                	mov    (%esi),%edx
+801048be:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801048c1:	39 c2                	cmp    %eax,%edx
+801048c3:	76 1b                	jbe    801048e0 <argptr+0x50>
+801048c5:	01 c3                	add    %eax,%ebx
+801048c7:	39 da                	cmp    %ebx,%edx
+801048c9:	72 15                	jb     801048e0 <argptr+0x50>
+    return -1;
+  *pp = (char*)i;
+801048cb:	8b 55 0c             	mov    0xc(%ebp),%edx
+801048ce:	89 02                	mov    %eax,(%edx)
+  return 0;
+801048d0:	31 c0                	xor    %eax,%eax
+}
+801048d2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801048d5:	5b                   	pop    %ebx
+801048d6:	5e                   	pop    %esi
+801048d7:	5d                   	pop    %ebp
+801048d8:	c3                   	ret    
+801048d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+801048e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801048e5:	eb eb                	jmp    801048d2 <argptr+0x42>
+801048e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801048ee:	66 90                	xchg   %ax,%ax
+
+801048f0 <argstr>:
+// Check that the pointer is valid and the string is nul-terminated.
+// (There is no shared writable memory, so the string can't change
+// between this check and being used by the kernel.)
+int
+argstr(int n, char **pp)
+{
+801048f0:	55                   	push   %ebp
+801048f1:	89 e5                	mov    %esp,%ebp
+801048f3:	83 ec 20             	sub    $0x20,%esp
+  int addr;
+  if(argint(n, &addr) < 0)
+801048f6:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801048f9:	50                   	push   %eax
+801048fa:	ff 75 08             	pushl  0x8(%ebp)
+801048fd:	e8 3e ff ff ff       	call   80104840 <argint>
+80104902:	83 c4 10             	add    $0x10,%esp
+80104905:	85 c0                	test   %eax,%eax
+80104907:	78 17                	js     80104920 <argstr+0x30>
+    return -1;
+  return fetchstr(addr, pp);
+80104909:	83 ec 08             	sub    $0x8,%esp
+8010490c:	ff 75 0c             	pushl  0xc(%ebp)
+8010490f:	ff 75 f4             	pushl  -0xc(%ebp)
+80104912:	e8 c9 fe ff ff       	call   801047e0 <fetchstr>
+80104917:	83 c4 10             	add    $0x10,%esp
+}
+8010491a:	c9                   	leave  
+8010491b:	c3                   	ret    
+8010491c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104920:	c9                   	leave  
+    return -1;
+80104921:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104926:	c3                   	ret    
+80104927:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010492e:	66 90                	xchg   %ax,%ax
+
+80104930 <syscall>:
+[SYS_close]   sys_close,
+};
+
+void
+syscall(void)
+{
+80104930:	55                   	push   %ebp
+80104931:	89 e5                	mov    %esp,%ebp
+80104933:	53                   	push   %ebx
+80104934:	83 ec 04             	sub    $0x4,%esp
+  int num;
+  struct proc *curproc = myproc();
+80104937:	e8 94 ef ff ff       	call   801038d0 <myproc>
+8010493c:	89 c3                	mov    %eax,%ebx
+
+  num = curproc->tf->eax;
+8010493e:	8b 40 18             	mov    0x18(%eax),%eax
+80104941:	8b 40 1c             	mov    0x1c(%eax),%eax
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+80104944:	8d 50 ff             	lea    -0x1(%eax),%edx
+80104947:	83 fa 14             	cmp    $0x14,%edx
+8010494a:	77 1c                	ja     80104968 <syscall+0x38>
+8010494c:	8b 14 85 40 76 10 80 	mov    -0x7fef89c0(,%eax,4),%edx
+80104953:	85 d2                	test   %edx,%edx
+80104955:	74 11                	je     80104968 <syscall+0x38>
+    curproc->tf->eax = syscalls[num]();
+80104957:	ff d2                	call   *%edx
+80104959:	8b 53 18             	mov    0x18(%ebx),%edx
+8010495c:	89 42 1c             	mov    %eax,0x1c(%edx)
+  } else {
+    cprintf("%d %s: unknown sys call %d\n",
+            curproc->pid, curproc->name, num);
+    curproc->tf->eax = -1;
+  }
+}
+8010495f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104962:	c9                   	leave  
+80104963:	c3                   	ret    
+80104964:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    cprintf("%d %s: unknown sys call %d\n",
+80104968:	50                   	push   %eax
+            curproc->pid, curproc->name, num);
+80104969:	8d 43 6c             	lea    0x6c(%ebx),%eax
+    cprintf("%d %s: unknown sys call %d\n",
+8010496c:	50                   	push   %eax
+8010496d:	ff 73 10             	pushl  0x10(%ebx)
+80104970:	68 11 76 10 80       	push   $0x80107611
+80104975:	e8 36 bd ff ff       	call   801006b0 <cprintf>
+    curproc->tf->eax = -1;
+8010497a:	8b 43 18             	mov    0x18(%ebx),%eax
+8010497d:	83 c4 10             	add    $0x10,%esp
+80104980:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+80104987:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010498a:	c9                   	leave  
+8010498b:	c3                   	ret    
+8010498c:	66 90                	xchg   %ax,%ax
+8010498e:	66 90                	xchg   %ax,%ax
+
+80104990 <create>:
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+80104990:	55                   	push   %ebp
+80104991:	89 e5                	mov    %esp,%ebp
+80104993:	57                   	push   %edi
+80104994:	56                   	push   %esi
+80104995:	53                   	push   %ebx
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+80104996:	8d 5d da             	lea    -0x26(%ebp),%ebx
+{
+80104999:	83 ec 34             	sub    $0x34,%esp
+8010499c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+8010499f:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  if((dp = nameiparent(path, name)) == 0)
+801049a2:	53                   	push   %ebx
+801049a3:	50                   	push   %eax
+{
+801049a4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+801049a7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  if((dp = nameiparent(path, name)) == 0)
+801049aa:	e8 21 d6 ff ff       	call   80101fd0 <nameiparent>
+801049af:	83 c4 10             	add    $0x10,%esp
+801049b2:	85 c0                	test   %eax,%eax
+801049b4:	0f 84 46 01 00 00    	je     80104b00 <create+0x170>
+    return 0;
+  ilock(dp);
+801049ba:	83 ec 0c             	sub    $0xc,%esp
+801049bd:	89 c6                	mov    %eax,%esi
+801049bf:	50                   	push   %eax
+801049c0:	e8 4b cd ff ff       	call   80101710 <ilock>
+
+  if((ip = dirlookup(dp, name, 0)) != 0){
+801049c5:	83 c4 0c             	add    $0xc,%esp
+801049c8:	6a 00                	push   $0x0
+801049ca:	53                   	push   %ebx
+801049cb:	56                   	push   %esi
+801049cc:	e8 6f d2 ff ff       	call   80101c40 <dirlookup>
+801049d1:	83 c4 10             	add    $0x10,%esp
+801049d4:	89 c7                	mov    %eax,%edi
+801049d6:	85 c0                	test   %eax,%eax
+801049d8:	74 56                	je     80104a30 <create+0xa0>
+    iunlockput(dp);
+801049da:	83 ec 0c             	sub    $0xc,%esp
+801049dd:	56                   	push   %esi
+801049de:	e8 bd cf ff ff       	call   801019a0 <iunlockput>
+    ilock(ip);
+801049e3:	89 3c 24             	mov    %edi,(%esp)
+801049e6:	e8 25 cd ff ff       	call   80101710 <ilock>
+    if(type == T_FILE && ip->type == T_FILE)
+801049eb:	83 c4 10             	add    $0x10,%esp
+801049ee:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+801049f3:	75 1b                	jne    80104a10 <create+0x80>
+801049f5:	66 83 7f 50 02       	cmpw   $0x2,0x50(%edi)
+801049fa:	75 14                	jne    80104a10 <create+0x80>
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+801049fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801049ff:	89 f8                	mov    %edi,%eax
+80104a01:	5b                   	pop    %ebx
+80104a02:	5e                   	pop    %esi
+80104a03:	5f                   	pop    %edi
+80104a04:	5d                   	pop    %ebp
+80104a05:	c3                   	ret    
+80104a06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a0d:	8d 76 00             	lea    0x0(%esi),%esi
+    iunlockput(ip);
+80104a10:	83 ec 0c             	sub    $0xc,%esp
+80104a13:	57                   	push   %edi
+    return 0;
+80104a14:	31 ff                	xor    %edi,%edi
+    iunlockput(ip);
+80104a16:	e8 85 cf ff ff       	call   801019a0 <iunlockput>
+    return 0;
+80104a1b:	83 c4 10             	add    $0x10,%esp
+}
+80104a1e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104a21:	89 f8                	mov    %edi,%eax
+80104a23:	5b                   	pop    %ebx
+80104a24:	5e                   	pop    %esi
+80104a25:	5f                   	pop    %edi
+80104a26:	5d                   	pop    %ebp
+80104a27:	c3                   	ret    
+80104a28:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a2f:	90                   	nop
+  if((ip = ialloc(dp->dev, type)) == 0)
+80104a30:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+80104a34:	83 ec 08             	sub    $0x8,%esp
+80104a37:	50                   	push   %eax
+80104a38:	ff 36                	pushl  (%esi)
+80104a3a:	e8 61 cb ff ff       	call   801015a0 <ialloc>
+80104a3f:	83 c4 10             	add    $0x10,%esp
+80104a42:	89 c7                	mov    %eax,%edi
+80104a44:	85 c0                	test   %eax,%eax
+80104a46:	0f 84 cd 00 00 00    	je     80104b19 <create+0x189>
+  ilock(ip);
+80104a4c:	83 ec 0c             	sub    $0xc,%esp
+80104a4f:	50                   	push   %eax
+80104a50:	e8 bb cc ff ff       	call   80101710 <ilock>
+  ip->major = major;
+80104a55:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+80104a59:	66 89 47 52          	mov    %ax,0x52(%edi)
+  ip->minor = minor;
+80104a5d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80104a61:	66 89 47 54          	mov    %ax,0x54(%edi)
+  ip->nlink = 1;
+80104a65:	b8 01 00 00 00       	mov    $0x1,%eax
+80104a6a:	66 89 47 56          	mov    %ax,0x56(%edi)
+  iupdate(ip);
+80104a6e:	89 3c 24             	mov    %edi,(%esp)
+80104a71:	e8 ea cb ff ff       	call   80101660 <iupdate>
+  if(type == T_DIR){  // Create . and .. entries.
+80104a76:	83 c4 10             	add    $0x10,%esp
+80104a79:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+80104a7e:	74 30                	je     80104ab0 <create+0x120>
+  if(dirlink(dp, name, ip->inum) < 0)
+80104a80:	83 ec 04             	sub    $0x4,%esp
+80104a83:	ff 77 04             	pushl  0x4(%edi)
+80104a86:	53                   	push   %ebx
+80104a87:	56                   	push   %esi
+80104a88:	e8 63 d4 ff ff       	call   80101ef0 <dirlink>
+80104a8d:	83 c4 10             	add    $0x10,%esp
+80104a90:	85 c0                	test   %eax,%eax
+80104a92:	78 78                	js     80104b0c <create+0x17c>
+  iunlockput(dp);
+80104a94:	83 ec 0c             	sub    $0xc,%esp
+80104a97:	56                   	push   %esi
+80104a98:	e8 03 cf ff ff       	call   801019a0 <iunlockput>
+  return ip;
+80104a9d:	83 c4 10             	add    $0x10,%esp
+}
+80104aa0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104aa3:	89 f8                	mov    %edi,%eax
+80104aa5:	5b                   	pop    %ebx
+80104aa6:	5e                   	pop    %esi
+80104aa7:	5f                   	pop    %edi
+80104aa8:	5d                   	pop    %ebp
+80104aa9:	c3                   	ret    
+80104aaa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    iupdate(dp);
+80104ab0:	83 ec 0c             	sub    $0xc,%esp
+    dp->nlink++;  // for ".."
+80104ab3:	66 83 46 56 01       	addw   $0x1,0x56(%esi)
+    iupdate(dp);
+80104ab8:	56                   	push   %esi
+80104ab9:	e8 a2 cb ff ff       	call   80101660 <iupdate>
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+80104abe:	83 c4 0c             	add    $0xc,%esp
+80104ac1:	ff 77 04             	pushl  0x4(%edi)
+80104ac4:	68 b4 76 10 80       	push   $0x801076b4
+80104ac9:	57                   	push   %edi
+80104aca:	e8 21 d4 ff ff       	call   80101ef0 <dirlink>
+80104acf:	83 c4 10             	add    $0x10,%esp
+80104ad2:	85 c0                	test   %eax,%eax
+80104ad4:	78 18                	js     80104aee <create+0x15e>
+80104ad6:	83 ec 04             	sub    $0x4,%esp
+80104ad9:	ff 76 04             	pushl  0x4(%esi)
+80104adc:	68 b3 76 10 80       	push   $0x801076b3
+80104ae1:	57                   	push   %edi
+80104ae2:	e8 09 d4 ff ff       	call   80101ef0 <dirlink>
+80104ae7:	83 c4 10             	add    $0x10,%esp
+80104aea:	85 c0                	test   %eax,%eax
+80104aec:	79 92                	jns    80104a80 <create+0xf0>
+      panic("create dots");
+80104aee:	83 ec 0c             	sub    $0xc,%esp
+80104af1:	68 a7 76 10 80       	push   $0x801076a7
+80104af6:	e8 95 b8 ff ff       	call   80100390 <panic>
+80104afb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104aff:	90                   	nop
+}
+80104b00:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return 0;
+80104b03:	31 ff                	xor    %edi,%edi
+}
+80104b05:	5b                   	pop    %ebx
+80104b06:	89 f8                	mov    %edi,%eax
+80104b08:	5e                   	pop    %esi
+80104b09:	5f                   	pop    %edi
+80104b0a:	5d                   	pop    %ebp
+80104b0b:	c3                   	ret    
+    panic("create: dirlink");
+80104b0c:	83 ec 0c             	sub    $0xc,%esp
+80104b0f:	68 b6 76 10 80       	push   $0x801076b6
+80104b14:	e8 77 b8 ff ff       	call   80100390 <panic>
+    panic("create: ialloc");
+80104b19:	83 ec 0c             	sub    $0xc,%esp
+80104b1c:	68 98 76 10 80       	push   $0x80107698
+80104b21:	e8 6a b8 ff ff       	call   80100390 <panic>
+80104b26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b2d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104b30 <argfd.constprop.0>:
+argfd(int n, int *pfd, struct file **pf)
+80104b30:	55                   	push   %ebp
+80104b31:	89 e5                	mov    %esp,%ebp
+80104b33:	56                   	push   %esi
+80104b34:	89 d6                	mov    %edx,%esi
+80104b36:	53                   	push   %ebx
+80104b37:	89 c3                	mov    %eax,%ebx
+  if(argint(n, &fd) < 0)
+80104b39:	8d 45 f4             	lea    -0xc(%ebp),%eax
+argfd(int n, int *pfd, struct file **pf)
+80104b3c:	83 ec 18             	sub    $0x18,%esp
+  if(argint(n, &fd) < 0)
+80104b3f:	50                   	push   %eax
+80104b40:	6a 00                	push   $0x0
+80104b42:	e8 f9 fc ff ff       	call   80104840 <argint>
+80104b47:	83 c4 10             	add    $0x10,%esp
+80104b4a:	85 c0                	test   %eax,%eax
+80104b4c:	78 2a                	js     80104b78 <argfd.constprop.0+0x48>
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80104b4e:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80104b52:	77 24                	ja     80104b78 <argfd.constprop.0+0x48>
+80104b54:	e8 77 ed ff ff       	call   801038d0 <myproc>
+80104b59:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104b5c:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
+80104b60:	85 c0                	test   %eax,%eax
+80104b62:	74 14                	je     80104b78 <argfd.constprop.0+0x48>
+  if(pfd)
+80104b64:	85 db                	test   %ebx,%ebx
+80104b66:	74 02                	je     80104b6a <argfd.constprop.0+0x3a>
+    *pfd = fd;
+80104b68:	89 13                	mov    %edx,(%ebx)
+    *pf = f;
+80104b6a:	89 06                	mov    %eax,(%esi)
+  return 0;
+80104b6c:	31 c0                	xor    %eax,%eax
+}
+80104b6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104b71:	5b                   	pop    %ebx
+80104b72:	5e                   	pop    %esi
+80104b73:	5d                   	pop    %ebp
+80104b74:	c3                   	ret    
+80104b75:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80104b78:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104b7d:	eb ef                	jmp    80104b6e <argfd.constprop.0+0x3e>
+80104b7f:	90                   	nop
+
+80104b80 <sys_dup>:
+{
+80104b80:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0)
+80104b81:	31 c0                	xor    %eax,%eax
+{
+80104b83:	89 e5                	mov    %esp,%ebp
+80104b85:	56                   	push   %esi
+80104b86:	53                   	push   %ebx
+  if(argfd(0, 0, &f) < 0)
+80104b87:	8d 55 f4             	lea    -0xc(%ebp),%edx
+{
+80104b8a:	83 ec 10             	sub    $0x10,%esp
+  if(argfd(0, 0, &f) < 0)
+80104b8d:	e8 9e ff ff ff       	call   80104b30 <argfd.constprop.0>
+80104b92:	85 c0                	test   %eax,%eax
+80104b94:	78 1a                	js     80104bb0 <sys_dup+0x30>
+  if((fd=fdalloc(f)) < 0)
+80104b96:	8b 75 f4             	mov    -0xc(%ebp),%esi
+  for(fd = 0; fd < NOFILE; fd++){
+80104b99:	31 db                	xor    %ebx,%ebx
+  struct proc *curproc = myproc();
+80104b9b:	e8 30 ed ff ff       	call   801038d0 <myproc>
+    if(curproc->ofile[fd] == 0){
+80104ba0:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80104ba4:	85 d2                	test   %edx,%edx
+80104ba6:	74 18                	je     80104bc0 <sys_dup+0x40>
+  for(fd = 0; fd < NOFILE; fd++){
+80104ba8:	83 c3 01             	add    $0x1,%ebx
+80104bab:	83 fb 10             	cmp    $0x10,%ebx
+80104bae:	75 f0                	jne    80104ba0 <sys_dup+0x20>
+}
+80104bb0:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    return -1;
+80104bb3:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+}
+80104bb8:	89 d8                	mov    %ebx,%eax
+80104bba:	5b                   	pop    %ebx
+80104bbb:	5e                   	pop    %esi
+80104bbc:	5d                   	pop    %ebp
+80104bbd:	c3                   	ret    
+80104bbe:	66 90                	xchg   %ax,%ax
+      curproc->ofile[fd] = f;
+80104bc0:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+  filedup(f);
+80104bc4:	83 ec 0c             	sub    $0xc,%esp
+80104bc7:	ff 75 f4             	pushl  -0xc(%ebp)
+80104bca:	e8 a1 c2 ff ff       	call   80100e70 <filedup>
+  return fd;
+80104bcf:	83 c4 10             	add    $0x10,%esp
+}
+80104bd2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104bd5:	89 d8                	mov    %ebx,%eax
+80104bd7:	5b                   	pop    %ebx
+80104bd8:	5e                   	pop    %esi
+80104bd9:	5d                   	pop    %ebp
+80104bda:	c3                   	ret    
+80104bdb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104bdf:	90                   	nop
+
+80104be0 <sys_read>:
+{
+80104be0:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104be1:	31 c0                	xor    %eax,%eax
+{
+80104be3:	89 e5                	mov    %esp,%ebp
+80104be5:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104be8:	8d 55 ec             	lea    -0x14(%ebp),%edx
+80104beb:	e8 40 ff ff ff       	call   80104b30 <argfd.constprop.0>
+80104bf0:	85 c0                	test   %eax,%eax
+80104bf2:	78 4c                	js     80104c40 <sys_read+0x60>
+80104bf4:	83 ec 08             	sub    $0x8,%esp
+80104bf7:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104bfa:	50                   	push   %eax
+80104bfb:	6a 02                	push   $0x2
+80104bfd:	e8 3e fc ff ff       	call   80104840 <argint>
+80104c02:	83 c4 10             	add    $0x10,%esp
+80104c05:	85 c0                	test   %eax,%eax
+80104c07:	78 37                	js     80104c40 <sys_read+0x60>
+80104c09:	83 ec 04             	sub    $0x4,%esp
+80104c0c:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104c0f:	ff 75 f0             	pushl  -0x10(%ebp)
+80104c12:	50                   	push   %eax
+80104c13:	6a 01                	push   $0x1
+80104c15:	e8 76 fc ff ff       	call   80104890 <argptr>
+80104c1a:	83 c4 10             	add    $0x10,%esp
+80104c1d:	85 c0                	test   %eax,%eax
+80104c1f:	78 1f                	js     80104c40 <sys_read+0x60>
+  return fileread(f, p, n);
+80104c21:	83 ec 04             	sub    $0x4,%esp
+80104c24:	ff 75 f0             	pushl  -0x10(%ebp)
+80104c27:	ff 75 f4             	pushl  -0xc(%ebp)
+80104c2a:	ff 75 ec             	pushl  -0x14(%ebp)
+80104c2d:	e8 be c3 ff ff       	call   80100ff0 <fileread>
+80104c32:	83 c4 10             	add    $0x10,%esp
+}
+80104c35:	c9                   	leave  
+80104c36:	c3                   	ret    
+80104c37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104c3e:	66 90                	xchg   %ax,%ax
+80104c40:	c9                   	leave  
+    return -1;
+80104c41:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104c46:	c3                   	ret    
+80104c47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104c4e:	66 90                	xchg   %ax,%ax
+
+80104c50 <sys_write>:
+{
+80104c50:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104c51:	31 c0                	xor    %eax,%eax
+{
+80104c53:	89 e5                	mov    %esp,%ebp
+80104c55:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104c58:	8d 55 ec             	lea    -0x14(%ebp),%edx
+80104c5b:	e8 d0 fe ff ff       	call   80104b30 <argfd.constprop.0>
+80104c60:	85 c0                	test   %eax,%eax
+80104c62:	78 4c                	js     80104cb0 <sys_write+0x60>
+80104c64:	83 ec 08             	sub    $0x8,%esp
+80104c67:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104c6a:	50                   	push   %eax
+80104c6b:	6a 02                	push   $0x2
+80104c6d:	e8 ce fb ff ff       	call   80104840 <argint>
+80104c72:	83 c4 10             	add    $0x10,%esp
+80104c75:	85 c0                	test   %eax,%eax
+80104c77:	78 37                	js     80104cb0 <sys_write+0x60>
+80104c79:	83 ec 04             	sub    $0x4,%esp
+80104c7c:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104c7f:	ff 75 f0             	pushl  -0x10(%ebp)
+80104c82:	50                   	push   %eax
+80104c83:	6a 01                	push   $0x1
+80104c85:	e8 06 fc ff ff       	call   80104890 <argptr>
+80104c8a:	83 c4 10             	add    $0x10,%esp
+80104c8d:	85 c0                	test   %eax,%eax
+80104c8f:	78 1f                	js     80104cb0 <sys_write+0x60>
+  return filewrite(f, p, n);
+80104c91:	83 ec 04             	sub    $0x4,%esp
+80104c94:	ff 75 f0             	pushl  -0x10(%ebp)
+80104c97:	ff 75 f4             	pushl  -0xc(%ebp)
+80104c9a:	ff 75 ec             	pushl  -0x14(%ebp)
+80104c9d:	e8 de c3 ff ff       	call   80101080 <filewrite>
+80104ca2:	83 c4 10             	add    $0x10,%esp
+}
+80104ca5:	c9                   	leave  
+80104ca6:	c3                   	ret    
+80104ca7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104cae:	66 90                	xchg   %ax,%ax
+80104cb0:	c9                   	leave  
+    return -1;
+80104cb1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104cb6:	c3                   	ret    
+80104cb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104cbe:	66 90                	xchg   %ax,%ax
+
+80104cc0 <sys_close>:
+{
+80104cc0:	55                   	push   %ebp
+80104cc1:	89 e5                	mov    %esp,%ebp
+80104cc3:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, &fd, &f) < 0)
+80104cc6:	8d 55 f4             	lea    -0xc(%ebp),%edx
+80104cc9:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104ccc:	e8 5f fe ff ff       	call   80104b30 <argfd.constprop.0>
+80104cd1:	85 c0                	test   %eax,%eax
+80104cd3:	78 2b                	js     80104d00 <sys_close+0x40>
+  myproc()->ofile[fd] = 0;
+80104cd5:	e8 f6 eb ff ff       	call   801038d0 <myproc>
+80104cda:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  fileclose(f);
+80104cdd:	83 ec 0c             	sub    $0xc,%esp
+  myproc()->ofile[fd] = 0;
+80104ce0:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
+80104ce7:	00 
+  fileclose(f);
+80104ce8:	ff 75 f4             	pushl  -0xc(%ebp)
+80104ceb:	e8 d0 c1 ff ff       	call   80100ec0 <fileclose>
+  return 0;
+80104cf0:	83 c4 10             	add    $0x10,%esp
+80104cf3:	31 c0                	xor    %eax,%eax
+}
+80104cf5:	c9                   	leave  
+80104cf6:	c3                   	ret    
+80104cf7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104cfe:	66 90                	xchg   %ax,%ax
+80104d00:	c9                   	leave  
+    return -1;
+80104d01:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104d06:	c3                   	ret    
+80104d07:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d0e:	66 90                	xchg   %ax,%ax
+
+80104d10 <sys_fstat>:
+{
+80104d10:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+80104d11:	31 c0                	xor    %eax,%eax
+{
+80104d13:	89 e5                	mov    %esp,%ebp
+80104d15:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+80104d18:	8d 55 f0             	lea    -0x10(%ebp),%edx
+80104d1b:	e8 10 fe ff ff       	call   80104b30 <argfd.constprop.0>
+80104d20:	85 c0                	test   %eax,%eax
+80104d22:	78 2c                	js     80104d50 <sys_fstat+0x40>
+80104d24:	83 ec 04             	sub    $0x4,%esp
+80104d27:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104d2a:	6a 14                	push   $0x14
+80104d2c:	50                   	push   %eax
+80104d2d:	6a 01                	push   $0x1
+80104d2f:	e8 5c fb ff ff       	call   80104890 <argptr>
+80104d34:	83 c4 10             	add    $0x10,%esp
+80104d37:	85 c0                	test   %eax,%eax
+80104d39:	78 15                	js     80104d50 <sys_fstat+0x40>
+  return filestat(f, st);
+80104d3b:	83 ec 08             	sub    $0x8,%esp
+80104d3e:	ff 75 f4             	pushl  -0xc(%ebp)
+80104d41:	ff 75 f0             	pushl  -0x10(%ebp)
+80104d44:	e8 57 c2 ff ff       	call   80100fa0 <filestat>
+80104d49:	83 c4 10             	add    $0x10,%esp
+}
+80104d4c:	c9                   	leave  
+80104d4d:	c3                   	ret    
+80104d4e:	66 90                	xchg   %ax,%ax
+80104d50:	c9                   	leave  
+    return -1;
+80104d51:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104d56:	c3                   	ret    
+80104d57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d5e:	66 90                	xchg   %ax,%ax
+
+80104d60 <sys_link>:
+{
+80104d60:	55                   	push   %ebp
+80104d61:	89 e5                	mov    %esp,%ebp
+80104d63:	57                   	push   %edi
+80104d64:	56                   	push   %esi
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+80104d65:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+{
+80104d68:	53                   	push   %ebx
+80104d69:	83 ec 34             	sub    $0x34,%esp
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+80104d6c:	50                   	push   %eax
+80104d6d:	6a 00                	push   $0x0
+80104d6f:	e8 7c fb ff ff       	call   801048f0 <argstr>
+80104d74:	83 c4 10             	add    $0x10,%esp
+80104d77:	85 c0                	test   %eax,%eax
+80104d79:	0f 88 fb 00 00 00    	js     80104e7a <sys_link+0x11a>
+80104d7f:	83 ec 08             	sub    $0x8,%esp
+80104d82:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80104d85:	50                   	push   %eax
+80104d86:	6a 01                	push   $0x1
+80104d88:	e8 63 fb ff ff       	call   801048f0 <argstr>
+80104d8d:	83 c4 10             	add    $0x10,%esp
+80104d90:	85 c0                	test   %eax,%eax
+80104d92:	0f 88 e2 00 00 00    	js     80104e7a <sys_link+0x11a>
+  begin_op();
+80104d98:	e8 f3 de ff ff       	call   80102c90 <begin_op>
+  if((ip = namei(old)) == 0){
+80104d9d:	83 ec 0c             	sub    $0xc,%esp
+80104da0:	ff 75 d4             	pushl  -0x2c(%ebp)
+80104da3:	e8 08 d2 ff ff       	call   80101fb0 <namei>
+80104da8:	83 c4 10             	add    $0x10,%esp
+80104dab:	89 c3                	mov    %eax,%ebx
+80104dad:	85 c0                	test   %eax,%eax
+80104daf:	0f 84 e4 00 00 00    	je     80104e99 <sys_link+0x139>
+  ilock(ip);
+80104db5:	83 ec 0c             	sub    $0xc,%esp
+80104db8:	50                   	push   %eax
+80104db9:	e8 52 c9 ff ff       	call   80101710 <ilock>
+  if(ip->type == T_DIR){
+80104dbe:	83 c4 10             	add    $0x10,%esp
+80104dc1:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80104dc6:	0f 84 b5 00 00 00    	je     80104e81 <sys_link+0x121>
+  iupdate(ip);
+80104dcc:	83 ec 0c             	sub    $0xc,%esp
+  ip->nlink++;
+80104dcf:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+  if((dp = nameiparent(new, name)) == 0)
+80104dd4:	8d 7d da             	lea    -0x26(%ebp),%edi
+  iupdate(ip);
+80104dd7:	53                   	push   %ebx
+80104dd8:	e8 83 c8 ff ff       	call   80101660 <iupdate>
+  iunlock(ip);
+80104ddd:	89 1c 24             	mov    %ebx,(%esp)
+80104de0:	e8 0b ca ff ff       	call   801017f0 <iunlock>
+  if((dp = nameiparent(new, name)) == 0)
+80104de5:	58                   	pop    %eax
+80104de6:	5a                   	pop    %edx
+80104de7:	57                   	push   %edi
+80104de8:	ff 75 d0             	pushl  -0x30(%ebp)
+80104deb:	e8 e0 d1 ff ff       	call   80101fd0 <nameiparent>
+80104df0:	83 c4 10             	add    $0x10,%esp
+80104df3:	89 c6                	mov    %eax,%esi
+80104df5:	85 c0                	test   %eax,%eax
+80104df7:	74 5b                	je     80104e54 <sys_link+0xf4>
+  ilock(dp);
+80104df9:	83 ec 0c             	sub    $0xc,%esp
+80104dfc:	50                   	push   %eax
+80104dfd:	e8 0e c9 ff ff       	call   80101710 <ilock>
+  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+80104e02:	83 c4 10             	add    $0x10,%esp
+80104e05:	8b 03                	mov    (%ebx),%eax
+80104e07:	39 06                	cmp    %eax,(%esi)
+80104e09:	75 3d                	jne    80104e48 <sys_link+0xe8>
+80104e0b:	83 ec 04             	sub    $0x4,%esp
+80104e0e:	ff 73 04             	pushl  0x4(%ebx)
+80104e11:	57                   	push   %edi
+80104e12:	56                   	push   %esi
+80104e13:	e8 d8 d0 ff ff       	call   80101ef0 <dirlink>
+80104e18:	83 c4 10             	add    $0x10,%esp
+80104e1b:	85 c0                	test   %eax,%eax
+80104e1d:	78 29                	js     80104e48 <sys_link+0xe8>
+  iunlockput(dp);
+80104e1f:	83 ec 0c             	sub    $0xc,%esp
+80104e22:	56                   	push   %esi
+80104e23:	e8 78 cb ff ff       	call   801019a0 <iunlockput>
+  iput(ip);
+80104e28:	89 1c 24             	mov    %ebx,(%esp)
+80104e2b:	e8 10 ca ff ff       	call   80101840 <iput>
+  end_op();
+80104e30:	e8 cb de ff ff       	call   80102d00 <end_op>
+  return 0;
+80104e35:	83 c4 10             	add    $0x10,%esp
+80104e38:	31 c0                	xor    %eax,%eax
+}
+80104e3a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104e3d:	5b                   	pop    %ebx
+80104e3e:	5e                   	pop    %esi
+80104e3f:	5f                   	pop    %edi
+80104e40:	5d                   	pop    %ebp
+80104e41:	c3                   	ret    
+80104e42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    iunlockput(dp);
+80104e48:	83 ec 0c             	sub    $0xc,%esp
+80104e4b:	56                   	push   %esi
+80104e4c:	e8 4f cb ff ff       	call   801019a0 <iunlockput>
+    goto bad;
+80104e51:	83 c4 10             	add    $0x10,%esp
+  ilock(ip);
+80104e54:	83 ec 0c             	sub    $0xc,%esp
+80104e57:	53                   	push   %ebx
+80104e58:	e8 b3 c8 ff ff       	call   80101710 <ilock>
+  ip->nlink--;
+80104e5d:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+  iupdate(ip);
+80104e62:	89 1c 24             	mov    %ebx,(%esp)
+80104e65:	e8 f6 c7 ff ff       	call   80101660 <iupdate>
+  iunlockput(ip);
+80104e6a:	89 1c 24             	mov    %ebx,(%esp)
+80104e6d:	e8 2e cb ff ff       	call   801019a0 <iunlockput>
+  end_op();
+80104e72:	e8 89 de ff ff       	call   80102d00 <end_op>
+  return -1;
+80104e77:	83 c4 10             	add    $0x10,%esp
+80104e7a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104e7f:	eb b9                	jmp    80104e3a <sys_link+0xda>
+    iunlockput(ip);
+80104e81:	83 ec 0c             	sub    $0xc,%esp
+80104e84:	53                   	push   %ebx
+80104e85:	e8 16 cb ff ff       	call   801019a0 <iunlockput>
+    end_op();
+80104e8a:	e8 71 de ff ff       	call   80102d00 <end_op>
+    return -1;
+80104e8f:	83 c4 10             	add    $0x10,%esp
+80104e92:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104e97:	eb a1                	jmp    80104e3a <sys_link+0xda>
+    end_op();
+80104e99:	e8 62 de ff ff       	call   80102d00 <end_op>
+    return -1;
+80104e9e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104ea3:	eb 95                	jmp    80104e3a <sys_link+0xda>
+80104ea5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104eac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104eb0 <sys_unlink>:
+{
+80104eb0:	55                   	push   %ebp
+80104eb1:	89 e5                	mov    %esp,%ebp
+80104eb3:	57                   	push   %edi
+80104eb4:	56                   	push   %esi
+  if(argstr(0, &path) < 0)
+80104eb5:	8d 45 c0             	lea    -0x40(%ebp),%eax
+{
+80104eb8:	53                   	push   %ebx
+80104eb9:	83 ec 54             	sub    $0x54,%esp
+  if(argstr(0, &path) < 0)
+80104ebc:	50                   	push   %eax
+80104ebd:	6a 00                	push   $0x0
+80104ebf:	e8 2c fa ff ff       	call   801048f0 <argstr>
+80104ec4:	83 c4 10             	add    $0x10,%esp
+80104ec7:	85 c0                	test   %eax,%eax
+80104ec9:	0f 88 91 01 00 00    	js     80105060 <sys_unlink+0x1b0>
+  begin_op();
+80104ecf:	e8 bc dd ff ff       	call   80102c90 <begin_op>
+  if((dp = nameiparent(path, name)) == 0){
+80104ed4:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+80104ed7:	83 ec 08             	sub    $0x8,%esp
+80104eda:	53                   	push   %ebx
+80104edb:	ff 75 c0             	pushl  -0x40(%ebp)
+80104ede:	e8 ed d0 ff ff       	call   80101fd0 <nameiparent>
+80104ee3:	83 c4 10             	add    $0x10,%esp
+80104ee6:	89 c6                	mov    %eax,%esi
+80104ee8:	85 c0                	test   %eax,%eax
+80104eea:	0f 84 7a 01 00 00    	je     8010506a <sys_unlink+0x1ba>
+  ilock(dp);
+80104ef0:	83 ec 0c             	sub    $0xc,%esp
+80104ef3:	50                   	push   %eax
+80104ef4:	e8 17 c8 ff ff       	call   80101710 <ilock>
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+80104ef9:	58                   	pop    %eax
+80104efa:	5a                   	pop    %edx
+80104efb:	68 b4 76 10 80       	push   $0x801076b4
+80104f00:	53                   	push   %ebx
+80104f01:	e8 1a cd ff ff       	call   80101c20 <namecmp>
+80104f06:	83 c4 10             	add    $0x10,%esp
+80104f09:	85 c0                	test   %eax,%eax
+80104f0b:	0f 84 0f 01 00 00    	je     80105020 <sys_unlink+0x170>
+80104f11:	83 ec 08             	sub    $0x8,%esp
+80104f14:	68 b3 76 10 80       	push   $0x801076b3
+80104f19:	53                   	push   %ebx
+80104f1a:	e8 01 cd ff ff       	call   80101c20 <namecmp>
+80104f1f:	83 c4 10             	add    $0x10,%esp
+80104f22:	85 c0                	test   %eax,%eax
+80104f24:	0f 84 f6 00 00 00    	je     80105020 <sys_unlink+0x170>
+  if((ip = dirlookup(dp, name, &off)) == 0)
+80104f2a:	83 ec 04             	sub    $0x4,%esp
+80104f2d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+80104f30:	50                   	push   %eax
+80104f31:	53                   	push   %ebx
+80104f32:	56                   	push   %esi
+80104f33:	e8 08 cd ff ff       	call   80101c40 <dirlookup>
+80104f38:	83 c4 10             	add    $0x10,%esp
+80104f3b:	89 c3                	mov    %eax,%ebx
+80104f3d:	85 c0                	test   %eax,%eax
+80104f3f:	0f 84 db 00 00 00    	je     80105020 <sys_unlink+0x170>
+  ilock(ip);
+80104f45:	83 ec 0c             	sub    $0xc,%esp
+80104f48:	50                   	push   %eax
+80104f49:	e8 c2 c7 ff ff       	call   80101710 <ilock>
+  if(ip->nlink < 1)
+80104f4e:	83 c4 10             	add    $0x10,%esp
+80104f51:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+80104f56:	0f 8e 37 01 00 00    	jle    80105093 <sys_unlink+0x1e3>
+  if(ip->type == T_DIR && !isdirempty(ip)){
+80104f5c:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80104f61:	8d 7d d8             	lea    -0x28(%ebp),%edi
+80104f64:	74 6a                	je     80104fd0 <sys_unlink+0x120>
+  memset(&de, 0, sizeof(de));
+80104f66:	83 ec 04             	sub    $0x4,%esp
+80104f69:	6a 10                	push   $0x10
+80104f6b:	6a 00                	push   $0x0
+80104f6d:	57                   	push   %edi
+80104f6e:	e8 ed f5 ff ff       	call   80104560 <memset>
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80104f73:	6a 10                	push   $0x10
+80104f75:	ff 75 c4             	pushl  -0x3c(%ebp)
+80104f78:	57                   	push   %edi
+80104f79:	56                   	push   %esi
+80104f7a:	e8 71 cb ff ff       	call   80101af0 <writei>
+80104f7f:	83 c4 20             	add    $0x20,%esp
+80104f82:	83 f8 10             	cmp    $0x10,%eax
+80104f85:	0f 85 fb 00 00 00    	jne    80105086 <sys_unlink+0x1d6>
+  if(ip->type == T_DIR){
+80104f8b:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80104f90:	0f 84 aa 00 00 00    	je     80105040 <sys_unlink+0x190>
+  iunlockput(dp);
+80104f96:	83 ec 0c             	sub    $0xc,%esp
+80104f99:	56                   	push   %esi
+80104f9a:	e8 01 ca ff ff       	call   801019a0 <iunlockput>
+  ip->nlink--;
+80104f9f:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+  iupdate(ip);
+80104fa4:	89 1c 24             	mov    %ebx,(%esp)
+80104fa7:	e8 b4 c6 ff ff       	call   80101660 <iupdate>
+  iunlockput(ip);
+80104fac:	89 1c 24             	mov    %ebx,(%esp)
+80104faf:	e8 ec c9 ff ff       	call   801019a0 <iunlockput>
+  end_op();
+80104fb4:	e8 47 dd ff ff       	call   80102d00 <end_op>
+  return 0;
+80104fb9:	83 c4 10             	add    $0x10,%esp
+80104fbc:	31 c0                	xor    %eax,%eax
+}
+80104fbe:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104fc1:	5b                   	pop    %ebx
+80104fc2:	5e                   	pop    %esi
+80104fc3:	5f                   	pop    %edi
+80104fc4:	5d                   	pop    %ebp
+80104fc5:	c3                   	ret    
+80104fc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104fcd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+80104fd0:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+80104fd4:	76 90                	jbe    80104f66 <sys_unlink+0xb6>
+80104fd6:	ba 20 00 00 00       	mov    $0x20,%edx
+80104fdb:	eb 0f                	jmp    80104fec <sys_unlink+0x13c>
+80104fdd:	8d 76 00             	lea    0x0(%esi),%esi
+80104fe0:	83 c2 10             	add    $0x10,%edx
+80104fe3:	39 53 58             	cmp    %edx,0x58(%ebx)
+80104fe6:	0f 86 7a ff ff ff    	jbe    80104f66 <sys_unlink+0xb6>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80104fec:	6a 10                	push   $0x10
+80104fee:	52                   	push   %edx
+80104fef:	57                   	push   %edi
+80104ff0:	53                   	push   %ebx
+80104ff1:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+80104ff4:	e8 f7 c9 ff ff       	call   801019f0 <readi>
+80104ff9:	83 c4 10             	add    $0x10,%esp
+80104ffc:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+80104fff:	83 f8 10             	cmp    $0x10,%eax
+80105002:	75 75                	jne    80105079 <sys_unlink+0x1c9>
+    if(de.inum != 0)
+80105004:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80105009:	74 d5                	je     80104fe0 <sys_unlink+0x130>
+    iunlockput(ip);
+8010500b:	83 ec 0c             	sub    $0xc,%esp
+8010500e:	53                   	push   %ebx
+8010500f:	e8 8c c9 ff ff       	call   801019a0 <iunlockput>
+    goto bad;
+80105014:	83 c4 10             	add    $0x10,%esp
+80105017:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010501e:	66 90                	xchg   %ax,%ax
+  iunlockput(dp);
+80105020:	83 ec 0c             	sub    $0xc,%esp
+80105023:	56                   	push   %esi
+80105024:	e8 77 c9 ff ff       	call   801019a0 <iunlockput>
+  end_op();
+80105029:	e8 d2 dc ff ff       	call   80102d00 <end_op>
+  return -1;
+8010502e:	83 c4 10             	add    $0x10,%esp
+80105031:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105036:	eb 86                	jmp    80104fbe <sys_unlink+0x10e>
+80105038:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010503f:	90                   	nop
+    iupdate(dp);
+80105040:	83 ec 0c             	sub    $0xc,%esp
+    dp->nlink--;
+80105043:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
+    iupdate(dp);
+80105048:	56                   	push   %esi
+80105049:	e8 12 c6 ff ff       	call   80101660 <iupdate>
+8010504e:	83 c4 10             	add    $0x10,%esp
+80105051:	e9 40 ff ff ff       	jmp    80104f96 <sys_unlink+0xe6>
+80105056:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010505d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105060:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105065:	e9 54 ff ff ff       	jmp    80104fbe <sys_unlink+0x10e>
+    end_op();
+8010506a:	e8 91 dc ff ff       	call   80102d00 <end_op>
+    return -1;
+8010506f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105074:	e9 45 ff ff ff       	jmp    80104fbe <sys_unlink+0x10e>
+      panic("isdirempty: readi");
+80105079:	83 ec 0c             	sub    $0xc,%esp
+8010507c:	68 d8 76 10 80       	push   $0x801076d8
+80105081:	e8 0a b3 ff ff       	call   80100390 <panic>
+    panic("unlink: writei");
+80105086:	83 ec 0c             	sub    $0xc,%esp
+80105089:	68 ea 76 10 80       	push   $0x801076ea
+8010508e:	e8 fd b2 ff ff       	call   80100390 <panic>
+    panic("unlink: nlink < 1");
+80105093:	83 ec 0c             	sub    $0xc,%esp
+80105096:	68 c6 76 10 80       	push   $0x801076c6
+8010509b:	e8 f0 b2 ff ff       	call   80100390 <panic>
+
+801050a0 <sys_open>:
+
+int
+sys_open(void)
+{
+801050a0:	55                   	push   %ebp
+801050a1:	89 e5                	mov    %esp,%ebp
+801050a3:	57                   	push   %edi
+801050a4:	56                   	push   %esi
+  char *path;
+  int fd, omode;
+  struct file *f;
+  struct inode *ip;
+
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+801050a5:	8d 45 e0             	lea    -0x20(%ebp),%eax
+{
+801050a8:	53                   	push   %ebx
+801050a9:	83 ec 24             	sub    $0x24,%esp
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+801050ac:	50                   	push   %eax
+801050ad:	6a 00                	push   $0x0
+801050af:	e8 3c f8 ff ff       	call   801048f0 <argstr>
+801050b4:	83 c4 10             	add    $0x10,%esp
+801050b7:	85 c0                	test   %eax,%eax
+801050b9:	0f 88 8e 00 00 00    	js     8010514d <sys_open+0xad>
+801050bf:	83 ec 08             	sub    $0x8,%esp
+801050c2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+801050c5:	50                   	push   %eax
+801050c6:	6a 01                	push   $0x1
+801050c8:	e8 73 f7 ff ff       	call   80104840 <argint>
+801050cd:	83 c4 10             	add    $0x10,%esp
+801050d0:	85 c0                	test   %eax,%eax
+801050d2:	78 79                	js     8010514d <sys_open+0xad>
+    return -1;
+
+  begin_op();
+801050d4:	e8 b7 db ff ff       	call   80102c90 <begin_op>
+
+  if(omode & O_CREATE){
+801050d9:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+801050dd:	75 79                	jne    80105158 <sys_open+0xb8>
+    if(ip == 0){
+      end_op();
+      return -1;
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+801050df:	83 ec 0c             	sub    $0xc,%esp
+801050e2:	ff 75 e0             	pushl  -0x20(%ebp)
+801050e5:	e8 c6 ce ff ff       	call   80101fb0 <namei>
+801050ea:	83 c4 10             	add    $0x10,%esp
+801050ed:	89 c6                	mov    %eax,%esi
+801050ef:	85 c0                	test   %eax,%eax
+801050f1:	0f 84 7e 00 00 00    	je     80105175 <sys_open+0xd5>
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+801050f7:	83 ec 0c             	sub    $0xc,%esp
+801050fa:	50                   	push   %eax
+801050fb:	e8 10 c6 ff ff       	call   80101710 <ilock>
+    if(ip->type == T_DIR && omode != O_RDONLY){
+80105100:	83 c4 10             	add    $0x10,%esp
+80105103:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80105108:	0f 84 c2 00 00 00    	je     801051d0 <sys_open+0x130>
+      end_op();
+      return -1;
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+8010510e:	e8 ed bc ff ff       	call   80100e00 <filealloc>
+80105113:	89 c7                	mov    %eax,%edi
+80105115:	85 c0                	test   %eax,%eax
+80105117:	74 23                	je     8010513c <sys_open+0x9c>
+  struct proc *curproc = myproc();
+80105119:	e8 b2 e7 ff ff       	call   801038d0 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+8010511e:	31 db                	xor    %ebx,%ebx
+    if(curproc->ofile[fd] == 0){
+80105120:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80105124:	85 d2                	test   %edx,%edx
+80105126:	74 60                	je     80105188 <sys_open+0xe8>
+  for(fd = 0; fd < NOFILE; fd++){
+80105128:	83 c3 01             	add    $0x1,%ebx
+8010512b:	83 fb 10             	cmp    $0x10,%ebx
+8010512e:	75 f0                	jne    80105120 <sys_open+0x80>
+    if(f)
+      fileclose(f);
+80105130:	83 ec 0c             	sub    $0xc,%esp
+80105133:	57                   	push   %edi
+80105134:	e8 87 bd ff ff       	call   80100ec0 <fileclose>
+80105139:	83 c4 10             	add    $0x10,%esp
+    iunlockput(ip);
+8010513c:	83 ec 0c             	sub    $0xc,%esp
+8010513f:	56                   	push   %esi
+80105140:	e8 5b c8 ff ff       	call   801019a0 <iunlockput>
+    end_op();
+80105145:	e8 b6 db ff ff       	call   80102d00 <end_op>
+    return -1;
+8010514a:	83 c4 10             	add    $0x10,%esp
+8010514d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105152:	eb 6d                	jmp    801051c1 <sys_open+0x121>
+80105154:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    ip = create(path, T_FILE, 0, 0);
+80105158:	83 ec 0c             	sub    $0xc,%esp
+8010515b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010515e:	31 c9                	xor    %ecx,%ecx
+80105160:	ba 02 00 00 00       	mov    $0x2,%edx
+80105165:	6a 00                	push   $0x0
+80105167:	e8 24 f8 ff ff       	call   80104990 <create>
+    if(ip == 0){
+8010516c:	83 c4 10             	add    $0x10,%esp
+    ip = create(path, T_FILE, 0, 0);
+8010516f:	89 c6                	mov    %eax,%esi
+    if(ip == 0){
+80105171:	85 c0                	test   %eax,%eax
+80105173:	75 99                	jne    8010510e <sys_open+0x6e>
+      end_op();
+80105175:	e8 86 db ff ff       	call   80102d00 <end_op>
+      return -1;
+8010517a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+8010517f:	eb 40                	jmp    801051c1 <sys_open+0x121>
+80105181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  }
+  iunlock(ip);
+80105188:	83 ec 0c             	sub    $0xc,%esp
+      curproc->ofile[fd] = f;
+8010518b:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+  iunlock(ip);
+8010518f:	56                   	push   %esi
+80105190:	e8 5b c6 ff ff       	call   801017f0 <iunlock>
+  end_op();
+80105195:	e8 66 db ff ff       	call   80102d00 <end_op>
+
+  f->type = FD_INODE;
+8010519a:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+801051a0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+801051a3:	83 c4 10             	add    $0x10,%esp
+  f->ip = ip;
+801051a6:	89 77 10             	mov    %esi,0x10(%edi)
+  f->readable = !(omode & O_WRONLY);
+801051a9:	89 d0                	mov    %edx,%eax
+  f->off = 0;
+801051ab:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+  f->readable = !(omode & O_WRONLY);
+801051b2:	f7 d0                	not    %eax
+801051b4:	83 e0 01             	and    $0x1,%eax
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+801051b7:	83 e2 03             	and    $0x3,%edx
+  f->readable = !(omode & O_WRONLY);
+801051ba:	88 47 08             	mov    %al,0x8(%edi)
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+801051bd:	0f 95 47 09          	setne  0x9(%edi)
+  return fd;
+}
+801051c1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801051c4:	89 d8                	mov    %ebx,%eax
+801051c6:	5b                   	pop    %ebx
+801051c7:	5e                   	pop    %esi
+801051c8:	5f                   	pop    %edi
+801051c9:	5d                   	pop    %ebp
+801051ca:	c3                   	ret    
+801051cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801051cf:	90                   	nop
+    if(ip->type == T_DIR && omode != O_RDONLY){
+801051d0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+801051d3:	85 c9                	test   %ecx,%ecx
+801051d5:	0f 84 33 ff ff ff    	je     8010510e <sys_open+0x6e>
+801051db:	e9 5c ff ff ff       	jmp    8010513c <sys_open+0x9c>
+
+801051e0 <sys_mkdir>:
+
+int
+sys_mkdir(void)
+{
+801051e0:	55                   	push   %ebp
+801051e1:	89 e5                	mov    %esp,%ebp
+801051e3:	83 ec 18             	sub    $0x18,%esp
+  char *path;
+  struct inode *ip;
+
+  begin_op();
+801051e6:	e8 a5 da ff ff       	call   80102c90 <begin_op>
+  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+801051eb:	83 ec 08             	sub    $0x8,%esp
+801051ee:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801051f1:	50                   	push   %eax
+801051f2:	6a 00                	push   $0x0
+801051f4:	e8 f7 f6 ff ff       	call   801048f0 <argstr>
+801051f9:	83 c4 10             	add    $0x10,%esp
+801051fc:	85 c0                	test   %eax,%eax
+801051fe:	78 30                	js     80105230 <sys_mkdir+0x50>
+80105200:	83 ec 0c             	sub    $0xc,%esp
+80105203:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105206:	31 c9                	xor    %ecx,%ecx
+80105208:	ba 01 00 00 00       	mov    $0x1,%edx
+8010520d:	6a 00                	push   $0x0
+8010520f:	e8 7c f7 ff ff       	call   80104990 <create>
+80105214:	83 c4 10             	add    $0x10,%esp
+80105217:	85 c0                	test   %eax,%eax
+80105219:	74 15                	je     80105230 <sys_mkdir+0x50>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+8010521b:	83 ec 0c             	sub    $0xc,%esp
+8010521e:	50                   	push   %eax
+8010521f:	e8 7c c7 ff ff       	call   801019a0 <iunlockput>
+  end_op();
+80105224:	e8 d7 da ff ff       	call   80102d00 <end_op>
+  return 0;
+80105229:	83 c4 10             	add    $0x10,%esp
+8010522c:	31 c0                	xor    %eax,%eax
+}
+8010522e:	c9                   	leave  
+8010522f:	c3                   	ret    
+    end_op();
+80105230:	e8 cb da ff ff       	call   80102d00 <end_op>
+    return -1;
+80105235:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010523a:	c9                   	leave  
+8010523b:	c3                   	ret    
+8010523c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105240 <sys_mknod>:
+
+int
+sys_mknod(void)
+{
+80105240:	55                   	push   %ebp
+80105241:	89 e5                	mov    %esp,%ebp
+80105243:	83 ec 18             	sub    $0x18,%esp
+  struct inode *ip;
+  char *path;
+  int major, minor;
+
+  begin_op();
+80105246:	e8 45 da ff ff       	call   80102c90 <begin_op>
+  if((argstr(0, &path)) < 0 ||
+8010524b:	83 ec 08             	sub    $0x8,%esp
+8010524e:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80105251:	50                   	push   %eax
+80105252:	6a 00                	push   $0x0
+80105254:	e8 97 f6 ff ff       	call   801048f0 <argstr>
+80105259:	83 c4 10             	add    $0x10,%esp
+8010525c:	85 c0                	test   %eax,%eax
+8010525e:	78 60                	js     801052c0 <sys_mknod+0x80>
+     argint(1, &major) < 0 ||
+80105260:	83 ec 08             	sub    $0x8,%esp
+80105263:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105266:	50                   	push   %eax
+80105267:	6a 01                	push   $0x1
+80105269:	e8 d2 f5 ff ff       	call   80104840 <argint>
+  if((argstr(0, &path)) < 0 ||
+8010526e:	83 c4 10             	add    $0x10,%esp
+80105271:	85 c0                	test   %eax,%eax
+80105273:	78 4b                	js     801052c0 <sys_mknod+0x80>
+     argint(2, &minor) < 0 ||
+80105275:	83 ec 08             	sub    $0x8,%esp
+80105278:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010527b:	50                   	push   %eax
+8010527c:	6a 02                	push   $0x2
+8010527e:	e8 bd f5 ff ff       	call   80104840 <argint>
+     argint(1, &major) < 0 ||
+80105283:	83 c4 10             	add    $0x10,%esp
+80105286:	85 c0                	test   %eax,%eax
+80105288:	78 36                	js     801052c0 <sys_mknod+0x80>
+     (ip = create(path, T_DEV, major, minor)) == 0){
+8010528a:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+8010528e:	83 ec 0c             	sub    $0xc,%esp
+80105291:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+80105295:	ba 03 00 00 00       	mov    $0x3,%edx
+8010529a:	50                   	push   %eax
+8010529b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+8010529e:	e8 ed f6 ff ff       	call   80104990 <create>
+     argint(2, &minor) < 0 ||
+801052a3:	83 c4 10             	add    $0x10,%esp
+801052a6:	85 c0                	test   %eax,%eax
+801052a8:	74 16                	je     801052c0 <sys_mknod+0x80>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+801052aa:	83 ec 0c             	sub    $0xc,%esp
+801052ad:	50                   	push   %eax
+801052ae:	e8 ed c6 ff ff       	call   801019a0 <iunlockput>
+  end_op();
+801052b3:	e8 48 da ff ff       	call   80102d00 <end_op>
+  return 0;
+801052b8:	83 c4 10             	add    $0x10,%esp
+801052bb:	31 c0                	xor    %eax,%eax
+}
+801052bd:	c9                   	leave  
+801052be:	c3                   	ret    
+801052bf:	90                   	nop
+    end_op();
+801052c0:	e8 3b da ff ff       	call   80102d00 <end_op>
+    return -1;
+801052c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801052ca:	c9                   	leave  
+801052cb:	c3                   	ret    
+801052cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801052d0 <sys_chdir>:
+
+int
+sys_chdir(void)
+{
+801052d0:	55                   	push   %ebp
+801052d1:	89 e5                	mov    %esp,%ebp
+801052d3:	56                   	push   %esi
+801052d4:	53                   	push   %ebx
+801052d5:	83 ec 10             	sub    $0x10,%esp
+  char *path;
+  struct inode *ip;
+  struct proc *curproc = myproc();
+801052d8:	e8 f3 e5 ff ff       	call   801038d0 <myproc>
+801052dd:	89 c6                	mov    %eax,%esi
+  
+  begin_op();
+801052df:	e8 ac d9 ff ff       	call   80102c90 <begin_op>
+  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
+801052e4:	83 ec 08             	sub    $0x8,%esp
+801052e7:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801052ea:	50                   	push   %eax
+801052eb:	6a 00                	push   $0x0
+801052ed:	e8 fe f5 ff ff       	call   801048f0 <argstr>
+801052f2:	83 c4 10             	add    $0x10,%esp
+801052f5:	85 c0                	test   %eax,%eax
+801052f7:	78 77                	js     80105370 <sys_chdir+0xa0>
+801052f9:	83 ec 0c             	sub    $0xc,%esp
+801052fc:	ff 75 f4             	pushl  -0xc(%ebp)
+801052ff:	e8 ac cc ff ff       	call   80101fb0 <namei>
+80105304:	83 c4 10             	add    $0x10,%esp
+80105307:	89 c3                	mov    %eax,%ebx
+80105309:	85 c0                	test   %eax,%eax
+8010530b:	74 63                	je     80105370 <sys_chdir+0xa0>
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+8010530d:	83 ec 0c             	sub    $0xc,%esp
+80105310:	50                   	push   %eax
+80105311:	e8 fa c3 ff ff       	call   80101710 <ilock>
+  if(ip->type != T_DIR){
+80105316:	83 c4 10             	add    $0x10,%esp
+80105319:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+8010531e:	75 30                	jne    80105350 <sys_chdir+0x80>
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+80105320:	83 ec 0c             	sub    $0xc,%esp
+80105323:	53                   	push   %ebx
+80105324:	e8 c7 c4 ff ff       	call   801017f0 <iunlock>
+  iput(curproc->cwd);
+80105329:	58                   	pop    %eax
+8010532a:	ff 76 68             	pushl  0x68(%esi)
+8010532d:	e8 0e c5 ff ff       	call   80101840 <iput>
+  end_op();
+80105332:	e8 c9 d9 ff ff       	call   80102d00 <end_op>
+  curproc->cwd = ip;
+80105337:	89 5e 68             	mov    %ebx,0x68(%esi)
+  return 0;
+8010533a:	83 c4 10             	add    $0x10,%esp
+8010533d:	31 c0                	xor    %eax,%eax
+}
+8010533f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105342:	5b                   	pop    %ebx
+80105343:	5e                   	pop    %esi
+80105344:	5d                   	pop    %ebp
+80105345:	c3                   	ret    
+80105346:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010534d:	8d 76 00             	lea    0x0(%esi),%esi
+    iunlockput(ip);
+80105350:	83 ec 0c             	sub    $0xc,%esp
+80105353:	53                   	push   %ebx
+80105354:	e8 47 c6 ff ff       	call   801019a0 <iunlockput>
+    end_op();
+80105359:	e8 a2 d9 ff ff       	call   80102d00 <end_op>
+    return -1;
+8010535e:	83 c4 10             	add    $0x10,%esp
+80105361:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105366:	eb d7                	jmp    8010533f <sys_chdir+0x6f>
+80105368:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010536f:	90                   	nop
+    end_op();
+80105370:	e8 8b d9 ff ff       	call   80102d00 <end_op>
+    return -1;
+80105375:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010537a:	eb c3                	jmp    8010533f <sys_chdir+0x6f>
+8010537c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105380 <sys_exec>:
+
+int
+sys_exec(void)
+{
+80105380:	55                   	push   %ebp
+80105381:	89 e5                	mov    %esp,%ebp
+80105383:	57                   	push   %edi
+80105384:	56                   	push   %esi
+  char *path, *argv[MAXARG];
+  int i;
+  uint uargv, uarg;
+
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+80105385:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+{
+8010538b:	53                   	push   %ebx
+8010538c:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+80105392:	50                   	push   %eax
+80105393:	6a 00                	push   $0x0
+80105395:	e8 56 f5 ff ff       	call   801048f0 <argstr>
+8010539a:	83 c4 10             	add    $0x10,%esp
+8010539d:	85 c0                	test   %eax,%eax
+8010539f:	0f 88 87 00 00 00    	js     8010542c <sys_exec+0xac>
+801053a5:	83 ec 08             	sub    $0x8,%esp
+801053a8:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+801053ae:	50                   	push   %eax
+801053af:	6a 01                	push   $0x1
+801053b1:	e8 8a f4 ff ff       	call   80104840 <argint>
+801053b6:	83 c4 10             	add    $0x10,%esp
+801053b9:	85 c0                	test   %eax,%eax
+801053bb:	78 6f                	js     8010542c <sys_exec+0xac>
+    return -1;
+  }
+  memset(argv, 0, sizeof(argv));
+801053bd:	83 ec 04             	sub    $0x4,%esp
+801053c0:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+  for(i=0;; i++){
+801053c6:	31 db                	xor    %ebx,%ebx
+  memset(argv, 0, sizeof(argv));
+801053c8:	68 80 00 00 00       	push   $0x80
+801053cd:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
+801053d3:	6a 00                	push   $0x0
+801053d5:	50                   	push   %eax
+801053d6:	e8 85 f1 ff ff       	call   80104560 <memset>
+801053db:	83 c4 10             	add    $0x10,%esp
+801053de:	66 90                	xchg   %ax,%ax
+    if(i >= NELEM(argv))
+      return -1;
+    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
+801053e0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+801053e6:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
+801053ed:	83 ec 08             	sub    $0x8,%esp
+801053f0:	57                   	push   %edi
+801053f1:	01 f0                	add    %esi,%eax
+801053f3:	50                   	push   %eax
+801053f4:	e8 a7 f3 ff ff       	call   801047a0 <fetchint>
+801053f9:	83 c4 10             	add    $0x10,%esp
+801053fc:	85 c0                	test   %eax,%eax
+801053fe:	78 2c                	js     8010542c <sys_exec+0xac>
+      return -1;
+    if(uarg == 0){
+80105400:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+80105406:	85 c0                	test   %eax,%eax
+80105408:	74 36                	je     80105440 <sys_exec+0xc0>
+      argv[i] = 0;
+      break;
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+8010540a:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
+80105410:	83 ec 08             	sub    $0x8,%esp
+80105413:	8d 14 31             	lea    (%ecx,%esi,1),%edx
+80105416:	52                   	push   %edx
+80105417:	50                   	push   %eax
+80105418:	e8 c3 f3 ff ff       	call   801047e0 <fetchstr>
+8010541d:	83 c4 10             	add    $0x10,%esp
+80105420:	85 c0                	test   %eax,%eax
+80105422:	78 08                	js     8010542c <sys_exec+0xac>
+  for(i=0;; i++){
+80105424:	83 c3 01             	add    $0x1,%ebx
+    if(i >= NELEM(argv))
+80105427:	83 fb 20             	cmp    $0x20,%ebx
+8010542a:	75 b4                	jne    801053e0 <sys_exec+0x60>
+      return -1;
+  }
+  return exec(path, argv);
+}
+8010542c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return -1;
+8010542f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105434:	5b                   	pop    %ebx
+80105435:	5e                   	pop    %esi
+80105436:	5f                   	pop    %edi
+80105437:	5d                   	pop    %ebp
+80105438:	c3                   	ret    
+80105439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return exec(path, argv);
+80105440:	83 ec 08             	sub    $0x8,%esp
+80105443:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+      argv[i] = 0;
+80105449:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+80105450:	00 00 00 00 
+  return exec(path, argv);
+80105454:	50                   	push   %eax
+80105455:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
+8010545b:	e8 20 b6 ff ff       	call   80100a80 <exec>
+80105460:	83 c4 10             	add    $0x10,%esp
+}
+80105463:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105466:	5b                   	pop    %ebx
+80105467:	5e                   	pop    %esi
+80105468:	5f                   	pop    %edi
+80105469:	5d                   	pop    %ebp
+8010546a:	c3                   	ret    
+8010546b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010546f:	90                   	nop
+
+80105470 <sys_pipe>:
+
+int
+sys_pipe(void)
+{
+80105470:	55                   	push   %ebp
+80105471:	89 e5                	mov    %esp,%ebp
+80105473:	57                   	push   %edi
+80105474:	56                   	push   %esi
+  int *fd;
+  struct file *rf, *wf;
+  int fd0, fd1;
+
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+80105475:	8d 45 dc             	lea    -0x24(%ebp),%eax
+{
+80105478:	53                   	push   %ebx
+80105479:	83 ec 20             	sub    $0x20,%esp
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+8010547c:	6a 08                	push   $0x8
+8010547e:	50                   	push   %eax
+8010547f:	6a 00                	push   $0x0
+80105481:	e8 0a f4 ff ff       	call   80104890 <argptr>
+80105486:	83 c4 10             	add    $0x10,%esp
+80105489:	85 c0                	test   %eax,%eax
+8010548b:	78 4a                	js     801054d7 <sys_pipe+0x67>
+    return -1;
+  if(pipealloc(&rf, &wf) < 0)
+8010548d:	83 ec 08             	sub    $0x8,%esp
+80105490:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105493:	50                   	push   %eax
+80105494:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105497:	50                   	push   %eax
+80105498:	e8 a3 de ff ff       	call   80103340 <pipealloc>
+8010549d:	83 c4 10             	add    $0x10,%esp
+801054a0:	85 c0                	test   %eax,%eax
+801054a2:	78 33                	js     801054d7 <sys_pipe+0x67>
+    return -1;
+  fd0 = -1;
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+801054a4:	8b 7d e0             	mov    -0x20(%ebp),%edi
+  for(fd = 0; fd < NOFILE; fd++){
+801054a7:	31 db                	xor    %ebx,%ebx
+  struct proc *curproc = myproc();
+801054a9:	e8 22 e4 ff ff       	call   801038d0 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+801054ae:	66 90                	xchg   %ax,%ax
+    if(curproc->ofile[fd] == 0){
+801054b0:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+801054b4:	85 f6                	test   %esi,%esi
+801054b6:	74 28                	je     801054e0 <sys_pipe+0x70>
+  for(fd = 0; fd < NOFILE; fd++){
+801054b8:	83 c3 01             	add    $0x1,%ebx
+801054bb:	83 fb 10             	cmp    $0x10,%ebx
+801054be:	75 f0                	jne    801054b0 <sys_pipe+0x40>
+    if(fd0 >= 0)
+      myproc()->ofile[fd0] = 0;
+    fileclose(rf);
+801054c0:	83 ec 0c             	sub    $0xc,%esp
+801054c3:	ff 75 e0             	pushl  -0x20(%ebp)
+801054c6:	e8 f5 b9 ff ff       	call   80100ec0 <fileclose>
+    fileclose(wf);
+801054cb:	58                   	pop    %eax
+801054cc:	ff 75 e4             	pushl  -0x1c(%ebp)
+801054cf:	e8 ec b9 ff ff       	call   80100ec0 <fileclose>
+    return -1;
+801054d4:	83 c4 10             	add    $0x10,%esp
+801054d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801054dc:	eb 53                	jmp    80105531 <sys_pipe+0xc1>
+801054de:	66 90                	xchg   %ax,%ax
+      curproc->ofile[fd] = f;
+801054e0:	8d 73 08             	lea    0x8(%ebx),%esi
+801054e3:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+801054e7:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+  struct proc *curproc = myproc();
+801054ea:	e8 e1 e3 ff ff       	call   801038d0 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+801054ef:	31 d2                	xor    %edx,%edx
+801054f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(curproc->ofile[fd] == 0){
+801054f8:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+801054fc:	85 c9                	test   %ecx,%ecx
+801054fe:	74 20                	je     80105520 <sys_pipe+0xb0>
+  for(fd = 0; fd < NOFILE; fd++){
+80105500:	83 c2 01             	add    $0x1,%edx
+80105503:	83 fa 10             	cmp    $0x10,%edx
+80105506:	75 f0                	jne    801054f8 <sys_pipe+0x88>
+      myproc()->ofile[fd0] = 0;
+80105508:	e8 c3 e3 ff ff       	call   801038d0 <myproc>
+8010550d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+80105514:	00 
+80105515:	eb a9                	jmp    801054c0 <sys_pipe+0x50>
+80105517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010551e:	66 90                	xchg   %ax,%ax
+      curproc->ofile[fd] = f;
+80105520:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+  }
+  fd[0] = fd0;
+80105524:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80105527:	89 18                	mov    %ebx,(%eax)
+  fd[1] = fd1;
+80105529:	8b 45 dc             	mov    -0x24(%ebp),%eax
+8010552c:	89 50 04             	mov    %edx,0x4(%eax)
+  return 0;
+8010552f:	31 c0                	xor    %eax,%eax
+}
+80105531:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105534:	5b                   	pop    %ebx
+80105535:	5e                   	pop    %esi
+80105536:	5f                   	pop    %edi
+80105537:	5d                   	pop    %ebp
+80105538:	c3                   	ret    
+80105539:	66 90                	xchg   %ax,%ax
+8010553b:	66 90                	xchg   %ax,%ax
+8010553d:	66 90                	xchg   %ax,%ax
+8010553f:	90                   	nop
+
+80105540 <sys_fork>:
+#include "proc.h"
+
+int
+sys_fork(void)
+{
+  return fork();
+80105540:	e9 2b e5 ff ff       	jmp    80103a70 <fork>
+80105545:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010554c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105550 <sys_exit>:
+}
+
+int
+sys_exit(void)
+{
+80105550:	55                   	push   %ebp
+80105551:	89 e5                	mov    %esp,%ebp
+80105553:	83 ec 08             	sub    $0x8,%esp
+  exit();
+80105556:	e8 95 e7 ff ff       	call   80103cf0 <exit>
+  return 0;  // not reached
+}
+8010555b:	31 c0                	xor    %eax,%eax
+8010555d:	c9                   	leave  
+8010555e:	c3                   	ret    
+8010555f:	90                   	nop
+
+80105560 <sys_wait>:
+
+int
+sys_wait(void)
+{
+  return wait();
+80105560:	e9 cb e9 ff ff       	jmp    80103f30 <wait>
+80105565:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010556c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105570 <sys_kill>:
+}
+
+int
+sys_kill(void)
+{
+80105570:	55                   	push   %ebp
+80105571:	89 e5                	mov    %esp,%ebp
+80105573:	83 ec 20             	sub    $0x20,%esp
+  int pid;
+
+  if(argint(0, &pid) < 0)
+80105576:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105579:	50                   	push   %eax
+8010557a:	6a 00                	push   $0x0
+8010557c:	e8 bf f2 ff ff       	call   80104840 <argint>
+80105581:	83 c4 10             	add    $0x10,%esp
+80105584:	85 c0                	test   %eax,%eax
+80105586:	78 18                	js     801055a0 <sys_kill+0x30>
+    return -1;
+  return kill(pid);
+80105588:	83 ec 0c             	sub    $0xc,%esp
+8010558b:	ff 75 f4             	pushl  -0xc(%ebp)
+8010558e:	e8 ed ea ff ff       	call   80104080 <kill>
+80105593:	83 c4 10             	add    $0x10,%esp
+}
+80105596:	c9                   	leave  
+80105597:	c3                   	ret    
+80105598:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010559f:	90                   	nop
+801055a0:	c9                   	leave  
+    return -1;
+801055a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801055a6:	c3                   	ret    
+801055a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801055ae:	66 90                	xchg   %ax,%ax
+
+801055b0 <sys_getpid>:
+
+int
+sys_getpid(void)
+{
+801055b0:	55                   	push   %ebp
+801055b1:	89 e5                	mov    %esp,%ebp
+801055b3:	83 ec 08             	sub    $0x8,%esp
+  return myproc()->pid;
+801055b6:	e8 15 e3 ff ff       	call   801038d0 <myproc>
+801055bb:	8b 40 10             	mov    0x10(%eax),%eax
+}
+801055be:	c9                   	leave  
+801055bf:	c3                   	ret    
+
+801055c0 <sys_sbrk>:
+
+int
+sys_sbrk(void)
+{
+801055c0:	55                   	push   %ebp
+801055c1:	89 e5                	mov    %esp,%ebp
+801055c3:	53                   	push   %ebx
+  int addr;
+  int n;
+
+  if(argint(0, &n) < 0)
+801055c4:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+801055c7:	83 ec 1c             	sub    $0x1c,%esp
+  if(argint(0, &n) < 0)
+801055ca:	50                   	push   %eax
+801055cb:	6a 00                	push   $0x0
+801055cd:	e8 6e f2 ff ff       	call   80104840 <argint>
+801055d2:	83 c4 10             	add    $0x10,%esp
+801055d5:	85 c0                	test   %eax,%eax
+801055d7:	78 27                	js     80105600 <sys_sbrk+0x40>
+    return -1;
+  addr = myproc()->sz;
+801055d9:	e8 f2 e2 ff ff       	call   801038d0 <myproc>
+  if(growproc(n) < 0)
+801055de:	83 ec 0c             	sub    $0xc,%esp
+  addr = myproc()->sz;
+801055e1:	8b 18                	mov    (%eax),%ebx
+  if(growproc(n) < 0)
+801055e3:	ff 75 f4             	pushl  -0xc(%ebp)
+801055e6:	e8 05 e4 ff ff       	call   801039f0 <growproc>
+801055eb:	83 c4 10             	add    $0x10,%esp
+801055ee:	85 c0                	test   %eax,%eax
+801055f0:	78 0e                	js     80105600 <sys_sbrk+0x40>
+    return -1;
+  return addr;
+}
+801055f2:	89 d8                	mov    %ebx,%eax
+801055f4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801055f7:	c9                   	leave  
+801055f8:	c3                   	ret    
+801055f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80105600:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105605:	eb eb                	jmp    801055f2 <sys_sbrk+0x32>
+80105607:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010560e:	66 90                	xchg   %ax,%ax
+
+80105610 <sys_sleep>:
+
+int
+sys_sleep(void)
+{
+80105610:	55                   	push   %ebp
+80105611:	89 e5                	mov    %esp,%ebp
+80105613:	53                   	push   %ebx
+  int n;
+  uint ticks0;
+
+  if(argint(0, &n) < 0)
+80105614:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+80105617:	83 ec 1c             	sub    $0x1c,%esp
+  if(argint(0, &n) < 0)
+8010561a:	50                   	push   %eax
+8010561b:	6a 00                	push   $0x0
+8010561d:	e8 1e f2 ff ff       	call   80104840 <argint>
+80105622:	83 c4 10             	add    $0x10,%esp
+80105625:	85 c0                	test   %eax,%eax
+80105627:	0f 88 8a 00 00 00    	js     801056b7 <sys_sleep+0xa7>
+    return -1;
+  acquire(&tickslock);
+8010562d:	83 ec 0c             	sub    $0xc,%esp
+80105630:	68 60 4c 11 80       	push   $0x80114c60
+80105635:	e8 16 ee ff ff       	call   80104450 <acquire>
+  ticks0 = ticks;
+  while(ticks - ticks0 < n){
+8010563a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  ticks0 = ticks;
+8010563d:	8b 1d a0 54 11 80    	mov    0x801154a0,%ebx
+  while(ticks - ticks0 < n){
+80105643:	83 c4 10             	add    $0x10,%esp
+80105646:	85 d2                	test   %edx,%edx
+80105648:	75 27                	jne    80105671 <sys_sleep+0x61>
+8010564a:	eb 54                	jmp    801056a0 <sys_sleep+0x90>
+8010564c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(myproc()->killed){
+      release(&tickslock);
+      return -1;
+    }
+    sleep(&ticks, &tickslock);
+80105650:	83 ec 08             	sub    $0x8,%esp
+80105653:	68 60 4c 11 80       	push   $0x80114c60
+80105658:	68 a0 54 11 80       	push   $0x801154a0
+8010565d:	e8 0e e8 ff ff       	call   80103e70 <sleep>
+  while(ticks - ticks0 < n){
+80105662:	a1 a0 54 11 80       	mov    0x801154a0,%eax
+80105667:	83 c4 10             	add    $0x10,%esp
+8010566a:	29 d8                	sub    %ebx,%eax
+8010566c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+8010566f:	73 2f                	jae    801056a0 <sys_sleep+0x90>
+    if(myproc()->killed){
+80105671:	e8 5a e2 ff ff       	call   801038d0 <myproc>
+80105676:	8b 40 24             	mov    0x24(%eax),%eax
+80105679:	85 c0                	test   %eax,%eax
+8010567b:	74 d3                	je     80105650 <sys_sleep+0x40>
+      release(&tickslock);
+8010567d:	83 ec 0c             	sub    $0xc,%esp
+80105680:	68 60 4c 11 80       	push   $0x80114c60
+80105685:	e8 86 ee ff ff       	call   80104510 <release>
+      return -1;
+8010568a:	83 c4 10             	add    $0x10,%esp
+8010568d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  }
+  release(&tickslock);
+  return 0;
+}
+80105692:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105695:	c9                   	leave  
+80105696:	c3                   	ret    
+80105697:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010569e:	66 90                	xchg   %ax,%ax
+  release(&tickslock);
+801056a0:	83 ec 0c             	sub    $0xc,%esp
+801056a3:	68 60 4c 11 80       	push   $0x80114c60
+801056a8:	e8 63 ee ff ff       	call   80104510 <release>
+  return 0;
+801056ad:	83 c4 10             	add    $0x10,%esp
+801056b0:	31 c0                	xor    %eax,%eax
+}
+801056b2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801056b5:	c9                   	leave  
+801056b6:	c3                   	ret    
+    return -1;
+801056b7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801056bc:	eb f4                	jmp    801056b2 <sys_sleep+0xa2>
+801056be:	66 90                	xchg   %ax,%ax
+
+801056c0 <sys_uptime>:
+
+// return how many clock tick interrupts have occurred
+// since start.
+int
+sys_uptime(void)
+{
+801056c0:	55                   	push   %ebp
+801056c1:	89 e5                	mov    %esp,%ebp
+801056c3:	53                   	push   %ebx
+801056c4:	83 ec 10             	sub    $0x10,%esp
+  uint xticks;
+
+  acquire(&tickslock);
+801056c7:	68 60 4c 11 80       	push   $0x80114c60
+801056cc:	e8 7f ed ff ff       	call   80104450 <acquire>
+  xticks = ticks;
+801056d1:	8b 1d a0 54 11 80    	mov    0x801154a0,%ebx
+  release(&tickslock);
+801056d7:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
+801056de:	e8 2d ee ff ff       	call   80104510 <release>
+  return xticks;
+}
+801056e3:	89 d8                	mov    %ebx,%eax
+801056e5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801056e8:	c9                   	leave  
+801056e9:	c3                   	ret    
+
+801056ea <alltraps>:
+
+  # vectors.S sends all traps here.
+.globl alltraps
+alltraps:
+  # Build trap frame.
+  pushl %ds
+801056ea:	1e                   	push   %ds
+  pushl %es
+801056eb:	06                   	push   %es
+  pushl %fs
+801056ec:	0f a0                	push   %fs
+  pushl %gs
+801056ee:	0f a8                	push   %gs
+  pushal
+801056f0:	60                   	pusha  
+  
+  # Set up data segments.
+  movw $(SEG_KDATA<<3), %ax
+801056f1:	66 b8 10 00          	mov    $0x10,%ax
+  movw %ax, %ds
+801056f5:	8e d8                	mov    %eax,%ds
+  movw %ax, %es
+801056f7:	8e c0                	mov    %eax,%es
+
+  # Call trap(tf), where tf=%esp
+  pushl %esp
+801056f9:	54                   	push   %esp
+  call trap
+801056fa:	e8 c1 00 00 00       	call   801057c0 <trap>
+  addl $4, %esp
+801056ff:	83 c4 04             	add    $0x4,%esp
+
+80105702 <trapret>:
+
+  # Return falls through to trapret...
+.globl trapret
+trapret:
+  popal
+80105702:	61                   	popa   
+  popl %gs
+80105703:	0f a9                	pop    %gs
+  popl %fs
+80105705:	0f a1                	pop    %fs
+  popl %es
+80105707:	07                   	pop    %es
+  popl %ds
+80105708:	1f                   	pop    %ds
+  addl $0x8, %esp  # trapno and errcode
+80105709:	83 c4 08             	add    $0x8,%esp
+  iret
+8010570c:	cf                   	iret   
+8010570d:	66 90                	xchg   %ax,%ax
+8010570f:	90                   	nop
+
+80105710 <tvinit>:
+struct spinlock tickslock;
+uint ticks;
+
+void
+tvinit(void)
+{
+80105710:	55                   	push   %ebp
+  int i;
+
+  for(i = 0; i < 256; i++)
+80105711:	31 c0                	xor    %eax,%eax
+{
+80105713:	89 e5                	mov    %esp,%ebp
+80105715:	83 ec 08             	sub    $0x8,%esp
+80105718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010571f:	90                   	nop
+    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
+80105720:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
+80105727:	c7 04 c5 a2 4c 11 80 	movl   $0x8e000008,-0x7feeb35e(,%eax,8)
+8010572e:	08 00 00 8e 
+80105732:	66 89 14 c5 a0 4c 11 	mov    %dx,-0x7feeb360(,%eax,8)
+80105739:	80 
+8010573a:	c1 ea 10             	shr    $0x10,%edx
+8010573d:	66 89 14 c5 a6 4c 11 	mov    %dx,-0x7feeb35a(,%eax,8)
+80105744:	80 
+  for(i = 0; i < 256; i++)
+80105745:	83 c0 01             	add    $0x1,%eax
+80105748:	3d 00 01 00 00       	cmp    $0x100,%eax
+8010574d:	75 d1                	jne    80105720 <tvinit+0x10>
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+
+  initlock(&tickslock, "time");
+8010574f:	83 ec 08             	sub    $0x8,%esp
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+80105752:	a1 08 a1 10 80       	mov    0x8010a108,%eax
+80105757:	c7 05 a2 4e 11 80 08 	movl   $0xef000008,0x80114ea2
+8010575e:	00 00 ef 
+  initlock(&tickslock, "time");
+80105761:	68 f9 76 10 80       	push   $0x801076f9
+80105766:	68 60 4c 11 80       	push   $0x80114c60
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+8010576b:	66 a3 a0 4e 11 80    	mov    %ax,0x80114ea0
+80105771:	c1 e8 10             	shr    $0x10,%eax
+80105774:	66 a3 a6 4e 11 80    	mov    %ax,0x80114ea6
+  initlock(&tickslock, "time");
+8010577a:	e8 71 eb ff ff       	call   801042f0 <initlock>
+}
+8010577f:	83 c4 10             	add    $0x10,%esp
+80105782:	c9                   	leave  
+80105783:	c3                   	ret    
+80105784:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010578b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010578f:	90                   	nop
+
+80105790 <idtinit>:
+
+void
+idtinit(void)
+{
+80105790:	55                   	push   %ebp
+  pd[0] = size-1;
+80105791:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+80105796:	89 e5                	mov    %esp,%ebp
+80105798:	83 ec 10             	sub    $0x10,%esp
+8010579b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+  pd[1] = (uint)p;
+8010579f:	b8 a0 4c 11 80       	mov    $0x80114ca0,%eax
+801057a4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+  pd[2] = (uint)p >> 16;
+801057a8:	c1 e8 10             	shr    $0x10,%eax
+801057ab:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+  asm volatile("lidt (%0)" : : "r" (pd));
+801057af:	8d 45 fa             	lea    -0x6(%ebp),%eax
+801057b2:	0f 01 18             	lidtl  (%eax)
+  lidt(idt, sizeof(idt));
+}
+801057b5:	c9                   	leave  
+801057b6:	c3                   	ret    
+801057b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801057be:	66 90                	xchg   %ax,%ax
+
+801057c0 <trap>:
+
+//PAGEBREAK: 41
+void
+trap(struct trapframe *tf)
+{
+801057c0:	55                   	push   %ebp
+801057c1:	89 e5                	mov    %esp,%ebp
+801057c3:	57                   	push   %edi
+801057c4:	56                   	push   %esi
+801057c5:	53                   	push   %ebx
+801057c6:	83 ec 1c             	sub    $0x1c,%esp
+801057c9:	8b 7d 08             	mov    0x8(%ebp),%edi
+  if(tf->trapno == T_SYSCALL){
+801057cc:	8b 47 30             	mov    0x30(%edi),%eax
+801057cf:	83 f8 40             	cmp    $0x40,%eax
+801057d2:	0f 84 b8 01 00 00    	je     80105990 <trap+0x1d0>
+    if(myproc()->killed)
+      exit();
+    return;
+  }
+
+  switch(tf->trapno){
+801057d8:	83 e8 20             	sub    $0x20,%eax
+801057db:	83 f8 1f             	cmp    $0x1f,%eax
+801057de:	77 10                	ja     801057f0 <trap+0x30>
+801057e0:	ff 24 85 a0 77 10 80 	jmp    *-0x7fef8860(,%eax,4)
+801057e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801057ee:	66 90                	xchg   %ax,%ax
+    lapiceoi();
+    break;
+
+  //PAGEBREAK: 13
+  default:
+    if(myproc() == 0 || (tf->cs&3) == 0){
+801057f0:	e8 db e0 ff ff       	call   801038d0 <myproc>
+801057f5:	8b 5f 38             	mov    0x38(%edi),%ebx
+801057f8:	85 c0                	test   %eax,%eax
+801057fa:	0f 84 17 02 00 00    	je     80105a17 <trap+0x257>
+80105800:	f6 47 3c 03          	testb  $0x3,0x3c(%edi)
+80105804:	0f 84 0d 02 00 00    	je     80105a17 <trap+0x257>
+
+static inline uint
+rcr2(void)
+{
+  uint val;
+  asm volatile("movl %%cr2,%0" : "=r" (val));
+8010580a:	0f 20 d1             	mov    %cr2,%ecx
+8010580d:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+              tf->trapno, cpuid(), tf->eip, rcr2());
+      panic("trap");
+    }
+    // In user space, assume process misbehaved.
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80105810:	e8 9b e0 ff ff       	call   801038b0 <cpuid>
+80105815:	8b 77 30             	mov    0x30(%edi),%esi
+80105818:	89 45 dc             	mov    %eax,-0x24(%ebp)
+8010581b:	8b 47 34             	mov    0x34(%edi),%eax
+8010581e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            "eip 0x%x addr 0x%x--kill proc\n",
+            myproc()->pid, myproc()->name, tf->trapno,
+80105821:	e8 aa e0 ff ff       	call   801038d0 <myproc>
+80105826:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80105829:	e8 a2 e0 ff ff       	call   801038d0 <myproc>
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+8010582e:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+80105831:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80105834:	51                   	push   %ecx
+80105835:	53                   	push   %ebx
+80105836:	52                   	push   %edx
+            myproc()->pid, myproc()->name, tf->trapno,
+80105837:	8b 55 e0             	mov    -0x20(%ebp),%edx
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+8010583a:	ff 75 e4             	pushl  -0x1c(%ebp)
+            myproc()->pid, myproc()->name, tf->trapno,
+8010583d:	83 c2 6c             	add    $0x6c,%edx
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80105840:	56                   	push   %esi
+80105841:	52                   	push   %edx
+80105842:	ff 70 10             	pushl  0x10(%eax)
+80105845:	68 5c 77 10 80       	push   $0x8010775c
+8010584a:	e8 61 ae ff ff       	call   801006b0 <cprintf>
+            tf->err, cpuid(), tf->eip, rcr2());
+    myproc()->killed = 1;
+8010584f:	83 c4 20             	add    $0x20,%esp
+80105852:	e8 79 e0 ff ff       	call   801038d0 <myproc>
+80105857:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+  }
+
+  // Force process exit if it has been killed and is in user space.
+  // (If it is still executing in the kernel, let it keep running
+  // until it gets to the regular system call return.)
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+8010585e:	e8 6d e0 ff ff       	call   801038d0 <myproc>
+80105863:	85 c0                	test   %eax,%eax
+80105865:	74 1d                	je     80105884 <trap+0xc4>
+80105867:	e8 64 e0 ff ff       	call   801038d0 <myproc>
+8010586c:	8b 50 24             	mov    0x24(%eax),%edx
+8010586f:	85 d2                	test   %edx,%edx
+80105871:	74 11                	je     80105884 <trap+0xc4>
+80105873:	0f b7 47 3c          	movzwl 0x3c(%edi),%eax
+80105877:	83 e0 03             	and    $0x3,%eax
+8010587a:	66 83 f8 03          	cmp    $0x3,%ax
+8010587e:	0f 84 44 01 00 00    	je     801059c8 <trap+0x208>
+    exit();
+
+  // Force process to give up CPU on clock tick.
+  // If interrupts were on while locks held, would need to check nlock.
+  if(myproc() && myproc()->state == RUNNING &&
+80105884:	e8 47 e0 ff ff       	call   801038d0 <myproc>
+80105889:	85 c0                	test   %eax,%eax
+8010588b:	74 0b                	je     80105898 <trap+0xd8>
+8010588d:	e8 3e e0 ff ff       	call   801038d0 <myproc>
+80105892:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
+80105896:	74 38                	je     801058d0 <trap+0x110>
+     tf->trapno == T_IRQ0+IRQ_TIMER)
+    yield();
+
+  // Check if the process has been killed since we yielded
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105898:	e8 33 e0 ff ff       	call   801038d0 <myproc>
+8010589d:	85 c0                	test   %eax,%eax
+8010589f:	74 1d                	je     801058be <trap+0xfe>
+801058a1:	e8 2a e0 ff ff       	call   801038d0 <myproc>
+801058a6:	8b 40 24             	mov    0x24(%eax),%eax
+801058a9:	85 c0                	test   %eax,%eax
+801058ab:	74 11                	je     801058be <trap+0xfe>
+801058ad:	0f b7 47 3c          	movzwl 0x3c(%edi),%eax
+801058b1:	83 e0 03             	and    $0x3,%eax
+801058b4:	66 83 f8 03          	cmp    $0x3,%ax
+801058b8:	0f 84 fb 00 00 00    	je     801059b9 <trap+0x1f9>
+    exit();
+}
+801058be:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801058c1:	5b                   	pop    %ebx
+801058c2:	5e                   	pop    %esi
+801058c3:	5f                   	pop    %edi
+801058c4:	5d                   	pop    %ebp
+801058c5:	c3                   	ret    
+801058c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801058cd:	8d 76 00             	lea    0x0(%esi),%esi
+  if(myproc() && myproc()->state == RUNNING &&
+801058d0:	83 7f 30 20          	cmpl   $0x20,0x30(%edi)
+801058d4:	75 c2                	jne    80105898 <trap+0xd8>
+    yield();
+801058d6:	e8 45 e5 ff ff       	call   80103e20 <yield>
+801058db:	eb bb                	jmp    80105898 <trap+0xd8>
+801058dd:	8d 76 00             	lea    0x0(%esi),%esi
+    if(cpuid() == 0){
+801058e0:	e8 cb df ff ff       	call   801038b0 <cpuid>
+801058e5:	85 c0                	test   %eax,%eax
+801058e7:	0f 84 eb 00 00 00    	je     801059d8 <trap+0x218>
+    lapiceoi();
+801058ed:	e8 4e cf ff ff       	call   80102840 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+801058f2:	e8 d9 df ff ff       	call   801038d0 <myproc>
+801058f7:	85 c0                	test   %eax,%eax
+801058f9:	0f 85 68 ff ff ff    	jne    80105867 <trap+0xa7>
+801058ff:	eb 83                	jmp    80105884 <trap+0xc4>
+80105901:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    kbdintr();
+80105908:	e8 f3 cd ff ff       	call   80102700 <kbdintr>
+    lapiceoi();
+8010590d:	e8 2e cf ff ff       	call   80102840 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105912:	e8 b9 df ff ff       	call   801038d0 <myproc>
+80105917:	85 c0                	test   %eax,%eax
+80105919:	0f 85 48 ff ff ff    	jne    80105867 <trap+0xa7>
+8010591f:	e9 60 ff ff ff       	jmp    80105884 <trap+0xc4>
+80105924:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    uartintr();
+80105928:	e8 83 02 00 00       	call   80105bb0 <uartintr>
+    lapiceoi();
+8010592d:	e8 0e cf ff ff       	call   80102840 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105932:	e8 99 df ff ff       	call   801038d0 <myproc>
+80105937:	85 c0                	test   %eax,%eax
+80105939:	0f 85 28 ff ff ff    	jne    80105867 <trap+0xa7>
+8010593f:	e9 40 ff ff ff       	jmp    80105884 <trap+0xc4>
+80105944:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    cprintf("cpu%d: spurious interrupt at %x:%x\n",
+80105948:	8b 77 38             	mov    0x38(%edi),%esi
+8010594b:	0f b7 5f 3c          	movzwl 0x3c(%edi),%ebx
+8010594f:	e8 5c df ff ff       	call   801038b0 <cpuid>
+80105954:	56                   	push   %esi
+80105955:	53                   	push   %ebx
+80105956:	50                   	push   %eax
+80105957:	68 04 77 10 80       	push   $0x80107704
+8010595c:	e8 4f ad ff ff       	call   801006b0 <cprintf>
+    lapiceoi();
+80105961:	e8 da ce ff ff       	call   80102840 <lapiceoi>
+    break;
+80105966:	83 c4 10             	add    $0x10,%esp
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105969:	e8 62 df ff ff       	call   801038d0 <myproc>
+8010596e:	85 c0                	test   %eax,%eax
+80105970:	0f 85 f1 fe ff ff    	jne    80105867 <trap+0xa7>
+80105976:	e9 09 ff ff ff       	jmp    80105884 <trap+0xc4>
+8010597b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010597f:	90                   	nop
+    ideintr();
+80105980:	e8 cb c7 ff ff       	call   80102150 <ideintr>
+80105985:	e9 63 ff ff ff       	jmp    801058ed <trap+0x12d>
+8010598a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(myproc()->killed)
+80105990:	e8 3b df ff ff       	call   801038d0 <myproc>
+80105995:	8b 58 24             	mov    0x24(%eax),%ebx
+80105998:	85 db                	test   %ebx,%ebx
+8010599a:	75 74                	jne    80105a10 <trap+0x250>
+    myproc()->tf = tf;
+8010599c:	e8 2f df ff ff       	call   801038d0 <myproc>
+801059a1:	89 78 18             	mov    %edi,0x18(%eax)
+    syscall();
+801059a4:	e8 87 ef ff ff       	call   80104930 <syscall>
+    if(myproc()->killed)
+801059a9:	e8 22 df ff ff       	call   801038d0 <myproc>
+801059ae:	8b 48 24             	mov    0x24(%eax),%ecx
+801059b1:	85 c9                	test   %ecx,%ecx
+801059b3:	0f 84 05 ff ff ff    	je     801058be <trap+0xfe>
+}
+801059b9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801059bc:	5b                   	pop    %ebx
+801059bd:	5e                   	pop    %esi
+801059be:	5f                   	pop    %edi
+801059bf:	5d                   	pop    %ebp
+      exit();
+801059c0:	e9 2b e3 ff ff       	jmp    80103cf0 <exit>
+801059c5:	8d 76 00             	lea    0x0(%esi),%esi
+    exit();
+801059c8:	e8 23 e3 ff ff       	call   80103cf0 <exit>
+801059cd:	e9 b2 fe ff ff       	jmp    80105884 <trap+0xc4>
+801059d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      acquire(&tickslock);
+801059d8:	83 ec 0c             	sub    $0xc,%esp
+801059db:	68 60 4c 11 80       	push   $0x80114c60
+801059e0:	e8 6b ea ff ff       	call   80104450 <acquire>
+      wakeup(&ticks);
+801059e5:	c7 04 24 a0 54 11 80 	movl   $0x801154a0,(%esp)
+      ticks++;
+801059ec:	83 05 a0 54 11 80 01 	addl   $0x1,0x801154a0
+      wakeup(&ticks);
+801059f3:	e8 28 e6 ff ff       	call   80104020 <wakeup>
+      release(&tickslock);
+801059f8:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
+801059ff:	e8 0c eb ff ff       	call   80104510 <release>
+80105a04:	83 c4 10             	add    $0x10,%esp
+    lapiceoi();
+80105a07:	e9 e1 fe ff ff       	jmp    801058ed <trap+0x12d>
+80105a0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      exit();
+80105a10:	e8 db e2 ff ff       	call   80103cf0 <exit>
+80105a15:	eb 85                	jmp    8010599c <trap+0x1dc>
+80105a17:	0f 20 d6             	mov    %cr2,%esi
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+80105a1a:	e8 91 de ff ff       	call   801038b0 <cpuid>
+80105a1f:	83 ec 0c             	sub    $0xc,%esp
+80105a22:	56                   	push   %esi
+80105a23:	53                   	push   %ebx
+80105a24:	50                   	push   %eax
+80105a25:	ff 77 30             	pushl  0x30(%edi)
+80105a28:	68 28 77 10 80       	push   $0x80107728
+80105a2d:	e8 7e ac ff ff       	call   801006b0 <cprintf>
+      panic("trap");
+80105a32:	83 c4 14             	add    $0x14,%esp
+80105a35:	68 fe 76 10 80       	push   $0x801076fe
+80105a3a:	e8 51 a9 ff ff       	call   80100390 <panic>
+80105a3f:	90                   	nop
+
+80105a40 <uartgetc>:
+}
+
+static int
+uartgetc(void)
+{
+  if(!uart)
+80105a40:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
+80105a45:	85 c0                	test   %eax,%eax
+80105a47:	74 17                	je     80105a60 <uartgetc+0x20>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80105a49:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105a4e:	ec                   	in     (%dx),%al
+    return -1;
+  if(!(inb(COM1+5) & 0x01))
+80105a4f:	a8 01                	test   $0x1,%al
+80105a51:	74 0d                	je     80105a60 <uartgetc+0x20>
+80105a53:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105a58:	ec                   	in     (%dx),%al
+    return -1;
+  return inb(COM1+0);
+80105a59:	0f b6 c0             	movzbl %al,%eax
+80105a5c:	c3                   	ret    
+80105a5d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105a60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105a65:	c3                   	ret    
+80105a66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a6d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105a70 <uartputc.part.0>:
+uartputc(int c)
+80105a70:	55                   	push   %ebp
+80105a71:	89 e5                	mov    %esp,%ebp
+80105a73:	57                   	push   %edi
+80105a74:	89 c7                	mov    %eax,%edi
+80105a76:	56                   	push   %esi
+80105a77:	be fd 03 00 00       	mov    $0x3fd,%esi
+80105a7c:	53                   	push   %ebx
+80105a7d:	bb 80 00 00 00       	mov    $0x80,%ebx
+80105a82:	83 ec 0c             	sub    $0xc,%esp
+80105a85:	eb 1b                	jmp    80105aa2 <uartputc.part.0+0x32>
+80105a87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a8e:	66 90                	xchg   %ax,%ax
+    microdelay(10);
+80105a90:	83 ec 0c             	sub    $0xc,%esp
+80105a93:	6a 0a                	push   $0xa
+80105a95:	e8 c6 cd ff ff       	call   80102860 <microdelay>
+  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
+80105a9a:	83 c4 10             	add    $0x10,%esp
+80105a9d:	83 eb 01             	sub    $0x1,%ebx
+80105aa0:	74 07                	je     80105aa9 <uartputc.part.0+0x39>
+80105aa2:	89 f2                	mov    %esi,%edx
+80105aa4:	ec                   	in     (%dx),%al
+80105aa5:	a8 20                	test   $0x20,%al
+80105aa7:	74 e7                	je     80105a90 <uartputc.part.0+0x20>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80105aa9:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105aae:	89 f8                	mov    %edi,%eax
+80105ab0:	ee                   	out    %al,(%dx)
+}
+80105ab1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105ab4:	5b                   	pop    %ebx
+80105ab5:	5e                   	pop    %esi
+80105ab6:	5f                   	pop    %edi
+80105ab7:	5d                   	pop    %ebp
+80105ab8:	c3                   	ret    
+80105ab9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105ac0 <uartinit>:
+{
+80105ac0:	55                   	push   %ebp
+80105ac1:	31 c9                	xor    %ecx,%ecx
+80105ac3:	89 c8                	mov    %ecx,%eax
+80105ac5:	89 e5                	mov    %esp,%ebp
+80105ac7:	57                   	push   %edi
+80105ac8:	56                   	push   %esi
+80105ac9:	53                   	push   %ebx
+80105aca:	bb fa 03 00 00       	mov    $0x3fa,%ebx
+80105acf:	89 da                	mov    %ebx,%edx
+80105ad1:	83 ec 0c             	sub    $0xc,%esp
+80105ad4:	ee                   	out    %al,(%dx)
+80105ad5:	bf fb 03 00 00       	mov    $0x3fb,%edi
+80105ada:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+80105adf:	89 fa                	mov    %edi,%edx
+80105ae1:	ee                   	out    %al,(%dx)
+80105ae2:	b8 0c 00 00 00       	mov    $0xc,%eax
+80105ae7:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105aec:	ee                   	out    %al,(%dx)
+80105aed:	be f9 03 00 00       	mov    $0x3f9,%esi
+80105af2:	89 c8                	mov    %ecx,%eax
+80105af4:	89 f2                	mov    %esi,%edx
+80105af6:	ee                   	out    %al,(%dx)
+80105af7:	b8 03 00 00 00       	mov    $0x3,%eax
+80105afc:	89 fa                	mov    %edi,%edx
+80105afe:	ee                   	out    %al,(%dx)
+80105aff:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80105b04:	89 c8                	mov    %ecx,%eax
+80105b06:	ee                   	out    %al,(%dx)
+80105b07:	b8 01 00 00 00       	mov    $0x1,%eax
+80105b0c:	89 f2                	mov    %esi,%edx
+80105b0e:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80105b0f:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105b14:	ec                   	in     (%dx),%al
+  if(inb(COM1+5) == 0xFF)
+80105b15:	3c ff                	cmp    $0xff,%al
+80105b17:	74 56                	je     80105b6f <uartinit+0xaf>
+  uart = 1;
+80105b19:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
+80105b20:	00 00 00 
+80105b23:	89 da                	mov    %ebx,%edx
+80105b25:	ec                   	in     (%dx),%al
+80105b26:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105b2b:	ec                   	in     (%dx),%al
+  ioapicenable(IRQ_COM1, 0);
+80105b2c:	83 ec 08             	sub    $0x8,%esp
+80105b2f:	be 76 00 00 00       	mov    $0x76,%esi
+  for(p="xv6...\n"; *p; p++)
+80105b34:	bb 20 78 10 80       	mov    $0x80107820,%ebx
+  ioapicenable(IRQ_COM1, 0);
+80105b39:	6a 00                	push   $0x0
+80105b3b:	6a 04                	push   $0x4
+80105b3d:	e8 5e c8 ff ff       	call   801023a0 <ioapicenable>
+80105b42:	83 c4 10             	add    $0x10,%esp
+  for(p="xv6...\n"; *p; p++)
+80105b45:	b8 78 00 00 00       	mov    $0x78,%eax
+80105b4a:	eb 08                	jmp    80105b54 <uartinit+0x94>
+80105b4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105b50:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
+  if(!uart)
+80105b54:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
+80105b5a:	85 d2                	test   %edx,%edx
+80105b5c:	74 08                	je     80105b66 <uartinit+0xa6>
+    uartputc(*p);
+80105b5e:	0f be c0             	movsbl %al,%eax
+80105b61:	e8 0a ff ff ff       	call   80105a70 <uartputc.part.0>
+  for(p="xv6...\n"; *p; p++)
+80105b66:	89 f0                	mov    %esi,%eax
+80105b68:	83 c3 01             	add    $0x1,%ebx
+80105b6b:	84 c0                	test   %al,%al
+80105b6d:	75 e1                	jne    80105b50 <uartinit+0x90>
+}
+80105b6f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105b72:	5b                   	pop    %ebx
+80105b73:	5e                   	pop    %esi
+80105b74:	5f                   	pop    %edi
+80105b75:	5d                   	pop    %ebp
+80105b76:	c3                   	ret    
+80105b77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105b7e:	66 90                	xchg   %ax,%ax
+
+80105b80 <uartputc>:
+{
+80105b80:	55                   	push   %ebp
+  if(!uart)
+80105b81:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
+{
+80105b87:	89 e5                	mov    %esp,%ebp
+80105b89:	8b 45 08             	mov    0x8(%ebp),%eax
+  if(!uart)
+80105b8c:	85 d2                	test   %edx,%edx
+80105b8e:	74 10                	je     80105ba0 <uartputc+0x20>
+}
+80105b90:	5d                   	pop    %ebp
+80105b91:	e9 da fe ff ff       	jmp    80105a70 <uartputc.part.0>
+80105b96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105b9d:	8d 76 00             	lea    0x0(%esi),%esi
+80105ba0:	5d                   	pop    %ebp
+80105ba1:	c3                   	ret    
+80105ba2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105ba9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105bb0 <uartintr>:
+
+void
+uartintr(void)
+{
+80105bb0:	55                   	push   %ebp
+80105bb1:	89 e5                	mov    %esp,%ebp
+80105bb3:	83 ec 14             	sub    $0x14,%esp
+  consoleintr(uartgetc);
+80105bb6:	68 40 5a 10 80       	push   $0x80105a40
+80105bbb:	e8 a0 ac ff ff       	call   80100860 <consoleintr>
+}
+80105bc0:	83 c4 10             	add    $0x10,%esp
+80105bc3:	c9                   	leave  
+80105bc4:	c3                   	ret    
+
+80105bc5 <vector0>:
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+80105bc5:	6a 00                	push   $0x0
+  pushl $0
+80105bc7:	6a 00                	push   $0x0
+  jmp alltraps
+80105bc9:	e9 1c fb ff ff       	jmp    801056ea <alltraps>
+
+80105bce <vector1>:
+.globl vector1
+vector1:
+  pushl $0
+80105bce:	6a 00                	push   $0x0
+  pushl $1
+80105bd0:	6a 01                	push   $0x1
+  jmp alltraps
+80105bd2:	e9 13 fb ff ff       	jmp    801056ea <alltraps>
+
+80105bd7 <vector2>:
+.globl vector2
+vector2:
+  pushl $0
+80105bd7:	6a 00                	push   $0x0
+  pushl $2
+80105bd9:	6a 02                	push   $0x2
+  jmp alltraps
+80105bdb:	e9 0a fb ff ff       	jmp    801056ea <alltraps>
+
+80105be0 <vector3>:
+.globl vector3
+vector3:
+  pushl $0
+80105be0:	6a 00                	push   $0x0
+  pushl $3
+80105be2:	6a 03                	push   $0x3
+  jmp alltraps
+80105be4:	e9 01 fb ff ff       	jmp    801056ea <alltraps>
+
+80105be9 <vector4>:
+.globl vector4
+vector4:
+  pushl $0
+80105be9:	6a 00                	push   $0x0
+  pushl $4
+80105beb:	6a 04                	push   $0x4
+  jmp alltraps
+80105bed:	e9 f8 fa ff ff       	jmp    801056ea <alltraps>
+
+80105bf2 <vector5>:
+.globl vector5
+vector5:
+  pushl $0
+80105bf2:	6a 00                	push   $0x0
+  pushl $5
+80105bf4:	6a 05                	push   $0x5
+  jmp alltraps
+80105bf6:	e9 ef fa ff ff       	jmp    801056ea <alltraps>
+
+80105bfb <vector6>:
+.globl vector6
+vector6:
+  pushl $0
+80105bfb:	6a 00                	push   $0x0
+  pushl $6
+80105bfd:	6a 06                	push   $0x6
+  jmp alltraps
+80105bff:	e9 e6 fa ff ff       	jmp    801056ea <alltraps>
+
+80105c04 <vector7>:
+.globl vector7
+vector7:
+  pushl $0
+80105c04:	6a 00                	push   $0x0
+  pushl $7
+80105c06:	6a 07                	push   $0x7
+  jmp alltraps
+80105c08:	e9 dd fa ff ff       	jmp    801056ea <alltraps>
+
+80105c0d <vector8>:
+.globl vector8
+vector8:
+  pushl $8
+80105c0d:	6a 08                	push   $0x8
+  jmp alltraps
+80105c0f:	e9 d6 fa ff ff       	jmp    801056ea <alltraps>
+
+80105c14 <vector9>:
+.globl vector9
+vector9:
+  pushl $0
+80105c14:	6a 00                	push   $0x0
+  pushl $9
+80105c16:	6a 09                	push   $0x9
+  jmp alltraps
+80105c18:	e9 cd fa ff ff       	jmp    801056ea <alltraps>
+
+80105c1d <vector10>:
+.globl vector10
+vector10:
+  pushl $10
+80105c1d:	6a 0a                	push   $0xa
+  jmp alltraps
+80105c1f:	e9 c6 fa ff ff       	jmp    801056ea <alltraps>
+
+80105c24 <vector11>:
+.globl vector11
+vector11:
+  pushl $11
+80105c24:	6a 0b                	push   $0xb
+  jmp alltraps
+80105c26:	e9 bf fa ff ff       	jmp    801056ea <alltraps>
+
+80105c2b <vector12>:
+.globl vector12
+vector12:
+  pushl $12
+80105c2b:	6a 0c                	push   $0xc
+  jmp alltraps
+80105c2d:	e9 b8 fa ff ff       	jmp    801056ea <alltraps>
+
+80105c32 <vector13>:
+.globl vector13
+vector13:
+  pushl $13
+80105c32:	6a 0d                	push   $0xd
+  jmp alltraps
+80105c34:	e9 b1 fa ff ff       	jmp    801056ea <alltraps>
+
+80105c39 <vector14>:
+.globl vector14
+vector14:
+  pushl $14
+80105c39:	6a 0e                	push   $0xe
+  jmp alltraps
+80105c3b:	e9 aa fa ff ff       	jmp    801056ea <alltraps>
+
+80105c40 <vector15>:
+.globl vector15
+vector15:
+  pushl $0
+80105c40:	6a 00                	push   $0x0
+  pushl $15
+80105c42:	6a 0f                	push   $0xf
+  jmp alltraps
+80105c44:	e9 a1 fa ff ff       	jmp    801056ea <alltraps>
+
+80105c49 <vector16>:
+.globl vector16
+vector16:
+  pushl $0
+80105c49:	6a 00                	push   $0x0
+  pushl $16
+80105c4b:	6a 10                	push   $0x10
+  jmp alltraps
+80105c4d:	e9 98 fa ff ff       	jmp    801056ea <alltraps>
+
+80105c52 <vector17>:
+.globl vector17
+vector17:
+  pushl $17
+80105c52:	6a 11                	push   $0x11
+  jmp alltraps
+80105c54:	e9 91 fa ff ff       	jmp    801056ea <alltraps>
+
+80105c59 <vector18>:
+.globl vector18
+vector18:
+  pushl $0
+80105c59:	6a 00                	push   $0x0
+  pushl $18
+80105c5b:	6a 12                	push   $0x12
+  jmp alltraps
+80105c5d:	e9 88 fa ff ff       	jmp    801056ea <alltraps>
+
+80105c62 <vector19>:
+.globl vector19
+vector19:
+  pushl $0
+80105c62:	6a 00                	push   $0x0
+  pushl $19
+80105c64:	6a 13                	push   $0x13
+  jmp alltraps
+80105c66:	e9 7f fa ff ff       	jmp    801056ea <alltraps>
+
+80105c6b <vector20>:
+.globl vector20
+vector20:
+  pushl $0
+80105c6b:	6a 00                	push   $0x0
+  pushl $20
+80105c6d:	6a 14                	push   $0x14
+  jmp alltraps
+80105c6f:	e9 76 fa ff ff       	jmp    801056ea <alltraps>
+
+80105c74 <vector21>:
+.globl vector21
+vector21:
+  pushl $0
+80105c74:	6a 00                	push   $0x0
+  pushl $21
+80105c76:	6a 15                	push   $0x15
+  jmp alltraps
+80105c78:	e9 6d fa ff ff       	jmp    801056ea <alltraps>
+
+80105c7d <vector22>:
+.globl vector22
+vector22:
+  pushl $0
+80105c7d:	6a 00                	push   $0x0
+  pushl $22
+80105c7f:	6a 16                	push   $0x16
+  jmp alltraps
+80105c81:	e9 64 fa ff ff       	jmp    801056ea <alltraps>
+
+80105c86 <vector23>:
+.globl vector23
+vector23:
+  pushl $0
+80105c86:	6a 00                	push   $0x0
+  pushl $23
+80105c88:	6a 17                	push   $0x17
+  jmp alltraps
+80105c8a:	e9 5b fa ff ff       	jmp    801056ea <alltraps>
+
+80105c8f <vector24>:
+.globl vector24
+vector24:
+  pushl $0
+80105c8f:	6a 00                	push   $0x0
+  pushl $24
+80105c91:	6a 18                	push   $0x18
+  jmp alltraps
+80105c93:	e9 52 fa ff ff       	jmp    801056ea <alltraps>
+
+80105c98 <vector25>:
+.globl vector25
+vector25:
+  pushl $0
+80105c98:	6a 00                	push   $0x0
+  pushl $25
+80105c9a:	6a 19                	push   $0x19
+  jmp alltraps
+80105c9c:	e9 49 fa ff ff       	jmp    801056ea <alltraps>
+
+80105ca1 <vector26>:
+.globl vector26
+vector26:
+  pushl $0
+80105ca1:	6a 00                	push   $0x0
+  pushl $26
+80105ca3:	6a 1a                	push   $0x1a
+  jmp alltraps
+80105ca5:	e9 40 fa ff ff       	jmp    801056ea <alltraps>
+
+80105caa <vector27>:
+.globl vector27
+vector27:
+  pushl $0
+80105caa:	6a 00                	push   $0x0
+  pushl $27
+80105cac:	6a 1b                	push   $0x1b
+  jmp alltraps
+80105cae:	e9 37 fa ff ff       	jmp    801056ea <alltraps>
+
+80105cb3 <vector28>:
+.globl vector28
+vector28:
+  pushl $0
+80105cb3:	6a 00                	push   $0x0
+  pushl $28
+80105cb5:	6a 1c                	push   $0x1c
+  jmp alltraps
+80105cb7:	e9 2e fa ff ff       	jmp    801056ea <alltraps>
+
+80105cbc <vector29>:
+.globl vector29
+vector29:
+  pushl $0
+80105cbc:	6a 00                	push   $0x0
+  pushl $29
+80105cbe:	6a 1d                	push   $0x1d
+  jmp alltraps
+80105cc0:	e9 25 fa ff ff       	jmp    801056ea <alltraps>
+
+80105cc5 <vector30>:
+.globl vector30
+vector30:
+  pushl $0
+80105cc5:	6a 00                	push   $0x0
+  pushl $30
+80105cc7:	6a 1e                	push   $0x1e
+  jmp alltraps
+80105cc9:	e9 1c fa ff ff       	jmp    801056ea <alltraps>
+
+80105cce <vector31>:
+.globl vector31
+vector31:
+  pushl $0
+80105cce:	6a 00                	push   $0x0
+  pushl $31
+80105cd0:	6a 1f                	push   $0x1f
+  jmp alltraps
+80105cd2:	e9 13 fa ff ff       	jmp    801056ea <alltraps>
+
+80105cd7 <vector32>:
+.globl vector32
+vector32:
+  pushl $0
+80105cd7:	6a 00                	push   $0x0
+  pushl $32
+80105cd9:	6a 20                	push   $0x20
+  jmp alltraps
+80105cdb:	e9 0a fa ff ff       	jmp    801056ea <alltraps>
+
+80105ce0 <vector33>:
+.globl vector33
+vector33:
+  pushl $0
+80105ce0:	6a 00                	push   $0x0
+  pushl $33
+80105ce2:	6a 21                	push   $0x21
+  jmp alltraps
+80105ce4:	e9 01 fa ff ff       	jmp    801056ea <alltraps>
+
+80105ce9 <vector34>:
+.globl vector34
+vector34:
+  pushl $0
+80105ce9:	6a 00                	push   $0x0
+  pushl $34
+80105ceb:	6a 22                	push   $0x22
+  jmp alltraps
+80105ced:	e9 f8 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105cf2 <vector35>:
+.globl vector35
+vector35:
+  pushl $0
+80105cf2:	6a 00                	push   $0x0
+  pushl $35
+80105cf4:	6a 23                	push   $0x23
+  jmp alltraps
+80105cf6:	e9 ef f9 ff ff       	jmp    801056ea <alltraps>
+
+80105cfb <vector36>:
+.globl vector36
+vector36:
+  pushl $0
+80105cfb:	6a 00                	push   $0x0
+  pushl $36
+80105cfd:	6a 24                	push   $0x24
+  jmp alltraps
+80105cff:	e9 e6 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d04 <vector37>:
+.globl vector37
+vector37:
+  pushl $0
+80105d04:	6a 00                	push   $0x0
+  pushl $37
+80105d06:	6a 25                	push   $0x25
+  jmp alltraps
+80105d08:	e9 dd f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d0d <vector38>:
+.globl vector38
+vector38:
+  pushl $0
+80105d0d:	6a 00                	push   $0x0
+  pushl $38
+80105d0f:	6a 26                	push   $0x26
+  jmp alltraps
+80105d11:	e9 d4 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d16 <vector39>:
+.globl vector39
+vector39:
+  pushl $0
+80105d16:	6a 00                	push   $0x0
+  pushl $39
+80105d18:	6a 27                	push   $0x27
+  jmp alltraps
+80105d1a:	e9 cb f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d1f <vector40>:
+.globl vector40
+vector40:
+  pushl $0
+80105d1f:	6a 00                	push   $0x0
+  pushl $40
+80105d21:	6a 28                	push   $0x28
+  jmp alltraps
+80105d23:	e9 c2 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d28 <vector41>:
+.globl vector41
+vector41:
+  pushl $0
+80105d28:	6a 00                	push   $0x0
+  pushl $41
+80105d2a:	6a 29                	push   $0x29
+  jmp alltraps
+80105d2c:	e9 b9 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d31 <vector42>:
+.globl vector42
+vector42:
+  pushl $0
+80105d31:	6a 00                	push   $0x0
+  pushl $42
+80105d33:	6a 2a                	push   $0x2a
+  jmp alltraps
+80105d35:	e9 b0 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d3a <vector43>:
+.globl vector43
+vector43:
+  pushl $0
+80105d3a:	6a 00                	push   $0x0
+  pushl $43
+80105d3c:	6a 2b                	push   $0x2b
+  jmp alltraps
+80105d3e:	e9 a7 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d43 <vector44>:
+.globl vector44
+vector44:
+  pushl $0
+80105d43:	6a 00                	push   $0x0
+  pushl $44
+80105d45:	6a 2c                	push   $0x2c
+  jmp alltraps
+80105d47:	e9 9e f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d4c <vector45>:
+.globl vector45
+vector45:
+  pushl $0
+80105d4c:	6a 00                	push   $0x0
+  pushl $45
+80105d4e:	6a 2d                	push   $0x2d
+  jmp alltraps
+80105d50:	e9 95 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d55 <vector46>:
+.globl vector46
+vector46:
+  pushl $0
+80105d55:	6a 00                	push   $0x0
+  pushl $46
+80105d57:	6a 2e                	push   $0x2e
+  jmp alltraps
+80105d59:	e9 8c f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d5e <vector47>:
+.globl vector47
+vector47:
+  pushl $0
+80105d5e:	6a 00                	push   $0x0
+  pushl $47
+80105d60:	6a 2f                	push   $0x2f
+  jmp alltraps
+80105d62:	e9 83 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d67 <vector48>:
+.globl vector48
+vector48:
+  pushl $0
+80105d67:	6a 00                	push   $0x0
+  pushl $48
+80105d69:	6a 30                	push   $0x30
+  jmp alltraps
+80105d6b:	e9 7a f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d70 <vector49>:
+.globl vector49
+vector49:
+  pushl $0
+80105d70:	6a 00                	push   $0x0
+  pushl $49
+80105d72:	6a 31                	push   $0x31
+  jmp alltraps
+80105d74:	e9 71 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d79 <vector50>:
+.globl vector50
+vector50:
+  pushl $0
+80105d79:	6a 00                	push   $0x0
+  pushl $50
+80105d7b:	6a 32                	push   $0x32
+  jmp alltraps
+80105d7d:	e9 68 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d82 <vector51>:
+.globl vector51
+vector51:
+  pushl $0
+80105d82:	6a 00                	push   $0x0
+  pushl $51
+80105d84:	6a 33                	push   $0x33
+  jmp alltraps
+80105d86:	e9 5f f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d8b <vector52>:
+.globl vector52
+vector52:
+  pushl $0
+80105d8b:	6a 00                	push   $0x0
+  pushl $52
+80105d8d:	6a 34                	push   $0x34
+  jmp alltraps
+80105d8f:	e9 56 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d94 <vector53>:
+.globl vector53
+vector53:
+  pushl $0
+80105d94:	6a 00                	push   $0x0
+  pushl $53
+80105d96:	6a 35                	push   $0x35
+  jmp alltraps
+80105d98:	e9 4d f9 ff ff       	jmp    801056ea <alltraps>
+
+80105d9d <vector54>:
+.globl vector54
+vector54:
+  pushl $0
+80105d9d:	6a 00                	push   $0x0
+  pushl $54
+80105d9f:	6a 36                	push   $0x36
+  jmp alltraps
+80105da1:	e9 44 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105da6 <vector55>:
+.globl vector55
+vector55:
+  pushl $0
+80105da6:	6a 00                	push   $0x0
+  pushl $55
+80105da8:	6a 37                	push   $0x37
+  jmp alltraps
+80105daa:	e9 3b f9 ff ff       	jmp    801056ea <alltraps>
+
+80105daf <vector56>:
+.globl vector56
+vector56:
+  pushl $0
+80105daf:	6a 00                	push   $0x0
+  pushl $56
+80105db1:	6a 38                	push   $0x38
+  jmp alltraps
+80105db3:	e9 32 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105db8 <vector57>:
+.globl vector57
+vector57:
+  pushl $0
+80105db8:	6a 00                	push   $0x0
+  pushl $57
+80105dba:	6a 39                	push   $0x39
+  jmp alltraps
+80105dbc:	e9 29 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105dc1 <vector58>:
+.globl vector58
+vector58:
+  pushl $0
+80105dc1:	6a 00                	push   $0x0
+  pushl $58
+80105dc3:	6a 3a                	push   $0x3a
+  jmp alltraps
+80105dc5:	e9 20 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105dca <vector59>:
+.globl vector59
+vector59:
+  pushl $0
+80105dca:	6a 00                	push   $0x0
+  pushl $59
+80105dcc:	6a 3b                	push   $0x3b
+  jmp alltraps
+80105dce:	e9 17 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105dd3 <vector60>:
+.globl vector60
+vector60:
+  pushl $0
+80105dd3:	6a 00                	push   $0x0
+  pushl $60
+80105dd5:	6a 3c                	push   $0x3c
+  jmp alltraps
+80105dd7:	e9 0e f9 ff ff       	jmp    801056ea <alltraps>
+
+80105ddc <vector61>:
+.globl vector61
+vector61:
+  pushl $0
+80105ddc:	6a 00                	push   $0x0
+  pushl $61
+80105dde:	6a 3d                	push   $0x3d
+  jmp alltraps
+80105de0:	e9 05 f9 ff ff       	jmp    801056ea <alltraps>
+
+80105de5 <vector62>:
+.globl vector62
+vector62:
+  pushl $0
+80105de5:	6a 00                	push   $0x0
+  pushl $62
+80105de7:	6a 3e                	push   $0x3e
+  jmp alltraps
+80105de9:	e9 fc f8 ff ff       	jmp    801056ea <alltraps>
+
+80105dee <vector63>:
+.globl vector63
+vector63:
+  pushl $0
+80105dee:	6a 00                	push   $0x0
+  pushl $63
+80105df0:	6a 3f                	push   $0x3f
+  jmp alltraps
+80105df2:	e9 f3 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105df7 <vector64>:
+.globl vector64
+vector64:
+  pushl $0
+80105df7:	6a 00                	push   $0x0
+  pushl $64
+80105df9:	6a 40                	push   $0x40
+  jmp alltraps
+80105dfb:	e9 ea f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e00 <vector65>:
+.globl vector65
+vector65:
+  pushl $0
+80105e00:	6a 00                	push   $0x0
+  pushl $65
+80105e02:	6a 41                	push   $0x41
+  jmp alltraps
+80105e04:	e9 e1 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e09 <vector66>:
+.globl vector66
+vector66:
+  pushl $0
+80105e09:	6a 00                	push   $0x0
+  pushl $66
+80105e0b:	6a 42                	push   $0x42
+  jmp alltraps
+80105e0d:	e9 d8 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e12 <vector67>:
+.globl vector67
+vector67:
+  pushl $0
+80105e12:	6a 00                	push   $0x0
+  pushl $67
+80105e14:	6a 43                	push   $0x43
+  jmp alltraps
+80105e16:	e9 cf f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e1b <vector68>:
+.globl vector68
+vector68:
+  pushl $0
+80105e1b:	6a 00                	push   $0x0
+  pushl $68
+80105e1d:	6a 44                	push   $0x44
+  jmp alltraps
+80105e1f:	e9 c6 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e24 <vector69>:
+.globl vector69
+vector69:
+  pushl $0
+80105e24:	6a 00                	push   $0x0
+  pushl $69
+80105e26:	6a 45                	push   $0x45
+  jmp alltraps
+80105e28:	e9 bd f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e2d <vector70>:
+.globl vector70
+vector70:
+  pushl $0
+80105e2d:	6a 00                	push   $0x0
+  pushl $70
+80105e2f:	6a 46                	push   $0x46
+  jmp alltraps
+80105e31:	e9 b4 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e36 <vector71>:
+.globl vector71
+vector71:
+  pushl $0
+80105e36:	6a 00                	push   $0x0
+  pushl $71
+80105e38:	6a 47                	push   $0x47
+  jmp alltraps
+80105e3a:	e9 ab f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e3f <vector72>:
+.globl vector72
+vector72:
+  pushl $0
+80105e3f:	6a 00                	push   $0x0
+  pushl $72
+80105e41:	6a 48                	push   $0x48
+  jmp alltraps
+80105e43:	e9 a2 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e48 <vector73>:
+.globl vector73
+vector73:
+  pushl $0
+80105e48:	6a 00                	push   $0x0
+  pushl $73
+80105e4a:	6a 49                	push   $0x49
+  jmp alltraps
+80105e4c:	e9 99 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e51 <vector74>:
+.globl vector74
+vector74:
+  pushl $0
+80105e51:	6a 00                	push   $0x0
+  pushl $74
+80105e53:	6a 4a                	push   $0x4a
+  jmp alltraps
+80105e55:	e9 90 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e5a <vector75>:
+.globl vector75
+vector75:
+  pushl $0
+80105e5a:	6a 00                	push   $0x0
+  pushl $75
+80105e5c:	6a 4b                	push   $0x4b
+  jmp alltraps
+80105e5e:	e9 87 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e63 <vector76>:
+.globl vector76
+vector76:
+  pushl $0
+80105e63:	6a 00                	push   $0x0
+  pushl $76
+80105e65:	6a 4c                	push   $0x4c
+  jmp alltraps
+80105e67:	e9 7e f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e6c <vector77>:
+.globl vector77
+vector77:
+  pushl $0
+80105e6c:	6a 00                	push   $0x0
+  pushl $77
+80105e6e:	6a 4d                	push   $0x4d
+  jmp alltraps
+80105e70:	e9 75 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e75 <vector78>:
+.globl vector78
+vector78:
+  pushl $0
+80105e75:	6a 00                	push   $0x0
+  pushl $78
+80105e77:	6a 4e                	push   $0x4e
+  jmp alltraps
+80105e79:	e9 6c f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e7e <vector79>:
+.globl vector79
+vector79:
+  pushl $0
+80105e7e:	6a 00                	push   $0x0
+  pushl $79
+80105e80:	6a 4f                	push   $0x4f
+  jmp alltraps
+80105e82:	e9 63 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e87 <vector80>:
+.globl vector80
+vector80:
+  pushl $0
+80105e87:	6a 00                	push   $0x0
+  pushl $80
+80105e89:	6a 50                	push   $0x50
+  jmp alltraps
+80105e8b:	e9 5a f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e90 <vector81>:
+.globl vector81
+vector81:
+  pushl $0
+80105e90:	6a 00                	push   $0x0
+  pushl $81
+80105e92:	6a 51                	push   $0x51
+  jmp alltraps
+80105e94:	e9 51 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105e99 <vector82>:
+.globl vector82
+vector82:
+  pushl $0
+80105e99:	6a 00                	push   $0x0
+  pushl $82
+80105e9b:	6a 52                	push   $0x52
+  jmp alltraps
+80105e9d:	e9 48 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105ea2 <vector83>:
+.globl vector83
+vector83:
+  pushl $0
+80105ea2:	6a 00                	push   $0x0
+  pushl $83
+80105ea4:	6a 53                	push   $0x53
+  jmp alltraps
+80105ea6:	e9 3f f8 ff ff       	jmp    801056ea <alltraps>
+
+80105eab <vector84>:
+.globl vector84
+vector84:
+  pushl $0
+80105eab:	6a 00                	push   $0x0
+  pushl $84
+80105ead:	6a 54                	push   $0x54
+  jmp alltraps
+80105eaf:	e9 36 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105eb4 <vector85>:
+.globl vector85
+vector85:
+  pushl $0
+80105eb4:	6a 00                	push   $0x0
+  pushl $85
+80105eb6:	6a 55                	push   $0x55
+  jmp alltraps
+80105eb8:	e9 2d f8 ff ff       	jmp    801056ea <alltraps>
+
+80105ebd <vector86>:
+.globl vector86
+vector86:
+  pushl $0
+80105ebd:	6a 00                	push   $0x0
+  pushl $86
+80105ebf:	6a 56                	push   $0x56
+  jmp alltraps
+80105ec1:	e9 24 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105ec6 <vector87>:
+.globl vector87
+vector87:
+  pushl $0
+80105ec6:	6a 00                	push   $0x0
+  pushl $87
+80105ec8:	6a 57                	push   $0x57
+  jmp alltraps
+80105eca:	e9 1b f8 ff ff       	jmp    801056ea <alltraps>
+
+80105ecf <vector88>:
+.globl vector88
+vector88:
+  pushl $0
+80105ecf:	6a 00                	push   $0x0
+  pushl $88
+80105ed1:	6a 58                	push   $0x58
+  jmp alltraps
+80105ed3:	e9 12 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105ed8 <vector89>:
+.globl vector89
+vector89:
+  pushl $0
+80105ed8:	6a 00                	push   $0x0
+  pushl $89
+80105eda:	6a 59                	push   $0x59
+  jmp alltraps
+80105edc:	e9 09 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105ee1 <vector90>:
+.globl vector90
+vector90:
+  pushl $0
+80105ee1:	6a 00                	push   $0x0
+  pushl $90
+80105ee3:	6a 5a                	push   $0x5a
+  jmp alltraps
+80105ee5:	e9 00 f8 ff ff       	jmp    801056ea <alltraps>
+
+80105eea <vector91>:
+.globl vector91
+vector91:
+  pushl $0
+80105eea:	6a 00                	push   $0x0
+  pushl $91
+80105eec:	6a 5b                	push   $0x5b
+  jmp alltraps
+80105eee:	e9 f7 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105ef3 <vector92>:
+.globl vector92
+vector92:
+  pushl $0
+80105ef3:	6a 00                	push   $0x0
+  pushl $92
+80105ef5:	6a 5c                	push   $0x5c
+  jmp alltraps
+80105ef7:	e9 ee f7 ff ff       	jmp    801056ea <alltraps>
+
+80105efc <vector93>:
+.globl vector93
+vector93:
+  pushl $0
+80105efc:	6a 00                	push   $0x0
+  pushl $93
+80105efe:	6a 5d                	push   $0x5d
+  jmp alltraps
+80105f00:	e9 e5 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f05 <vector94>:
+.globl vector94
+vector94:
+  pushl $0
+80105f05:	6a 00                	push   $0x0
+  pushl $94
+80105f07:	6a 5e                	push   $0x5e
+  jmp alltraps
+80105f09:	e9 dc f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f0e <vector95>:
+.globl vector95
+vector95:
+  pushl $0
+80105f0e:	6a 00                	push   $0x0
+  pushl $95
+80105f10:	6a 5f                	push   $0x5f
+  jmp alltraps
+80105f12:	e9 d3 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f17 <vector96>:
+.globl vector96
+vector96:
+  pushl $0
+80105f17:	6a 00                	push   $0x0
+  pushl $96
+80105f19:	6a 60                	push   $0x60
+  jmp alltraps
+80105f1b:	e9 ca f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f20 <vector97>:
+.globl vector97
+vector97:
+  pushl $0
+80105f20:	6a 00                	push   $0x0
+  pushl $97
+80105f22:	6a 61                	push   $0x61
+  jmp alltraps
+80105f24:	e9 c1 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f29 <vector98>:
+.globl vector98
+vector98:
+  pushl $0
+80105f29:	6a 00                	push   $0x0
+  pushl $98
+80105f2b:	6a 62                	push   $0x62
+  jmp alltraps
+80105f2d:	e9 b8 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f32 <vector99>:
+.globl vector99
+vector99:
+  pushl $0
+80105f32:	6a 00                	push   $0x0
+  pushl $99
+80105f34:	6a 63                	push   $0x63
+  jmp alltraps
+80105f36:	e9 af f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f3b <vector100>:
+.globl vector100
+vector100:
+  pushl $0
+80105f3b:	6a 00                	push   $0x0
+  pushl $100
+80105f3d:	6a 64                	push   $0x64
+  jmp alltraps
+80105f3f:	e9 a6 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f44 <vector101>:
+.globl vector101
+vector101:
+  pushl $0
+80105f44:	6a 00                	push   $0x0
+  pushl $101
+80105f46:	6a 65                	push   $0x65
+  jmp alltraps
+80105f48:	e9 9d f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f4d <vector102>:
+.globl vector102
+vector102:
+  pushl $0
+80105f4d:	6a 00                	push   $0x0
+  pushl $102
+80105f4f:	6a 66                	push   $0x66
+  jmp alltraps
+80105f51:	e9 94 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f56 <vector103>:
+.globl vector103
+vector103:
+  pushl $0
+80105f56:	6a 00                	push   $0x0
+  pushl $103
+80105f58:	6a 67                	push   $0x67
+  jmp alltraps
+80105f5a:	e9 8b f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f5f <vector104>:
+.globl vector104
+vector104:
+  pushl $0
+80105f5f:	6a 00                	push   $0x0
+  pushl $104
+80105f61:	6a 68                	push   $0x68
+  jmp alltraps
+80105f63:	e9 82 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f68 <vector105>:
+.globl vector105
+vector105:
+  pushl $0
+80105f68:	6a 00                	push   $0x0
+  pushl $105
+80105f6a:	6a 69                	push   $0x69
+  jmp alltraps
+80105f6c:	e9 79 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f71 <vector106>:
+.globl vector106
+vector106:
+  pushl $0
+80105f71:	6a 00                	push   $0x0
+  pushl $106
+80105f73:	6a 6a                	push   $0x6a
+  jmp alltraps
+80105f75:	e9 70 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f7a <vector107>:
+.globl vector107
+vector107:
+  pushl $0
+80105f7a:	6a 00                	push   $0x0
+  pushl $107
+80105f7c:	6a 6b                	push   $0x6b
+  jmp alltraps
+80105f7e:	e9 67 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f83 <vector108>:
+.globl vector108
+vector108:
+  pushl $0
+80105f83:	6a 00                	push   $0x0
+  pushl $108
+80105f85:	6a 6c                	push   $0x6c
+  jmp alltraps
+80105f87:	e9 5e f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f8c <vector109>:
+.globl vector109
+vector109:
+  pushl $0
+80105f8c:	6a 00                	push   $0x0
+  pushl $109
+80105f8e:	6a 6d                	push   $0x6d
+  jmp alltraps
+80105f90:	e9 55 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f95 <vector110>:
+.globl vector110
+vector110:
+  pushl $0
+80105f95:	6a 00                	push   $0x0
+  pushl $110
+80105f97:	6a 6e                	push   $0x6e
+  jmp alltraps
+80105f99:	e9 4c f7 ff ff       	jmp    801056ea <alltraps>
+
+80105f9e <vector111>:
+.globl vector111
+vector111:
+  pushl $0
+80105f9e:	6a 00                	push   $0x0
+  pushl $111
+80105fa0:	6a 6f                	push   $0x6f
+  jmp alltraps
+80105fa2:	e9 43 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105fa7 <vector112>:
+.globl vector112
+vector112:
+  pushl $0
+80105fa7:	6a 00                	push   $0x0
+  pushl $112
+80105fa9:	6a 70                	push   $0x70
+  jmp alltraps
+80105fab:	e9 3a f7 ff ff       	jmp    801056ea <alltraps>
+
+80105fb0 <vector113>:
+.globl vector113
+vector113:
+  pushl $0
+80105fb0:	6a 00                	push   $0x0
+  pushl $113
+80105fb2:	6a 71                	push   $0x71
+  jmp alltraps
+80105fb4:	e9 31 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105fb9 <vector114>:
+.globl vector114
+vector114:
+  pushl $0
+80105fb9:	6a 00                	push   $0x0
+  pushl $114
+80105fbb:	6a 72                	push   $0x72
+  jmp alltraps
+80105fbd:	e9 28 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105fc2 <vector115>:
+.globl vector115
+vector115:
+  pushl $0
+80105fc2:	6a 00                	push   $0x0
+  pushl $115
+80105fc4:	6a 73                	push   $0x73
+  jmp alltraps
+80105fc6:	e9 1f f7 ff ff       	jmp    801056ea <alltraps>
+
+80105fcb <vector116>:
+.globl vector116
+vector116:
+  pushl $0
+80105fcb:	6a 00                	push   $0x0
+  pushl $116
+80105fcd:	6a 74                	push   $0x74
+  jmp alltraps
+80105fcf:	e9 16 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105fd4 <vector117>:
+.globl vector117
+vector117:
+  pushl $0
+80105fd4:	6a 00                	push   $0x0
+  pushl $117
+80105fd6:	6a 75                	push   $0x75
+  jmp alltraps
+80105fd8:	e9 0d f7 ff ff       	jmp    801056ea <alltraps>
+
+80105fdd <vector118>:
+.globl vector118
+vector118:
+  pushl $0
+80105fdd:	6a 00                	push   $0x0
+  pushl $118
+80105fdf:	6a 76                	push   $0x76
+  jmp alltraps
+80105fe1:	e9 04 f7 ff ff       	jmp    801056ea <alltraps>
+
+80105fe6 <vector119>:
+.globl vector119
+vector119:
+  pushl $0
+80105fe6:	6a 00                	push   $0x0
+  pushl $119
+80105fe8:	6a 77                	push   $0x77
+  jmp alltraps
+80105fea:	e9 fb f6 ff ff       	jmp    801056ea <alltraps>
+
+80105fef <vector120>:
+.globl vector120
+vector120:
+  pushl $0
+80105fef:	6a 00                	push   $0x0
+  pushl $120
+80105ff1:	6a 78                	push   $0x78
+  jmp alltraps
+80105ff3:	e9 f2 f6 ff ff       	jmp    801056ea <alltraps>
+
+80105ff8 <vector121>:
+.globl vector121
+vector121:
+  pushl $0
+80105ff8:	6a 00                	push   $0x0
+  pushl $121
+80105ffa:	6a 79                	push   $0x79
+  jmp alltraps
+80105ffc:	e9 e9 f6 ff ff       	jmp    801056ea <alltraps>
+
+80106001 <vector122>:
+.globl vector122
+vector122:
+  pushl $0
+80106001:	6a 00                	push   $0x0
+  pushl $122
+80106003:	6a 7a                	push   $0x7a
+  jmp alltraps
+80106005:	e9 e0 f6 ff ff       	jmp    801056ea <alltraps>
+
+8010600a <vector123>:
+.globl vector123
+vector123:
+  pushl $0
+8010600a:	6a 00                	push   $0x0
+  pushl $123
+8010600c:	6a 7b                	push   $0x7b
+  jmp alltraps
+8010600e:	e9 d7 f6 ff ff       	jmp    801056ea <alltraps>
+
+80106013 <vector124>:
+.globl vector124
+vector124:
+  pushl $0
+80106013:	6a 00                	push   $0x0
+  pushl $124
+80106015:	6a 7c                	push   $0x7c
+  jmp alltraps
+80106017:	e9 ce f6 ff ff       	jmp    801056ea <alltraps>
+
+8010601c <vector125>:
+.globl vector125
+vector125:
+  pushl $0
+8010601c:	6a 00                	push   $0x0
+  pushl $125
+8010601e:	6a 7d                	push   $0x7d
+  jmp alltraps
+80106020:	e9 c5 f6 ff ff       	jmp    801056ea <alltraps>
+
+80106025 <vector126>:
+.globl vector126
+vector126:
+  pushl $0
+80106025:	6a 00                	push   $0x0
+  pushl $126
+80106027:	6a 7e                	push   $0x7e
+  jmp alltraps
+80106029:	e9 bc f6 ff ff       	jmp    801056ea <alltraps>
+
+8010602e <vector127>:
+.globl vector127
+vector127:
+  pushl $0
+8010602e:	6a 00                	push   $0x0
+  pushl $127
+80106030:	6a 7f                	push   $0x7f
+  jmp alltraps
+80106032:	e9 b3 f6 ff ff       	jmp    801056ea <alltraps>
+
+80106037 <vector128>:
+.globl vector128
+vector128:
+  pushl $0
+80106037:	6a 00                	push   $0x0
+  pushl $128
+80106039:	68 80 00 00 00       	push   $0x80
+  jmp alltraps
+8010603e:	e9 a7 f6 ff ff       	jmp    801056ea <alltraps>
+
+80106043 <vector129>:
+.globl vector129
+vector129:
+  pushl $0
+80106043:	6a 00                	push   $0x0
+  pushl $129
+80106045:	68 81 00 00 00       	push   $0x81
+  jmp alltraps
+8010604a:	e9 9b f6 ff ff       	jmp    801056ea <alltraps>
+
+8010604f <vector130>:
+.globl vector130
+vector130:
+  pushl $0
+8010604f:	6a 00                	push   $0x0
+  pushl $130
+80106051:	68 82 00 00 00       	push   $0x82
+  jmp alltraps
+80106056:	e9 8f f6 ff ff       	jmp    801056ea <alltraps>
+
+8010605b <vector131>:
+.globl vector131
+vector131:
+  pushl $0
+8010605b:	6a 00                	push   $0x0
+  pushl $131
+8010605d:	68 83 00 00 00       	push   $0x83
+  jmp alltraps
+80106062:	e9 83 f6 ff ff       	jmp    801056ea <alltraps>
+
+80106067 <vector132>:
+.globl vector132
+vector132:
+  pushl $0
+80106067:	6a 00                	push   $0x0
+  pushl $132
+80106069:	68 84 00 00 00       	push   $0x84
+  jmp alltraps
+8010606e:	e9 77 f6 ff ff       	jmp    801056ea <alltraps>
+
+80106073 <vector133>:
+.globl vector133
+vector133:
+  pushl $0
+80106073:	6a 00                	push   $0x0
+  pushl $133
+80106075:	68 85 00 00 00       	push   $0x85
+  jmp alltraps
+8010607a:	e9 6b f6 ff ff       	jmp    801056ea <alltraps>
+
+8010607f <vector134>:
+.globl vector134
+vector134:
+  pushl $0
+8010607f:	6a 00                	push   $0x0
+  pushl $134
+80106081:	68 86 00 00 00       	push   $0x86
+  jmp alltraps
+80106086:	e9 5f f6 ff ff       	jmp    801056ea <alltraps>
+
+8010608b <vector135>:
+.globl vector135
+vector135:
+  pushl $0
+8010608b:	6a 00                	push   $0x0
+  pushl $135
+8010608d:	68 87 00 00 00       	push   $0x87
+  jmp alltraps
+80106092:	e9 53 f6 ff ff       	jmp    801056ea <alltraps>
+
+80106097 <vector136>:
+.globl vector136
+vector136:
+  pushl $0
+80106097:	6a 00                	push   $0x0
+  pushl $136
+80106099:	68 88 00 00 00       	push   $0x88
+  jmp alltraps
+8010609e:	e9 47 f6 ff ff       	jmp    801056ea <alltraps>
+
+801060a3 <vector137>:
+.globl vector137
+vector137:
+  pushl $0
+801060a3:	6a 00                	push   $0x0
+  pushl $137
+801060a5:	68 89 00 00 00       	push   $0x89
+  jmp alltraps
+801060aa:	e9 3b f6 ff ff       	jmp    801056ea <alltraps>
+
+801060af <vector138>:
+.globl vector138
+vector138:
+  pushl $0
+801060af:	6a 00                	push   $0x0
+  pushl $138
+801060b1:	68 8a 00 00 00       	push   $0x8a
+  jmp alltraps
+801060b6:	e9 2f f6 ff ff       	jmp    801056ea <alltraps>
+
+801060bb <vector139>:
+.globl vector139
+vector139:
+  pushl $0
+801060bb:	6a 00                	push   $0x0
+  pushl $139
+801060bd:	68 8b 00 00 00       	push   $0x8b
+  jmp alltraps
+801060c2:	e9 23 f6 ff ff       	jmp    801056ea <alltraps>
+
+801060c7 <vector140>:
+.globl vector140
+vector140:
+  pushl $0
+801060c7:	6a 00                	push   $0x0
+  pushl $140
+801060c9:	68 8c 00 00 00       	push   $0x8c
+  jmp alltraps
+801060ce:	e9 17 f6 ff ff       	jmp    801056ea <alltraps>
+
+801060d3 <vector141>:
+.globl vector141
+vector141:
+  pushl $0
+801060d3:	6a 00                	push   $0x0
+  pushl $141
+801060d5:	68 8d 00 00 00       	push   $0x8d
+  jmp alltraps
+801060da:	e9 0b f6 ff ff       	jmp    801056ea <alltraps>
+
+801060df <vector142>:
+.globl vector142
+vector142:
+  pushl $0
+801060df:	6a 00                	push   $0x0
+  pushl $142
+801060e1:	68 8e 00 00 00       	push   $0x8e
+  jmp alltraps
+801060e6:	e9 ff f5 ff ff       	jmp    801056ea <alltraps>
+
+801060eb <vector143>:
+.globl vector143
+vector143:
+  pushl $0
+801060eb:	6a 00                	push   $0x0
+  pushl $143
+801060ed:	68 8f 00 00 00       	push   $0x8f
+  jmp alltraps
+801060f2:	e9 f3 f5 ff ff       	jmp    801056ea <alltraps>
+
+801060f7 <vector144>:
+.globl vector144
+vector144:
+  pushl $0
+801060f7:	6a 00                	push   $0x0
+  pushl $144
+801060f9:	68 90 00 00 00       	push   $0x90
+  jmp alltraps
+801060fe:	e9 e7 f5 ff ff       	jmp    801056ea <alltraps>
+
+80106103 <vector145>:
+.globl vector145
+vector145:
+  pushl $0
+80106103:	6a 00                	push   $0x0
+  pushl $145
+80106105:	68 91 00 00 00       	push   $0x91
+  jmp alltraps
+8010610a:	e9 db f5 ff ff       	jmp    801056ea <alltraps>
+
+8010610f <vector146>:
+.globl vector146
+vector146:
+  pushl $0
+8010610f:	6a 00                	push   $0x0
+  pushl $146
+80106111:	68 92 00 00 00       	push   $0x92
+  jmp alltraps
+80106116:	e9 cf f5 ff ff       	jmp    801056ea <alltraps>
+
+8010611b <vector147>:
+.globl vector147
+vector147:
+  pushl $0
+8010611b:	6a 00                	push   $0x0
+  pushl $147
+8010611d:	68 93 00 00 00       	push   $0x93
+  jmp alltraps
+80106122:	e9 c3 f5 ff ff       	jmp    801056ea <alltraps>
+
+80106127 <vector148>:
+.globl vector148
+vector148:
+  pushl $0
+80106127:	6a 00                	push   $0x0
+  pushl $148
+80106129:	68 94 00 00 00       	push   $0x94
+  jmp alltraps
+8010612e:	e9 b7 f5 ff ff       	jmp    801056ea <alltraps>
+
+80106133 <vector149>:
+.globl vector149
+vector149:
+  pushl $0
+80106133:	6a 00                	push   $0x0
+  pushl $149
+80106135:	68 95 00 00 00       	push   $0x95
+  jmp alltraps
+8010613a:	e9 ab f5 ff ff       	jmp    801056ea <alltraps>
+
+8010613f <vector150>:
+.globl vector150
+vector150:
+  pushl $0
+8010613f:	6a 00                	push   $0x0
+  pushl $150
+80106141:	68 96 00 00 00       	push   $0x96
+  jmp alltraps
+80106146:	e9 9f f5 ff ff       	jmp    801056ea <alltraps>
+
+8010614b <vector151>:
+.globl vector151
+vector151:
+  pushl $0
+8010614b:	6a 00                	push   $0x0
+  pushl $151
+8010614d:	68 97 00 00 00       	push   $0x97
+  jmp alltraps
+80106152:	e9 93 f5 ff ff       	jmp    801056ea <alltraps>
+
+80106157 <vector152>:
+.globl vector152
+vector152:
+  pushl $0
+80106157:	6a 00                	push   $0x0
+  pushl $152
+80106159:	68 98 00 00 00       	push   $0x98
+  jmp alltraps
+8010615e:	e9 87 f5 ff ff       	jmp    801056ea <alltraps>
+
+80106163 <vector153>:
+.globl vector153
+vector153:
+  pushl $0
+80106163:	6a 00                	push   $0x0
+  pushl $153
+80106165:	68 99 00 00 00       	push   $0x99
+  jmp alltraps
+8010616a:	e9 7b f5 ff ff       	jmp    801056ea <alltraps>
+
+8010616f <vector154>:
+.globl vector154
+vector154:
+  pushl $0
+8010616f:	6a 00                	push   $0x0
+  pushl $154
+80106171:	68 9a 00 00 00       	push   $0x9a
+  jmp alltraps
+80106176:	e9 6f f5 ff ff       	jmp    801056ea <alltraps>
+
+8010617b <vector155>:
+.globl vector155
+vector155:
+  pushl $0
+8010617b:	6a 00                	push   $0x0
+  pushl $155
+8010617d:	68 9b 00 00 00       	push   $0x9b
+  jmp alltraps
+80106182:	e9 63 f5 ff ff       	jmp    801056ea <alltraps>
+
+80106187 <vector156>:
+.globl vector156
+vector156:
+  pushl $0
+80106187:	6a 00                	push   $0x0
+  pushl $156
+80106189:	68 9c 00 00 00       	push   $0x9c
+  jmp alltraps
+8010618e:	e9 57 f5 ff ff       	jmp    801056ea <alltraps>
+
+80106193 <vector157>:
+.globl vector157
+vector157:
+  pushl $0
+80106193:	6a 00                	push   $0x0
+  pushl $157
+80106195:	68 9d 00 00 00       	push   $0x9d
+  jmp alltraps
+8010619a:	e9 4b f5 ff ff       	jmp    801056ea <alltraps>
+
+8010619f <vector158>:
+.globl vector158
+vector158:
+  pushl $0
+8010619f:	6a 00                	push   $0x0
+  pushl $158
+801061a1:	68 9e 00 00 00       	push   $0x9e
+  jmp alltraps
+801061a6:	e9 3f f5 ff ff       	jmp    801056ea <alltraps>
+
+801061ab <vector159>:
+.globl vector159
+vector159:
+  pushl $0
+801061ab:	6a 00                	push   $0x0
+  pushl $159
+801061ad:	68 9f 00 00 00       	push   $0x9f
+  jmp alltraps
+801061b2:	e9 33 f5 ff ff       	jmp    801056ea <alltraps>
+
+801061b7 <vector160>:
+.globl vector160
+vector160:
+  pushl $0
+801061b7:	6a 00                	push   $0x0
+  pushl $160
+801061b9:	68 a0 00 00 00       	push   $0xa0
+  jmp alltraps
+801061be:	e9 27 f5 ff ff       	jmp    801056ea <alltraps>
+
+801061c3 <vector161>:
+.globl vector161
+vector161:
+  pushl $0
+801061c3:	6a 00                	push   $0x0
+  pushl $161
+801061c5:	68 a1 00 00 00       	push   $0xa1
+  jmp alltraps
+801061ca:	e9 1b f5 ff ff       	jmp    801056ea <alltraps>
+
+801061cf <vector162>:
+.globl vector162
+vector162:
+  pushl $0
+801061cf:	6a 00                	push   $0x0
+  pushl $162
+801061d1:	68 a2 00 00 00       	push   $0xa2
+  jmp alltraps
+801061d6:	e9 0f f5 ff ff       	jmp    801056ea <alltraps>
+
+801061db <vector163>:
+.globl vector163
+vector163:
+  pushl $0
+801061db:	6a 00                	push   $0x0
+  pushl $163
+801061dd:	68 a3 00 00 00       	push   $0xa3
+  jmp alltraps
+801061e2:	e9 03 f5 ff ff       	jmp    801056ea <alltraps>
+
+801061e7 <vector164>:
+.globl vector164
+vector164:
+  pushl $0
+801061e7:	6a 00                	push   $0x0
+  pushl $164
+801061e9:	68 a4 00 00 00       	push   $0xa4
+  jmp alltraps
+801061ee:	e9 f7 f4 ff ff       	jmp    801056ea <alltraps>
+
+801061f3 <vector165>:
+.globl vector165
+vector165:
+  pushl $0
+801061f3:	6a 00                	push   $0x0
+  pushl $165
+801061f5:	68 a5 00 00 00       	push   $0xa5
+  jmp alltraps
+801061fa:	e9 eb f4 ff ff       	jmp    801056ea <alltraps>
+
+801061ff <vector166>:
+.globl vector166
+vector166:
+  pushl $0
+801061ff:	6a 00                	push   $0x0
+  pushl $166
+80106201:	68 a6 00 00 00       	push   $0xa6
+  jmp alltraps
+80106206:	e9 df f4 ff ff       	jmp    801056ea <alltraps>
+
+8010620b <vector167>:
+.globl vector167
+vector167:
+  pushl $0
+8010620b:	6a 00                	push   $0x0
+  pushl $167
+8010620d:	68 a7 00 00 00       	push   $0xa7
+  jmp alltraps
+80106212:	e9 d3 f4 ff ff       	jmp    801056ea <alltraps>
+
+80106217 <vector168>:
+.globl vector168
+vector168:
+  pushl $0
+80106217:	6a 00                	push   $0x0
+  pushl $168
+80106219:	68 a8 00 00 00       	push   $0xa8
+  jmp alltraps
+8010621e:	e9 c7 f4 ff ff       	jmp    801056ea <alltraps>
+
+80106223 <vector169>:
+.globl vector169
+vector169:
+  pushl $0
+80106223:	6a 00                	push   $0x0
+  pushl $169
+80106225:	68 a9 00 00 00       	push   $0xa9
+  jmp alltraps
+8010622a:	e9 bb f4 ff ff       	jmp    801056ea <alltraps>
+
+8010622f <vector170>:
+.globl vector170
+vector170:
+  pushl $0
+8010622f:	6a 00                	push   $0x0
+  pushl $170
+80106231:	68 aa 00 00 00       	push   $0xaa
+  jmp alltraps
+80106236:	e9 af f4 ff ff       	jmp    801056ea <alltraps>
+
+8010623b <vector171>:
+.globl vector171
+vector171:
+  pushl $0
+8010623b:	6a 00                	push   $0x0
+  pushl $171
+8010623d:	68 ab 00 00 00       	push   $0xab
+  jmp alltraps
+80106242:	e9 a3 f4 ff ff       	jmp    801056ea <alltraps>
+
+80106247 <vector172>:
+.globl vector172
+vector172:
+  pushl $0
+80106247:	6a 00                	push   $0x0
+  pushl $172
+80106249:	68 ac 00 00 00       	push   $0xac
+  jmp alltraps
+8010624e:	e9 97 f4 ff ff       	jmp    801056ea <alltraps>
+
+80106253 <vector173>:
+.globl vector173
+vector173:
+  pushl $0
+80106253:	6a 00                	push   $0x0
+  pushl $173
+80106255:	68 ad 00 00 00       	push   $0xad
+  jmp alltraps
+8010625a:	e9 8b f4 ff ff       	jmp    801056ea <alltraps>
+
+8010625f <vector174>:
+.globl vector174
+vector174:
+  pushl $0
+8010625f:	6a 00                	push   $0x0
+  pushl $174
+80106261:	68 ae 00 00 00       	push   $0xae
+  jmp alltraps
+80106266:	e9 7f f4 ff ff       	jmp    801056ea <alltraps>
+
+8010626b <vector175>:
+.globl vector175
+vector175:
+  pushl $0
+8010626b:	6a 00                	push   $0x0
+  pushl $175
+8010626d:	68 af 00 00 00       	push   $0xaf
+  jmp alltraps
+80106272:	e9 73 f4 ff ff       	jmp    801056ea <alltraps>
+
+80106277 <vector176>:
+.globl vector176
+vector176:
+  pushl $0
+80106277:	6a 00                	push   $0x0
+  pushl $176
+80106279:	68 b0 00 00 00       	push   $0xb0
+  jmp alltraps
+8010627e:	e9 67 f4 ff ff       	jmp    801056ea <alltraps>
+
+80106283 <vector177>:
+.globl vector177
+vector177:
+  pushl $0
+80106283:	6a 00                	push   $0x0
+  pushl $177
+80106285:	68 b1 00 00 00       	push   $0xb1
+  jmp alltraps
+8010628a:	e9 5b f4 ff ff       	jmp    801056ea <alltraps>
+
+8010628f <vector178>:
+.globl vector178
+vector178:
+  pushl $0
+8010628f:	6a 00                	push   $0x0
+  pushl $178
+80106291:	68 b2 00 00 00       	push   $0xb2
+  jmp alltraps
+80106296:	e9 4f f4 ff ff       	jmp    801056ea <alltraps>
+
+8010629b <vector179>:
+.globl vector179
+vector179:
+  pushl $0
+8010629b:	6a 00                	push   $0x0
+  pushl $179
+8010629d:	68 b3 00 00 00       	push   $0xb3
+  jmp alltraps
+801062a2:	e9 43 f4 ff ff       	jmp    801056ea <alltraps>
+
+801062a7 <vector180>:
+.globl vector180
+vector180:
+  pushl $0
+801062a7:	6a 00                	push   $0x0
+  pushl $180
+801062a9:	68 b4 00 00 00       	push   $0xb4
+  jmp alltraps
+801062ae:	e9 37 f4 ff ff       	jmp    801056ea <alltraps>
+
+801062b3 <vector181>:
+.globl vector181
+vector181:
+  pushl $0
+801062b3:	6a 00                	push   $0x0
+  pushl $181
+801062b5:	68 b5 00 00 00       	push   $0xb5
+  jmp alltraps
+801062ba:	e9 2b f4 ff ff       	jmp    801056ea <alltraps>
+
+801062bf <vector182>:
+.globl vector182
+vector182:
+  pushl $0
+801062bf:	6a 00                	push   $0x0
+  pushl $182
+801062c1:	68 b6 00 00 00       	push   $0xb6
+  jmp alltraps
+801062c6:	e9 1f f4 ff ff       	jmp    801056ea <alltraps>
+
+801062cb <vector183>:
+.globl vector183
+vector183:
+  pushl $0
+801062cb:	6a 00                	push   $0x0
+  pushl $183
+801062cd:	68 b7 00 00 00       	push   $0xb7
+  jmp alltraps
+801062d2:	e9 13 f4 ff ff       	jmp    801056ea <alltraps>
+
+801062d7 <vector184>:
+.globl vector184
+vector184:
+  pushl $0
+801062d7:	6a 00                	push   $0x0
+  pushl $184
+801062d9:	68 b8 00 00 00       	push   $0xb8
+  jmp alltraps
+801062de:	e9 07 f4 ff ff       	jmp    801056ea <alltraps>
+
+801062e3 <vector185>:
+.globl vector185
+vector185:
+  pushl $0
+801062e3:	6a 00                	push   $0x0
+  pushl $185
+801062e5:	68 b9 00 00 00       	push   $0xb9
+  jmp alltraps
+801062ea:	e9 fb f3 ff ff       	jmp    801056ea <alltraps>
+
+801062ef <vector186>:
+.globl vector186
+vector186:
+  pushl $0
+801062ef:	6a 00                	push   $0x0
+  pushl $186
+801062f1:	68 ba 00 00 00       	push   $0xba
+  jmp alltraps
+801062f6:	e9 ef f3 ff ff       	jmp    801056ea <alltraps>
+
+801062fb <vector187>:
+.globl vector187
+vector187:
+  pushl $0
+801062fb:	6a 00                	push   $0x0
+  pushl $187
+801062fd:	68 bb 00 00 00       	push   $0xbb
+  jmp alltraps
+80106302:	e9 e3 f3 ff ff       	jmp    801056ea <alltraps>
+
+80106307 <vector188>:
+.globl vector188
+vector188:
+  pushl $0
+80106307:	6a 00                	push   $0x0
+  pushl $188
+80106309:	68 bc 00 00 00       	push   $0xbc
+  jmp alltraps
+8010630e:	e9 d7 f3 ff ff       	jmp    801056ea <alltraps>
+
+80106313 <vector189>:
+.globl vector189
+vector189:
+  pushl $0
+80106313:	6a 00                	push   $0x0
+  pushl $189
+80106315:	68 bd 00 00 00       	push   $0xbd
+  jmp alltraps
+8010631a:	e9 cb f3 ff ff       	jmp    801056ea <alltraps>
+
+8010631f <vector190>:
+.globl vector190
+vector190:
+  pushl $0
+8010631f:	6a 00                	push   $0x0
+  pushl $190
+80106321:	68 be 00 00 00       	push   $0xbe
+  jmp alltraps
+80106326:	e9 bf f3 ff ff       	jmp    801056ea <alltraps>
+
+8010632b <vector191>:
+.globl vector191
+vector191:
+  pushl $0
+8010632b:	6a 00                	push   $0x0
+  pushl $191
+8010632d:	68 bf 00 00 00       	push   $0xbf
+  jmp alltraps
+80106332:	e9 b3 f3 ff ff       	jmp    801056ea <alltraps>
+
+80106337 <vector192>:
+.globl vector192
+vector192:
+  pushl $0
+80106337:	6a 00                	push   $0x0
+  pushl $192
+80106339:	68 c0 00 00 00       	push   $0xc0
+  jmp alltraps
+8010633e:	e9 a7 f3 ff ff       	jmp    801056ea <alltraps>
+
+80106343 <vector193>:
+.globl vector193
+vector193:
+  pushl $0
+80106343:	6a 00                	push   $0x0
+  pushl $193
+80106345:	68 c1 00 00 00       	push   $0xc1
+  jmp alltraps
+8010634a:	e9 9b f3 ff ff       	jmp    801056ea <alltraps>
+
+8010634f <vector194>:
+.globl vector194
+vector194:
+  pushl $0
+8010634f:	6a 00                	push   $0x0
+  pushl $194
+80106351:	68 c2 00 00 00       	push   $0xc2
+  jmp alltraps
+80106356:	e9 8f f3 ff ff       	jmp    801056ea <alltraps>
+
+8010635b <vector195>:
+.globl vector195
+vector195:
+  pushl $0
+8010635b:	6a 00                	push   $0x0
+  pushl $195
+8010635d:	68 c3 00 00 00       	push   $0xc3
+  jmp alltraps
+80106362:	e9 83 f3 ff ff       	jmp    801056ea <alltraps>
+
+80106367 <vector196>:
+.globl vector196
+vector196:
+  pushl $0
+80106367:	6a 00                	push   $0x0
+  pushl $196
+80106369:	68 c4 00 00 00       	push   $0xc4
+  jmp alltraps
+8010636e:	e9 77 f3 ff ff       	jmp    801056ea <alltraps>
+
+80106373 <vector197>:
+.globl vector197
+vector197:
+  pushl $0
+80106373:	6a 00                	push   $0x0
+  pushl $197
+80106375:	68 c5 00 00 00       	push   $0xc5
+  jmp alltraps
+8010637a:	e9 6b f3 ff ff       	jmp    801056ea <alltraps>
+
+8010637f <vector198>:
+.globl vector198
+vector198:
+  pushl $0
+8010637f:	6a 00                	push   $0x0
+  pushl $198
+80106381:	68 c6 00 00 00       	push   $0xc6
+  jmp alltraps
+80106386:	e9 5f f3 ff ff       	jmp    801056ea <alltraps>
+
+8010638b <vector199>:
+.globl vector199
+vector199:
+  pushl $0
+8010638b:	6a 00                	push   $0x0
+  pushl $199
+8010638d:	68 c7 00 00 00       	push   $0xc7
+  jmp alltraps
+80106392:	e9 53 f3 ff ff       	jmp    801056ea <alltraps>
+
+80106397 <vector200>:
+.globl vector200
+vector200:
+  pushl $0
+80106397:	6a 00                	push   $0x0
+  pushl $200
+80106399:	68 c8 00 00 00       	push   $0xc8
+  jmp alltraps
+8010639e:	e9 47 f3 ff ff       	jmp    801056ea <alltraps>
+
+801063a3 <vector201>:
+.globl vector201
+vector201:
+  pushl $0
+801063a3:	6a 00                	push   $0x0
+  pushl $201
+801063a5:	68 c9 00 00 00       	push   $0xc9
+  jmp alltraps
+801063aa:	e9 3b f3 ff ff       	jmp    801056ea <alltraps>
+
+801063af <vector202>:
+.globl vector202
+vector202:
+  pushl $0
+801063af:	6a 00                	push   $0x0
+  pushl $202
+801063b1:	68 ca 00 00 00       	push   $0xca
+  jmp alltraps
+801063b6:	e9 2f f3 ff ff       	jmp    801056ea <alltraps>
+
+801063bb <vector203>:
+.globl vector203
+vector203:
+  pushl $0
+801063bb:	6a 00                	push   $0x0
+  pushl $203
+801063bd:	68 cb 00 00 00       	push   $0xcb
+  jmp alltraps
+801063c2:	e9 23 f3 ff ff       	jmp    801056ea <alltraps>
+
+801063c7 <vector204>:
+.globl vector204
+vector204:
+  pushl $0
+801063c7:	6a 00                	push   $0x0
+  pushl $204
+801063c9:	68 cc 00 00 00       	push   $0xcc
+  jmp alltraps
+801063ce:	e9 17 f3 ff ff       	jmp    801056ea <alltraps>
+
+801063d3 <vector205>:
+.globl vector205
+vector205:
+  pushl $0
+801063d3:	6a 00                	push   $0x0
+  pushl $205
+801063d5:	68 cd 00 00 00       	push   $0xcd
+  jmp alltraps
+801063da:	e9 0b f3 ff ff       	jmp    801056ea <alltraps>
+
+801063df <vector206>:
+.globl vector206
+vector206:
+  pushl $0
+801063df:	6a 00                	push   $0x0
+  pushl $206
+801063e1:	68 ce 00 00 00       	push   $0xce
+  jmp alltraps
+801063e6:	e9 ff f2 ff ff       	jmp    801056ea <alltraps>
+
+801063eb <vector207>:
+.globl vector207
+vector207:
+  pushl $0
+801063eb:	6a 00                	push   $0x0
+  pushl $207
+801063ed:	68 cf 00 00 00       	push   $0xcf
+  jmp alltraps
+801063f2:	e9 f3 f2 ff ff       	jmp    801056ea <alltraps>
+
+801063f7 <vector208>:
+.globl vector208
+vector208:
+  pushl $0
+801063f7:	6a 00                	push   $0x0
+  pushl $208
+801063f9:	68 d0 00 00 00       	push   $0xd0
+  jmp alltraps
+801063fe:	e9 e7 f2 ff ff       	jmp    801056ea <alltraps>
+
+80106403 <vector209>:
+.globl vector209
+vector209:
+  pushl $0
+80106403:	6a 00                	push   $0x0
+  pushl $209
+80106405:	68 d1 00 00 00       	push   $0xd1
+  jmp alltraps
+8010640a:	e9 db f2 ff ff       	jmp    801056ea <alltraps>
+
+8010640f <vector210>:
+.globl vector210
+vector210:
+  pushl $0
+8010640f:	6a 00                	push   $0x0
+  pushl $210
+80106411:	68 d2 00 00 00       	push   $0xd2
+  jmp alltraps
+80106416:	e9 cf f2 ff ff       	jmp    801056ea <alltraps>
+
+8010641b <vector211>:
+.globl vector211
+vector211:
+  pushl $0
+8010641b:	6a 00                	push   $0x0
+  pushl $211
+8010641d:	68 d3 00 00 00       	push   $0xd3
+  jmp alltraps
+80106422:	e9 c3 f2 ff ff       	jmp    801056ea <alltraps>
+
+80106427 <vector212>:
+.globl vector212
+vector212:
+  pushl $0
+80106427:	6a 00                	push   $0x0
+  pushl $212
+80106429:	68 d4 00 00 00       	push   $0xd4
+  jmp alltraps
+8010642e:	e9 b7 f2 ff ff       	jmp    801056ea <alltraps>
+
+80106433 <vector213>:
+.globl vector213
+vector213:
+  pushl $0
+80106433:	6a 00                	push   $0x0
+  pushl $213
+80106435:	68 d5 00 00 00       	push   $0xd5
+  jmp alltraps
+8010643a:	e9 ab f2 ff ff       	jmp    801056ea <alltraps>
+
+8010643f <vector214>:
+.globl vector214
+vector214:
+  pushl $0
+8010643f:	6a 00                	push   $0x0
+  pushl $214
+80106441:	68 d6 00 00 00       	push   $0xd6
+  jmp alltraps
+80106446:	e9 9f f2 ff ff       	jmp    801056ea <alltraps>
+
+8010644b <vector215>:
+.globl vector215
+vector215:
+  pushl $0
+8010644b:	6a 00                	push   $0x0
+  pushl $215
+8010644d:	68 d7 00 00 00       	push   $0xd7
+  jmp alltraps
+80106452:	e9 93 f2 ff ff       	jmp    801056ea <alltraps>
+
+80106457 <vector216>:
+.globl vector216
+vector216:
+  pushl $0
+80106457:	6a 00                	push   $0x0
+  pushl $216
+80106459:	68 d8 00 00 00       	push   $0xd8
+  jmp alltraps
+8010645e:	e9 87 f2 ff ff       	jmp    801056ea <alltraps>
+
+80106463 <vector217>:
+.globl vector217
+vector217:
+  pushl $0
+80106463:	6a 00                	push   $0x0
+  pushl $217
+80106465:	68 d9 00 00 00       	push   $0xd9
+  jmp alltraps
+8010646a:	e9 7b f2 ff ff       	jmp    801056ea <alltraps>
+
+8010646f <vector218>:
+.globl vector218
+vector218:
+  pushl $0
+8010646f:	6a 00                	push   $0x0
+  pushl $218
+80106471:	68 da 00 00 00       	push   $0xda
+  jmp alltraps
+80106476:	e9 6f f2 ff ff       	jmp    801056ea <alltraps>
+
+8010647b <vector219>:
+.globl vector219
+vector219:
+  pushl $0
+8010647b:	6a 00                	push   $0x0
+  pushl $219
+8010647d:	68 db 00 00 00       	push   $0xdb
+  jmp alltraps
+80106482:	e9 63 f2 ff ff       	jmp    801056ea <alltraps>
+
+80106487 <vector220>:
+.globl vector220
+vector220:
+  pushl $0
+80106487:	6a 00                	push   $0x0
+  pushl $220
+80106489:	68 dc 00 00 00       	push   $0xdc
+  jmp alltraps
+8010648e:	e9 57 f2 ff ff       	jmp    801056ea <alltraps>
+
+80106493 <vector221>:
+.globl vector221
+vector221:
+  pushl $0
+80106493:	6a 00                	push   $0x0
+  pushl $221
+80106495:	68 dd 00 00 00       	push   $0xdd
+  jmp alltraps
+8010649a:	e9 4b f2 ff ff       	jmp    801056ea <alltraps>
+
+8010649f <vector222>:
+.globl vector222
+vector222:
+  pushl $0
+8010649f:	6a 00                	push   $0x0
+  pushl $222
+801064a1:	68 de 00 00 00       	push   $0xde
+  jmp alltraps
+801064a6:	e9 3f f2 ff ff       	jmp    801056ea <alltraps>
+
+801064ab <vector223>:
+.globl vector223
+vector223:
+  pushl $0
+801064ab:	6a 00                	push   $0x0
+  pushl $223
+801064ad:	68 df 00 00 00       	push   $0xdf
+  jmp alltraps
+801064b2:	e9 33 f2 ff ff       	jmp    801056ea <alltraps>
+
+801064b7 <vector224>:
+.globl vector224
+vector224:
+  pushl $0
+801064b7:	6a 00                	push   $0x0
+  pushl $224
+801064b9:	68 e0 00 00 00       	push   $0xe0
+  jmp alltraps
+801064be:	e9 27 f2 ff ff       	jmp    801056ea <alltraps>
+
+801064c3 <vector225>:
+.globl vector225
+vector225:
+  pushl $0
+801064c3:	6a 00                	push   $0x0
+  pushl $225
+801064c5:	68 e1 00 00 00       	push   $0xe1
+  jmp alltraps
+801064ca:	e9 1b f2 ff ff       	jmp    801056ea <alltraps>
+
+801064cf <vector226>:
+.globl vector226
+vector226:
+  pushl $0
+801064cf:	6a 00                	push   $0x0
+  pushl $226
+801064d1:	68 e2 00 00 00       	push   $0xe2
+  jmp alltraps
+801064d6:	e9 0f f2 ff ff       	jmp    801056ea <alltraps>
+
+801064db <vector227>:
+.globl vector227
+vector227:
+  pushl $0
+801064db:	6a 00                	push   $0x0
+  pushl $227
+801064dd:	68 e3 00 00 00       	push   $0xe3
+  jmp alltraps
+801064e2:	e9 03 f2 ff ff       	jmp    801056ea <alltraps>
+
+801064e7 <vector228>:
+.globl vector228
+vector228:
+  pushl $0
+801064e7:	6a 00                	push   $0x0
+  pushl $228
+801064e9:	68 e4 00 00 00       	push   $0xe4
+  jmp alltraps
+801064ee:	e9 f7 f1 ff ff       	jmp    801056ea <alltraps>
+
+801064f3 <vector229>:
+.globl vector229
+vector229:
+  pushl $0
+801064f3:	6a 00                	push   $0x0
+  pushl $229
+801064f5:	68 e5 00 00 00       	push   $0xe5
+  jmp alltraps
+801064fa:	e9 eb f1 ff ff       	jmp    801056ea <alltraps>
+
+801064ff <vector230>:
+.globl vector230
+vector230:
+  pushl $0
+801064ff:	6a 00                	push   $0x0
+  pushl $230
+80106501:	68 e6 00 00 00       	push   $0xe6
+  jmp alltraps
+80106506:	e9 df f1 ff ff       	jmp    801056ea <alltraps>
+
+8010650b <vector231>:
+.globl vector231
+vector231:
+  pushl $0
+8010650b:	6a 00                	push   $0x0
+  pushl $231
+8010650d:	68 e7 00 00 00       	push   $0xe7
+  jmp alltraps
+80106512:	e9 d3 f1 ff ff       	jmp    801056ea <alltraps>
+
+80106517 <vector232>:
+.globl vector232
+vector232:
+  pushl $0
+80106517:	6a 00                	push   $0x0
+  pushl $232
+80106519:	68 e8 00 00 00       	push   $0xe8
+  jmp alltraps
+8010651e:	e9 c7 f1 ff ff       	jmp    801056ea <alltraps>
+
+80106523 <vector233>:
+.globl vector233
+vector233:
+  pushl $0
+80106523:	6a 00                	push   $0x0
+  pushl $233
+80106525:	68 e9 00 00 00       	push   $0xe9
+  jmp alltraps
+8010652a:	e9 bb f1 ff ff       	jmp    801056ea <alltraps>
+
+8010652f <vector234>:
+.globl vector234
+vector234:
+  pushl $0
+8010652f:	6a 00                	push   $0x0
+  pushl $234
+80106531:	68 ea 00 00 00       	push   $0xea
+  jmp alltraps
+80106536:	e9 af f1 ff ff       	jmp    801056ea <alltraps>
+
+8010653b <vector235>:
+.globl vector235
+vector235:
+  pushl $0
+8010653b:	6a 00                	push   $0x0
+  pushl $235
+8010653d:	68 eb 00 00 00       	push   $0xeb
+  jmp alltraps
+80106542:	e9 a3 f1 ff ff       	jmp    801056ea <alltraps>
+
+80106547 <vector236>:
+.globl vector236
+vector236:
+  pushl $0
+80106547:	6a 00                	push   $0x0
+  pushl $236
+80106549:	68 ec 00 00 00       	push   $0xec
+  jmp alltraps
+8010654e:	e9 97 f1 ff ff       	jmp    801056ea <alltraps>
+
+80106553 <vector237>:
+.globl vector237
+vector237:
+  pushl $0
+80106553:	6a 00                	push   $0x0
+  pushl $237
+80106555:	68 ed 00 00 00       	push   $0xed
+  jmp alltraps
+8010655a:	e9 8b f1 ff ff       	jmp    801056ea <alltraps>
+
+8010655f <vector238>:
+.globl vector238
+vector238:
+  pushl $0
+8010655f:	6a 00                	push   $0x0
+  pushl $238
+80106561:	68 ee 00 00 00       	push   $0xee
+  jmp alltraps
+80106566:	e9 7f f1 ff ff       	jmp    801056ea <alltraps>
+
+8010656b <vector239>:
+.globl vector239
+vector239:
+  pushl $0
+8010656b:	6a 00                	push   $0x0
+  pushl $239
+8010656d:	68 ef 00 00 00       	push   $0xef
+  jmp alltraps
+80106572:	e9 73 f1 ff ff       	jmp    801056ea <alltraps>
+
+80106577 <vector240>:
+.globl vector240
+vector240:
+  pushl $0
+80106577:	6a 00                	push   $0x0
+  pushl $240
+80106579:	68 f0 00 00 00       	push   $0xf0
+  jmp alltraps
+8010657e:	e9 67 f1 ff ff       	jmp    801056ea <alltraps>
+
+80106583 <vector241>:
+.globl vector241
+vector241:
+  pushl $0
+80106583:	6a 00                	push   $0x0
+  pushl $241
+80106585:	68 f1 00 00 00       	push   $0xf1
+  jmp alltraps
+8010658a:	e9 5b f1 ff ff       	jmp    801056ea <alltraps>
+
+8010658f <vector242>:
+.globl vector242
+vector242:
+  pushl $0
+8010658f:	6a 00                	push   $0x0
+  pushl $242
+80106591:	68 f2 00 00 00       	push   $0xf2
+  jmp alltraps
+80106596:	e9 4f f1 ff ff       	jmp    801056ea <alltraps>
+
+8010659b <vector243>:
+.globl vector243
+vector243:
+  pushl $0
+8010659b:	6a 00                	push   $0x0
+  pushl $243
+8010659d:	68 f3 00 00 00       	push   $0xf3
+  jmp alltraps
+801065a2:	e9 43 f1 ff ff       	jmp    801056ea <alltraps>
+
+801065a7 <vector244>:
+.globl vector244
+vector244:
+  pushl $0
+801065a7:	6a 00                	push   $0x0
+  pushl $244
+801065a9:	68 f4 00 00 00       	push   $0xf4
+  jmp alltraps
+801065ae:	e9 37 f1 ff ff       	jmp    801056ea <alltraps>
+
+801065b3 <vector245>:
+.globl vector245
+vector245:
+  pushl $0
+801065b3:	6a 00                	push   $0x0
+  pushl $245
+801065b5:	68 f5 00 00 00       	push   $0xf5
+  jmp alltraps
+801065ba:	e9 2b f1 ff ff       	jmp    801056ea <alltraps>
+
+801065bf <vector246>:
+.globl vector246
+vector246:
+  pushl $0
+801065bf:	6a 00                	push   $0x0
+  pushl $246
+801065c1:	68 f6 00 00 00       	push   $0xf6
+  jmp alltraps
+801065c6:	e9 1f f1 ff ff       	jmp    801056ea <alltraps>
+
+801065cb <vector247>:
+.globl vector247
+vector247:
+  pushl $0
+801065cb:	6a 00                	push   $0x0
+  pushl $247
+801065cd:	68 f7 00 00 00       	push   $0xf7
+  jmp alltraps
+801065d2:	e9 13 f1 ff ff       	jmp    801056ea <alltraps>
+
+801065d7 <vector248>:
+.globl vector248
+vector248:
+  pushl $0
+801065d7:	6a 00                	push   $0x0
+  pushl $248
+801065d9:	68 f8 00 00 00       	push   $0xf8
+  jmp alltraps
+801065de:	e9 07 f1 ff ff       	jmp    801056ea <alltraps>
+
+801065e3 <vector249>:
+.globl vector249
+vector249:
+  pushl $0
+801065e3:	6a 00                	push   $0x0
+  pushl $249
+801065e5:	68 f9 00 00 00       	push   $0xf9
+  jmp alltraps
+801065ea:	e9 fb f0 ff ff       	jmp    801056ea <alltraps>
+
+801065ef <vector250>:
+.globl vector250
+vector250:
+  pushl $0
+801065ef:	6a 00                	push   $0x0
+  pushl $250
+801065f1:	68 fa 00 00 00       	push   $0xfa
+  jmp alltraps
+801065f6:	e9 ef f0 ff ff       	jmp    801056ea <alltraps>
+
+801065fb <vector251>:
+.globl vector251
+vector251:
+  pushl $0
+801065fb:	6a 00                	push   $0x0
+  pushl $251
+801065fd:	68 fb 00 00 00       	push   $0xfb
+  jmp alltraps
+80106602:	e9 e3 f0 ff ff       	jmp    801056ea <alltraps>
+
+80106607 <vector252>:
+.globl vector252
+vector252:
+  pushl $0
+80106607:	6a 00                	push   $0x0
+  pushl $252
+80106609:	68 fc 00 00 00       	push   $0xfc
+  jmp alltraps
+8010660e:	e9 d7 f0 ff ff       	jmp    801056ea <alltraps>
+
+80106613 <vector253>:
+.globl vector253
+vector253:
+  pushl $0
+80106613:	6a 00                	push   $0x0
+  pushl $253
+80106615:	68 fd 00 00 00       	push   $0xfd
+  jmp alltraps
+8010661a:	e9 cb f0 ff ff       	jmp    801056ea <alltraps>
+
+8010661f <vector254>:
+.globl vector254
+vector254:
+  pushl $0
+8010661f:	6a 00                	push   $0x0
+  pushl $254
+80106621:	68 fe 00 00 00       	push   $0xfe
+  jmp alltraps
+80106626:	e9 bf f0 ff ff       	jmp    801056ea <alltraps>
+
+8010662b <vector255>:
+.globl vector255
+vector255:
+  pushl $0
+8010662b:	6a 00                	push   $0x0
+  pushl $255
+8010662d:	68 ff 00 00 00       	push   $0xff
+  jmp alltraps
+80106632:	e9 b3 f0 ff ff       	jmp    801056ea <alltraps>
+80106637:	66 90                	xchg   %ax,%ax
+80106639:	66 90                	xchg   %ax,%ax
+8010663b:	66 90                	xchg   %ax,%ax
+8010663d:	66 90                	xchg   %ax,%ax
+8010663f:	90                   	nop
+
+80106640 <walkpgdir>:
+// Return the address of the PTE in page table pgdir
+// that corresponds to virtual address va.  If alloc!=0,
+// create any required page table pages.
+static pte_t *
+walkpgdir(pde_t *pgdir, const void *va, int alloc)
+{
+80106640:	55                   	push   %ebp
+80106641:	89 e5                	mov    %esp,%ebp
+80106643:	57                   	push   %edi
+80106644:	56                   	push   %esi
+80106645:	89 d6                	mov    %edx,%esi
+  pde_t *pde;
+  pte_t *pgtab;
+
+  pde = &pgdir[PDX(va)];
+80106647:	c1 ea 16             	shr    $0x16,%edx
+{
+8010664a:	53                   	push   %ebx
+  pde = &pgdir[PDX(va)];
+8010664b:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+{
+8010664e:	83 ec 0c             	sub    $0xc,%esp
+  if(*pde & PTE_P){
+80106651:	8b 07                	mov    (%edi),%eax
+80106653:	a8 01                	test   $0x1,%al
+80106655:	74 29                	je     80106680 <walkpgdir+0x40>
+    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+80106657:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+8010665c:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+    // The permissions here are overly generous, but they can
+    // be further restricted by the permissions in the page table
+    // entries, if necessary.
+    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+  }
+  return &pgtab[PTX(va)];
+80106662:	c1 ee 0a             	shr    $0xa,%esi
+}
+80106665:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return &pgtab[PTX(va)];
+80106668:	89 f2                	mov    %esi,%edx
+8010666a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
+80106670:	8d 04 13             	lea    (%ebx,%edx,1),%eax
+}
+80106673:	5b                   	pop    %ebx
+80106674:	5e                   	pop    %esi
+80106675:	5f                   	pop    %edi
+80106676:	5d                   	pop    %ebp
+80106677:	c3                   	ret    
+80106678:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010667f:	90                   	nop
+    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
+80106680:	85 c9                	test   %ecx,%ecx
+80106682:	74 2c                	je     801066b0 <walkpgdir+0x70>
+80106684:	e8 17 bf ff ff       	call   801025a0 <kalloc>
+80106689:	89 c3                	mov    %eax,%ebx
+8010668b:	85 c0                	test   %eax,%eax
+8010668d:	74 21                	je     801066b0 <walkpgdir+0x70>
+    memset(pgtab, 0, PGSIZE);
+8010668f:	83 ec 04             	sub    $0x4,%esp
+80106692:	68 00 10 00 00       	push   $0x1000
+80106697:	6a 00                	push   $0x0
+80106699:	50                   	push   %eax
+8010669a:	e8 c1 de ff ff       	call   80104560 <memset>
+    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+8010669f:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+801066a5:	83 c4 10             	add    $0x10,%esp
+801066a8:	83 c8 07             	or     $0x7,%eax
+801066ab:	89 07                	mov    %eax,(%edi)
+801066ad:	eb b3                	jmp    80106662 <walkpgdir+0x22>
+801066af:	90                   	nop
+}
+801066b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return 0;
+801066b3:	31 c0                	xor    %eax,%eax
+}
+801066b5:	5b                   	pop    %ebx
+801066b6:	5e                   	pop    %esi
+801066b7:	5f                   	pop    %edi
+801066b8:	5d                   	pop    %ebp
+801066b9:	c3                   	ret    
+801066ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801066c0 <mappages>:
+// Create PTEs for virtual addresses starting at va that refer to
+// physical addresses starting at pa. va and size might not
+// be page-aligned.
+static int
+mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
+{
+801066c0:	55                   	push   %ebp
+801066c1:	89 e5                	mov    %esp,%ebp
+801066c3:	57                   	push   %edi
+801066c4:	56                   	push   %esi
+  char *a, *last;
+  pte_t *pte;
+
+  a = (char*)PGROUNDDOWN((uint)va);
+801066c5:	89 d6                	mov    %edx,%esi
+{
+801066c7:	53                   	push   %ebx
+  a = (char*)PGROUNDDOWN((uint)va);
+801066c8:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+{
+801066ce:	83 ec 1c             	sub    $0x1c,%esp
+801066d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+801066d4:	8b 7d 08             	mov    0x8(%ebp),%edi
+801066d7:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+801066db:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801066e0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801066e3:	29 f7                	sub    %esi,%edi
+801066e5:	eb 21                	jmp    80106708 <mappages+0x48>
+801066e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801066ee:	66 90                	xchg   %ax,%ax
+  for(;;){
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+      return -1;
+    if(*pte & PTE_P)
+801066f0:	f6 00 01             	testb  $0x1,(%eax)
+801066f3:	75 45                	jne    8010673a <mappages+0x7a>
+      panic("remap");
+    *pte = pa | perm | PTE_P;
+801066f5:	0b 5d 0c             	or     0xc(%ebp),%ebx
+801066f8:	83 cb 01             	or     $0x1,%ebx
+801066fb:	89 18                	mov    %ebx,(%eax)
+    if(a == last)
+801066fd:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+80106700:	74 2e                	je     80106730 <mappages+0x70>
+      break;
+    a += PGSIZE;
+80106702:	81 c6 00 10 00 00    	add    $0x1000,%esi
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+80106708:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010670b:	b9 01 00 00 00       	mov    $0x1,%ecx
+80106710:	89 f2                	mov    %esi,%edx
+80106712:	8d 1c 3e             	lea    (%esi,%edi,1),%ebx
+80106715:	e8 26 ff ff ff       	call   80106640 <walkpgdir>
+8010671a:	85 c0                	test   %eax,%eax
+8010671c:	75 d2                	jne    801066f0 <mappages+0x30>
+    pa += PGSIZE;
+  }
+  return 0;
+}
+8010671e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+80106721:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106726:	5b                   	pop    %ebx
+80106727:	5e                   	pop    %esi
+80106728:	5f                   	pop    %edi
+80106729:	5d                   	pop    %ebp
+8010672a:	c3                   	ret    
+8010672b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010672f:	90                   	nop
+80106730:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80106733:	31 c0                	xor    %eax,%eax
+}
+80106735:	5b                   	pop    %ebx
+80106736:	5e                   	pop    %esi
+80106737:	5f                   	pop    %edi
+80106738:	5d                   	pop    %ebp
+80106739:	c3                   	ret    
+      panic("remap");
+8010673a:	83 ec 0c             	sub    $0xc,%esp
+8010673d:	68 28 78 10 80       	push   $0x80107828
+80106742:	e8 49 9c ff ff       	call   80100390 <panic>
+80106747:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010674e:	66 90                	xchg   %ax,%ax
+
+80106750 <deallocuvm.part.0>:
+// Deallocate user pages to bring the process size from oldsz to
+// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
+// need to be less than oldsz.  oldsz can be larger than the actual
+// process size.  Returns the new process size.
+int
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+80106750:	55                   	push   %ebp
+80106751:	89 e5                	mov    %esp,%ebp
+80106753:	57                   	push   %edi
+80106754:	89 c7                	mov    %eax,%edi
+80106756:	56                   	push   %esi
+80106757:	53                   	push   %ebx
+  uint a, pa;
+
+  if(newsz >= oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(newsz);
+80106758:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
+8010675e:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+80106764:	83 ec 1c             	sub    $0x1c,%esp
+80106767:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+  for(; a  < oldsz; a += PGSIZE){
+8010676a:	39 d3                	cmp    %edx,%ebx
+8010676c:	73 5a                	jae    801067c8 <deallocuvm.part.0+0x78>
+8010676e:	89 d6                	mov    %edx,%esi
+80106770:	eb 10                	jmp    80106782 <deallocuvm.part.0+0x32>
+80106772:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106778:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010677e:	39 de                	cmp    %ebx,%esi
+80106780:	76 46                	jbe    801067c8 <deallocuvm.part.0+0x78>
+    pte = walkpgdir(pgdir, (char*)a, 0);
+80106782:	31 c9                	xor    %ecx,%ecx
+80106784:	89 da                	mov    %ebx,%edx
+80106786:	89 f8                	mov    %edi,%eax
+80106788:	e8 b3 fe ff ff       	call   80106640 <walkpgdir>
+    if(!pte)
+8010678d:	85 c0                	test   %eax,%eax
+8010678f:	74 47                	je     801067d8 <deallocuvm.part.0+0x88>
+      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
+    else if((*pte & PTE_P) != 0){
+80106791:	8b 10                	mov    (%eax),%edx
+80106793:	f6 c2 01             	test   $0x1,%dl
+80106796:	74 e0                	je     80106778 <deallocuvm.part.0+0x28>
+      pa = PTE_ADDR(*pte);
+      if(pa == 0)
+80106798:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+8010679e:	74 46                	je     801067e6 <deallocuvm.part.0+0x96>
+        panic("kfree");
+      char *v = P2V(pa);
+      kfree(v);
+801067a0:	83 ec 0c             	sub    $0xc,%esp
+      char *v = P2V(pa);
+801067a3:	81 c2 00 00 00 80    	add    $0x80000000,%edx
+801067a9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+      kfree(v);
+801067ac:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801067b2:	52                   	push   %edx
+801067b3:	e8 28 bc ff ff       	call   801023e0 <kfree>
+      *pte = 0;
+801067b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801067bb:	83 c4 10             	add    $0x10,%esp
+801067be:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  for(; a  < oldsz; a += PGSIZE){
+801067c4:	39 de                	cmp    %ebx,%esi
+801067c6:	77 ba                	ja     80106782 <deallocuvm.part.0+0x32>
+    }
+  }
+  return newsz;
+}
+801067c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801067cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801067ce:	5b                   	pop    %ebx
+801067cf:	5e                   	pop    %esi
+801067d0:	5f                   	pop    %edi
+801067d1:	5d                   	pop    %ebp
+801067d2:	c3                   	ret    
+801067d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801067d7:	90                   	nop
+      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
+801067d8:	81 e3 00 00 c0 ff    	and    $0xffc00000,%ebx
+801067de:	81 c3 00 00 40 00    	add    $0x400000,%ebx
+801067e4:	eb 98                	jmp    8010677e <deallocuvm.part.0+0x2e>
+        panic("kfree");
+801067e6:	83 ec 0c             	sub    $0xc,%esp
+801067e9:	68 c6 71 10 80       	push   $0x801071c6
+801067ee:	e8 9d 9b ff ff       	call   80100390 <panic>
+801067f3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801067fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106800 <seginit>:
+{
+80106800:	55                   	push   %ebp
+80106801:	89 e5                	mov    %esp,%ebp
+80106803:	83 ec 18             	sub    $0x18,%esp
+  c = &cpus[cpuid()];
+80106806:	e8 a5 d0 ff ff       	call   801038b0 <cpuid>
+  pd[0] = size-1;
+8010680b:	ba 2f 00 00 00       	mov    $0x2f,%edx
+80106810:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+80106816:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
+8010681a:	c7 80 f8 27 11 80 ff 	movl   $0xffff,-0x7feed808(%eax)
+80106821:	ff 00 00 
+80106824:	c7 80 fc 27 11 80 00 	movl   $0xcf9a00,-0x7feed804(%eax)
+8010682b:	9a cf 00 
+  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
+8010682e:	c7 80 00 28 11 80 ff 	movl   $0xffff,-0x7feed800(%eax)
+80106835:	ff 00 00 
+80106838:	c7 80 04 28 11 80 00 	movl   $0xcf9200,-0x7feed7fc(%eax)
+8010683f:	92 cf 00 
+  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
+80106842:	c7 80 08 28 11 80 ff 	movl   $0xffff,-0x7feed7f8(%eax)
+80106849:	ff 00 00 
+8010684c:	c7 80 0c 28 11 80 00 	movl   $0xcffa00,-0x7feed7f4(%eax)
+80106853:	fa cf 00 
+  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
+80106856:	c7 80 10 28 11 80 ff 	movl   $0xffff,-0x7feed7f0(%eax)
+8010685d:	ff 00 00 
+80106860:	c7 80 14 28 11 80 00 	movl   $0xcff200,-0x7feed7ec(%eax)
+80106867:	f2 cf 00 
+  lgdt(c->gdt, sizeof(c->gdt));
+8010686a:	05 f0 27 11 80       	add    $0x801127f0,%eax
+  pd[1] = (uint)p;
+8010686f:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+  pd[2] = (uint)p >> 16;
+80106873:	c1 e8 10             	shr    $0x10,%eax
+80106876:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+  asm volatile("lgdt (%0)" : : "r" (pd));
+8010687a:	8d 45 f2             	lea    -0xe(%ebp),%eax
+8010687d:	0f 01 10             	lgdtl  (%eax)
+}
+80106880:	c9                   	leave  
+80106881:	c3                   	ret    
+80106882:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106889:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106890 <switchkvm>:
+  lcr3(V2P(kpgdir));   // switch to the kernel page table
+80106890:	a1 a4 54 11 80       	mov    0x801154a4,%eax
+80106895:	05 00 00 00 80       	add    $0x80000000,%eax
+}
+
+static inline void
+lcr3(uint val)
+{
+  asm volatile("movl %0,%%cr3" : : "r" (val));
+8010689a:	0f 22 d8             	mov    %eax,%cr3
+}
+8010689d:	c3                   	ret    
+8010689e:	66 90                	xchg   %ax,%ax
+
+801068a0 <switchuvm>:
+{
+801068a0:	55                   	push   %ebp
+801068a1:	89 e5                	mov    %esp,%ebp
+801068a3:	57                   	push   %edi
+801068a4:	56                   	push   %esi
+801068a5:	53                   	push   %ebx
+801068a6:	83 ec 1c             	sub    $0x1c,%esp
+801068a9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(p == 0)
+801068ac:	85 db                	test   %ebx,%ebx
+801068ae:	0f 84 cb 00 00 00    	je     8010697f <switchuvm+0xdf>
+  if(p->kstack == 0)
+801068b4:	8b 43 08             	mov    0x8(%ebx),%eax
+801068b7:	85 c0                	test   %eax,%eax
+801068b9:	0f 84 da 00 00 00    	je     80106999 <switchuvm+0xf9>
+  if(p->pgdir == 0)
+801068bf:	8b 43 04             	mov    0x4(%ebx),%eax
+801068c2:	85 c0                	test   %eax,%eax
+801068c4:	0f 84 c2 00 00 00    	je     8010698c <switchuvm+0xec>
+  pushcli();
+801068ca:	e8 91 da ff ff       	call   80104360 <pushcli>
+  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
+801068cf:	e8 5c cf ff ff       	call   80103830 <mycpu>
+801068d4:	89 c6                	mov    %eax,%esi
+801068d6:	e8 55 cf ff ff       	call   80103830 <mycpu>
+801068db:	89 c7                	mov    %eax,%edi
+801068dd:	e8 4e cf ff ff       	call   80103830 <mycpu>
+801068e2:	83 c7 08             	add    $0x8,%edi
+801068e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801068e8:	e8 43 cf ff ff       	call   80103830 <mycpu>
+801068ed:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+801068f0:	ba 67 00 00 00       	mov    $0x67,%edx
+801068f5:	66 89 be 9a 00 00 00 	mov    %di,0x9a(%esi)
+801068fc:	83 c0 08             	add    $0x8,%eax
+801068ff:	66 89 96 98 00 00 00 	mov    %dx,0x98(%esi)
+  mycpu()->ts.iomb = (ushort) 0xFFFF;
+80106906:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
+8010690b:	83 c1 08             	add    $0x8,%ecx
+8010690e:	c1 e8 18             	shr    $0x18,%eax
+80106911:	c1 e9 10             	shr    $0x10,%ecx
+80106914:	88 86 9f 00 00 00    	mov    %al,0x9f(%esi)
+8010691a:	88 8e 9c 00 00 00    	mov    %cl,0x9c(%esi)
+80106920:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80106925:	66 89 8e 9d 00 00 00 	mov    %cx,0x9d(%esi)
+  mycpu()->ts.ss0 = SEG_KDATA << 3;
+8010692c:	be 10 00 00 00       	mov    $0x10,%esi
+  mycpu()->gdt[SEG_TSS].s = 0;
+80106931:	e8 fa ce ff ff       	call   80103830 <mycpu>
+80106936:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+  mycpu()->ts.ss0 = SEG_KDATA << 3;
+8010693d:	e8 ee ce ff ff       	call   80103830 <mycpu>
+80106942:	66 89 70 10          	mov    %si,0x10(%eax)
+  mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
+80106946:	8b 73 08             	mov    0x8(%ebx),%esi
+80106949:	81 c6 00 10 00 00    	add    $0x1000,%esi
+8010694f:	e8 dc ce ff ff       	call   80103830 <mycpu>
+80106954:	89 70 0c             	mov    %esi,0xc(%eax)
+  mycpu()->ts.iomb = (ushort) 0xFFFF;
+80106957:	e8 d4 ce ff ff       	call   80103830 <mycpu>
+8010695c:	66 89 78 6e          	mov    %di,0x6e(%eax)
+  asm volatile("ltr %0" : : "r" (sel));
+80106960:	b8 28 00 00 00       	mov    $0x28,%eax
+80106965:	0f 00 d8             	ltr    %ax
+  lcr3(V2P(p->pgdir));  // switch to process's address space
+80106968:	8b 43 04             	mov    0x4(%ebx),%eax
+8010696b:	05 00 00 00 80       	add    $0x80000000,%eax
+  asm volatile("movl %0,%%cr3" : : "r" (val));
+80106970:	0f 22 d8             	mov    %eax,%cr3
+}
+80106973:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106976:	5b                   	pop    %ebx
+80106977:	5e                   	pop    %esi
+80106978:	5f                   	pop    %edi
+80106979:	5d                   	pop    %ebp
+  popcli();
+8010697a:	e9 31 da ff ff       	jmp    801043b0 <popcli>
+    panic("switchuvm: no process");
+8010697f:	83 ec 0c             	sub    $0xc,%esp
+80106982:	68 2e 78 10 80       	push   $0x8010782e
+80106987:	e8 04 9a ff ff       	call   80100390 <panic>
+    panic("switchuvm: no pgdir");
+8010698c:	83 ec 0c             	sub    $0xc,%esp
+8010698f:	68 59 78 10 80       	push   $0x80107859
+80106994:	e8 f7 99 ff ff       	call   80100390 <panic>
+    panic("switchuvm: no kstack");
+80106999:	83 ec 0c             	sub    $0xc,%esp
+8010699c:	68 44 78 10 80       	push   $0x80107844
+801069a1:	e8 ea 99 ff ff       	call   80100390 <panic>
+801069a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801069ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+801069b0 <inituvm>:
+{
+801069b0:	55                   	push   %ebp
+801069b1:	89 e5                	mov    %esp,%ebp
+801069b3:	57                   	push   %edi
+801069b4:	56                   	push   %esi
+801069b5:	53                   	push   %ebx
+801069b6:	83 ec 1c             	sub    $0x1c,%esp
+801069b9:	8b 45 08             	mov    0x8(%ebp),%eax
+801069bc:	8b 75 10             	mov    0x10(%ebp),%esi
+801069bf:	8b 7d 0c             	mov    0xc(%ebp),%edi
+801069c2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(sz >= PGSIZE)
+801069c5:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+801069cb:	77 49                	ja     80106a16 <inituvm+0x66>
+  mem = kalloc();
+801069cd:	e8 ce bb ff ff       	call   801025a0 <kalloc>
+  memset(mem, 0, PGSIZE);
+801069d2:	83 ec 04             	sub    $0x4,%esp
+801069d5:	68 00 10 00 00       	push   $0x1000
+  mem = kalloc();
+801069da:	89 c3                	mov    %eax,%ebx
+  memset(mem, 0, PGSIZE);
+801069dc:	6a 00                	push   $0x0
+801069de:	50                   	push   %eax
+801069df:	e8 7c db ff ff       	call   80104560 <memset>
+  mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
+801069e4:	58                   	pop    %eax
+801069e5:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+801069eb:	5a                   	pop    %edx
+801069ec:	6a 06                	push   $0x6
+801069ee:	b9 00 10 00 00       	mov    $0x1000,%ecx
+801069f3:	31 d2                	xor    %edx,%edx
+801069f5:	50                   	push   %eax
+801069f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801069f9:	e8 c2 fc ff ff       	call   801066c0 <mappages>
+  memmove(mem, init, sz);
+801069fe:	89 75 10             	mov    %esi,0x10(%ebp)
+80106a01:	83 c4 10             	add    $0x10,%esp
+80106a04:	89 7d 0c             	mov    %edi,0xc(%ebp)
+80106a07:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+80106a0a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106a0d:	5b                   	pop    %ebx
+80106a0e:	5e                   	pop    %esi
+80106a0f:	5f                   	pop    %edi
+80106a10:	5d                   	pop    %ebp
+  memmove(mem, init, sz);
+80106a11:	e9 ea db ff ff       	jmp    80104600 <memmove>
+    panic("inituvm: more than a page");
+80106a16:	83 ec 0c             	sub    $0xc,%esp
+80106a19:	68 6d 78 10 80       	push   $0x8010786d
+80106a1e:	e8 6d 99 ff ff       	call   80100390 <panic>
+80106a23:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106a2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106a30 <loaduvm>:
+{
+80106a30:	55                   	push   %ebp
+80106a31:	89 e5                	mov    %esp,%ebp
+80106a33:	57                   	push   %edi
+80106a34:	56                   	push   %esi
+80106a35:	53                   	push   %ebx
+80106a36:	83 ec 1c             	sub    $0x1c,%esp
+80106a39:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106a3c:	8b 75 18             	mov    0x18(%ebp),%esi
+  if((uint) addr % PGSIZE != 0)
+80106a3f:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80106a44:	0f 85 8d 00 00 00    	jne    80106ad7 <loaduvm+0xa7>
+80106a4a:	01 f0                	add    %esi,%eax
+  for(i = 0; i < sz; i += PGSIZE){
+80106a4c:	89 f3                	mov    %esi,%ebx
+80106a4e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+80106a51:	8b 45 14             	mov    0x14(%ebp),%eax
+80106a54:	01 f0                	add    %esi,%eax
+80106a56:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  for(i = 0; i < sz; i += PGSIZE){
+80106a59:	85 f6                	test   %esi,%esi
+80106a5b:	75 11                	jne    80106a6e <loaduvm+0x3e>
+80106a5d:	eb 61                	jmp    80106ac0 <loaduvm+0x90>
+80106a5f:	90                   	nop
+80106a60:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
+80106a66:	89 f0                	mov    %esi,%eax
+80106a68:	29 d8                	sub    %ebx,%eax
+80106a6a:	39 c6                	cmp    %eax,%esi
+80106a6c:	76 52                	jbe    80106ac0 <loaduvm+0x90>
+    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
+80106a6e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80106a71:	8b 45 08             	mov    0x8(%ebp),%eax
+80106a74:	31 c9                	xor    %ecx,%ecx
+80106a76:	29 da                	sub    %ebx,%edx
+80106a78:	e8 c3 fb ff ff       	call   80106640 <walkpgdir>
+80106a7d:	85 c0                	test   %eax,%eax
+80106a7f:	74 49                	je     80106aca <loaduvm+0x9a>
+    pa = PTE_ADDR(*pte);
+80106a81:	8b 00                	mov    (%eax),%eax
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+80106a83:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+    if(sz - i < PGSIZE)
+80106a86:	bf 00 10 00 00       	mov    $0x1000,%edi
+    pa = PTE_ADDR(*pte);
+80106a8b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+    if(sz - i < PGSIZE)
+80106a90:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
+80106a96:	0f 46 fb             	cmovbe %ebx,%edi
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+80106a99:	29 d9                	sub    %ebx,%ecx
+80106a9b:	05 00 00 00 80       	add    $0x80000000,%eax
+80106aa0:	57                   	push   %edi
+80106aa1:	51                   	push   %ecx
+80106aa2:	50                   	push   %eax
+80106aa3:	ff 75 10             	pushl  0x10(%ebp)
+80106aa6:	e8 45 af ff ff       	call   801019f0 <readi>
+80106aab:	83 c4 10             	add    $0x10,%esp
+80106aae:	39 f8                	cmp    %edi,%eax
+80106ab0:	74 ae                	je     80106a60 <loaduvm+0x30>
+}
+80106ab2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+80106ab5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106aba:	5b                   	pop    %ebx
+80106abb:	5e                   	pop    %esi
+80106abc:	5f                   	pop    %edi
+80106abd:	5d                   	pop    %ebp
+80106abe:	c3                   	ret    
+80106abf:	90                   	nop
+80106ac0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80106ac3:	31 c0                	xor    %eax,%eax
+}
+80106ac5:	5b                   	pop    %ebx
+80106ac6:	5e                   	pop    %esi
+80106ac7:	5f                   	pop    %edi
+80106ac8:	5d                   	pop    %ebp
+80106ac9:	c3                   	ret    
+      panic("loaduvm: address should exist");
+80106aca:	83 ec 0c             	sub    $0xc,%esp
+80106acd:	68 87 78 10 80       	push   $0x80107887
+80106ad2:	e8 b9 98 ff ff       	call   80100390 <panic>
+    panic("loaduvm: addr must be page aligned");
+80106ad7:	83 ec 0c             	sub    $0xc,%esp
+80106ada:	68 28 79 10 80       	push   $0x80107928
+80106adf:	e8 ac 98 ff ff       	call   80100390 <panic>
+80106ae4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106aeb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106aef:	90                   	nop
+
+80106af0 <allocuvm>:
+{
+80106af0:	55                   	push   %ebp
+80106af1:	89 e5                	mov    %esp,%ebp
+80106af3:	57                   	push   %edi
+80106af4:	56                   	push   %esi
+80106af5:	53                   	push   %ebx
+80106af6:	83 ec 1c             	sub    $0x1c,%esp
+  if(newsz >= KERNBASE)
+80106af9:	8b 7d 10             	mov    0x10(%ebp),%edi
+80106afc:	85 ff                	test   %edi,%edi
+80106afe:	0f 88 bc 00 00 00    	js     80106bc0 <allocuvm+0xd0>
+  if(newsz < oldsz)
+80106b04:	3b 7d 0c             	cmp    0xc(%ebp),%edi
+80106b07:	0f 82 a3 00 00 00    	jb     80106bb0 <allocuvm+0xc0>
+  a = PGROUNDUP(oldsz);
+80106b0d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106b10:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80106b16:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; a < newsz; a += PGSIZE){
+80106b1c:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+80106b1f:	0f 86 8e 00 00 00    	jbe    80106bb3 <allocuvm+0xc3>
+80106b25:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+80106b28:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106b2b:	eb 42                	jmp    80106b6f <allocuvm+0x7f>
+80106b2d:	8d 76 00             	lea    0x0(%esi),%esi
+    memset(mem, 0, PGSIZE);
+80106b30:	83 ec 04             	sub    $0x4,%esp
+80106b33:	68 00 10 00 00       	push   $0x1000
+80106b38:	6a 00                	push   $0x0
+80106b3a:	50                   	push   %eax
+80106b3b:	e8 20 da ff ff       	call   80104560 <memset>
+    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+80106b40:	58                   	pop    %eax
+80106b41:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
+80106b47:	5a                   	pop    %edx
+80106b48:	6a 06                	push   $0x6
+80106b4a:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106b4f:	89 da                	mov    %ebx,%edx
+80106b51:	50                   	push   %eax
+80106b52:	89 f8                	mov    %edi,%eax
+80106b54:	e8 67 fb ff ff       	call   801066c0 <mappages>
+80106b59:	83 c4 10             	add    $0x10,%esp
+80106b5c:	85 c0                	test   %eax,%eax
+80106b5e:	78 70                	js     80106bd0 <allocuvm+0xe0>
+  for(; a < newsz; a += PGSIZE){
+80106b60:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106b66:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+80106b69:	0f 86 a1 00 00 00    	jbe    80106c10 <allocuvm+0x120>
+    mem = kalloc();
+80106b6f:	e8 2c ba ff ff       	call   801025a0 <kalloc>
+80106b74:	89 c6                	mov    %eax,%esi
+    if(mem == 0){
+80106b76:	85 c0                	test   %eax,%eax
+80106b78:	75 b6                	jne    80106b30 <allocuvm+0x40>
+      cprintf("allocuvm out of memory\n");
+80106b7a:	83 ec 0c             	sub    $0xc,%esp
+80106b7d:	68 a5 78 10 80       	push   $0x801078a5
+80106b82:	e8 29 9b ff ff       	call   801006b0 <cprintf>
+  if(newsz >= oldsz)
+80106b87:	83 c4 10             	add    $0x10,%esp
+80106b8a:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106b8d:	39 45 10             	cmp    %eax,0x10(%ebp)
+80106b90:	74 2e                	je     80106bc0 <allocuvm+0xd0>
+80106b92:	89 c1                	mov    %eax,%ecx
+80106b94:	8b 55 10             	mov    0x10(%ebp),%edx
+80106b97:	8b 45 08             	mov    0x8(%ebp),%eax
+      return 0;
+80106b9a:	31 ff                	xor    %edi,%edi
+80106b9c:	e8 af fb ff ff       	call   80106750 <deallocuvm.part.0>
+}
+80106ba1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106ba4:	89 f8                	mov    %edi,%eax
+80106ba6:	5b                   	pop    %ebx
+80106ba7:	5e                   	pop    %esi
+80106ba8:	5f                   	pop    %edi
+80106ba9:	5d                   	pop    %ebp
+80106baa:	c3                   	ret    
+80106bab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106baf:	90                   	nop
+    return oldsz;
+80106bb0:	8b 7d 0c             	mov    0xc(%ebp),%edi
+}
+80106bb3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106bb6:	89 f8                	mov    %edi,%eax
+80106bb8:	5b                   	pop    %ebx
+80106bb9:	5e                   	pop    %esi
+80106bba:	5f                   	pop    %edi
+80106bbb:	5d                   	pop    %ebp
+80106bbc:	c3                   	ret    
+80106bbd:	8d 76 00             	lea    0x0(%esi),%esi
+80106bc0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return 0;
+80106bc3:	31 ff                	xor    %edi,%edi
+}
+80106bc5:	5b                   	pop    %ebx
+80106bc6:	89 f8                	mov    %edi,%eax
+80106bc8:	5e                   	pop    %esi
+80106bc9:	5f                   	pop    %edi
+80106bca:	5d                   	pop    %ebp
+80106bcb:	c3                   	ret    
+80106bcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      cprintf("allocuvm out of memory (2)\n");
+80106bd0:	83 ec 0c             	sub    $0xc,%esp
+80106bd3:	68 bd 78 10 80       	push   $0x801078bd
+80106bd8:	e8 d3 9a ff ff       	call   801006b0 <cprintf>
+  if(newsz >= oldsz)
+80106bdd:	83 c4 10             	add    $0x10,%esp
+80106be0:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106be3:	39 45 10             	cmp    %eax,0x10(%ebp)
+80106be6:	74 0d                	je     80106bf5 <allocuvm+0x105>
+80106be8:	89 c1                	mov    %eax,%ecx
+80106bea:	8b 55 10             	mov    0x10(%ebp),%edx
+80106bed:	8b 45 08             	mov    0x8(%ebp),%eax
+80106bf0:	e8 5b fb ff ff       	call   80106750 <deallocuvm.part.0>
+      kfree(mem);
+80106bf5:	83 ec 0c             	sub    $0xc,%esp
+      return 0;
+80106bf8:	31 ff                	xor    %edi,%edi
+      kfree(mem);
+80106bfa:	56                   	push   %esi
+80106bfb:	e8 e0 b7 ff ff       	call   801023e0 <kfree>
+      return 0;
+80106c00:	83 c4 10             	add    $0x10,%esp
+}
+80106c03:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106c06:	89 f8                	mov    %edi,%eax
+80106c08:	5b                   	pop    %ebx
+80106c09:	5e                   	pop    %esi
+80106c0a:	5f                   	pop    %edi
+80106c0b:	5d                   	pop    %ebp
+80106c0c:	c3                   	ret    
+80106c0d:	8d 76 00             	lea    0x0(%esi),%esi
+80106c10:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80106c13:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106c16:	5b                   	pop    %ebx
+80106c17:	5e                   	pop    %esi
+80106c18:	89 f8                	mov    %edi,%eax
+80106c1a:	5f                   	pop    %edi
+80106c1b:	5d                   	pop    %ebp
+80106c1c:	c3                   	ret    
+80106c1d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106c20 <deallocuvm>:
+{
+80106c20:	55                   	push   %ebp
+80106c21:	89 e5                	mov    %esp,%ebp
+80106c23:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106c26:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80106c29:	8b 45 08             	mov    0x8(%ebp),%eax
+  if(newsz >= oldsz)
+80106c2c:	39 d1                	cmp    %edx,%ecx
+80106c2e:	73 10                	jae    80106c40 <deallocuvm+0x20>
+}
+80106c30:	5d                   	pop    %ebp
+80106c31:	e9 1a fb ff ff       	jmp    80106750 <deallocuvm.part.0>
+80106c36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106c3d:	8d 76 00             	lea    0x0(%esi),%esi
+80106c40:	89 d0                	mov    %edx,%eax
+80106c42:	5d                   	pop    %ebp
+80106c43:	c3                   	ret    
+80106c44:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106c4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106c4f:	90                   	nop
+
+80106c50 <freevm>:
+
+// Free a page table and all the physical memory pages
+// in the user part.
+void
+freevm(pde_t *pgdir)
+{
+80106c50:	55                   	push   %ebp
+80106c51:	89 e5                	mov    %esp,%ebp
+80106c53:	57                   	push   %edi
+80106c54:	56                   	push   %esi
+80106c55:	53                   	push   %ebx
+80106c56:	83 ec 0c             	sub    $0xc,%esp
+80106c59:	8b 75 08             	mov    0x8(%ebp),%esi
+  uint i;
+
+  if(pgdir == 0)
+80106c5c:	85 f6                	test   %esi,%esi
+80106c5e:	74 59                	je     80106cb9 <freevm+0x69>
+  if(newsz >= oldsz)
+80106c60:	31 c9                	xor    %ecx,%ecx
+80106c62:	ba 00 00 00 80       	mov    $0x80000000,%edx
+80106c67:	89 f0                	mov    %esi,%eax
+80106c69:	89 f3                	mov    %esi,%ebx
+80106c6b:	e8 e0 fa ff ff       	call   80106750 <deallocuvm.part.0>
+freevm(pde_t *pgdir)
+80106c70:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+80106c76:	eb 0f                	jmp    80106c87 <freevm+0x37>
+80106c78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106c7f:	90                   	nop
+80106c80:	83 c3 04             	add    $0x4,%ebx
+    panic("freevm: no pgdir");
+  deallocuvm(pgdir, KERNBASE, 0);
+  for(i = 0; i < NPDENTRIES; i++){
+80106c83:	39 df                	cmp    %ebx,%edi
+80106c85:	74 23                	je     80106caa <freevm+0x5a>
+    if(pgdir[i] & PTE_P){
+80106c87:	8b 03                	mov    (%ebx),%eax
+80106c89:	a8 01                	test   $0x1,%al
+80106c8b:	74 f3                	je     80106c80 <freevm+0x30>
+      char * v = P2V(PTE_ADDR(pgdir[i]));
+80106c8d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+      kfree(v);
+80106c92:	83 ec 0c             	sub    $0xc,%esp
+80106c95:	83 c3 04             	add    $0x4,%ebx
+      char * v = P2V(PTE_ADDR(pgdir[i]));
+80106c98:	05 00 00 00 80       	add    $0x80000000,%eax
+      kfree(v);
+80106c9d:	50                   	push   %eax
+80106c9e:	e8 3d b7 ff ff       	call   801023e0 <kfree>
+80106ca3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < NPDENTRIES; i++){
+80106ca6:	39 df                	cmp    %ebx,%edi
+80106ca8:	75 dd                	jne    80106c87 <freevm+0x37>
+    }
+  }
+  kfree((char*)pgdir);
+80106caa:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+80106cad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106cb0:	5b                   	pop    %ebx
+80106cb1:	5e                   	pop    %esi
+80106cb2:	5f                   	pop    %edi
+80106cb3:	5d                   	pop    %ebp
+  kfree((char*)pgdir);
+80106cb4:	e9 27 b7 ff ff       	jmp    801023e0 <kfree>
+    panic("freevm: no pgdir");
+80106cb9:	83 ec 0c             	sub    $0xc,%esp
+80106cbc:	68 d9 78 10 80       	push   $0x801078d9
+80106cc1:	e8 ca 96 ff ff       	call   80100390 <panic>
+80106cc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106ccd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106cd0 <setupkvm>:
+{
+80106cd0:	55                   	push   %ebp
+80106cd1:	89 e5                	mov    %esp,%ebp
+80106cd3:	56                   	push   %esi
+80106cd4:	53                   	push   %ebx
+  if((pgdir = (pde_t*)kalloc()) == 0)
+80106cd5:	e8 c6 b8 ff ff       	call   801025a0 <kalloc>
+80106cda:	89 c6                	mov    %eax,%esi
+80106cdc:	85 c0                	test   %eax,%eax
+80106cde:	74 42                	je     80106d22 <setupkvm+0x52>
+  memset(pgdir, 0, PGSIZE);
+80106ce0:	83 ec 04             	sub    $0x4,%esp
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+80106ce3:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
+  memset(pgdir, 0, PGSIZE);
+80106ce8:	68 00 10 00 00       	push   $0x1000
+80106ced:	6a 00                	push   $0x0
+80106cef:	50                   	push   %eax
+80106cf0:	e8 6b d8 ff ff       	call   80104560 <memset>
+80106cf5:	83 c4 10             	add    $0x10,%esp
+                (uint)k->phys_start, k->perm) < 0) {
+80106cf8:	8b 43 04             	mov    0x4(%ebx),%eax
+    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
+80106cfb:	83 ec 08             	sub    $0x8,%esp
+80106cfe:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80106d01:	ff 73 0c             	pushl  0xc(%ebx)
+80106d04:	8b 13                	mov    (%ebx),%edx
+80106d06:	50                   	push   %eax
+80106d07:	29 c1                	sub    %eax,%ecx
+80106d09:	89 f0                	mov    %esi,%eax
+80106d0b:	e8 b0 f9 ff ff       	call   801066c0 <mappages>
+80106d10:	83 c4 10             	add    $0x10,%esp
+80106d13:	85 c0                	test   %eax,%eax
+80106d15:	78 19                	js     80106d30 <setupkvm+0x60>
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+80106d17:	83 c3 10             	add    $0x10,%ebx
+80106d1a:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
+80106d20:	75 d6                	jne    80106cf8 <setupkvm+0x28>
+}
+80106d22:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80106d25:	89 f0                	mov    %esi,%eax
+80106d27:	5b                   	pop    %ebx
+80106d28:	5e                   	pop    %esi
+80106d29:	5d                   	pop    %ebp
+80106d2a:	c3                   	ret    
+80106d2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106d2f:	90                   	nop
+      freevm(pgdir);
+80106d30:	83 ec 0c             	sub    $0xc,%esp
+80106d33:	56                   	push   %esi
+      return 0;
+80106d34:	31 f6                	xor    %esi,%esi
+      freevm(pgdir);
+80106d36:	e8 15 ff ff ff       	call   80106c50 <freevm>
+      return 0;
+80106d3b:	83 c4 10             	add    $0x10,%esp
+}
+80106d3e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80106d41:	89 f0                	mov    %esi,%eax
+80106d43:	5b                   	pop    %ebx
+80106d44:	5e                   	pop    %esi
+80106d45:	5d                   	pop    %ebp
+80106d46:	c3                   	ret    
+80106d47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106d4e:	66 90                	xchg   %ax,%ax
+
+80106d50 <kvmalloc>:
+{
+80106d50:	55                   	push   %ebp
+80106d51:	89 e5                	mov    %esp,%ebp
+80106d53:	83 ec 08             	sub    $0x8,%esp
+  kpgdir = setupkvm();
+80106d56:	e8 75 ff ff ff       	call   80106cd0 <setupkvm>
+80106d5b:	a3 a4 54 11 80       	mov    %eax,0x801154a4
+  lcr3(V2P(kpgdir));   // switch to the kernel page table
+80106d60:	05 00 00 00 80       	add    $0x80000000,%eax
+80106d65:	0f 22 d8             	mov    %eax,%cr3
+}
+80106d68:	c9                   	leave  
+80106d69:	c3                   	ret    
+80106d6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106d70 <clearpteu>:
+
+// Clear PTE_U on a page. Used to create an inaccessible
+// page beneath the user stack.
+void
+clearpteu(pde_t *pgdir, char *uva)
+{
+80106d70:	55                   	push   %ebp
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+80106d71:	31 c9                	xor    %ecx,%ecx
+{
+80106d73:	89 e5                	mov    %esp,%ebp
+80106d75:	83 ec 08             	sub    $0x8,%esp
+  pte = walkpgdir(pgdir, uva, 0);
+80106d78:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106d7b:	8b 45 08             	mov    0x8(%ebp),%eax
+80106d7e:	e8 bd f8 ff ff       	call   80106640 <walkpgdir>
+  if(pte == 0)
+80106d83:	85 c0                	test   %eax,%eax
+80106d85:	74 05                	je     80106d8c <clearpteu+0x1c>
+    panic("clearpteu");
+  *pte &= ~PTE_U;
+80106d87:	83 20 fb             	andl   $0xfffffffb,(%eax)
+}
+80106d8a:	c9                   	leave  
+80106d8b:	c3                   	ret    
+    panic("clearpteu");
+80106d8c:	83 ec 0c             	sub    $0xc,%esp
+80106d8f:	68 ea 78 10 80       	push   $0x801078ea
+80106d94:	e8 f7 95 ff ff       	call   80100390 <panic>
+80106d99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106da0 <copyuvm>:
+
+// Given a parent process's page table, create a copy
+// of it for a child.
+pde_t*
+copyuvm(pde_t *pgdir, uint sz)
+{
+80106da0:	55                   	push   %ebp
+80106da1:	89 e5                	mov    %esp,%ebp
+80106da3:	57                   	push   %edi
+80106da4:	56                   	push   %esi
+80106da5:	53                   	push   %ebx
+80106da6:	83 ec 1c             	sub    $0x1c,%esp
+  pde_t *d;
+  pte_t *pte;
+  uint pa, i, flags;
+  char *mem;
+
+  if((d = setupkvm()) == 0)
+80106da9:	e8 22 ff ff ff       	call   80106cd0 <setupkvm>
+80106dae:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106db1:	85 c0                	test   %eax,%eax
+80106db3:	0f 84 9f 00 00 00    	je     80106e58 <copyuvm+0xb8>
+    return 0;
+  for(i = 0; i < sz; i += PGSIZE){
+80106db9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80106dbc:	85 c9                	test   %ecx,%ecx
+80106dbe:	0f 84 94 00 00 00    	je     80106e58 <copyuvm+0xb8>
+80106dc4:	31 ff                	xor    %edi,%edi
+80106dc6:	eb 4a                	jmp    80106e12 <copyuvm+0x72>
+80106dc8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106dcf:	90                   	nop
+      panic("copyuvm: page not present");
+    pa = PTE_ADDR(*pte);
+    flags = PTE_FLAGS(*pte);
+    if((mem = kalloc()) == 0)
+      goto bad;
+    memmove(mem, (char*)P2V(pa), PGSIZE);
+80106dd0:	83 ec 04             	sub    $0x4,%esp
+80106dd3:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+80106dd9:	68 00 10 00 00       	push   $0x1000
+80106dde:	53                   	push   %ebx
+80106ddf:	50                   	push   %eax
+80106de0:	e8 1b d8 ff ff       	call   80104600 <memmove>
+    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
+80106de5:	58                   	pop    %eax
+80106de6:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
+80106dec:	5a                   	pop    %edx
+80106ded:	ff 75 e4             	pushl  -0x1c(%ebp)
+80106df0:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106df5:	89 fa                	mov    %edi,%edx
+80106df7:	50                   	push   %eax
+80106df8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106dfb:	e8 c0 f8 ff ff       	call   801066c0 <mappages>
+80106e00:	83 c4 10             	add    $0x10,%esp
+80106e03:	85 c0                	test   %eax,%eax
+80106e05:	78 61                	js     80106e68 <copyuvm+0xc8>
+  for(i = 0; i < sz; i += PGSIZE){
+80106e07:	81 c7 00 10 00 00    	add    $0x1000,%edi
+80106e0d:	39 7d 0c             	cmp    %edi,0xc(%ebp)
+80106e10:	76 46                	jbe    80106e58 <copyuvm+0xb8>
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+80106e12:	8b 45 08             	mov    0x8(%ebp),%eax
+80106e15:	31 c9                	xor    %ecx,%ecx
+80106e17:	89 fa                	mov    %edi,%edx
+80106e19:	e8 22 f8 ff ff       	call   80106640 <walkpgdir>
+80106e1e:	85 c0                	test   %eax,%eax
+80106e20:	74 61                	je     80106e83 <copyuvm+0xe3>
+    if(!(*pte & PTE_P))
+80106e22:	8b 00                	mov    (%eax),%eax
+80106e24:	a8 01                	test   $0x1,%al
+80106e26:	74 4e                	je     80106e76 <copyuvm+0xd6>
+    pa = PTE_ADDR(*pte);
+80106e28:	89 c3                	mov    %eax,%ebx
+    flags = PTE_FLAGS(*pte);
+80106e2a:	25 ff 0f 00 00       	and    $0xfff,%eax
+80106e2f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    pa = PTE_ADDR(*pte);
+80106e32:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+    if((mem = kalloc()) == 0)
+80106e38:	e8 63 b7 ff ff       	call   801025a0 <kalloc>
+80106e3d:	89 c6                	mov    %eax,%esi
+80106e3f:	85 c0                	test   %eax,%eax
+80106e41:	75 8d                	jne    80106dd0 <copyuvm+0x30>
+    }
+  }
+  return d;
+
+bad:
+  freevm(d);
+80106e43:	83 ec 0c             	sub    $0xc,%esp
+80106e46:	ff 75 e0             	pushl  -0x20(%ebp)
+80106e49:	e8 02 fe ff ff       	call   80106c50 <freevm>
+  return 0;
+80106e4e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+80106e55:	83 c4 10             	add    $0x10,%esp
+}
+80106e58:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106e5b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106e5e:	5b                   	pop    %ebx
+80106e5f:	5e                   	pop    %esi
+80106e60:	5f                   	pop    %edi
+80106e61:	5d                   	pop    %ebp
+80106e62:	c3                   	ret    
+80106e63:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106e67:	90                   	nop
+      kfree(mem);
+80106e68:	83 ec 0c             	sub    $0xc,%esp
+80106e6b:	56                   	push   %esi
+80106e6c:	e8 6f b5 ff ff       	call   801023e0 <kfree>
+      goto bad;
+80106e71:	83 c4 10             	add    $0x10,%esp
+80106e74:	eb cd                	jmp    80106e43 <copyuvm+0xa3>
+      panic("copyuvm: page not present");
+80106e76:	83 ec 0c             	sub    $0xc,%esp
+80106e79:	68 0e 79 10 80       	push   $0x8010790e
+80106e7e:	e8 0d 95 ff ff       	call   80100390 <panic>
+      panic("copyuvm: pte should exist");
+80106e83:	83 ec 0c             	sub    $0xc,%esp
+80106e86:	68 f4 78 10 80       	push   $0x801078f4
+80106e8b:	e8 00 95 ff ff       	call   80100390 <panic>
+
+80106e90 <uva2ka>:
+
+//PAGEBREAK!
+// Map user virtual address to kernel address.
+char*
+uva2ka(pde_t *pgdir, char *uva)
+{
+80106e90:	55                   	push   %ebp
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+80106e91:	31 c9                	xor    %ecx,%ecx
+{
+80106e93:	89 e5                	mov    %esp,%ebp
+80106e95:	83 ec 08             	sub    $0x8,%esp
+  pte = walkpgdir(pgdir, uva, 0);
+80106e98:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106e9b:	8b 45 08             	mov    0x8(%ebp),%eax
+80106e9e:	e8 9d f7 ff ff       	call   80106640 <walkpgdir>
+  if((*pte & PTE_P) == 0)
+80106ea3:	8b 00                	mov    (%eax),%eax
+    return 0;
+  if((*pte & PTE_U) == 0)
+    return 0;
+  return (char*)P2V(PTE_ADDR(*pte));
+}
+80106ea5:	c9                   	leave  
+  if((*pte & PTE_U) == 0)
+80106ea6:	89 c2                	mov    %eax,%edx
+  return (char*)P2V(PTE_ADDR(*pte));
+80106ea8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  if((*pte & PTE_U) == 0)
+80106ead:	83 e2 05             	and    $0x5,%edx
+  return (char*)P2V(PTE_ADDR(*pte));
+80106eb0:	05 00 00 00 80       	add    $0x80000000,%eax
+80106eb5:	83 fa 05             	cmp    $0x5,%edx
+80106eb8:	ba 00 00 00 00       	mov    $0x0,%edx
+80106ebd:	0f 45 c2             	cmovne %edx,%eax
+}
+80106ec0:	c3                   	ret    
+80106ec1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106ec8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106ecf:	90                   	nop
+
+80106ed0 <copyout>:
+// Copy len bytes from p to user address va in page table pgdir.
+// Most useful when pgdir is not the current page table.
+// uva2ka ensures this only works for PTE_U pages.
+int
+copyout(pde_t *pgdir, uint va, void *p, uint len)
+{
+80106ed0:	55                   	push   %ebp
+80106ed1:	89 e5                	mov    %esp,%ebp
+80106ed3:	57                   	push   %edi
+80106ed4:	56                   	push   %esi
+80106ed5:	53                   	push   %ebx
+80106ed6:	83 ec 0c             	sub    $0xc,%esp
+80106ed9:	8b 75 14             	mov    0x14(%ebp),%esi
+80106edc:	8b 55 0c             	mov    0xc(%ebp),%edx
+  char *buf, *pa0;
+  uint n, va0;
+
+  buf = (char*)p;
+  while(len > 0){
+80106edf:	85 f6                	test   %esi,%esi
+80106ee1:	75 38                	jne    80106f1b <copyout+0x4b>
+80106ee3:	eb 6b                	jmp    80106f50 <copyout+0x80>
+80106ee5:	8d 76 00             	lea    0x0(%esi),%esi
+    va0 = (uint)PGROUNDDOWN(va);
+    pa0 = uva2ka(pgdir, (char*)va0);
+    if(pa0 == 0)
+      return -1;
+    n = PGSIZE - (va - va0);
+80106ee8:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106eeb:	89 fb                	mov    %edi,%ebx
+80106eed:	29 d3                	sub    %edx,%ebx
+80106eef:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    if(n > len)
+80106ef5:	39 f3                	cmp    %esi,%ebx
+80106ef7:	0f 47 de             	cmova  %esi,%ebx
+      n = len;
+    memmove(pa0 + (va - va0), buf, n);
+80106efa:	29 fa                	sub    %edi,%edx
+80106efc:	83 ec 04             	sub    $0x4,%esp
+80106eff:	01 c2                	add    %eax,%edx
+80106f01:	53                   	push   %ebx
+80106f02:	ff 75 10             	pushl  0x10(%ebp)
+80106f05:	52                   	push   %edx
+80106f06:	e8 f5 d6 ff ff       	call   80104600 <memmove>
+    len -= n;
+    buf += n;
+80106f0b:	01 5d 10             	add    %ebx,0x10(%ebp)
+    va = va0 + PGSIZE;
+80106f0e:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
+  while(len > 0){
+80106f14:	83 c4 10             	add    $0x10,%esp
+80106f17:	29 de                	sub    %ebx,%esi
+80106f19:	74 35                	je     80106f50 <copyout+0x80>
+    va0 = (uint)PGROUNDDOWN(va);
+80106f1b:	89 d7                	mov    %edx,%edi
+    pa0 = uva2ka(pgdir, (char*)va0);
+80106f1d:	83 ec 08             	sub    $0x8,%esp
+    va0 = (uint)PGROUNDDOWN(va);
+80106f20:	89 55 0c             	mov    %edx,0xc(%ebp)
+80106f23:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+    pa0 = uva2ka(pgdir, (char*)va0);
+80106f29:	57                   	push   %edi
+80106f2a:	ff 75 08             	pushl  0x8(%ebp)
+80106f2d:	e8 5e ff ff ff       	call   80106e90 <uva2ka>
+    if(pa0 == 0)
+80106f32:	83 c4 10             	add    $0x10,%esp
+80106f35:	85 c0                	test   %eax,%eax
+80106f37:	75 af                	jne    80106ee8 <copyout+0x18>
+  }
+  return 0;
+}
+80106f39:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+80106f3c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106f41:	5b                   	pop    %ebx
+80106f42:	5e                   	pop    %esi
+80106f43:	5f                   	pop    %edi
+80106f44:	5d                   	pop    %ebp
+80106f45:	c3                   	ret    
+80106f46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106f4d:	8d 76 00             	lea    0x0(%esi),%esi
+80106f50:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80106f53:	31 c0                	xor    %eax,%eax
+}
+80106f55:	5b                   	pop    %ebx
+80106f56:	5e                   	pop    %esi
+80106f57:	5f                   	pop    %edi
+80106f58:	5d                   	pop    %ebp
+80106f59:	c3                   	ret    
diff -urN xv6-public/kernel.sym xv6-public-new/kernel.sym
--- xv6-public/kernel.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/kernel.sym	2019-10-04 10:45:50.912028988 +0530
@@ -0,0 +1,518 @@
+80100000 .text
+80106f60 .rodata
+8010794c .stab
+8010794d .stabstr
+80108000 .data
+8010a520 .bss
+00000000 .debug_line
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_aranges
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 .comment
+00000000 bio.c
+00000000 console.c
+8010a520 cons
+8010a558 panicked
+80100410 consputc.part.0
+801005a0 printint
+80106fd0 digits.1593
+00000000 exec.c
+00000000 file.c
+00000000 fs.c
+80101190 bfree
+80101200 balloc
+80101310 iget
+80101400 bmap
+80101cf0 namex
+00000000 ide.c
+80101ff0 idestart
+8010a580 idelock
+8010a560 havedisk1
+8010a564 idequeue
+00000000 ioapic.c
+00000000 kalloc.c
+00000000 kbd.c
+8010a5b4 shift.1434
+80107300 shiftcode
+80107200 togglecode
+801071e0 charcode.1435
+80108200 normalmap
+80108100 shiftmap
+80108000 ctlmap
+00000000 lapic.c
+00000000 log.c
+80102af0 install_trans
+80102b90 write_head
+00000000 main.c
+80102f40 mpmain
+80102f80 mpenter
+00000000 mp.c
+801030d0 mpsearch1
+00000000 picirq.c
+00000000 pipe.c
+00000000 proc.c
+801036f0 allocproc
+8010a000 first.1635
+8010a5b8 initproc
+801075c0 states.1661
+00000000 sleeplock.c
+00000000 spinlock.c
+00000000 string.c
+00000000 syscall.c
+80107640 syscalls
+00000000 sysfile.c
+80104990 create
+80104b30 argfd.constprop.0
+00000000 sysproc.c
+00000000 trap.c
+00000000 uart.c
+80105a40 uartgetc
+8010a5bc uart
+80105a70 uartputc.part.0
+00000000 vm.c
+80106640 walkpgdir
+801066c0 mappages
+80106750 deallocuvm.part.0
+8010a420 kmap
+80100280 consoleread
+8010658f vector242
+80105fe6 vector119
+8010000c entry
+80105ec6 vector87
+80105ebd vector86
+80104730 safestrcpy
+80104cc0 sys_close
+801065fb vector251
+80105eea vector91
+80105ce0 vector33
+801061cf vector162
+80103e20 yield
+80112680 log
+80112640 kmem
+80106433 vector213
+80105f83 vector108
+80105ac0 uartinit
+80105d3a vector43
+80102840 lapiceoi
+801061f3 vector165
+801062e3 vector185
+801022f0 ioapicinit
+80105fc2 vector115
+80100ff0 fileread
+80106001 vector122
+801055c0 sys_sbrk
+80112760 ioapicid
+80106187 vector156
+801065b3 vector245
+80112634 ioapic
+80106313 vector189
+80105c04 vector7
+80105ddc vector61
+80105c8f vector24
+80105f9e vector111
+80106397 vector200
+80105e12 vector67
+801060af vector138
+80105e51 vector74
+80103c30 sched
+80104600 memmove
+80105db8 vector57
+80104930 syscall
+8010643f vector214
+80105f32 vector99
+801038b0 cpuid
+80101af0 writei
+801060d3 vector141
+80105540 sys_fork
+8010b5c0 bcache
+80106247 vector172
+80106583 vector241
+80104310 getcallerpcs
+801051e0 sys_mkdir
+80106613 vector253
+80105be0 vector3
+80105bd7 vector2
+80101c20 namecmp
+801064db vector227
+8010640f vector210
+801048f0 argstr
+801064b7 vector224
+80105d28 vector41
+801006b0 cprintf
+80100e70 filedup
+80101fb0 namei
+80105c74 vector21
+80100040 binit
+80106283 vector177
+80105fdd vector118
+80105e2d vector70
+80105e24 vector69
+80106553 vector237
+80105df7 vector64
+80105caa vector27
+80106067 vector132
+801062ef vector186
+80104be0 sys_read
+80106463 vector217
+801047a0 fetchint
+80106cd0 setupkvm
+80104660 memcpy
+80106c50 freevm
+80105bce vector1
+8010628f vector178
+80105d0d vector38
+801023e0 kfree
+8010655f vector238
+80103830 mycpu
+80101840 iput
+80106073 vector133
+80105e48 vector73
+801060f7 vector144
+8010661f vector254
+801014d0 readsb
+8010a004 nextpid
+80105f44 vector101
+8010641b vector211
+80103150 mpinit
+8010625f vector174
+8010659b vector243
+80100de0 fileinit
+801042f0 initlock
+80106037 vector128
+80106ed0 copyout
+80105e90 vector81
+80103e70 sleep
+80102860 microdelay
+80105c32 vector13
+80105d82 vector51
+80105c49 vector16
+8010ff20 input
+80106577 vector240
+80105d9d vector54
+80105c62 vector19
+80105ef3 vector92
+801065a7 vector244
+801019c0 stati
+801060c7 vector140
+80105570 sys_kill
+80105d4c vector45
+80105e7e vector79
+80103440 pipeclose
+801064f3 vector229
+8010619f vector158
+80104d10 sys_fstat
+80100630 consolewrite
+80105d16 vector39
+80106217 vector168
+80102d00 end_op
+80105cf2 vector35
+80105fb0 vector113
+80102480 freerange
+8010601c vector125
+80106af0 allocuvm
+80105702 trapret
+80106457 vector216
+80105dee vector63
+80105ca1 vector26
+80106343 vector193
+80102720 lapicinit
+80106367 vector196
+80106403 vector209
+80105be9 vector4
+8010622f vector170
+8010a5c0 stack
+80106097 vector136
+80105c1d vector10
+801063df vector206
+801017f0 iunlock
+80105610 sys_sleep
+8010662b vector255
+801062b3 vector181
+80105dca vector59
+80105eb4 vector85
+80105eab vector84
+801062cb vector183
+801061ab vector159
+80106427 vector212
+80104d60 sys_link
+80105d5e vector47
+801064e7 vector228
+80105d31 vector42
+80105fb9 vector114
+80106e90 uva2ka
+8010626b vector175
+801060eb vector143
+80100e00 filealloc
+80104020 wakeup
+8010604f vector130
+801065bf vector246
+80105c14 vector9
+801060df vector142
+80105f3b vector100
+801063a3 vector201
+80106d70 clearpteu
+801038d0 myproc
+80105710 tvinit
+80105dd3 vector60
+80105c86 vector23
+801016e0 idup
+80106547 vector236
+80102700 kbdintr
+801050a0 sys_open
+8010650b vector231
+80105e09 vector66
+80105cbc vector29
+801019f0 readi
+8010608b vector135
+80100860 consoleintr
+80104080 kill
+80105e6c vector77
+801015a0 ialloc
+801062a7 vector180
+801154a4 kpgdir
+801063f7 vector208
+80102900 cmostime
+80105bb0 uartintr
+80105f29 vector98
+80105f20 vector97
+80106277 vector176
+8010634f vector194
+80105cd7 vector32
+801154a8 end
+8010638b vector199
+8010605b vector131
+80106607 vector252
+80101080 filewrite
+80105bc5 vector0
+80104840 argint
+80100a80 exec
+80106103 vector145
+80104c50 sys_write
+80104510 release
+801047e0 fetchstr
+80105f7a vector107
+80105d1f vector40
+80103f30 wait
+80105f4d vector102
+80109000 entrypgdir
+0010000c _start
+80105daf vector56
+80105e1b vector68
+80105bfb vector6
+8010a48c _binary_initcode_end
+80100000 multiboot_header
+80106043 vector129
+80103b90 scheduler
+80101c40 dirlookup
+80106373 vector197
+80100ec0 fileclose
+80102c90 begin_op
+80106157 vector152
+80106d50 kvmalloc
+801064ff vector230
+80104670 strncmp
+80105d04 vector37
+801063d3 vector205
+801061c3 vector161
+80114c60 tickslock
+801034e0 pipewrite
+801046d0 strncpy
+80105e36 vector71
+80106da0 copyuvm
+8010ffc0 ftable
+801061b7 vector160
+80104890 argptr
+8010644b vector215
+80106193 vector157
+80104b80 sys_dup
+80105fa7 vector112
+80100390 panic
+801037c0 forkret
+801062bf vector182
+80105c2b vector12
+801045b0 memcmp
+80102620 kbdgetc
+80105f8c vector109
+80105c6b vector20
+80103a70 fork
+80105d94 vector53
+80105c59 vector18
+0000008a _binary_entryother_size
+80112780 cpus
+80104260 releasesleep
+80105f0e vector95
+80104410 holding
+801109c0 sb
+80104450 acquire
+801064cf vector226
+80101fd0 nameiparent
+80105d70 vector49
+80105d43 vector44
+8011267c lapic
+80105e75 vector78
+801056ea alltraps
+80106253 vector173
+80105fd4 vector117
+80105e99 vector82
+8010649f vector222
+80105c0d vector8
+80106133 vector149
+80101660 iupdate
+80108000 data
+80104560 memset
+80106517 vector232
+80102fa0 main
+80106890 switchkvm
+80105f71 vector106
+80106487 vector220
+80105ee1 vector90
+801061db vector163
+8010652f vector234
+80102e70 log_write
+80104200 acquiresleep
+80104eb0 sys_unlink
+80105de5 vector62
+80105c98 vector25
+8010637f vector198
+80105fef vector120
+8010a48c _binary_entryother_start
+801024d0 kinit1
+80105d79 vector50
+80105c40 vector15
+8010614b vector151
+80105ea2 vector83
+80105ed8 vector89
+80105ecf vector88
+801057c0 trap
+801056c0 sys_uptime
+8010629b vector179
+80105ce9 vector34
+80105d55 vector46
+8010607f vector134
+801064ab vector223
+80114ca0 idt
+8010646f vector218
+80103810 pinit
+80106c20 deallocuvm
+801064c3 vector225
+80102820 lapicid
+801062fb vector187
+801039f0 growproc
+801042a0 holdingsleep
+80112d00 ncpu
+80105cc5 vector30
+80103900 userinit
+801000d0 bread
+8010602e vector127
+801035f0 piperead
+801154a0 ticks
+80106337 vector192
+801061ff vector166
+80100a30 consoleinit
+80105e63 vector76
+80105e5a vector75
+80102150 ideintr
+8010635b vector195
+8010613f vector150
+80105dc1 vector58
+801065d7 vector248
+8010600a vector123
+80105f17 vector96
+80105cce vector31
+801063bb vector203
+801060bb vector139
+80106163 vector153
+801061e7 vector164
+80104100 procdump
+80105ff8 vector121
+80105b80 uartputc
+80105bf2 vector5
+8010620b vector167
+8010617b vector155
+801065e3 vector249
+801001f0 brelse
+801065ef vector250
+80106013 vector124
+80105f95 vector110
+801063c7 vector204
+80101710 ilock
+80105380 sys_exec
+801060a3 vector137
+8010a460 _binary_initcode_start
+8010478b swtch
+801065cb vector247
+80105c7d vector22
+801063af vector202
+80106800 seginit
+801019a0 iunlockput
+80105e3f vector72
+80105da6 vector55
+80106025 vector126
+80105e00 vector65
+80105cb3 vector28
+8010a516 _binary_entryother_end
+80106223 vector169
+801001b0 bwrite
+80106523 vector233
+80105790 idtinit
+80103cf0 exit
+80105560 sys_wait
+80105550 sys_exit
+80101ef0 dirlink
+0000002c _binary_initcode_size
+8010611b vector147
+801041c0 initsleeplock
+801020d0 ideinit
+80106a30 loaduvm
+80105f5f vector104
+80105fcb vector116
+80112d20 ptable
+801023a0 ioapicenable
+801043b0 popcli
+8010a008 vectors
+80105d8b vector52
+80105c52 vector17
+801062d7 vector184
+80104770 strlen
+80105470 sys_pipe
+80101510 iinit
+80103320 picinit
+801063eb vector207
+801069b0 inituvm
+8010631f vector190
+8010656b vector239
+80105f05 vector94
+80105efc vector93
+80102bf0 initlog
+80106307 vector188
+80105d67 vector48
+801021f0 iderw
+8010647b vector219
+80106127 vector148
+80106493 vector221
+801025a0 kalloc
+80110960 devsw
+801055b0 sys_getpid
+80105e87 vector80
+8010623b vector171
+8010616f vector154
+80105cfb vector36
+80103340 pipealloc
+8010653b vector235
+80105f68 vector105
+801052d0 sys_chdir
+801109e0 icache
+8010610f vector146
+8010632b vector191
+80105f56 vector103
+80105240 sys_mknod
+80102870 lapicstartap
+801068a0 switchuvm
+80104360 pushcli
+80102540 kinit2
+80105c24 vector11
+80105c39 vector14
+80100fa0 filestat
Binary files xv6-public/_kill and xv6-public-new/_kill differ
diff -urN xv6-public/kill.asm xv6-public-new/kill.asm
--- xv6-public/kill.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/kill.asm	2019-10-04 10:45:48.676028881 +0530
@@ -0,0 +1,1189 @@
+
+_kill:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char **argv)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	56                   	push   %esi
+   e:	53                   	push   %ebx
+   f:	51                   	push   %ecx
+  10:	83 ec 0c             	sub    $0xc,%esp
+  13:	8b 01                	mov    (%ecx),%eax
+  15:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  if(argc < 2){
+  18:	83 f8 01             	cmp    $0x1,%eax
+  1b:	7e 2c                	jle    49 <main+0x49>
+  1d:	8d 5a 04             	lea    0x4(%edx),%ebx
+  20:	8d 34 82             	lea    (%edx,%eax,4),%esi
+  23:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  27:	90                   	nop
+    printf(2, "usage: kill pid...\n");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    kill(atoi(argv[i]));
+  28:	83 ec 0c             	sub    $0xc,%esp
+  2b:	ff 33                	pushl  (%ebx)
+  2d:	83 c3 04             	add    $0x4,%ebx
+  30:	e8 0b 02 00 00       	call   240 <atoi>
+  35:	89 04 24             	mov    %eax,(%esp)
+  38:	e8 a4 02 00 00       	call   2e1 <kill>
+  for(i=1; i<argc; i++)
+  3d:	83 c4 10             	add    $0x10,%esp
+  40:	39 f3                	cmp    %esi,%ebx
+  42:	75 e4                	jne    28 <main+0x28>
+  exit();
+  44:	e8 68 02 00 00       	call   2b1 <exit>
+    printf(2, "usage: kill pid...\n");
+  49:	50                   	push   %eax
+  4a:	50                   	push   %eax
+  4b:	68 88 07 00 00       	push   $0x788
+  50:	6a 02                	push   $0x2
+  52:	e8 c9 03 00 00       	call   420 <printf>
+    exit();
+  57:	e8 55 02 00 00       	call   2b1 <exit>
+  5c:	66 90                	xchg   %ax,%ax
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  61:	31 d2                	xor    %edx,%edx
+{
+  63:	89 e5                	mov    %esp,%ebp
+  65:	53                   	push   %ebx
+  66:	8b 45 08             	mov    0x8(%ebp),%eax
+  69:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  70:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+  74:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+  77:	83 c2 01             	add    $0x1,%edx
+  7a:	84 c9                	test   %cl,%cl
+  7c:	75 f2                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  7e:	5b                   	pop    %ebx
+  7f:	5d                   	pop    %ebp
+  80:	c3                   	ret    
+  81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  8f:	90                   	nop
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	56                   	push   %esi
+  94:	53                   	push   %ebx
+  95:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  98:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+  9b:	0f b6 13             	movzbl (%ebx),%edx
+  9e:	0f b6 0e             	movzbl (%esi),%ecx
+  a1:	84 d2                	test   %dl,%dl
+  a3:	74 1e                	je     c3 <strcmp+0x33>
+  a5:	b8 01 00 00 00       	mov    $0x1,%eax
+  aa:	38 ca                	cmp    %cl,%dl
+  ac:	74 09                	je     b7 <strcmp+0x27>
+  ae:	eb 20                	jmp    d0 <strcmp+0x40>
+  b0:	83 c0 01             	add    $0x1,%eax
+  b3:	38 ca                	cmp    %cl,%dl
+  b5:	75 19                	jne    d0 <strcmp+0x40>
+  b7:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  bb:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+  bf:	84 d2                	test   %dl,%dl
+  c1:	75 ed                	jne    b0 <strcmp+0x20>
+  c3:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+  c5:	5b                   	pop    %ebx
+  c6:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+  c7:	29 c8                	sub    %ecx,%eax
+}
+  c9:	5d                   	pop    %ebp
+  ca:	c3                   	ret    
+  cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  cf:	90                   	nop
+  d0:	0f b6 c2             	movzbl %dl,%eax
+  d3:	5b                   	pop    %ebx
+  d4:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+  d5:	29 c8                	sub    %ecx,%eax
+}
+  d7:	5d                   	pop    %ebp
+  d8:	c3                   	ret    
+  d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000000e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  e6:	80 39 00             	cmpb   $0x0,(%ecx)
+  e9:	74 15                	je     100 <strlen+0x20>
+  eb:	31 d2                	xor    %edx,%edx
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  f0:	83 c2 01             	add    $0x1,%edx
+  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  f7:	89 d0                	mov    %edx,%eax
+  f9:	75 f5                	jne    f0 <strlen+0x10>
+    ;
+  return n;
+}
+  fb:	5d                   	pop    %ebp
+  fc:	c3                   	ret    
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 100:	31 c0                	xor    %eax,%eax
+}
+ 102:	5d                   	pop    %ebp
+ 103:	c3                   	ret    
+ 104:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 10f:	90                   	nop
+
+00000110 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	57                   	push   %edi
+ 114:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 117:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 11a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 11d:	89 d7                	mov    %edx,%edi
+ 11f:	fc                   	cld    
+ 120:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 122:	89 d0                	mov    %edx,%eax
+ 124:	5f                   	pop    %edi
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+
+00000130 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	53                   	push   %ebx
+ 134:	8b 45 08             	mov    0x8(%ebp),%eax
+ 137:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 13a:	0f b6 18             	movzbl (%eax),%ebx
+ 13d:	84 db                	test   %bl,%bl
+ 13f:	74 1d                	je     15e <strchr+0x2e>
+ 141:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 143:	38 d3                	cmp    %dl,%bl
+ 145:	75 0d                	jne    154 <strchr+0x24>
+ 147:	eb 17                	jmp    160 <strchr+0x30>
+ 149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 150:	38 ca                	cmp    %cl,%dl
+ 152:	74 0c                	je     160 <strchr+0x30>
+  for(; *s; s++)
+ 154:	83 c0 01             	add    $0x1,%eax
+ 157:	0f b6 10             	movzbl (%eax),%edx
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 15e:	31 c0                	xor    %eax,%eax
+}
+ 160:	5b                   	pop    %ebx
+ 161:	5d                   	pop    %ebp
+ 162:	c3                   	ret    
+ 163:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000170 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	57                   	push   %edi
+ 174:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 175:	31 f6                	xor    %esi,%esi
+{
+ 177:	53                   	push   %ebx
+ 178:	89 f3                	mov    %esi,%ebx
+ 17a:	83 ec 1c             	sub    $0x1c,%esp
+ 17d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 180:	eb 2f                	jmp    1b1 <gets+0x41>
+ 182:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 188:	83 ec 04             	sub    $0x4,%esp
+ 18b:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 18e:	6a 01                	push   $0x1
+ 190:	50                   	push   %eax
+ 191:	6a 00                	push   $0x0
+ 193:	e8 31 01 00 00       	call   2c9 <read>
+    if(cc < 1)
+ 198:	83 c4 10             	add    $0x10,%esp
+ 19b:	85 c0                	test   %eax,%eax
+ 19d:	7e 1c                	jle    1bb <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 19f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1a3:	83 c7 01             	add    $0x1,%edi
+ 1a6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1a9:	3c 0a                	cmp    $0xa,%al
+ 1ab:	74 23                	je     1d0 <gets+0x60>
+ 1ad:	3c 0d                	cmp    $0xd,%al
+ 1af:	74 1f                	je     1d0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1b1:	83 c3 01             	add    $0x1,%ebx
+ 1b4:	89 fe                	mov    %edi,%esi
+ 1b6:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1b9:	7c cd                	jl     188 <gets+0x18>
+ 1bb:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1bd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1c0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1c6:	5b                   	pop    %ebx
+ 1c7:	5e                   	pop    %esi
+ 1c8:	5f                   	pop    %edi
+ 1c9:	5d                   	pop    %ebp
+ 1ca:	c3                   	ret    
+ 1cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1cf:	90                   	nop
+ 1d0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1d3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d6:	01 de                	add    %ebx,%esi
+ 1d8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1da:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1e0:	5b                   	pop    %ebx
+ 1e1:	5e                   	pop    %esi
+ 1e2:	5f                   	pop    %edi
+ 1e3:	5d                   	pop    %ebp
+ 1e4:	c3                   	ret    
+ 1e5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	56                   	push   %esi
+ 1f4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1f5:	83 ec 08             	sub    $0x8,%esp
+ 1f8:	6a 00                	push   $0x0
+ 1fa:	ff 75 08             	pushl  0x8(%ebp)
+ 1fd:	e8 ef 00 00 00       	call   2f1 <open>
+  if(fd < 0)
+ 202:	83 c4 10             	add    $0x10,%esp
+ 205:	85 c0                	test   %eax,%eax
+ 207:	78 27                	js     230 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 209:	83 ec 08             	sub    $0x8,%esp
+ 20c:	ff 75 0c             	pushl  0xc(%ebp)
+ 20f:	89 c3                	mov    %eax,%ebx
+ 211:	50                   	push   %eax
+ 212:	e8 f2 00 00 00       	call   309 <fstat>
+  close(fd);
+ 217:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 21a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 21c:	e8 b8 00 00 00       	call   2d9 <close>
+  return r;
+ 221:	83 c4 10             	add    $0x10,%esp
+}
+ 224:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 227:	89 f0                	mov    %esi,%eax
+ 229:	5b                   	pop    %ebx
+ 22a:	5e                   	pop    %esi
+ 22b:	5d                   	pop    %ebp
+ 22c:	c3                   	ret    
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 230:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 235:	eb ed                	jmp    224 <stat+0x34>
+ 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23e:	66 90                	xchg   %ax,%ax
+
+00000240 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	53                   	push   %ebx
+ 244:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 247:	0f be 11             	movsbl (%ecx),%edx
+ 24a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 24d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 24f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 254:	77 1f                	ja     275 <atoi+0x35>
+ 256:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25d:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 260:	83 c1 01             	add    $0x1,%ecx
+ 263:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 266:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 26a:	0f be 11             	movsbl (%ecx),%edx
+ 26d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 270:	80 fb 09             	cmp    $0x9,%bl
+ 273:	76 eb                	jbe    260 <atoi+0x20>
+  return n;
+}
+ 275:	5b                   	pop    %ebx
+ 276:	5d                   	pop    %ebp
+ 277:	c3                   	ret    
+ 278:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27f:	90                   	nop
+
+00000280 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	57                   	push   %edi
+ 284:	8b 55 10             	mov    0x10(%ebp),%edx
+ 287:	8b 45 08             	mov    0x8(%ebp),%eax
+ 28a:	56                   	push   %esi
+ 28b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 28e:	85 d2                	test   %edx,%edx
+ 290:	7e 13                	jle    2a5 <memmove+0x25>
+ 292:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 294:	89 c7                	mov    %eax,%edi
+ 296:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2a1:	39 fa                	cmp    %edi,%edx
+ 2a3:	75 fb                	jne    2a0 <memmove+0x20>
+  return vdst;
+}
+ 2a5:	5e                   	pop    %esi
+ 2a6:	5f                   	pop    %edi
+ 2a7:	5d                   	pop    %ebp
+ 2a8:	c3                   	ret    
+
+000002a9 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2a9:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2ae:	cd 40                	int    $0x40
+ 2b0:	c3                   	ret    
+
+000002b1 <exit>:
+SYSCALL(exit)
+ 2b1:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2b6:	cd 40                	int    $0x40
+ 2b8:	c3                   	ret    
+
+000002b9 <wait>:
+SYSCALL(wait)
+ 2b9:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2be:	cd 40                	int    $0x40
+ 2c0:	c3                   	ret    
+
+000002c1 <pipe>:
+SYSCALL(pipe)
+ 2c1:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2c6:	cd 40                	int    $0x40
+ 2c8:	c3                   	ret    
+
+000002c9 <read>:
+SYSCALL(read)
+ 2c9:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2ce:	cd 40                	int    $0x40
+ 2d0:	c3                   	ret    
+
+000002d1 <write>:
+SYSCALL(write)
+ 2d1:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2d6:	cd 40                	int    $0x40
+ 2d8:	c3                   	ret    
+
+000002d9 <close>:
+SYSCALL(close)
+ 2d9:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2de:	cd 40                	int    $0x40
+ 2e0:	c3                   	ret    
+
+000002e1 <kill>:
+SYSCALL(kill)
+ 2e1:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2e6:	cd 40                	int    $0x40
+ 2e8:	c3                   	ret    
+
+000002e9 <exec>:
+SYSCALL(exec)
+ 2e9:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2ee:	cd 40                	int    $0x40
+ 2f0:	c3                   	ret    
+
+000002f1 <open>:
+SYSCALL(open)
+ 2f1:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2f6:	cd 40                	int    $0x40
+ 2f8:	c3                   	ret    
+
+000002f9 <mknod>:
+SYSCALL(mknod)
+ 2f9:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2fe:	cd 40                	int    $0x40
+ 300:	c3                   	ret    
+
+00000301 <unlink>:
+SYSCALL(unlink)
+ 301:	b8 12 00 00 00       	mov    $0x12,%eax
+ 306:	cd 40                	int    $0x40
+ 308:	c3                   	ret    
+
+00000309 <fstat>:
+SYSCALL(fstat)
+ 309:	b8 08 00 00 00       	mov    $0x8,%eax
+ 30e:	cd 40                	int    $0x40
+ 310:	c3                   	ret    
+
+00000311 <link>:
+SYSCALL(link)
+ 311:	b8 13 00 00 00       	mov    $0x13,%eax
+ 316:	cd 40                	int    $0x40
+ 318:	c3                   	ret    
+
+00000319 <mkdir>:
+SYSCALL(mkdir)
+ 319:	b8 14 00 00 00       	mov    $0x14,%eax
+ 31e:	cd 40                	int    $0x40
+ 320:	c3                   	ret    
+
+00000321 <chdir>:
+SYSCALL(chdir)
+ 321:	b8 09 00 00 00       	mov    $0x9,%eax
+ 326:	cd 40                	int    $0x40
+ 328:	c3                   	ret    
+
+00000329 <dup>:
+SYSCALL(dup)
+ 329:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 32e:	cd 40                	int    $0x40
+ 330:	c3                   	ret    
+
+00000331 <getpid>:
+SYSCALL(getpid)
+ 331:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 336:	cd 40                	int    $0x40
+ 338:	c3                   	ret    
+
+00000339 <sbrk>:
+SYSCALL(sbrk)
+ 339:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 33e:	cd 40                	int    $0x40
+ 340:	c3                   	ret    
+
+00000341 <sleep>:
+SYSCALL(sleep)
+ 341:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 346:	cd 40                	int    $0x40
+ 348:	c3                   	ret    
+
+00000349 <uptime>:
+SYSCALL(uptime)
+ 349:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 34e:	cd 40                	int    $0x40
+ 350:	c3                   	ret    
+ 351:	66 90                	xchg   %ax,%ax
+ 353:	66 90                	xchg   %ax,%ax
+ 355:	66 90                	xchg   %ax,%ax
+ 357:	66 90                	xchg   %ax,%ax
+ 359:	66 90                	xchg   %ax,%ax
+ 35b:	66 90                	xchg   %ax,%ax
+ 35d:	66 90                	xchg   %ax,%ax
+ 35f:	90                   	nop
+
+00000360 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 366:	89 d3                	mov    %edx,%ebx
+{
+ 368:	83 ec 3c             	sub    $0x3c,%esp
+ 36b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+ 36e:	85 d2                	test   %edx,%edx
+ 370:	0f 89 92 00 00 00    	jns    408 <printint+0xa8>
+ 376:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 37a:	0f 84 88 00 00 00    	je     408 <printint+0xa8>
+    neg = 1;
+ 380:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+ 387:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 389:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 390:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 393:	eb 08                	jmp    39d <printint+0x3d>
+ 395:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 398:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+ 39b:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+ 39d:	89 d8                	mov    %ebx,%eax
+ 39f:	31 d2                	xor    %edx,%edx
+ 3a1:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 3a4:	f7 f1                	div    %ecx
+ 3a6:	83 c7 01             	add    $0x1,%edi
+ 3a9:	0f b6 92 a4 07 00 00 	movzbl 0x7a4(%edx),%edx
+ 3b0:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+ 3b3:	39 d9                	cmp    %ebx,%ecx
+ 3b5:	76 e1                	jbe    398 <printint+0x38>
+  if(neg)
+ 3b7:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 3ba:	85 c0                	test   %eax,%eax
+ 3bc:	74 0d                	je     3cb <printint+0x6b>
+    buf[i++] = '-';
+ 3be:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3c3:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+ 3c8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 3cb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ce:	8b 7d bc             	mov    -0x44(%ebp),%edi
+ 3d1:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3d5:	eb 0f                	jmp    3e6 <printint+0x86>
+ 3d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3de:	66 90                	xchg   %ax,%ax
+ 3e0:	0f b6 13             	movzbl (%ebx),%edx
+ 3e3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3e6:	83 ec 04             	sub    $0x4,%esp
+ 3e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3ec:	6a 01                	push   $0x1
+ 3ee:	56                   	push   %esi
+ 3ef:	57                   	push   %edi
+ 3f0:	e8 dc fe ff ff       	call   2d1 <write>
+
+  while(--i >= 0)
+ 3f5:	83 c4 10             	add    $0x10,%esp
+ 3f8:	39 de                	cmp    %ebx,%esi
+ 3fa:	75 e4                	jne    3e0 <printint+0x80>
+    putc(fd, buf[i]);
+}
+ 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ff:	5b                   	pop    %ebx
+ 400:	5e                   	pop    %esi
+ 401:	5f                   	pop    %edi
+ 402:	5d                   	pop    %ebp
+ 403:	c3                   	ret    
+ 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 408:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+ 40f:	e9 75 ff ff ff       	jmp    389 <printint+0x29>
+ 414:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
+
+00000420 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	57                   	push   %edi
+ 424:	56                   	push   %esi
+ 425:	53                   	push   %ebx
+ 426:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 429:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 42c:	0f b6 1e             	movzbl (%esi),%ebx
+ 42f:	84 db                	test   %bl,%bl
+ 431:	0f 84 b9 00 00 00    	je     4f0 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+ 437:	8d 45 10             	lea    0x10(%ebp),%eax
+ 43a:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 43d:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 440:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 442:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 445:	eb 38                	jmp    47f <printf+0x5f>
+ 447:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44e:	66 90                	xchg   %ax,%ax
+ 450:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 453:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 458:	83 f8 25             	cmp    $0x25,%eax
+ 45b:	74 17                	je     474 <printf+0x54>
+  write(fd, &c, 1);
+ 45d:	83 ec 04             	sub    $0x4,%esp
+ 460:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 463:	6a 01                	push   $0x1
+ 465:	57                   	push   %edi
+ 466:	ff 75 08             	pushl  0x8(%ebp)
+ 469:	e8 63 fe ff ff       	call   2d1 <write>
+ 46e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 471:	83 c4 10             	add    $0x10,%esp
+ 474:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 477:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 47b:	84 db                	test   %bl,%bl
+ 47d:	74 71                	je     4f0 <printf+0xd0>
+    c = fmt[i] & 0xff;
+ 47f:	0f be cb             	movsbl %bl,%ecx
+ 482:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 485:	85 d2                	test   %edx,%edx
+ 487:	74 c7                	je     450 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 489:	83 fa 25             	cmp    $0x25,%edx
+ 48c:	75 e6                	jne    474 <printf+0x54>
+      if(c == 'd'){
+ 48e:	83 f8 64             	cmp    $0x64,%eax
+ 491:	0f 84 99 00 00 00    	je     530 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 497:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 49d:	83 f9 70             	cmp    $0x70,%ecx
+ 4a0:	74 5e                	je     500 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4a2:	83 f8 73             	cmp    $0x73,%eax
+ 4a5:	0f 84 d5 00 00 00    	je     580 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ab:	83 f8 63             	cmp    $0x63,%eax
+ 4ae:	0f 84 8c 00 00 00    	je     540 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4b4:	83 f8 25             	cmp    $0x25,%eax
+ 4b7:	0f 84 b3 00 00 00    	je     570 <printf+0x150>
+  write(fd, &c, 1);
+ 4bd:	83 ec 04             	sub    $0x4,%esp
+ 4c0:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4c4:	6a 01                	push   $0x1
+ 4c6:	57                   	push   %edi
+ 4c7:	ff 75 08             	pushl  0x8(%ebp)
+ 4ca:	e8 02 fe ff ff       	call   2d1 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4cf:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4d2:	83 c4 0c             	add    $0xc,%esp
+ 4d5:	6a 01                	push   $0x1
+ 4d7:	83 c6 01             	add    $0x1,%esi
+ 4da:	57                   	push   %edi
+ 4db:	ff 75 08             	pushl  0x8(%ebp)
+ 4de:	e8 ee fd ff ff       	call   2d1 <write>
+  for(i = 0; fmt[i]; i++){
+ 4e3:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 4e7:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 4ea:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 4ec:	84 db                	test   %bl,%bl
+ 4ee:	75 8f                	jne    47f <printf+0x5f>
+    }
+  }
+}
+ 4f0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4f3:	5b                   	pop    %ebx
+ 4f4:	5e                   	pop    %esi
+ 4f5:	5f                   	pop    %edi
+ 4f6:	5d                   	pop    %ebp
+ 4f7:	c3                   	ret    
+ 4f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ff:	90                   	nop
+        printint(fd, *ap, 16, 0);
+ 500:	83 ec 0c             	sub    $0xc,%esp
+ 503:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 508:	6a 00                	push   $0x0
+ 50a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 50d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 510:	8b 13                	mov    (%ebx),%edx
+ 512:	e8 49 fe ff ff       	call   360 <printint>
+        ap++;
+ 517:	89 d8                	mov    %ebx,%eax
+ 519:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 51c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 51e:	83 c0 04             	add    $0x4,%eax
+ 521:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 524:	e9 4b ff ff ff       	jmp    474 <printf+0x54>
+ 529:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 538:	6a 01                	push   $0x1
+ 53a:	eb ce                	jmp    50a <printf+0xea>
+ 53c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 540:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 543:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 546:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 548:	6a 01                	push   $0x1
+        ap++;
+ 54a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 54d:	57                   	push   %edi
+ 54e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 551:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 554:	e8 78 fd ff ff       	call   2d1 <write>
+        ap++;
+ 559:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 55c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 55f:	31 d2                	xor    %edx,%edx
+ 561:	e9 0e ff ff ff       	jmp    474 <printf+0x54>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 570:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 573:	83 ec 04             	sub    $0x4,%esp
+ 576:	e9 5a ff ff ff       	jmp    4d5 <printf+0xb5>
+ 57b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 57f:	90                   	nop
+        s = (char*)*ap;
+ 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 583:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 585:	83 c0 04             	add    $0x4,%eax
+ 588:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 58b:	85 db                	test   %ebx,%ebx
+ 58d:	74 17                	je     5a6 <printf+0x186>
+        while(*s != 0){
+ 58f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 592:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 594:	84 c0                	test   %al,%al
+ 596:	0f 84 d8 fe ff ff    	je     474 <printf+0x54>
+ 59c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 59f:	89 de                	mov    %ebx,%esi
+ 5a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5a4:	eb 1a                	jmp    5c0 <printf+0x1a0>
+          s = "(null)";
+ 5a6:	bb 9c 07 00 00       	mov    $0x79c,%ebx
+        while(*s != 0){
+ 5ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5b3:	89 de                	mov    %ebx,%esi
+ 5b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+  write(fd, &c, 1);
+ 5c0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5c3:	83 c6 01             	add    $0x1,%esi
+ 5c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5c9:	6a 01                	push   $0x1
+ 5cb:	57                   	push   %edi
+ 5cc:	53                   	push   %ebx
+ 5cd:	e8 ff fc ff ff       	call   2d1 <write>
+        while(*s != 0){
+ 5d2:	0f b6 06             	movzbl (%esi),%eax
+ 5d5:	83 c4 10             	add    $0x10,%esp
+ 5d8:	84 c0                	test   %al,%al
+ 5da:	75 e4                	jne    5c0 <printf+0x1a0>
+ 5dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5df:	31 d2                	xor    %edx,%edx
+ 5e1:	e9 8e fe ff ff       	jmp    474 <printf+0x54>
+ 5e6:	66 90                	xchg   %ax,%ax
+ 5e8:	66 90                	xchg   %ax,%ax
+ 5ea:	66 90                	xchg   %ax,%ax
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
+
+000005f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5f0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f1:	a1 54 0a 00 00       	mov    0xa54,%eax
+{
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5fe:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 600:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 603:	39 c8                	cmp    %ecx,%eax
+ 605:	73 19                	jae    620 <free+0x30>
+ 607:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60e:	66 90                	xchg   %ax,%ax
+ 610:	39 d1                	cmp    %edx,%ecx
+ 612:	72 14                	jb     628 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 614:	39 d0                	cmp    %edx,%eax
+ 616:	73 10                	jae    628 <free+0x38>
+{
+ 618:	89 d0                	mov    %edx,%eax
+ 61a:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 61c:	39 c8                	cmp    %ecx,%eax
+ 61e:	72 f0                	jb     610 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 620:	39 d0                	cmp    %edx,%eax
+ 622:	72 f4                	jb     618 <free+0x28>
+ 624:	39 d1                	cmp    %edx,%ecx
+ 626:	73 f0                	jae    618 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 fa                	cmp    %edi,%edx
+ 630:	74 1e                	je     650 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 632:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 635:	8b 50 04             	mov    0x4(%eax),%edx
+ 638:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 63b:	39 f1                	cmp    %esi,%ecx
+ 63d:	74 28                	je     667 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 63f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 641:	5b                   	pop    %ebx
+  freep = p;
+ 642:	a3 54 0a 00 00       	mov    %eax,0xa54
+}
+ 647:	5e                   	pop    %esi
+ 648:	5f                   	pop    %edi
+ 649:	5d                   	pop    %ebp
+ 64a:	c3                   	ret    
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 650:	03 72 04             	add    0x4(%edx),%esi
+ 653:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 656:	8b 10                	mov    (%eax),%edx
+ 658:	8b 12                	mov    (%edx),%edx
+ 65a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 65d:	8b 50 04             	mov    0x4(%eax),%edx
+ 660:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 663:	39 f1                	cmp    %esi,%ecx
+ 665:	75 d8                	jne    63f <free+0x4f>
+    p->s.size += bp->s.size;
+ 667:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 66a:	a3 54 0a 00 00       	mov    %eax,0xa54
+    p->s.size += bp->s.size;
+ 66f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 672:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 675:	89 10                	mov    %edx,(%eax)
+}
+ 677:	5b                   	pop    %ebx
+ 678:	5e                   	pop    %esi
+ 679:	5f                   	pop    %edi
+ 67a:	5d                   	pop    %ebp
+ 67b:	c3                   	ret    
+ 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000680 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 68c:	8b 3d 54 0a 00 00    	mov    0xa54,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 692:	8d 70 07             	lea    0x7(%eax),%esi
+ 695:	c1 ee 03             	shr    $0x3,%esi
+ 698:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 69b:	85 ff                	test   %edi,%edi
+ 69d:	0f 84 ad 00 00 00    	je     750 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 6a5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6a8:	39 f1                	cmp    %esi,%ecx
+ 6aa:	73 72                	jae    71e <malloc+0x9e>
+ 6ac:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6b2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6b7:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ba:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6c4:	eb 1b                	jmp    6e1 <malloc+0x61>
+ 6c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6cd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d0:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6d2:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6d5:	39 f1                	cmp    %esi,%ecx
+ 6d7:	73 4f                	jae    728 <malloc+0xa8>
+ 6d9:	8b 3d 54 0a 00 00    	mov    0xa54,%edi
+ 6df:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6e1:	39 d7                	cmp    %edx,%edi
+ 6e3:	75 eb                	jne    6d0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 6e5:	83 ec 0c             	sub    $0xc,%esp
+ 6e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6eb:	e8 49 fc ff ff       	call   339 <sbrk>
+  if(p == (char*)-1)
+ 6f0:	83 c4 10             	add    $0x10,%esp
+ 6f3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6f6:	74 1c                	je     714 <malloc+0x94>
+  hp->s.size = nu;
+ 6f8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6fb:	83 ec 0c             	sub    $0xc,%esp
+ 6fe:	83 c0 08             	add    $0x8,%eax
+ 701:	50                   	push   %eax
+ 702:	e8 e9 fe ff ff       	call   5f0 <free>
+  return freep;
+ 707:	8b 15 54 0a 00 00    	mov    0xa54,%edx
+      if((p = morecore(nunits)) == 0)
+ 70d:	83 c4 10             	add    $0x10,%esp
+ 710:	85 d2                	test   %edx,%edx
+ 712:	75 bc                	jne    6d0 <malloc+0x50>
+        return 0;
+  }
+}
+ 714:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 717:	31 c0                	xor    %eax,%eax
+}
+ 719:	5b                   	pop    %ebx
+ 71a:	5e                   	pop    %esi
+ 71b:	5f                   	pop    %edi
+ 71c:	5d                   	pop    %ebp
+ 71d:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 71e:	89 d0                	mov    %edx,%eax
+ 720:	89 fa                	mov    %edi,%edx
+ 722:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 728:	39 ce                	cmp    %ecx,%esi
+ 72a:	74 54                	je     780 <malloc+0x100>
+        p->s.size -= nunits;
+ 72c:	29 f1                	sub    %esi,%ecx
+ 72e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 731:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 734:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 737:	89 15 54 0a 00 00    	mov    %edx,0xa54
+}
+ 73d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 740:	83 c0 08             	add    $0x8,%eax
+}
+ 743:	5b                   	pop    %ebx
+ 744:	5e                   	pop    %esi
+ 745:	5f                   	pop    %edi
+ 746:	5d                   	pop    %ebp
+ 747:	c3                   	ret    
+ 748:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 74f:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+ 750:	c7 05 54 0a 00 00 58 	movl   $0xa58,0xa54
+ 757:	0a 00 00 
+    base.s.size = 0;
+ 75a:	bf 58 0a 00 00       	mov    $0xa58,%edi
+    base.s.ptr = freep = prevp = &base;
+ 75f:	c7 05 58 0a 00 00 58 	movl   $0xa58,0xa58
+ 766:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 769:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 76b:	c7 05 5c 0a 00 00 00 	movl   $0x0,0xa5c
+ 772:	00 00 00 
+    if(p->s.size >= nunits){
+ 775:	e9 32 ff ff ff       	jmp    6ac <malloc+0x2c>
+ 77a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 780:	8b 08                	mov    (%eax),%ecx
+ 782:	89 0a                	mov    %ecx,(%edx)
+ 784:	eb b1                	jmp    737 <malloc+0xb7>
diff -urN xv6-public/kill.d xv6-public-new/kill.d
--- xv6-public/kill.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/kill.d	2019-10-04 10:45:48.664028881 +0530
@@ -0,0 +1 @@
+kill.o: kill.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/kill.o and xv6-public-new/kill.o differ
diff -urN xv6-public/kill.sym xv6-public-new/kill.sym
--- xv6-public/kill.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/kill.sym	2019-10-04 10:45:48.680028881 +0530
@@ -0,0 +1,57 @@
+00000000 .text
+00000788 .rodata
+000007b8 .eh_frame
+00000a54 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 kill.c
+00000000 ulib.c
+00000000 printf.c
+00000360 printint
+000007a4 digits.1101
+00000000 umalloc.c
+00000a54 freep
+00000a58 base
+00000060 strcpy
+00000420 printf
+00000280 memmove
+000002f9 mknod
+00000170 gets
+00000331 getpid
+00000680 malloc
+00000341 sleep
+000002c1 pipe
+000002d1 write
+00000309 fstat
+000002e1 kill
+00000321 chdir
+000002e9 exec
+000002b9 wait
+000002c9 read
+00000301 unlink
+000002a9 fork
+00000339 sbrk
+00000349 uptime
+00000a54 __bss_start
+00000110 memset
+00000000 main
+00000090 strcmp
+00000329 dup
+000001f0 stat
+00000a54 _edata
+00000a60 _end
+00000311 link
+000002b1 exit
+00000240 atoi
+000000e0 strlen
+000002f1 open
+00000130 strchr
+00000319 mkdir
+000002d9 close
+000005f0 free
diff -urN xv6-public/lapic.d xv6-public-new/lapic.d
--- xv6-public/lapic.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/lapic.d	2019-10-04 10:45:50.004028945 +0530
@@ -0,0 +1,2 @@
+lapic.o: lapic.c /usr/include/stdc-predef.h param.h types.h defs.h date.h \
+ memlayout.h traps.h mmu.h x86.h
Binary files xv6-public/lapic.o and xv6-public-new/lapic.o differ
Binary files xv6-public/_ln and xv6-public-new/_ln differ
diff -urN xv6-public/ln.asm xv6-public-new/ln.asm
--- xv6-public/ln.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/ln.asm	2019-10-04 10:45:48.708028883 +0530
@@ -0,0 +1,1187 @@
+
+_ln:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+  if(argc != 3){
+   a:	83 39 03             	cmpl   $0x3,(%ecx)
+{
+   d:	55                   	push   %ebp
+   e:	89 e5                	mov    %esp,%ebp
+  10:	53                   	push   %ebx
+  11:	51                   	push   %ecx
+  12:	8b 59 04             	mov    0x4(%ecx),%ebx
+  if(argc != 3){
+  15:	74 13                	je     2a <main+0x2a>
+    printf(2, "Usage: ln old new\n");
+  17:	52                   	push   %edx
+  18:	52                   	push   %edx
+  19:	68 88 07 00 00       	push   $0x788
+  1e:	6a 02                	push   $0x2
+  20:	e8 fb 03 00 00       	call   420 <printf>
+    exit();
+  25:	e8 87 02 00 00       	call   2b1 <exit>
+  }
+  if(link(argv[1], argv[2]) < 0)
+  2a:	50                   	push   %eax
+  2b:	50                   	push   %eax
+  2c:	ff 73 08             	pushl  0x8(%ebx)
+  2f:	ff 73 04             	pushl  0x4(%ebx)
+  32:	e8 da 02 00 00       	call   311 <link>
+  37:	83 c4 10             	add    $0x10,%esp
+  3a:	85 c0                	test   %eax,%eax
+  3c:	78 05                	js     43 <main+0x43>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  exit();
+  3e:	e8 6e 02 00 00       	call   2b1 <exit>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  43:	ff 73 08             	pushl  0x8(%ebx)
+  46:	ff 73 04             	pushl  0x4(%ebx)
+  49:	68 9b 07 00 00       	push   $0x79b
+  4e:	6a 02                	push   $0x2
+  50:	e8 cb 03 00 00       	call   420 <printf>
+  55:	83 c4 10             	add    $0x10,%esp
+  58:	eb e4                	jmp    3e <main+0x3e>
+  5a:	66 90                	xchg   %ax,%ax
+  5c:	66 90                	xchg   %ax,%ax
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  61:	31 d2                	xor    %edx,%edx
+{
+  63:	89 e5                	mov    %esp,%ebp
+  65:	53                   	push   %ebx
+  66:	8b 45 08             	mov    0x8(%ebp),%eax
+  69:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  70:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+  74:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+  77:	83 c2 01             	add    $0x1,%edx
+  7a:	84 c9                	test   %cl,%cl
+  7c:	75 f2                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  7e:	5b                   	pop    %ebx
+  7f:	5d                   	pop    %ebp
+  80:	c3                   	ret    
+  81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  8f:	90                   	nop
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	56                   	push   %esi
+  94:	53                   	push   %ebx
+  95:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  98:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+  9b:	0f b6 13             	movzbl (%ebx),%edx
+  9e:	0f b6 0e             	movzbl (%esi),%ecx
+  a1:	84 d2                	test   %dl,%dl
+  a3:	74 1e                	je     c3 <strcmp+0x33>
+  a5:	b8 01 00 00 00       	mov    $0x1,%eax
+  aa:	38 ca                	cmp    %cl,%dl
+  ac:	74 09                	je     b7 <strcmp+0x27>
+  ae:	eb 20                	jmp    d0 <strcmp+0x40>
+  b0:	83 c0 01             	add    $0x1,%eax
+  b3:	38 ca                	cmp    %cl,%dl
+  b5:	75 19                	jne    d0 <strcmp+0x40>
+  b7:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  bb:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+  bf:	84 d2                	test   %dl,%dl
+  c1:	75 ed                	jne    b0 <strcmp+0x20>
+  c3:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+  c5:	5b                   	pop    %ebx
+  c6:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+  c7:	29 c8                	sub    %ecx,%eax
+}
+  c9:	5d                   	pop    %ebp
+  ca:	c3                   	ret    
+  cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  cf:	90                   	nop
+  d0:	0f b6 c2             	movzbl %dl,%eax
+  d3:	5b                   	pop    %ebx
+  d4:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+  d5:	29 c8                	sub    %ecx,%eax
+}
+  d7:	5d                   	pop    %ebp
+  d8:	c3                   	ret    
+  d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000000e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  e6:	80 39 00             	cmpb   $0x0,(%ecx)
+  e9:	74 15                	je     100 <strlen+0x20>
+  eb:	31 d2                	xor    %edx,%edx
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  f0:	83 c2 01             	add    $0x1,%edx
+  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  f7:	89 d0                	mov    %edx,%eax
+  f9:	75 f5                	jne    f0 <strlen+0x10>
+    ;
+  return n;
+}
+  fb:	5d                   	pop    %ebp
+  fc:	c3                   	ret    
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 100:	31 c0                	xor    %eax,%eax
+}
+ 102:	5d                   	pop    %ebp
+ 103:	c3                   	ret    
+ 104:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 10f:	90                   	nop
+
+00000110 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	57                   	push   %edi
+ 114:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 117:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 11a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 11d:	89 d7                	mov    %edx,%edi
+ 11f:	fc                   	cld    
+ 120:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 122:	89 d0                	mov    %edx,%eax
+ 124:	5f                   	pop    %edi
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+
+00000130 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	53                   	push   %ebx
+ 134:	8b 45 08             	mov    0x8(%ebp),%eax
+ 137:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 13a:	0f b6 18             	movzbl (%eax),%ebx
+ 13d:	84 db                	test   %bl,%bl
+ 13f:	74 1d                	je     15e <strchr+0x2e>
+ 141:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 143:	38 d3                	cmp    %dl,%bl
+ 145:	75 0d                	jne    154 <strchr+0x24>
+ 147:	eb 17                	jmp    160 <strchr+0x30>
+ 149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 150:	38 ca                	cmp    %cl,%dl
+ 152:	74 0c                	je     160 <strchr+0x30>
+  for(; *s; s++)
+ 154:	83 c0 01             	add    $0x1,%eax
+ 157:	0f b6 10             	movzbl (%eax),%edx
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 15e:	31 c0                	xor    %eax,%eax
+}
+ 160:	5b                   	pop    %ebx
+ 161:	5d                   	pop    %ebp
+ 162:	c3                   	ret    
+ 163:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000170 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	57                   	push   %edi
+ 174:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 175:	31 f6                	xor    %esi,%esi
+{
+ 177:	53                   	push   %ebx
+ 178:	89 f3                	mov    %esi,%ebx
+ 17a:	83 ec 1c             	sub    $0x1c,%esp
+ 17d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 180:	eb 2f                	jmp    1b1 <gets+0x41>
+ 182:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 188:	83 ec 04             	sub    $0x4,%esp
+ 18b:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 18e:	6a 01                	push   $0x1
+ 190:	50                   	push   %eax
+ 191:	6a 00                	push   $0x0
+ 193:	e8 31 01 00 00       	call   2c9 <read>
+    if(cc < 1)
+ 198:	83 c4 10             	add    $0x10,%esp
+ 19b:	85 c0                	test   %eax,%eax
+ 19d:	7e 1c                	jle    1bb <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 19f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1a3:	83 c7 01             	add    $0x1,%edi
+ 1a6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1a9:	3c 0a                	cmp    $0xa,%al
+ 1ab:	74 23                	je     1d0 <gets+0x60>
+ 1ad:	3c 0d                	cmp    $0xd,%al
+ 1af:	74 1f                	je     1d0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1b1:	83 c3 01             	add    $0x1,%ebx
+ 1b4:	89 fe                	mov    %edi,%esi
+ 1b6:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1b9:	7c cd                	jl     188 <gets+0x18>
+ 1bb:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1bd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1c0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1c6:	5b                   	pop    %ebx
+ 1c7:	5e                   	pop    %esi
+ 1c8:	5f                   	pop    %edi
+ 1c9:	5d                   	pop    %ebp
+ 1ca:	c3                   	ret    
+ 1cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1cf:	90                   	nop
+ 1d0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1d3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d6:	01 de                	add    %ebx,%esi
+ 1d8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1da:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1e0:	5b                   	pop    %ebx
+ 1e1:	5e                   	pop    %esi
+ 1e2:	5f                   	pop    %edi
+ 1e3:	5d                   	pop    %ebp
+ 1e4:	c3                   	ret    
+ 1e5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	56                   	push   %esi
+ 1f4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1f5:	83 ec 08             	sub    $0x8,%esp
+ 1f8:	6a 00                	push   $0x0
+ 1fa:	ff 75 08             	pushl  0x8(%ebp)
+ 1fd:	e8 ef 00 00 00       	call   2f1 <open>
+  if(fd < 0)
+ 202:	83 c4 10             	add    $0x10,%esp
+ 205:	85 c0                	test   %eax,%eax
+ 207:	78 27                	js     230 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 209:	83 ec 08             	sub    $0x8,%esp
+ 20c:	ff 75 0c             	pushl  0xc(%ebp)
+ 20f:	89 c3                	mov    %eax,%ebx
+ 211:	50                   	push   %eax
+ 212:	e8 f2 00 00 00       	call   309 <fstat>
+  close(fd);
+ 217:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 21a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 21c:	e8 b8 00 00 00       	call   2d9 <close>
+  return r;
+ 221:	83 c4 10             	add    $0x10,%esp
+}
+ 224:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 227:	89 f0                	mov    %esi,%eax
+ 229:	5b                   	pop    %ebx
+ 22a:	5e                   	pop    %esi
+ 22b:	5d                   	pop    %ebp
+ 22c:	c3                   	ret    
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 230:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 235:	eb ed                	jmp    224 <stat+0x34>
+ 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23e:	66 90                	xchg   %ax,%ax
+
+00000240 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	53                   	push   %ebx
+ 244:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 247:	0f be 11             	movsbl (%ecx),%edx
+ 24a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 24d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 24f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 254:	77 1f                	ja     275 <atoi+0x35>
+ 256:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25d:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 260:	83 c1 01             	add    $0x1,%ecx
+ 263:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 266:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 26a:	0f be 11             	movsbl (%ecx),%edx
+ 26d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 270:	80 fb 09             	cmp    $0x9,%bl
+ 273:	76 eb                	jbe    260 <atoi+0x20>
+  return n;
+}
+ 275:	5b                   	pop    %ebx
+ 276:	5d                   	pop    %ebp
+ 277:	c3                   	ret    
+ 278:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27f:	90                   	nop
+
+00000280 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	57                   	push   %edi
+ 284:	8b 55 10             	mov    0x10(%ebp),%edx
+ 287:	8b 45 08             	mov    0x8(%ebp),%eax
+ 28a:	56                   	push   %esi
+ 28b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 28e:	85 d2                	test   %edx,%edx
+ 290:	7e 13                	jle    2a5 <memmove+0x25>
+ 292:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 294:	89 c7                	mov    %eax,%edi
+ 296:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2a1:	39 fa                	cmp    %edi,%edx
+ 2a3:	75 fb                	jne    2a0 <memmove+0x20>
+  return vdst;
+}
+ 2a5:	5e                   	pop    %esi
+ 2a6:	5f                   	pop    %edi
+ 2a7:	5d                   	pop    %ebp
+ 2a8:	c3                   	ret    
+
+000002a9 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2a9:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2ae:	cd 40                	int    $0x40
+ 2b0:	c3                   	ret    
+
+000002b1 <exit>:
+SYSCALL(exit)
+ 2b1:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2b6:	cd 40                	int    $0x40
+ 2b8:	c3                   	ret    
+
+000002b9 <wait>:
+SYSCALL(wait)
+ 2b9:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2be:	cd 40                	int    $0x40
+ 2c0:	c3                   	ret    
+
+000002c1 <pipe>:
+SYSCALL(pipe)
+ 2c1:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2c6:	cd 40                	int    $0x40
+ 2c8:	c3                   	ret    
+
+000002c9 <read>:
+SYSCALL(read)
+ 2c9:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2ce:	cd 40                	int    $0x40
+ 2d0:	c3                   	ret    
+
+000002d1 <write>:
+SYSCALL(write)
+ 2d1:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2d6:	cd 40                	int    $0x40
+ 2d8:	c3                   	ret    
+
+000002d9 <close>:
+SYSCALL(close)
+ 2d9:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2de:	cd 40                	int    $0x40
+ 2e0:	c3                   	ret    
+
+000002e1 <kill>:
+SYSCALL(kill)
+ 2e1:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2e6:	cd 40                	int    $0x40
+ 2e8:	c3                   	ret    
+
+000002e9 <exec>:
+SYSCALL(exec)
+ 2e9:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2ee:	cd 40                	int    $0x40
+ 2f0:	c3                   	ret    
+
+000002f1 <open>:
+SYSCALL(open)
+ 2f1:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2f6:	cd 40                	int    $0x40
+ 2f8:	c3                   	ret    
+
+000002f9 <mknod>:
+SYSCALL(mknod)
+ 2f9:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2fe:	cd 40                	int    $0x40
+ 300:	c3                   	ret    
+
+00000301 <unlink>:
+SYSCALL(unlink)
+ 301:	b8 12 00 00 00       	mov    $0x12,%eax
+ 306:	cd 40                	int    $0x40
+ 308:	c3                   	ret    
+
+00000309 <fstat>:
+SYSCALL(fstat)
+ 309:	b8 08 00 00 00       	mov    $0x8,%eax
+ 30e:	cd 40                	int    $0x40
+ 310:	c3                   	ret    
+
+00000311 <link>:
+SYSCALL(link)
+ 311:	b8 13 00 00 00       	mov    $0x13,%eax
+ 316:	cd 40                	int    $0x40
+ 318:	c3                   	ret    
+
+00000319 <mkdir>:
+SYSCALL(mkdir)
+ 319:	b8 14 00 00 00       	mov    $0x14,%eax
+ 31e:	cd 40                	int    $0x40
+ 320:	c3                   	ret    
+
+00000321 <chdir>:
+SYSCALL(chdir)
+ 321:	b8 09 00 00 00       	mov    $0x9,%eax
+ 326:	cd 40                	int    $0x40
+ 328:	c3                   	ret    
+
+00000329 <dup>:
+SYSCALL(dup)
+ 329:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 32e:	cd 40                	int    $0x40
+ 330:	c3                   	ret    
+
+00000331 <getpid>:
+SYSCALL(getpid)
+ 331:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 336:	cd 40                	int    $0x40
+ 338:	c3                   	ret    
+
+00000339 <sbrk>:
+SYSCALL(sbrk)
+ 339:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 33e:	cd 40                	int    $0x40
+ 340:	c3                   	ret    
+
+00000341 <sleep>:
+SYSCALL(sleep)
+ 341:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 346:	cd 40                	int    $0x40
+ 348:	c3                   	ret    
+
+00000349 <uptime>:
+SYSCALL(uptime)
+ 349:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 34e:	cd 40                	int    $0x40
+ 350:	c3                   	ret    
+ 351:	66 90                	xchg   %ax,%ax
+ 353:	66 90                	xchg   %ax,%ax
+ 355:	66 90                	xchg   %ax,%ax
+ 357:	66 90                	xchg   %ax,%ax
+ 359:	66 90                	xchg   %ax,%ax
+ 35b:	66 90                	xchg   %ax,%ax
+ 35d:	66 90                	xchg   %ax,%ax
+ 35f:	90                   	nop
+
+00000360 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 366:	89 d3                	mov    %edx,%ebx
+{
+ 368:	83 ec 3c             	sub    $0x3c,%esp
+ 36b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+ 36e:	85 d2                	test   %edx,%edx
+ 370:	0f 89 92 00 00 00    	jns    408 <printint+0xa8>
+ 376:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 37a:	0f 84 88 00 00 00    	je     408 <printint+0xa8>
+    neg = 1;
+ 380:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+ 387:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 389:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 390:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 393:	eb 08                	jmp    39d <printint+0x3d>
+ 395:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 398:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+ 39b:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+ 39d:	89 d8                	mov    %ebx,%eax
+ 39f:	31 d2                	xor    %edx,%edx
+ 3a1:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 3a4:	f7 f1                	div    %ecx
+ 3a6:	83 c7 01             	add    $0x1,%edi
+ 3a9:	0f b6 92 b8 07 00 00 	movzbl 0x7b8(%edx),%edx
+ 3b0:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+ 3b3:	39 d9                	cmp    %ebx,%ecx
+ 3b5:	76 e1                	jbe    398 <printint+0x38>
+  if(neg)
+ 3b7:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 3ba:	85 c0                	test   %eax,%eax
+ 3bc:	74 0d                	je     3cb <printint+0x6b>
+    buf[i++] = '-';
+ 3be:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3c3:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+ 3c8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 3cb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ce:	8b 7d bc             	mov    -0x44(%ebp),%edi
+ 3d1:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3d5:	eb 0f                	jmp    3e6 <printint+0x86>
+ 3d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3de:	66 90                	xchg   %ax,%ax
+ 3e0:	0f b6 13             	movzbl (%ebx),%edx
+ 3e3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3e6:	83 ec 04             	sub    $0x4,%esp
+ 3e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3ec:	6a 01                	push   $0x1
+ 3ee:	56                   	push   %esi
+ 3ef:	57                   	push   %edi
+ 3f0:	e8 dc fe ff ff       	call   2d1 <write>
+
+  while(--i >= 0)
+ 3f5:	83 c4 10             	add    $0x10,%esp
+ 3f8:	39 de                	cmp    %ebx,%esi
+ 3fa:	75 e4                	jne    3e0 <printint+0x80>
+    putc(fd, buf[i]);
+}
+ 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ff:	5b                   	pop    %ebx
+ 400:	5e                   	pop    %esi
+ 401:	5f                   	pop    %edi
+ 402:	5d                   	pop    %ebp
+ 403:	c3                   	ret    
+ 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 408:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+ 40f:	e9 75 ff ff ff       	jmp    389 <printint+0x29>
+ 414:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
+
+00000420 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	57                   	push   %edi
+ 424:	56                   	push   %esi
+ 425:	53                   	push   %ebx
+ 426:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 429:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 42c:	0f b6 1e             	movzbl (%esi),%ebx
+ 42f:	84 db                	test   %bl,%bl
+ 431:	0f 84 b9 00 00 00    	je     4f0 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+ 437:	8d 45 10             	lea    0x10(%ebp),%eax
+ 43a:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 43d:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 440:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 442:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 445:	eb 38                	jmp    47f <printf+0x5f>
+ 447:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44e:	66 90                	xchg   %ax,%ax
+ 450:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 453:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 458:	83 f8 25             	cmp    $0x25,%eax
+ 45b:	74 17                	je     474 <printf+0x54>
+  write(fd, &c, 1);
+ 45d:	83 ec 04             	sub    $0x4,%esp
+ 460:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 463:	6a 01                	push   $0x1
+ 465:	57                   	push   %edi
+ 466:	ff 75 08             	pushl  0x8(%ebp)
+ 469:	e8 63 fe ff ff       	call   2d1 <write>
+ 46e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 471:	83 c4 10             	add    $0x10,%esp
+ 474:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 477:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 47b:	84 db                	test   %bl,%bl
+ 47d:	74 71                	je     4f0 <printf+0xd0>
+    c = fmt[i] & 0xff;
+ 47f:	0f be cb             	movsbl %bl,%ecx
+ 482:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 485:	85 d2                	test   %edx,%edx
+ 487:	74 c7                	je     450 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 489:	83 fa 25             	cmp    $0x25,%edx
+ 48c:	75 e6                	jne    474 <printf+0x54>
+      if(c == 'd'){
+ 48e:	83 f8 64             	cmp    $0x64,%eax
+ 491:	0f 84 99 00 00 00    	je     530 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 497:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 49d:	83 f9 70             	cmp    $0x70,%ecx
+ 4a0:	74 5e                	je     500 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4a2:	83 f8 73             	cmp    $0x73,%eax
+ 4a5:	0f 84 d5 00 00 00    	je     580 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ab:	83 f8 63             	cmp    $0x63,%eax
+ 4ae:	0f 84 8c 00 00 00    	je     540 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4b4:	83 f8 25             	cmp    $0x25,%eax
+ 4b7:	0f 84 b3 00 00 00    	je     570 <printf+0x150>
+  write(fd, &c, 1);
+ 4bd:	83 ec 04             	sub    $0x4,%esp
+ 4c0:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4c4:	6a 01                	push   $0x1
+ 4c6:	57                   	push   %edi
+ 4c7:	ff 75 08             	pushl  0x8(%ebp)
+ 4ca:	e8 02 fe ff ff       	call   2d1 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4cf:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4d2:	83 c4 0c             	add    $0xc,%esp
+ 4d5:	6a 01                	push   $0x1
+ 4d7:	83 c6 01             	add    $0x1,%esi
+ 4da:	57                   	push   %edi
+ 4db:	ff 75 08             	pushl  0x8(%ebp)
+ 4de:	e8 ee fd ff ff       	call   2d1 <write>
+  for(i = 0; fmt[i]; i++){
+ 4e3:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 4e7:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 4ea:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 4ec:	84 db                	test   %bl,%bl
+ 4ee:	75 8f                	jne    47f <printf+0x5f>
+    }
+  }
+}
+ 4f0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4f3:	5b                   	pop    %ebx
+ 4f4:	5e                   	pop    %esi
+ 4f5:	5f                   	pop    %edi
+ 4f6:	5d                   	pop    %ebp
+ 4f7:	c3                   	ret    
+ 4f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ff:	90                   	nop
+        printint(fd, *ap, 16, 0);
+ 500:	83 ec 0c             	sub    $0xc,%esp
+ 503:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 508:	6a 00                	push   $0x0
+ 50a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 50d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 510:	8b 13                	mov    (%ebx),%edx
+ 512:	e8 49 fe ff ff       	call   360 <printint>
+        ap++;
+ 517:	89 d8                	mov    %ebx,%eax
+ 519:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 51c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 51e:	83 c0 04             	add    $0x4,%eax
+ 521:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 524:	e9 4b ff ff ff       	jmp    474 <printf+0x54>
+ 529:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 538:	6a 01                	push   $0x1
+ 53a:	eb ce                	jmp    50a <printf+0xea>
+ 53c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 540:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 543:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 546:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 548:	6a 01                	push   $0x1
+        ap++;
+ 54a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 54d:	57                   	push   %edi
+ 54e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 551:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 554:	e8 78 fd ff ff       	call   2d1 <write>
+        ap++;
+ 559:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 55c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 55f:	31 d2                	xor    %edx,%edx
+ 561:	e9 0e ff ff ff       	jmp    474 <printf+0x54>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 570:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 573:	83 ec 04             	sub    $0x4,%esp
+ 576:	e9 5a ff ff ff       	jmp    4d5 <printf+0xb5>
+ 57b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 57f:	90                   	nop
+        s = (char*)*ap;
+ 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 583:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 585:	83 c0 04             	add    $0x4,%eax
+ 588:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 58b:	85 db                	test   %ebx,%ebx
+ 58d:	74 17                	je     5a6 <printf+0x186>
+        while(*s != 0){
+ 58f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 592:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 594:	84 c0                	test   %al,%al
+ 596:	0f 84 d8 fe ff ff    	je     474 <printf+0x54>
+ 59c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 59f:	89 de                	mov    %ebx,%esi
+ 5a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5a4:	eb 1a                	jmp    5c0 <printf+0x1a0>
+          s = "(null)";
+ 5a6:	bb af 07 00 00       	mov    $0x7af,%ebx
+        while(*s != 0){
+ 5ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5b3:	89 de                	mov    %ebx,%esi
+ 5b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+  write(fd, &c, 1);
+ 5c0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5c3:	83 c6 01             	add    $0x1,%esi
+ 5c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5c9:	6a 01                	push   $0x1
+ 5cb:	57                   	push   %edi
+ 5cc:	53                   	push   %ebx
+ 5cd:	e8 ff fc ff ff       	call   2d1 <write>
+        while(*s != 0){
+ 5d2:	0f b6 06             	movzbl (%esi),%eax
+ 5d5:	83 c4 10             	add    $0x10,%esp
+ 5d8:	84 c0                	test   %al,%al
+ 5da:	75 e4                	jne    5c0 <printf+0x1a0>
+ 5dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5df:	31 d2                	xor    %edx,%edx
+ 5e1:	e9 8e fe ff ff       	jmp    474 <printf+0x54>
+ 5e6:	66 90                	xchg   %ax,%ax
+ 5e8:	66 90                	xchg   %ax,%ax
+ 5ea:	66 90                	xchg   %ax,%ax
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
+
+000005f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5f0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f1:	a1 64 0a 00 00       	mov    0xa64,%eax
+{
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5fe:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 600:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 603:	39 c8                	cmp    %ecx,%eax
+ 605:	73 19                	jae    620 <free+0x30>
+ 607:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60e:	66 90                	xchg   %ax,%ax
+ 610:	39 d1                	cmp    %edx,%ecx
+ 612:	72 14                	jb     628 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 614:	39 d0                	cmp    %edx,%eax
+ 616:	73 10                	jae    628 <free+0x38>
+{
+ 618:	89 d0                	mov    %edx,%eax
+ 61a:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 61c:	39 c8                	cmp    %ecx,%eax
+ 61e:	72 f0                	jb     610 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 620:	39 d0                	cmp    %edx,%eax
+ 622:	72 f4                	jb     618 <free+0x28>
+ 624:	39 d1                	cmp    %edx,%ecx
+ 626:	73 f0                	jae    618 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 fa                	cmp    %edi,%edx
+ 630:	74 1e                	je     650 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 632:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 635:	8b 50 04             	mov    0x4(%eax),%edx
+ 638:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 63b:	39 f1                	cmp    %esi,%ecx
+ 63d:	74 28                	je     667 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 63f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 641:	5b                   	pop    %ebx
+  freep = p;
+ 642:	a3 64 0a 00 00       	mov    %eax,0xa64
+}
+ 647:	5e                   	pop    %esi
+ 648:	5f                   	pop    %edi
+ 649:	5d                   	pop    %ebp
+ 64a:	c3                   	ret    
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 650:	03 72 04             	add    0x4(%edx),%esi
+ 653:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 656:	8b 10                	mov    (%eax),%edx
+ 658:	8b 12                	mov    (%edx),%edx
+ 65a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 65d:	8b 50 04             	mov    0x4(%eax),%edx
+ 660:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 663:	39 f1                	cmp    %esi,%ecx
+ 665:	75 d8                	jne    63f <free+0x4f>
+    p->s.size += bp->s.size;
+ 667:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 66a:	a3 64 0a 00 00       	mov    %eax,0xa64
+    p->s.size += bp->s.size;
+ 66f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 672:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 675:	89 10                	mov    %edx,(%eax)
+}
+ 677:	5b                   	pop    %ebx
+ 678:	5e                   	pop    %esi
+ 679:	5f                   	pop    %edi
+ 67a:	5d                   	pop    %ebp
+ 67b:	c3                   	ret    
+ 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000680 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 68c:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 692:	8d 70 07             	lea    0x7(%eax),%esi
+ 695:	c1 ee 03             	shr    $0x3,%esi
+ 698:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 69b:	85 ff                	test   %edi,%edi
+ 69d:	0f 84 ad 00 00 00    	je     750 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 6a5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6a8:	39 f1                	cmp    %esi,%ecx
+ 6aa:	73 72                	jae    71e <malloc+0x9e>
+ 6ac:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6b2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6b7:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ba:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6c4:	eb 1b                	jmp    6e1 <malloc+0x61>
+ 6c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6cd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d0:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6d2:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6d5:	39 f1                	cmp    %esi,%ecx
+ 6d7:	73 4f                	jae    728 <malloc+0xa8>
+ 6d9:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
+ 6df:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6e1:	39 d7                	cmp    %edx,%edi
+ 6e3:	75 eb                	jne    6d0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 6e5:	83 ec 0c             	sub    $0xc,%esp
+ 6e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6eb:	e8 49 fc ff ff       	call   339 <sbrk>
+  if(p == (char*)-1)
+ 6f0:	83 c4 10             	add    $0x10,%esp
+ 6f3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6f6:	74 1c                	je     714 <malloc+0x94>
+  hp->s.size = nu;
+ 6f8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6fb:	83 ec 0c             	sub    $0xc,%esp
+ 6fe:	83 c0 08             	add    $0x8,%eax
+ 701:	50                   	push   %eax
+ 702:	e8 e9 fe ff ff       	call   5f0 <free>
+  return freep;
+ 707:	8b 15 64 0a 00 00    	mov    0xa64,%edx
+      if((p = morecore(nunits)) == 0)
+ 70d:	83 c4 10             	add    $0x10,%esp
+ 710:	85 d2                	test   %edx,%edx
+ 712:	75 bc                	jne    6d0 <malloc+0x50>
+        return 0;
+  }
+}
+ 714:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 717:	31 c0                	xor    %eax,%eax
+}
+ 719:	5b                   	pop    %ebx
+ 71a:	5e                   	pop    %esi
+ 71b:	5f                   	pop    %edi
+ 71c:	5d                   	pop    %ebp
+ 71d:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 71e:	89 d0                	mov    %edx,%eax
+ 720:	89 fa                	mov    %edi,%edx
+ 722:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 728:	39 ce                	cmp    %ecx,%esi
+ 72a:	74 54                	je     780 <malloc+0x100>
+        p->s.size -= nunits;
+ 72c:	29 f1                	sub    %esi,%ecx
+ 72e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 731:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 734:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 737:	89 15 64 0a 00 00    	mov    %edx,0xa64
+}
+ 73d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 740:	83 c0 08             	add    $0x8,%eax
+}
+ 743:	5b                   	pop    %ebx
+ 744:	5e                   	pop    %esi
+ 745:	5f                   	pop    %edi
+ 746:	5d                   	pop    %ebp
+ 747:	c3                   	ret    
+ 748:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 74f:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+ 750:	c7 05 64 0a 00 00 68 	movl   $0xa68,0xa64
+ 757:	0a 00 00 
+    base.s.size = 0;
+ 75a:	bf 68 0a 00 00       	mov    $0xa68,%edi
+    base.s.ptr = freep = prevp = &base;
+ 75f:	c7 05 68 0a 00 00 68 	movl   $0xa68,0xa68
+ 766:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 769:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 76b:	c7 05 6c 0a 00 00 00 	movl   $0x0,0xa6c
+ 772:	00 00 00 
+    if(p->s.size >= nunits){
+ 775:	e9 32 ff ff ff       	jmp    6ac <malloc+0x2c>
+ 77a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 780:	8b 08                	mov    (%eax),%ecx
+ 782:	89 0a                	mov    %ecx,(%edx)
+ 784:	eb b1                	jmp    737 <malloc+0xb7>
diff -urN xv6-public/ln.d xv6-public-new/ln.d
--- xv6-public/ln.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/ln.d	2019-10-04 10:45:48.692028882 +0530
@@ -0,0 +1 @@
+ln.o: ln.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/ln.o and xv6-public-new/ln.o differ
diff -urN xv6-public/ln.sym xv6-public-new/ln.sym
--- xv6-public/ln.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/ln.sym	2019-10-04 10:45:48.708028883 +0530
@@ -0,0 +1,57 @@
+00000000 .text
+00000788 .rodata
+000007cc .eh_frame
+00000a64 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ln.c
+00000000 ulib.c
+00000000 printf.c
+00000360 printint
+000007b8 digits.1101
+00000000 umalloc.c
+00000a64 freep
+00000a68 base
+00000060 strcpy
+00000420 printf
+00000280 memmove
+000002f9 mknod
+00000170 gets
+00000331 getpid
+00000680 malloc
+00000341 sleep
+000002c1 pipe
+000002d1 write
+00000309 fstat
+000002e1 kill
+00000321 chdir
+000002e9 exec
+000002b9 wait
+000002c9 read
+00000301 unlink
+000002a9 fork
+00000339 sbrk
+00000349 uptime
+00000a64 __bss_start
+00000110 memset
+00000000 main
+00000090 strcmp
+00000329 dup
+000001f0 stat
+00000a64 _edata
+00000a70 _end
+00000311 link
+000002b1 exit
+00000240 atoi
+000000e0 strlen
+000002f1 open
+00000130 strchr
+00000319 mkdir
+000002d9 close
+000005f0 free
diff -urN xv6-public/log.d xv6-public-new/log.d
--- xv6-public/log.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/log.d	2019-10-04 10:45:50.060028947 +0530
@@ -0,0 +1,2 @@
+log.o: log.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files xv6-public/log.o and xv6-public-new/log.o differ
Binary files xv6-public/_ls and xv6-public-new/_ls differ
diff -urN xv6-public/ls.asm xv6-public-new/ls.asm
--- xv6-public/ls.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/ls.asm	2019-10-04 10:45:48.760028885 +0530
@@ -0,0 +1,1475 @@
+
+_ls:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  close(fd);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	56                   	push   %esi
+   e:	53                   	push   %ebx
+   f:	51                   	push   %ecx
+  10:	83 ec 0c             	sub    $0xc,%esp
+  13:	8b 01                	mov    (%ecx),%eax
+  15:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  if(argc < 2){
+  18:	83 f8 01             	cmp    $0x1,%eax
+  1b:	7e 24                	jle    41 <main+0x41>
+  1d:	8d 5a 04             	lea    0x4(%edx),%ebx
+  20:	8d 34 82             	lea    (%edx,%eax,4),%esi
+  23:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  27:	90                   	nop
+    ls(".");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    ls(argv[i]);
+  28:	83 ec 0c             	sub    $0xc,%esp
+  2b:	ff 33                	pushl  (%ebx)
+  2d:	83 c3 04             	add    $0x4,%ebx
+  30:	e8 db 00 00 00       	call   110 <ls>
+  for(i=1; i<argc; i++)
+  35:	83 c4 10             	add    $0x10,%esp
+  38:	39 f3                	cmp    %esi,%ebx
+  3a:	75 ec                	jne    28 <main+0x28>
+  exit();
+  3c:	e8 60 05 00 00       	call   5a1 <exit>
+    ls(".");
+  41:	83 ec 0c             	sub    $0xc,%esp
+  44:	68 c0 0a 00 00       	push   $0xac0
+  49:	e8 c2 00 00 00       	call   110 <ls>
+    exit();
+  4e:	e8 4e 05 00 00       	call   5a1 <exit>
+  53:	66 90                	xchg   %ax,%ax
+  55:	66 90                	xchg   %ax,%ax
+  57:	66 90                	xchg   %ax,%ax
+  59:	66 90                	xchg   %ax,%ax
+  5b:	66 90                	xchg   %ax,%ax
+  5d:	66 90                	xchg   %ax,%ax
+  5f:	90                   	nop
+
+00000060 <fmtname>:
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	56                   	push   %esi
+  64:	53                   	push   %ebx
+  65:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+  68:	83 ec 0c             	sub    $0xc,%esp
+  6b:	56                   	push   %esi
+  6c:	e8 5f 03 00 00       	call   3d0 <strlen>
+  71:	83 c4 10             	add    $0x10,%esp
+  74:	01 f0                	add    %esi,%eax
+  76:	89 c3                	mov    %eax,%ebx
+  78:	0f 82 82 00 00 00    	jb     100 <fmtname+0xa0>
+  7e:	80 38 2f             	cmpb   $0x2f,(%eax)
+  81:	75 0d                	jne    90 <fmtname+0x30>
+  83:	eb 7b                	jmp    100 <fmtname+0xa0>
+  85:	8d 76 00             	lea    0x0(%esi),%esi
+  88:	80 7b ff 2f          	cmpb   $0x2f,-0x1(%ebx)
+  8c:	74 09                	je     97 <fmtname+0x37>
+  8e:	89 c3                	mov    %eax,%ebx
+  90:	8d 43 ff             	lea    -0x1(%ebx),%eax
+  93:	39 c6                	cmp    %eax,%esi
+  95:	76 f1                	jbe    88 <fmtname+0x28>
+  if(strlen(p) >= DIRSIZ)
+  97:	83 ec 0c             	sub    $0xc,%esp
+  9a:	53                   	push   %ebx
+  9b:	e8 30 03 00 00       	call   3d0 <strlen>
+  a0:	83 c4 10             	add    $0x10,%esp
+  a3:	83 f8 0d             	cmp    $0xd,%eax
+  a6:	77 4a                	ja     f2 <fmtname+0x92>
+  memmove(buf, p, strlen(p));
+  a8:	83 ec 0c             	sub    $0xc,%esp
+  ab:	53                   	push   %ebx
+  ac:	e8 1f 03 00 00       	call   3d0 <strlen>
+  b1:	83 c4 0c             	add    $0xc,%esp
+  b4:	50                   	push   %eax
+  b5:	53                   	push   %ebx
+  b6:	68 f8 0d 00 00       	push   $0xdf8
+  bb:	e8 b0 04 00 00       	call   570 <memmove>
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  c0:	89 1c 24             	mov    %ebx,(%esp)
+  c3:	e8 08 03 00 00       	call   3d0 <strlen>
+  c8:	89 1c 24             	mov    %ebx,(%esp)
+  return buf;
+  cb:	bb f8 0d 00 00       	mov    $0xdf8,%ebx
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  d0:	89 c6                	mov    %eax,%esi
+  d2:	e8 f9 02 00 00       	call   3d0 <strlen>
+  d7:	ba 0e 00 00 00       	mov    $0xe,%edx
+  dc:	83 c4 0c             	add    $0xc,%esp
+  df:	29 f2                	sub    %esi,%edx
+  e1:	05 f8 0d 00 00       	add    $0xdf8,%eax
+  e6:	52                   	push   %edx
+  e7:	6a 20                	push   $0x20
+  e9:	50                   	push   %eax
+  ea:	e8 11 03 00 00       	call   400 <memset>
+  return buf;
+  ef:	83 c4 10             	add    $0x10,%esp
+}
+  f2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  f5:	89 d8                	mov    %ebx,%eax
+  f7:	5b                   	pop    %ebx
+  f8:	5e                   	pop    %esi
+  f9:	5d                   	pop    %ebp
+  fa:	c3                   	ret    
+  fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  ff:	90                   	nop
+ 100:	83 c3 01             	add    $0x1,%ebx
+ 103:	eb 92                	jmp    97 <fmtname+0x37>
+ 105:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000110 <ls>:
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	57                   	push   %edi
+ 114:	56                   	push   %esi
+ 115:	53                   	push   %ebx
+ 116:	81 ec 64 02 00 00    	sub    $0x264,%esp
+ 11c:	8b 7d 08             	mov    0x8(%ebp),%edi
+  if((fd = open(path, 0)) < 0){
+ 11f:	6a 00                	push   $0x0
+ 121:	57                   	push   %edi
+ 122:	e8 ba 04 00 00       	call   5e1 <open>
+ 127:	83 c4 10             	add    $0x10,%esp
+ 12a:	85 c0                	test   %eax,%eax
+ 12c:	0f 88 9e 01 00 00    	js     2d0 <ls+0x1c0>
+  if(fstat(fd, &st) < 0){
+ 132:	83 ec 08             	sub    $0x8,%esp
+ 135:	8d b5 d4 fd ff ff    	lea    -0x22c(%ebp),%esi
+ 13b:	89 c3                	mov    %eax,%ebx
+ 13d:	56                   	push   %esi
+ 13e:	50                   	push   %eax
+ 13f:	e8 b5 04 00 00       	call   5f9 <fstat>
+ 144:	83 c4 10             	add    $0x10,%esp
+ 147:	85 c0                	test   %eax,%eax
+ 149:	0f 88 c1 01 00 00    	js     310 <ls+0x200>
+  switch(st.type){
+ 14f:	0f b7 85 d4 fd ff ff 	movzwl -0x22c(%ebp),%eax
+ 156:	66 83 f8 01          	cmp    $0x1,%ax
+ 15a:	74 64                	je     1c0 <ls+0xb0>
+ 15c:	66 83 f8 02          	cmp    $0x2,%ax
+ 160:	74 1e                	je     180 <ls+0x70>
+  close(fd);
+ 162:	83 ec 0c             	sub    $0xc,%esp
+ 165:	53                   	push   %ebx
+ 166:	e8 5e 04 00 00       	call   5c9 <close>
+ 16b:	83 c4 10             	add    $0x10,%esp
+}
+ 16e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 171:	5b                   	pop    %ebx
+ 172:	5e                   	pop    %esi
+ 173:	5f                   	pop    %edi
+ 174:	5d                   	pop    %ebp
+ 175:	c3                   	ret    
+ 176:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17d:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
+ 180:	83 ec 0c             	sub    $0xc,%esp
+ 183:	8b 95 e4 fd ff ff    	mov    -0x21c(%ebp),%edx
+ 189:	8b b5 dc fd ff ff    	mov    -0x224(%ebp),%esi
+ 18f:	57                   	push   %edi
+ 190:	89 95 b4 fd ff ff    	mov    %edx,-0x24c(%ebp)
+ 196:	e8 c5 fe ff ff       	call   60 <fmtname>
+ 19b:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
+ 1a1:	59                   	pop    %ecx
+ 1a2:	5f                   	pop    %edi
+ 1a3:	52                   	push   %edx
+ 1a4:	56                   	push   %esi
+ 1a5:	6a 02                	push   $0x2
+ 1a7:	50                   	push   %eax
+ 1a8:	68 a0 0a 00 00       	push   $0xaa0
+ 1ad:	6a 01                	push   $0x1
+ 1af:	e8 5c 05 00 00       	call   710 <printf>
+    break;
+ 1b4:	83 c4 20             	add    $0x20,%esp
+ 1b7:	eb a9                	jmp    162 <ls+0x52>
+ 1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+ 1c0:	83 ec 0c             	sub    $0xc,%esp
+ 1c3:	57                   	push   %edi
+ 1c4:	e8 07 02 00 00       	call   3d0 <strlen>
+ 1c9:	83 c4 10             	add    $0x10,%esp
+ 1cc:	83 c0 10             	add    $0x10,%eax
+ 1cf:	3d 00 02 00 00       	cmp    $0x200,%eax
+ 1d4:	0f 87 16 01 00 00    	ja     2f0 <ls+0x1e0>
+    strcpy(buf, path);
+ 1da:	83 ec 08             	sub    $0x8,%esp
+ 1dd:	57                   	push   %edi
+ 1de:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
+ 1e4:	57                   	push   %edi
+ 1e5:	e8 66 01 00 00       	call   350 <strcpy>
+    p = buf+strlen(buf);
+ 1ea:	89 3c 24             	mov    %edi,(%esp)
+ 1ed:	e8 de 01 00 00       	call   3d0 <strlen>
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1f2:	83 c4 10             	add    $0x10,%esp
+    p = buf+strlen(buf);
+ 1f5:	01 f8                	add    %edi,%eax
+    *p++ = '/';
+ 1f7:	8d 48 01             	lea    0x1(%eax),%ecx
+    p = buf+strlen(buf);
+ 1fa:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
+    *p++ = '/';
+ 200:	89 8d a4 fd ff ff    	mov    %ecx,-0x25c(%ebp)
+ 206:	c6 00 2f             	movb   $0x2f,(%eax)
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 209:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 210:	83 ec 04             	sub    $0x4,%esp
+ 213:	8d 85 c4 fd ff ff    	lea    -0x23c(%ebp),%eax
+ 219:	6a 10                	push   $0x10
+ 21b:	50                   	push   %eax
+ 21c:	53                   	push   %ebx
+ 21d:	e8 97 03 00 00       	call   5b9 <read>
+ 222:	83 c4 10             	add    $0x10,%esp
+ 225:	83 f8 10             	cmp    $0x10,%eax
+ 228:	0f 85 34 ff ff ff    	jne    162 <ls+0x52>
+      if(de.inum == 0)
+ 22e:	66 83 bd c4 fd ff ff 	cmpw   $0x0,-0x23c(%ebp)
+ 235:	00 
+ 236:	74 d8                	je     210 <ls+0x100>
+      memmove(p, de.name, DIRSIZ);
+ 238:	83 ec 04             	sub    $0x4,%esp
+ 23b:	8d 85 c6 fd ff ff    	lea    -0x23a(%ebp),%eax
+ 241:	6a 0e                	push   $0xe
+ 243:	50                   	push   %eax
+ 244:	ff b5 a4 fd ff ff    	pushl  -0x25c(%ebp)
+ 24a:	e8 21 03 00 00       	call   570 <memmove>
+      p[DIRSIZ] = 0;
+ 24f:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
+ 255:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
+      if(stat(buf, &st) < 0){
+ 259:	58                   	pop    %eax
+ 25a:	5a                   	pop    %edx
+ 25b:	56                   	push   %esi
+ 25c:	57                   	push   %edi
+ 25d:	e8 7e 02 00 00       	call   4e0 <stat>
+ 262:	83 c4 10             	add    $0x10,%esp
+ 265:	85 c0                	test   %eax,%eax
+ 267:	0f 88 cb 00 00 00    	js     338 <ls+0x228>
+      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+ 26d:	83 ec 0c             	sub    $0xc,%esp
+ 270:	8b 8d e4 fd ff ff    	mov    -0x21c(%ebp),%ecx
+ 276:	8b 95 dc fd ff ff    	mov    -0x224(%ebp),%edx
+ 27c:	57                   	push   %edi
+ 27d:	0f bf 85 d4 fd ff ff 	movswl -0x22c(%ebp),%eax
+ 284:	89 8d ac fd ff ff    	mov    %ecx,-0x254(%ebp)
+ 28a:	89 95 b0 fd ff ff    	mov    %edx,-0x250(%ebp)
+ 290:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
+ 296:	e8 c5 fd ff ff       	call   60 <fmtname>
+ 29b:	5a                   	pop    %edx
+ 29c:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
+ 2a2:	59                   	pop    %ecx
+ 2a3:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
+ 2a9:	51                   	push   %ecx
+ 2aa:	52                   	push   %edx
+ 2ab:	ff b5 b4 fd ff ff    	pushl  -0x24c(%ebp)
+ 2b1:	50                   	push   %eax
+ 2b2:	68 a0 0a 00 00       	push   $0xaa0
+ 2b7:	6a 01                	push   $0x1
+ 2b9:	e8 52 04 00 00       	call   710 <printf>
+ 2be:	83 c4 20             	add    $0x20,%esp
+ 2c1:	e9 4a ff ff ff       	jmp    210 <ls+0x100>
+ 2c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2cd:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(2, "ls: cannot open %s\n", path);
+ 2d0:	83 ec 04             	sub    $0x4,%esp
+ 2d3:	57                   	push   %edi
+ 2d4:	68 78 0a 00 00       	push   $0xa78
+ 2d9:	6a 02                	push   $0x2
+ 2db:	e8 30 04 00 00       	call   710 <printf>
+    return;
+ 2e0:	83 c4 10             	add    $0x10,%esp
+}
+ 2e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2e6:	5b                   	pop    %ebx
+ 2e7:	5e                   	pop    %esi
+ 2e8:	5f                   	pop    %edi
+ 2e9:	5d                   	pop    %ebp
+ 2ea:	c3                   	ret    
+ 2eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2ef:	90                   	nop
+      printf(1, "ls: path too long\n");
+ 2f0:	83 ec 08             	sub    $0x8,%esp
+ 2f3:	68 ad 0a 00 00       	push   $0xaad
+ 2f8:	6a 01                	push   $0x1
+ 2fa:	e8 11 04 00 00       	call   710 <printf>
+      break;
+ 2ff:	83 c4 10             	add    $0x10,%esp
+ 302:	e9 5b fe ff ff       	jmp    162 <ls+0x52>
+ 307:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 30e:	66 90                	xchg   %ax,%ax
+    printf(2, "ls: cannot stat %s\n", path);
+ 310:	83 ec 04             	sub    $0x4,%esp
+ 313:	57                   	push   %edi
+ 314:	68 8c 0a 00 00       	push   $0xa8c
+ 319:	6a 02                	push   $0x2
+ 31b:	e8 f0 03 00 00       	call   710 <printf>
+    close(fd);
+ 320:	89 1c 24             	mov    %ebx,(%esp)
+ 323:	e8 a1 02 00 00       	call   5c9 <close>
+    return;
+ 328:	83 c4 10             	add    $0x10,%esp
+}
+ 32b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 32e:	5b                   	pop    %ebx
+ 32f:	5e                   	pop    %esi
+ 330:	5f                   	pop    %edi
+ 331:	5d                   	pop    %ebp
+ 332:	c3                   	ret    
+ 333:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 337:	90                   	nop
+        printf(1, "ls: cannot stat %s\n", buf);
+ 338:	83 ec 04             	sub    $0x4,%esp
+ 33b:	57                   	push   %edi
+ 33c:	68 8c 0a 00 00       	push   $0xa8c
+ 341:	6a 01                	push   $0x1
+ 343:	e8 c8 03 00 00       	call   710 <printf>
+        continue;
+ 348:	83 c4 10             	add    $0x10,%esp
+ 34b:	e9 c0 fe ff ff       	jmp    210 <ls+0x100>
+
+00000350 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 350:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 351:	31 d2                	xor    %edx,%edx
+{
+ 353:	89 e5                	mov    %esp,%ebp
+ 355:	53                   	push   %ebx
+ 356:	8b 45 08             	mov    0x8(%ebp),%eax
+ 359:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 35c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 360:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+ 364:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 367:	83 c2 01             	add    $0x1,%edx
+ 36a:	84 c9                	test   %cl,%cl
+ 36c:	75 f2                	jne    360 <strcpy+0x10>
+    ;
+  return os;
+}
+ 36e:	5b                   	pop    %ebx
+ 36f:	5d                   	pop    %ebp
+ 370:	c3                   	ret    
+ 371:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 378:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 37f:	90                   	nop
+
+00000380 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	56                   	push   %esi
+ 384:	53                   	push   %ebx
+ 385:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 388:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+ 38b:	0f b6 13             	movzbl (%ebx),%edx
+ 38e:	0f b6 0e             	movzbl (%esi),%ecx
+ 391:	84 d2                	test   %dl,%dl
+ 393:	74 1e                	je     3b3 <strcmp+0x33>
+ 395:	b8 01 00 00 00       	mov    $0x1,%eax
+ 39a:	38 ca                	cmp    %cl,%dl
+ 39c:	74 09                	je     3a7 <strcmp+0x27>
+ 39e:	eb 20                	jmp    3c0 <strcmp+0x40>
+ 3a0:	83 c0 01             	add    $0x1,%eax
+ 3a3:	38 ca                	cmp    %cl,%dl
+ 3a5:	75 19                	jne    3c0 <strcmp+0x40>
+ 3a7:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 3ab:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+ 3af:	84 d2                	test   %dl,%dl
+ 3b1:	75 ed                	jne    3a0 <strcmp+0x20>
+ 3b3:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+ 3b5:	5b                   	pop    %ebx
+ 3b6:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 3b7:	29 c8                	sub    %ecx,%eax
+}
+ 3b9:	5d                   	pop    %ebp
+ 3ba:	c3                   	ret    
+ 3bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3bf:	90                   	nop
+ 3c0:	0f b6 c2             	movzbl %dl,%eax
+ 3c3:	5b                   	pop    %ebx
+ 3c4:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 3c5:	29 c8                	sub    %ecx,%eax
+}
+ 3c7:	5d                   	pop    %ebp
+ 3c8:	c3                   	ret    
+ 3c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000003d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3d0:	55                   	push   %ebp
+ 3d1:	89 e5                	mov    %esp,%ebp
+ 3d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3d6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 3d9:	74 15                	je     3f0 <strlen+0x20>
+ 3db:	31 d2                	xor    %edx,%edx
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3e0:	83 c2 01             	add    $0x1,%edx
+ 3e3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 3e7:	89 d0                	mov    %edx,%eax
+ 3e9:	75 f5                	jne    3e0 <strlen+0x10>
+    ;
+  return n;
+}
+ 3eb:	5d                   	pop    %ebp
+ 3ec:	c3                   	ret    
+ 3ed:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 3f0:	31 c0                	xor    %eax,%eax
+}
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	c3                   	ret    
+ 3f4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3ff:	90                   	nop
+
+00000400 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
+ 404:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 407:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 40a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 40d:	89 d7                	mov    %edx,%edi
+ 40f:	fc                   	cld    
+ 410:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 412:	89 d0                	mov    %edx,%eax
+ 414:	5f                   	pop    %edi
+ 415:	5d                   	pop    %ebp
+ 416:	c3                   	ret    
+ 417:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 41e:	66 90                	xchg   %ax,%ax
+
+00000420 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	53                   	push   %ebx
+ 424:	8b 45 08             	mov    0x8(%ebp),%eax
+ 427:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 42a:	0f b6 18             	movzbl (%eax),%ebx
+ 42d:	84 db                	test   %bl,%bl
+ 42f:	74 1d                	je     44e <strchr+0x2e>
+ 431:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 433:	38 d3                	cmp    %dl,%bl
+ 435:	75 0d                	jne    444 <strchr+0x24>
+ 437:	eb 17                	jmp    450 <strchr+0x30>
+ 439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 440:	38 ca                	cmp    %cl,%dl
+ 442:	74 0c                	je     450 <strchr+0x30>
+  for(; *s; s++)
+ 444:	83 c0 01             	add    $0x1,%eax
+ 447:	0f b6 10             	movzbl (%eax),%edx
+ 44a:	84 d2                	test   %dl,%dl
+ 44c:	75 f2                	jne    440 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 44e:	31 c0                	xor    %eax,%eax
+}
+ 450:	5b                   	pop    %ebx
+ 451:	5d                   	pop    %ebp
+ 452:	c3                   	ret    
+ 453:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000460 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 460:	55                   	push   %ebp
+ 461:	89 e5                	mov    %esp,%ebp
+ 463:	57                   	push   %edi
+ 464:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 465:	31 f6                	xor    %esi,%esi
+{
+ 467:	53                   	push   %ebx
+ 468:	89 f3                	mov    %esi,%ebx
+ 46a:	83 ec 1c             	sub    $0x1c,%esp
+ 46d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 470:	eb 2f                	jmp    4a1 <gets+0x41>
+ 472:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 478:	83 ec 04             	sub    $0x4,%esp
+ 47b:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 47e:	6a 01                	push   $0x1
+ 480:	50                   	push   %eax
+ 481:	6a 00                	push   $0x0
+ 483:	e8 31 01 00 00       	call   5b9 <read>
+    if(cc < 1)
+ 488:	83 c4 10             	add    $0x10,%esp
+ 48b:	85 c0                	test   %eax,%eax
+ 48d:	7e 1c                	jle    4ab <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 48f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 493:	83 c7 01             	add    $0x1,%edi
+ 496:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 499:	3c 0a                	cmp    $0xa,%al
+ 49b:	74 23                	je     4c0 <gets+0x60>
+ 49d:	3c 0d                	cmp    $0xd,%al
+ 49f:	74 1f                	je     4c0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 4a1:	83 c3 01             	add    $0x1,%ebx
+ 4a4:	89 fe                	mov    %edi,%esi
+ 4a6:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 4a9:	7c cd                	jl     478 <gets+0x18>
+ 4ab:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 4ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 4b0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4b6:	5b                   	pop    %ebx
+ 4b7:	5e                   	pop    %esi
+ 4b8:	5f                   	pop    %edi
+ 4b9:	5d                   	pop    %ebp
+ 4ba:	c3                   	ret    
+ 4bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
+ 4c0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4c3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4c6:	01 de                	add    %ebx,%esi
+ 4c8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 4ca:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d0:	5b                   	pop    %ebx
+ 4d1:	5e                   	pop    %esi
+ 4d2:	5f                   	pop    %edi
+ 4d3:	5d                   	pop    %ebp
+ 4d4:	c3                   	ret    
+ 4d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000004e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4e0:	55                   	push   %ebp
+ 4e1:	89 e5                	mov    %esp,%ebp
+ 4e3:	56                   	push   %esi
+ 4e4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4e5:	83 ec 08             	sub    $0x8,%esp
+ 4e8:	6a 00                	push   $0x0
+ 4ea:	ff 75 08             	pushl  0x8(%ebp)
+ 4ed:	e8 ef 00 00 00       	call   5e1 <open>
+  if(fd < 0)
+ 4f2:	83 c4 10             	add    $0x10,%esp
+ 4f5:	85 c0                	test   %eax,%eax
+ 4f7:	78 27                	js     520 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 4f9:	83 ec 08             	sub    $0x8,%esp
+ 4fc:	ff 75 0c             	pushl  0xc(%ebp)
+ 4ff:	89 c3                	mov    %eax,%ebx
+ 501:	50                   	push   %eax
+ 502:	e8 f2 00 00 00       	call   5f9 <fstat>
+  close(fd);
+ 507:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 50a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 50c:	e8 b8 00 00 00       	call   5c9 <close>
+  return r;
+ 511:	83 c4 10             	add    $0x10,%esp
+}
+ 514:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 517:	89 f0                	mov    %esi,%eax
+ 519:	5b                   	pop    %ebx
+ 51a:	5e                   	pop    %esi
+ 51b:	5d                   	pop    %ebp
+ 51c:	c3                   	ret    
+ 51d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 520:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 525:	eb ed                	jmp    514 <stat+0x34>
+ 527:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52e:	66 90                	xchg   %ax,%ax
+
+00000530 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 530:	55                   	push   %ebp
+ 531:	89 e5                	mov    %esp,%ebp
+ 533:	53                   	push   %ebx
+ 534:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 537:	0f be 11             	movsbl (%ecx),%edx
+ 53a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 53d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 53f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 544:	77 1f                	ja     565 <atoi+0x35>
+ 546:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54d:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 550:	83 c1 01             	add    $0x1,%ecx
+ 553:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 556:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 55a:	0f be 11             	movsbl (%ecx),%edx
+ 55d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 560:	80 fb 09             	cmp    $0x9,%bl
+ 563:	76 eb                	jbe    550 <atoi+0x20>
+  return n;
+}
+ 565:	5b                   	pop    %ebx
+ 566:	5d                   	pop    %ebp
+ 567:	c3                   	ret    
+ 568:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56f:	90                   	nop
+
+00000570 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 570:	55                   	push   %ebp
+ 571:	89 e5                	mov    %esp,%ebp
+ 573:	57                   	push   %edi
+ 574:	8b 55 10             	mov    0x10(%ebp),%edx
+ 577:	8b 45 08             	mov    0x8(%ebp),%eax
+ 57a:	56                   	push   %esi
+ 57b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 57e:	85 d2                	test   %edx,%edx
+ 580:	7e 13                	jle    595 <memmove+0x25>
+ 582:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 584:	89 c7                	mov    %eax,%edi
+ 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 590:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 591:	39 fa                	cmp    %edi,%edx
+ 593:	75 fb                	jne    590 <memmove+0x20>
+  return vdst;
+}
+ 595:	5e                   	pop    %esi
+ 596:	5f                   	pop    %edi
+ 597:	5d                   	pop    %ebp
+ 598:	c3                   	ret    
+
+00000599 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 599:	b8 01 00 00 00       	mov    $0x1,%eax
+ 59e:	cd 40                	int    $0x40
+ 5a0:	c3                   	ret    
+
+000005a1 <exit>:
+SYSCALL(exit)
+ 5a1:	b8 02 00 00 00       	mov    $0x2,%eax
+ 5a6:	cd 40                	int    $0x40
+ 5a8:	c3                   	ret    
+
+000005a9 <wait>:
+SYSCALL(wait)
+ 5a9:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5ae:	cd 40                	int    $0x40
+ 5b0:	c3                   	ret    
+
+000005b1 <pipe>:
+SYSCALL(pipe)
+ 5b1:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5b6:	cd 40                	int    $0x40
+ 5b8:	c3                   	ret    
+
+000005b9 <read>:
+SYSCALL(read)
+ 5b9:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5be:	cd 40                	int    $0x40
+ 5c0:	c3                   	ret    
+
+000005c1 <write>:
+SYSCALL(write)
+ 5c1:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5c6:	cd 40                	int    $0x40
+ 5c8:	c3                   	ret    
+
+000005c9 <close>:
+SYSCALL(close)
+ 5c9:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5ce:	cd 40                	int    $0x40
+ 5d0:	c3                   	ret    
+
+000005d1 <kill>:
+SYSCALL(kill)
+ 5d1:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5d6:	cd 40                	int    $0x40
+ 5d8:	c3                   	ret    
+
+000005d9 <exec>:
+SYSCALL(exec)
+ 5d9:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5de:	cd 40                	int    $0x40
+ 5e0:	c3                   	ret    
+
+000005e1 <open>:
+SYSCALL(open)
+ 5e1:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5e6:	cd 40                	int    $0x40
+ 5e8:	c3                   	ret    
+
+000005e9 <mknod>:
+SYSCALL(mknod)
+ 5e9:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5ee:	cd 40                	int    $0x40
+ 5f0:	c3                   	ret    
+
+000005f1 <unlink>:
+SYSCALL(unlink)
+ 5f1:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5f6:	cd 40                	int    $0x40
+ 5f8:	c3                   	ret    
+
+000005f9 <fstat>:
+SYSCALL(fstat)
+ 5f9:	b8 08 00 00 00       	mov    $0x8,%eax
+ 5fe:	cd 40                	int    $0x40
+ 600:	c3                   	ret    
+
+00000601 <link>:
+SYSCALL(link)
+ 601:	b8 13 00 00 00       	mov    $0x13,%eax
+ 606:	cd 40                	int    $0x40
+ 608:	c3                   	ret    
+
+00000609 <mkdir>:
+SYSCALL(mkdir)
+ 609:	b8 14 00 00 00       	mov    $0x14,%eax
+ 60e:	cd 40                	int    $0x40
+ 610:	c3                   	ret    
+
+00000611 <chdir>:
+SYSCALL(chdir)
+ 611:	b8 09 00 00 00       	mov    $0x9,%eax
+ 616:	cd 40                	int    $0x40
+ 618:	c3                   	ret    
+
+00000619 <dup>:
+SYSCALL(dup)
+ 619:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 61e:	cd 40                	int    $0x40
+ 620:	c3                   	ret    
+
+00000621 <getpid>:
+SYSCALL(getpid)
+ 621:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 626:	cd 40                	int    $0x40
+ 628:	c3                   	ret    
+
+00000629 <sbrk>:
+SYSCALL(sbrk)
+ 629:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 62e:	cd 40                	int    $0x40
+ 630:	c3                   	ret    
+
+00000631 <sleep>:
+SYSCALL(sleep)
+ 631:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 636:	cd 40                	int    $0x40
+ 638:	c3                   	ret    
+
+00000639 <uptime>:
+SYSCALL(uptime)
+ 639:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 63e:	cd 40                	int    $0x40
+ 640:	c3                   	ret    
+ 641:	66 90                	xchg   %ax,%ax
+ 643:	66 90                	xchg   %ax,%ax
+ 645:	66 90                	xchg   %ax,%ax
+ 647:	66 90                	xchg   %ax,%ax
+ 649:	66 90                	xchg   %ax,%ax
+ 64b:	66 90                	xchg   %ax,%ax
+ 64d:	66 90                	xchg   %ax,%ax
+ 64f:	90                   	nop
+
+00000650 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 650:	55                   	push   %ebp
+ 651:	89 e5                	mov    %esp,%ebp
+ 653:	57                   	push   %edi
+ 654:	56                   	push   %esi
+ 655:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 656:	89 d3                	mov    %edx,%ebx
+{
+ 658:	83 ec 3c             	sub    $0x3c,%esp
+ 65b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+ 65e:	85 d2                	test   %edx,%edx
+ 660:	0f 89 92 00 00 00    	jns    6f8 <printint+0xa8>
+ 666:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 66a:	0f 84 88 00 00 00    	je     6f8 <printint+0xa8>
+    neg = 1;
+ 670:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+ 677:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 679:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 680:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 683:	eb 08                	jmp    68d <printint+0x3d>
+ 685:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 688:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+ 68b:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+ 68d:	89 d8                	mov    %ebx,%eax
+ 68f:	31 d2                	xor    %edx,%edx
+ 691:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 694:	f7 f1                	div    %ecx
+ 696:	83 c7 01             	add    $0x1,%edi
+ 699:	0f b6 92 cc 0a 00 00 	movzbl 0xacc(%edx),%edx
+ 6a0:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+ 6a3:	39 d9                	cmp    %ebx,%ecx
+ 6a5:	76 e1                	jbe    688 <printint+0x38>
+  if(neg)
+ 6a7:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 6aa:	85 c0                	test   %eax,%eax
+ 6ac:	74 0d                	je     6bb <printint+0x6b>
+    buf[i++] = '-';
+ 6ae:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 6b3:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+ 6b8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 6bb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 6be:	8b 7d bc             	mov    -0x44(%ebp),%edi
+ 6c1:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6c5:	eb 0f                	jmp    6d6 <printint+0x86>
+ 6c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6ce:	66 90                	xchg   %ax,%ax
+ 6d0:	0f b6 13             	movzbl (%ebx),%edx
+ 6d3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 6d6:	83 ec 04             	sub    $0x4,%esp
+ 6d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6dc:	6a 01                	push   $0x1
+ 6de:	56                   	push   %esi
+ 6df:	57                   	push   %edi
+ 6e0:	e8 dc fe ff ff       	call   5c1 <write>
+
+  while(--i >= 0)
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	39 de                	cmp    %ebx,%esi
+ 6ea:	75 e4                	jne    6d0 <printint+0x80>
+    putc(fd, buf[i]);
+}
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ef:	5b                   	pop    %ebx
+ 6f0:	5e                   	pop    %esi
+ 6f1:	5f                   	pop    %edi
+ 6f2:	5d                   	pop    %ebp
+ 6f3:	c3                   	ret    
+ 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 6f8:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+ 6ff:	e9 75 ff ff ff       	jmp    679 <printint+0x29>
+ 704:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 70b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 70f:	90                   	nop
+
+00000710 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 710:	55                   	push   %ebp
+ 711:	89 e5                	mov    %esp,%ebp
+ 713:	57                   	push   %edi
+ 714:	56                   	push   %esi
+ 715:	53                   	push   %ebx
+ 716:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 719:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 71c:	0f b6 1e             	movzbl (%esi),%ebx
+ 71f:	84 db                	test   %bl,%bl
+ 721:	0f 84 b9 00 00 00    	je     7e0 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+ 727:	8d 45 10             	lea    0x10(%ebp),%eax
+ 72a:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 72d:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 730:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 732:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 735:	eb 38                	jmp    76f <printf+0x5f>
+ 737:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 73e:	66 90                	xchg   %ax,%ax
+ 740:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 743:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 748:	83 f8 25             	cmp    $0x25,%eax
+ 74b:	74 17                	je     764 <printf+0x54>
+  write(fd, &c, 1);
+ 74d:	83 ec 04             	sub    $0x4,%esp
+ 750:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 753:	6a 01                	push   $0x1
+ 755:	57                   	push   %edi
+ 756:	ff 75 08             	pushl  0x8(%ebp)
+ 759:	e8 63 fe ff ff       	call   5c1 <write>
+ 75e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 761:	83 c4 10             	add    $0x10,%esp
+ 764:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 767:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 76b:	84 db                	test   %bl,%bl
+ 76d:	74 71                	je     7e0 <printf+0xd0>
+    c = fmt[i] & 0xff;
+ 76f:	0f be cb             	movsbl %bl,%ecx
+ 772:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 775:	85 d2                	test   %edx,%edx
+ 777:	74 c7                	je     740 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 779:	83 fa 25             	cmp    $0x25,%edx
+ 77c:	75 e6                	jne    764 <printf+0x54>
+      if(c == 'd'){
+ 77e:	83 f8 64             	cmp    $0x64,%eax
+ 781:	0f 84 99 00 00 00    	je     820 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 787:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 78d:	83 f9 70             	cmp    $0x70,%ecx
+ 790:	74 5e                	je     7f0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 792:	83 f8 73             	cmp    $0x73,%eax
+ 795:	0f 84 d5 00 00 00    	je     870 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 79b:	83 f8 63             	cmp    $0x63,%eax
+ 79e:	0f 84 8c 00 00 00    	je     830 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 7a4:	83 f8 25             	cmp    $0x25,%eax
+ 7a7:	0f 84 b3 00 00 00    	je     860 <printf+0x150>
+  write(fd, &c, 1);
+ 7ad:	83 ec 04             	sub    $0x4,%esp
+ 7b0:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7b4:	6a 01                	push   $0x1
+ 7b6:	57                   	push   %edi
+ 7b7:	ff 75 08             	pushl  0x8(%ebp)
+ 7ba:	e8 02 fe ff ff       	call   5c1 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 7bf:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7c2:	83 c4 0c             	add    $0xc,%esp
+ 7c5:	6a 01                	push   $0x1
+ 7c7:	83 c6 01             	add    $0x1,%esi
+ 7ca:	57                   	push   %edi
+ 7cb:	ff 75 08             	pushl  0x8(%ebp)
+ 7ce:	e8 ee fd ff ff       	call   5c1 <write>
+  for(i = 0; fmt[i]; i++){
+ 7d3:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 7d7:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 7da:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 7dc:	84 db                	test   %bl,%bl
+ 7de:	75 8f                	jne    76f <printf+0x5f>
+    }
+  }
+}
+ 7e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7e3:	5b                   	pop    %ebx
+ 7e4:	5e                   	pop    %esi
+ 7e5:	5f                   	pop    %edi
+ 7e6:	5d                   	pop    %ebp
+ 7e7:	c3                   	ret    
+ 7e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ef:	90                   	nop
+        printint(fd, *ap, 16, 0);
+ 7f0:	83 ec 0c             	sub    $0xc,%esp
+ 7f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7f8:	6a 00                	push   $0x0
+ 7fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 7fd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 800:	8b 13                	mov    (%ebx),%edx
+ 802:	e8 49 fe ff ff       	call   650 <printint>
+        ap++;
+ 807:	89 d8                	mov    %ebx,%eax
+ 809:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 80c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 80e:	83 c0 04             	add    $0x4,%eax
+ 811:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 814:	e9 4b ff ff ff       	jmp    764 <printf+0x54>
+ 819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 820:	83 ec 0c             	sub    $0xc,%esp
+ 823:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 828:	6a 01                	push   $0x1
+ 82a:	eb ce                	jmp    7fa <printf+0xea>
+ 82c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 830:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 833:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 836:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 838:	6a 01                	push   $0x1
+        ap++;
+ 83a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 83d:	57                   	push   %edi
+ 83e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 841:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 844:	e8 78 fd ff ff       	call   5c1 <write>
+        ap++;
+ 849:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 84c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 84f:	31 d2                	xor    %edx,%edx
+ 851:	e9 0e ff ff ff       	jmp    764 <printf+0x54>
+ 856:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 85d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 860:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 863:	83 ec 04             	sub    $0x4,%esp
+ 866:	e9 5a ff ff ff       	jmp    7c5 <printf+0xb5>
+ 86b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 86f:	90                   	nop
+        s = (char*)*ap;
+ 870:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 873:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 875:	83 c0 04             	add    $0x4,%eax
+ 878:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 87b:	85 db                	test   %ebx,%ebx
+ 87d:	74 17                	je     896 <printf+0x186>
+        while(*s != 0){
+ 87f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 882:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 884:	84 c0                	test   %al,%al
+ 886:	0f 84 d8 fe ff ff    	je     764 <printf+0x54>
+ 88c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 88f:	89 de                	mov    %ebx,%esi
+ 891:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 894:	eb 1a                	jmp    8b0 <printf+0x1a0>
+          s = "(null)";
+ 896:	bb c2 0a 00 00       	mov    $0xac2,%ebx
+        while(*s != 0){
+ 89b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 89e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8a3:	89 de                	mov    %ebx,%esi
+ 8a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8af:	90                   	nop
+  write(fd, &c, 1);
+ 8b0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 8b3:	83 c6 01             	add    $0x1,%esi
+ 8b6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 8b9:	6a 01                	push   $0x1
+ 8bb:	57                   	push   %edi
+ 8bc:	53                   	push   %ebx
+ 8bd:	e8 ff fc ff ff       	call   5c1 <write>
+        while(*s != 0){
+ 8c2:	0f b6 06             	movzbl (%esi),%eax
+ 8c5:	83 c4 10             	add    $0x10,%esp
+ 8c8:	84 c0                	test   %al,%al
+ 8ca:	75 e4                	jne    8b0 <printf+0x1a0>
+ 8cc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 8cf:	31 d2                	xor    %edx,%edx
+ 8d1:	e9 8e fe ff ff       	jmp    764 <printf+0x54>
+ 8d6:	66 90                	xchg   %ax,%ax
+ 8d8:	66 90                	xchg   %ax,%ax
+ 8da:	66 90                	xchg   %ax,%ax
+ 8dc:	66 90                	xchg   %ax,%ax
+ 8de:	66 90                	xchg   %ax,%ax
+
+000008e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8e0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8e1:	a1 08 0e 00 00       	mov    0xe08,%eax
+{
+ 8e6:	89 e5                	mov    %esp,%ebp
+ 8e8:	57                   	push   %edi
+ 8e9:	56                   	push   %esi
+ 8ea:	53                   	push   %ebx
+ 8eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8ee:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 8f0:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8f3:	39 c8                	cmp    %ecx,%eax
+ 8f5:	73 19                	jae    910 <free+0x30>
+ 8f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8fe:	66 90                	xchg   %ax,%ax
+ 900:	39 d1                	cmp    %edx,%ecx
+ 902:	72 14                	jb     918 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 904:	39 d0                	cmp    %edx,%eax
+ 906:	73 10                	jae    918 <free+0x38>
+{
+ 908:	89 d0                	mov    %edx,%eax
+ 90a:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 90c:	39 c8                	cmp    %ecx,%eax
+ 90e:	72 f0                	jb     900 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 910:	39 d0                	cmp    %edx,%eax
+ 912:	72 f4                	jb     908 <free+0x28>
+ 914:	39 d1                	cmp    %edx,%ecx
+ 916:	73 f0                	jae    908 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 918:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 91b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 91e:	39 fa                	cmp    %edi,%edx
+ 920:	74 1e                	je     940 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 922:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 925:	8b 50 04             	mov    0x4(%eax),%edx
+ 928:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 92b:	39 f1                	cmp    %esi,%ecx
+ 92d:	74 28                	je     957 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 92f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 931:	5b                   	pop    %ebx
+  freep = p;
+ 932:	a3 08 0e 00 00       	mov    %eax,0xe08
+}
+ 937:	5e                   	pop    %esi
+ 938:	5f                   	pop    %edi
+ 939:	5d                   	pop    %ebp
+ 93a:	c3                   	ret    
+ 93b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 93f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 940:	03 72 04             	add    0x4(%edx),%esi
+ 943:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 946:	8b 10                	mov    (%eax),%edx
+ 948:	8b 12                	mov    (%edx),%edx
+ 94a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 94d:	8b 50 04             	mov    0x4(%eax),%edx
+ 950:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 953:	39 f1                	cmp    %esi,%ecx
+ 955:	75 d8                	jne    92f <free+0x4f>
+    p->s.size += bp->s.size;
+ 957:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 95a:	a3 08 0e 00 00       	mov    %eax,0xe08
+    p->s.size += bp->s.size;
+ 95f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 962:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 965:	89 10                	mov    %edx,(%eax)
+}
+ 967:	5b                   	pop    %ebx
+ 968:	5e                   	pop    %esi
+ 969:	5f                   	pop    %edi
+ 96a:	5d                   	pop    %ebp
+ 96b:	c3                   	ret    
+ 96c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000970 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 970:	55                   	push   %ebp
+ 971:	89 e5                	mov    %esp,%ebp
+ 973:	57                   	push   %edi
+ 974:	56                   	push   %esi
+ 975:	53                   	push   %ebx
+ 976:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 979:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 97c:	8b 3d 08 0e 00 00    	mov    0xe08,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 982:	8d 70 07             	lea    0x7(%eax),%esi
+ 985:	c1 ee 03             	shr    $0x3,%esi
+ 988:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 98b:	85 ff                	test   %edi,%edi
+ 98d:	0f 84 ad 00 00 00    	je     a40 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 993:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 995:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 998:	39 f1                	cmp    %esi,%ecx
+ 99a:	73 72                	jae    a0e <malloc+0x9e>
+ 99c:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9a2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9a7:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 9aa:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 9b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 9b4:	eb 1b                	jmp    9d1 <malloc+0x61>
+ 9b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9bd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9c0:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 9c2:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9c5:	39 f1                	cmp    %esi,%ecx
+ 9c7:	73 4f                	jae    a18 <malloc+0xa8>
+ 9c9:	8b 3d 08 0e 00 00    	mov    0xe08,%edi
+ 9cf:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9d1:	39 d7                	cmp    %edx,%edi
+ 9d3:	75 eb                	jne    9c0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 9d5:	83 ec 0c             	sub    $0xc,%esp
+ 9d8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 9db:	e8 49 fc ff ff       	call   629 <sbrk>
+  if(p == (char*)-1)
+ 9e0:	83 c4 10             	add    $0x10,%esp
+ 9e3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9e6:	74 1c                	je     a04 <malloc+0x94>
+  hp->s.size = nu;
+ 9e8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9eb:	83 ec 0c             	sub    $0xc,%esp
+ 9ee:	83 c0 08             	add    $0x8,%eax
+ 9f1:	50                   	push   %eax
+ 9f2:	e8 e9 fe ff ff       	call   8e0 <free>
+  return freep;
+ 9f7:	8b 15 08 0e 00 00    	mov    0xe08,%edx
+      if((p = morecore(nunits)) == 0)
+ 9fd:	83 c4 10             	add    $0x10,%esp
+ a00:	85 d2                	test   %edx,%edx
+ a02:	75 bc                	jne    9c0 <malloc+0x50>
+        return 0;
+  }
+}
+ a04:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ a07:	31 c0                	xor    %eax,%eax
+}
+ a09:	5b                   	pop    %ebx
+ a0a:	5e                   	pop    %esi
+ a0b:	5f                   	pop    %edi
+ a0c:	5d                   	pop    %ebp
+ a0d:	c3                   	ret    
+    if(p->s.size >= nunits){
+ a0e:	89 d0                	mov    %edx,%eax
+ a10:	89 fa                	mov    %edi,%edx
+ a12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ a18:	39 ce                	cmp    %ecx,%esi
+ a1a:	74 54                	je     a70 <malloc+0x100>
+        p->s.size -= nunits;
+ a1c:	29 f1                	sub    %esi,%ecx
+ a1e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ a21:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ a24:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ a27:	89 15 08 0e 00 00    	mov    %edx,0xe08
+}
+ a2d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a30:	83 c0 08             	add    $0x8,%eax
+}
+ a33:	5b                   	pop    %ebx
+ a34:	5e                   	pop    %esi
+ a35:	5f                   	pop    %edi
+ a36:	5d                   	pop    %ebp
+ a37:	c3                   	ret    
+ a38:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a3f:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+ a40:	c7 05 08 0e 00 00 0c 	movl   $0xe0c,0xe08
+ a47:	0e 00 00 
+    base.s.size = 0;
+ a4a:	bf 0c 0e 00 00       	mov    $0xe0c,%edi
+    base.s.ptr = freep = prevp = &base;
+ a4f:	c7 05 0c 0e 00 00 0c 	movl   $0xe0c,0xe0c
+ a56:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a59:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ a5b:	c7 05 10 0e 00 00 00 	movl   $0x0,0xe10
+ a62:	00 00 00 
+    if(p->s.size >= nunits){
+ a65:	e9 32 ff ff ff       	jmp    99c <malloc+0x2c>
+ a6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ a70:	8b 08                	mov    (%eax),%ecx
+ a72:	89 0a                	mov    %ecx,(%edx)
+ a74:	eb b1                	jmp    a27 <malloc+0xb7>
diff -urN xv6-public/ls.d xv6-public-new/ls.d
--- xv6-public/ls.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/ls.d	2019-10-04 10:45:48.744028885 +0530
@@ -0,0 +1 @@
+ls.o: ls.c /usr/include/stdc-predef.h types.h stat.h user.h fs.h
Binary files xv6-public/ls.o and xv6-public-new/ls.o differ
diff -urN xv6-public/ls.sym xv6-public-new/ls.sym
--- xv6-public/ls.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/ls.sym	2019-10-04 10:45:48.760028885 +0530
@@ -0,0 +1,60 @@
+00000000 .text
+00000a78 .rodata
+00000ae0 .eh_frame
+00000df8 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ls.c
+00000df8 buf.1112
+00000000 ulib.c
+00000000 printf.c
+00000650 printint
+00000acc digits.1101
+00000000 umalloc.c
+00000e08 freep
+00000e0c base
+00000350 strcpy
+00000060 fmtname
+00000710 printf
+00000570 memmove
+000005e9 mknod
+00000460 gets
+00000621 getpid
+00000970 malloc
+00000631 sleep
+000005b1 pipe
+000005c1 write
+000005f9 fstat
+000005d1 kill
+00000611 chdir
+000005d9 exec
+000005a9 wait
+000005b9 read
+000005f1 unlink
+00000599 fork
+00000629 sbrk
+00000639 uptime
+00000df8 __bss_start
+00000400 memset
+00000000 main
+00000380 strcmp
+00000619 dup
+000004e0 stat
+00000df8 _edata
+00000e14 _end
+00000601 link
+00000110 ls
+000005a1 exit
+00000530 atoi
+000003d0 strlen
+000005e1 open
+00000420 strchr
+00000609 mkdir
+000005c9 close
+000008e0 free
diff -urN xv6-public/main.d xv6-public-new/main.d
--- xv6-public/main.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/main.d	2019-10-04 10:45:50.092028949 +0530
@@ -0,0 +1,2 @@
+main.o: main.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h
Binary files xv6-public/main.o and xv6-public-new/main.o differ
diff -urN xv6-public/Makefile xv6-public-new/Makefile
--- xv6-public/Makefile	2019-10-04 16:31:53.100648503 +0530
+++ xv6-public-new/Makefile	2019-10-04 16:00:46.528559498 +0530
@@ -181,6 +181,10 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_firstprog\
+	_my_fork\
+	_head\
+	_nhead\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -248,7 +252,7 @@
 # check in that version.
 
 EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c firstprog.c my_fork.c head.c nhead.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
Binary files xv6-public/_mkdir and xv6-public-new/_mkdir differ
diff -urN xv6-public/mkdir.asm xv6-public-new/mkdir.asm
--- xv6-public/mkdir.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/mkdir.asm	2019-10-04 10:45:48.792028887 +0530
@@ -0,0 +1,1209 @@
+
+_mkdir:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	bf 01 00 00 00       	mov    $0x1,%edi
+  13:	56                   	push   %esi
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1c:	8b 31                	mov    (%ecx),%esi
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  21:	83 fe 01             	cmp    $0x1,%esi
+  24:	7e 3e                	jle    64 <main+0x64>
+  26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  2d:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(2, "Usage: mkdir files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(mkdir(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	e8 ff 02 00 00       	call   339 <mkdir>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 81 02 00 00       	call   2d1 <exit>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	pushl  (%ebx)
+  53:	68 bf 07 00 00       	push   $0x7bf
+  58:	6a 02                	push   $0x2
+  5a:	e8 e1 03 00 00       	call   440 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: mkdir files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 a8 07 00 00       	push   $0x7a8
+  6b:	6a 02                	push   $0x2
+  6d:	e8 ce 03 00 00       	call   440 <printf>
+    exit();
+  72:	e8 5a 02 00 00       	call   2d1 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  81:	31 d2                	xor    %edx,%edx
+{
+  83:	89 e5                	mov    %esp,%ebp
+  85:	53                   	push   %ebx
+  86:	8b 45 08             	mov    0x8(%ebp),%eax
+  89:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  90:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+  94:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+  97:	83 c2 01             	add    $0x1,%edx
+  9a:	84 c9                	test   %cl,%cl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	5b                   	pop    %ebx
+  9f:	5d                   	pop    %ebp
+  a0:	c3                   	ret    
+  a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  af:	90                   	nop
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	56                   	push   %esi
+  b4:	53                   	push   %ebx
+  b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  b8:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+  bb:	0f b6 13             	movzbl (%ebx),%edx
+  be:	0f b6 0e             	movzbl (%esi),%ecx
+  c1:	84 d2                	test   %dl,%dl
+  c3:	74 1e                	je     e3 <strcmp+0x33>
+  c5:	b8 01 00 00 00       	mov    $0x1,%eax
+  ca:	38 ca                	cmp    %cl,%dl
+  cc:	74 09                	je     d7 <strcmp+0x27>
+  ce:	eb 20                	jmp    f0 <strcmp+0x40>
+  d0:	83 c0 01             	add    $0x1,%eax
+  d3:	38 ca                	cmp    %cl,%dl
+  d5:	75 19                	jne    f0 <strcmp+0x40>
+  d7:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  db:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+  df:	84 d2                	test   %dl,%dl
+  e1:	75 ed                	jne    d0 <strcmp+0x20>
+  e3:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+  e5:	5b                   	pop    %ebx
+  e6:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+  e7:	29 c8                	sub    %ecx,%eax
+}
+  e9:	5d                   	pop    %ebp
+  ea:	c3                   	ret    
+  eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  ef:	90                   	nop
+  f0:	0f b6 c2             	movzbl %dl,%eax
+  f3:	5b                   	pop    %ebx
+  f4:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+  f5:	29 c8                	sub    %ecx,%eax
+}
+  f7:	5d                   	pop    %ebp
+  f8:	c3                   	ret    
+  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 106:	80 39 00             	cmpb   $0x0,(%ecx)
+ 109:	74 15                	je     120 <strlen+0x20>
+ 10b:	31 d2                	xor    %edx,%edx
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+ 110:	83 c2 01             	add    $0x1,%edx
+ 113:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 117:	89 d0                	mov    %edx,%eax
+ 119:	75 f5                	jne    110 <strlen+0x10>
+    ;
+  return n;
+}
+ 11b:	5d                   	pop    %ebp
+ 11c:	c3                   	ret    
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 120:	31 c0                	xor    %eax,%eax
+}
+ 122:	5d                   	pop    %ebp
+ 123:	c3                   	ret    
+ 124:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 12f:	90                   	nop
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	57                   	push   %edi
+ 134:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 137:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 13d:	89 d7                	mov    %edx,%edi
+ 13f:	fc                   	cld    
+ 140:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 142:	89 d0                	mov    %edx,%eax
+ 144:	5f                   	pop    %edi
+ 145:	5d                   	pop    %ebp
+ 146:	c3                   	ret    
+ 147:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 14e:	66 90                	xchg   %ax,%ax
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 45 08             	mov    0x8(%ebp),%eax
+ 157:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 15a:	0f b6 18             	movzbl (%eax),%ebx
+ 15d:	84 db                	test   %bl,%bl
+ 15f:	74 1d                	je     17e <strchr+0x2e>
+ 161:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 163:	38 d3                	cmp    %dl,%bl
+ 165:	75 0d                	jne    174 <strchr+0x24>
+ 167:	eb 17                	jmp    180 <strchr+0x30>
+ 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 170:	38 ca                	cmp    %cl,%dl
+ 172:	74 0c                	je     180 <strchr+0x30>
+  for(; *s; s++)
+ 174:	83 c0 01             	add    $0x1,%eax
+ 177:	0f b6 10             	movzbl (%eax),%edx
+ 17a:	84 d2                	test   %dl,%dl
+ 17c:	75 f2                	jne    170 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 17e:	31 c0                	xor    %eax,%eax
+}
+ 180:	5b                   	pop    %ebx
+ 181:	5d                   	pop    %ebp
+ 182:	c3                   	ret    
+ 183:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 18a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	57                   	push   %edi
+ 194:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 195:	31 f6                	xor    %esi,%esi
+{
+ 197:	53                   	push   %ebx
+ 198:	89 f3                	mov    %esi,%ebx
+ 19a:	83 ec 1c             	sub    $0x1c,%esp
+ 19d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1a0:	eb 2f                	jmp    1d1 <gets+0x41>
+ 1a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1a8:	83 ec 04             	sub    $0x4,%esp
+ 1ab:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1ae:	6a 01                	push   $0x1
+ 1b0:	50                   	push   %eax
+ 1b1:	6a 00                	push   $0x0
+ 1b3:	e8 31 01 00 00       	call   2e9 <read>
+    if(cc < 1)
+ 1b8:	83 c4 10             	add    $0x10,%esp
+ 1bb:	85 c0                	test   %eax,%eax
+ 1bd:	7e 1c                	jle    1db <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 1bf:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1c3:	83 c7 01             	add    $0x1,%edi
+ 1c6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1c9:	3c 0a                	cmp    $0xa,%al
+ 1cb:	74 23                	je     1f0 <gets+0x60>
+ 1cd:	3c 0d                	cmp    $0xd,%al
+ 1cf:	74 1f                	je     1f0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1d1:	83 c3 01             	add    $0x1,%ebx
+ 1d4:	89 fe                	mov    %edi,%esi
+ 1d6:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1d9:	7c cd                	jl     1a8 <gets+0x18>
+ 1db:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1e0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1e6:	5b                   	pop    %ebx
+ 1e7:	5e                   	pop    %esi
+ 1e8:	5f                   	pop    %edi
+ 1e9:	5d                   	pop    %ebp
+ 1ea:	c3                   	ret    
+ 1eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1ef:	90                   	nop
+ 1f0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1f3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f6:	01 de                	add    %ebx,%esi
+ 1f8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1fa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 200:	5b                   	pop    %ebx
+ 201:	5e                   	pop    %esi
+ 202:	5f                   	pop    %edi
+ 203:	5d                   	pop    %ebp
+ 204:	c3                   	ret    
+ 205:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	56                   	push   %esi
+ 214:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 215:	83 ec 08             	sub    $0x8,%esp
+ 218:	6a 00                	push   $0x0
+ 21a:	ff 75 08             	pushl  0x8(%ebp)
+ 21d:	e8 ef 00 00 00       	call   311 <open>
+  if(fd < 0)
+ 222:	83 c4 10             	add    $0x10,%esp
+ 225:	85 c0                	test   %eax,%eax
+ 227:	78 27                	js     250 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	ff 75 0c             	pushl  0xc(%ebp)
+ 22f:	89 c3                	mov    %eax,%ebx
+ 231:	50                   	push   %eax
+ 232:	e8 f2 00 00 00       	call   329 <fstat>
+  close(fd);
+ 237:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 23a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 23c:	e8 b8 00 00 00       	call   2f9 <close>
+  return r;
+ 241:	83 c4 10             	add    $0x10,%esp
+}
+ 244:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 247:	89 f0                	mov    %esi,%eax
+ 249:	5b                   	pop    %ebx
+ 24a:	5e                   	pop    %esi
+ 24b:	5d                   	pop    %ebp
+ 24c:	c3                   	ret    
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 250:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 255:	eb ed                	jmp    244 <stat+0x34>
+ 257:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25e:	66 90                	xchg   %ax,%ax
+
+00000260 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	53                   	push   %ebx
+ 264:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 267:	0f be 11             	movsbl (%ecx),%edx
+ 26a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 26d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 26f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 274:	77 1f                	ja     295 <atoi+0x35>
+ 276:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27d:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 280:	83 c1 01             	add    $0x1,%ecx
+ 283:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 286:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 28a:	0f be 11             	movsbl (%ecx),%edx
+ 28d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 290:	80 fb 09             	cmp    $0x9,%bl
+ 293:	76 eb                	jbe    280 <atoi+0x20>
+  return n;
+}
+ 295:	5b                   	pop    %ebx
+ 296:	5d                   	pop    %ebp
+ 297:	c3                   	ret    
+ 298:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29f:	90                   	nop
+
+000002a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	57                   	push   %edi
+ 2a4:	8b 55 10             	mov    0x10(%ebp),%edx
+ 2a7:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2aa:	56                   	push   %esi
+ 2ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2ae:	85 d2                	test   %edx,%edx
+ 2b0:	7e 13                	jle    2c5 <memmove+0x25>
+ 2b2:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 2b4:	89 c7                	mov    %eax,%edi
+ 2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2c1:	39 fa                	cmp    %edi,%edx
+ 2c3:	75 fb                	jne    2c0 <memmove+0x20>
+  return vdst;
+}
+ 2c5:	5e                   	pop    %esi
+ 2c6:	5f                   	pop    %edi
+ 2c7:	5d                   	pop    %ebp
+ 2c8:	c3                   	ret    
+
+000002c9 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2c9:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2ce:	cd 40                	int    $0x40
+ 2d0:	c3                   	ret    
+
+000002d1 <exit>:
+SYSCALL(exit)
+ 2d1:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d6:	cd 40                	int    $0x40
+ 2d8:	c3                   	ret    
+
+000002d9 <wait>:
+SYSCALL(wait)
+ 2d9:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2de:	cd 40                	int    $0x40
+ 2e0:	c3                   	ret    
+
+000002e1 <pipe>:
+SYSCALL(pipe)
+ 2e1:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e6:	cd 40                	int    $0x40
+ 2e8:	c3                   	ret    
+
+000002e9 <read>:
+SYSCALL(read)
+ 2e9:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2ee:	cd 40                	int    $0x40
+ 2f0:	c3                   	ret    
+
+000002f1 <write>:
+SYSCALL(write)
+ 2f1:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f6:	cd 40                	int    $0x40
+ 2f8:	c3                   	ret    
+
+000002f9 <close>:
+SYSCALL(close)
+ 2f9:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2fe:	cd 40                	int    $0x40
+ 300:	c3                   	ret    
+
+00000301 <kill>:
+SYSCALL(kill)
+ 301:	b8 06 00 00 00       	mov    $0x6,%eax
+ 306:	cd 40                	int    $0x40
+ 308:	c3                   	ret    
+
+00000309 <exec>:
+SYSCALL(exec)
+ 309:	b8 07 00 00 00       	mov    $0x7,%eax
+ 30e:	cd 40                	int    $0x40
+ 310:	c3                   	ret    
+
+00000311 <open>:
+SYSCALL(open)
+ 311:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 316:	cd 40                	int    $0x40
+ 318:	c3                   	ret    
+
+00000319 <mknod>:
+SYSCALL(mknod)
+ 319:	b8 11 00 00 00       	mov    $0x11,%eax
+ 31e:	cd 40                	int    $0x40
+ 320:	c3                   	ret    
+
+00000321 <unlink>:
+SYSCALL(unlink)
+ 321:	b8 12 00 00 00       	mov    $0x12,%eax
+ 326:	cd 40                	int    $0x40
+ 328:	c3                   	ret    
+
+00000329 <fstat>:
+SYSCALL(fstat)
+ 329:	b8 08 00 00 00       	mov    $0x8,%eax
+ 32e:	cd 40                	int    $0x40
+ 330:	c3                   	ret    
+
+00000331 <link>:
+SYSCALL(link)
+ 331:	b8 13 00 00 00       	mov    $0x13,%eax
+ 336:	cd 40                	int    $0x40
+ 338:	c3                   	ret    
+
+00000339 <mkdir>:
+SYSCALL(mkdir)
+ 339:	b8 14 00 00 00       	mov    $0x14,%eax
+ 33e:	cd 40                	int    $0x40
+ 340:	c3                   	ret    
+
+00000341 <chdir>:
+SYSCALL(chdir)
+ 341:	b8 09 00 00 00       	mov    $0x9,%eax
+ 346:	cd 40                	int    $0x40
+ 348:	c3                   	ret    
+
+00000349 <dup>:
+SYSCALL(dup)
+ 349:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 34e:	cd 40                	int    $0x40
+ 350:	c3                   	ret    
+
+00000351 <getpid>:
+SYSCALL(getpid)
+ 351:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 356:	cd 40                	int    $0x40
+ 358:	c3                   	ret    
+
+00000359 <sbrk>:
+SYSCALL(sbrk)
+ 359:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 35e:	cd 40                	int    $0x40
+ 360:	c3                   	ret    
+
+00000361 <sleep>:
+SYSCALL(sleep)
+ 361:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 366:	cd 40                	int    $0x40
+ 368:	c3                   	ret    
+
+00000369 <uptime>:
+SYSCALL(uptime)
+ 369:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 36e:	cd 40                	int    $0x40
+ 370:	c3                   	ret    
+ 371:	66 90                	xchg   %ax,%ax
+ 373:	66 90                	xchg   %ax,%ax
+ 375:	66 90                	xchg   %ax,%ax
+ 377:	66 90                	xchg   %ax,%ax
+ 379:	66 90                	xchg   %ax,%ax
+ 37b:	66 90                	xchg   %ax,%ax
+ 37d:	66 90                	xchg   %ax,%ax
+ 37f:	90                   	nop
+
+00000380 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 386:	89 d3                	mov    %edx,%ebx
+{
+ 388:	83 ec 3c             	sub    $0x3c,%esp
+ 38b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+ 38e:	85 d2                	test   %edx,%edx
+ 390:	0f 89 92 00 00 00    	jns    428 <printint+0xa8>
+ 396:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 39a:	0f 84 88 00 00 00    	je     428 <printint+0xa8>
+    neg = 1;
+ 3a0:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+ 3a7:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3a9:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3b0:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3b3:	eb 08                	jmp    3bd <printint+0x3d>
+ 3b5:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3b8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+ 3bb:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+ 3bd:	89 d8                	mov    %ebx,%eax
+ 3bf:	31 d2                	xor    %edx,%edx
+ 3c1:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 3c4:	f7 f1                	div    %ecx
+ 3c6:	83 c7 01             	add    $0x1,%edi
+ 3c9:	0f b6 92 e4 07 00 00 	movzbl 0x7e4(%edx),%edx
+ 3d0:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+ 3d3:	39 d9                	cmp    %ebx,%ecx
+ 3d5:	76 e1                	jbe    3b8 <printint+0x38>
+  if(neg)
+ 3d7:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 3da:	85 c0                	test   %eax,%eax
+ 3dc:	74 0d                	je     3eb <printint+0x6b>
+    buf[i++] = '-';
+ 3de:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3e3:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+ 3e8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 3eb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ee:	8b 7d bc             	mov    -0x44(%ebp),%edi
+ 3f1:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3f5:	eb 0f                	jmp    406 <printint+0x86>
+ 3f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fe:	66 90                	xchg   %ax,%ax
+ 400:	0f b6 13             	movzbl (%ebx),%edx
+ 403:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 406:	83 ec 04             	sub    $0x4,%esp
+ 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 40c:	6a 01                	push   $0x1
+ 40e:	56                   	push   %esi
+ 40f:	57                   	push   %edi
+ 410:	e8 dc fe ff ff       	call   2f1 <write>
+
+  while(--i >= 0)
+ 415:	83 c4 10             	add    $0x10,%esp
+ 418:	39 de                	cmp    %ebx,%esi
+ 41a:	75 e4                	jne    400 <printint+0x80>
+    putc(fd, buf[i]);
+}
+ 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 41f:	5b                   	pop    %ebx
+ 420:	5e                   	pop    %esi
+ 421:	5f                   	pop    %edi
+ 422:	5d                   	pop    %ebp
+ 423:	c3                   	ret    
+ 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 428:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+ 42f:	e9 75 ff ff ff       	jmp    3a9 <printint+0x29>
+ 434:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 43f:	90                   	nop
+
+00000440 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+ 446:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 449:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 44c:	0f b6 1e             	movzbl (%esi),%ebx
+ 44f:	84 db                	test   %bl,%bl
+ 451:	0f 84 b9 00 00 00    	je     510 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+ 457:	8d 45 10             	lea    0x10(%ebp),%eax
+ 45a:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 45d:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 460:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 462:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 465:	eb 38                	jmp    49f <printf+0x5f>
+ 467:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 46e:	66 90                	xchg   %ax,%ax
+ 470:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 473:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 478:	83 f8 25             	cmp    $0x25,%eax
+ 47b:	74 17                	je     494 <printf+0x54>
+  write(fd, &c, 1);
+ 47d:	83 ec 04             	sub    $0x4,%esp
+ 480:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 483:	6a 01                	push   $0x1
+ 485:	57                   	push   %edi
+ 486:	ff 75 08             	pushl  0x8(%ebp)
+ 489:	e8 63 fe ff ff       	call   2f1 <write>
+ 48e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 491:	83 c4 10             	add    $0x10,%esp
+ 494:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 497:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 49b:	84 db                	test   %bl,%bl
+ 49d:	74 71                	je     510 <printf+0xd0>
+    c = fmt[i] & 0xff;
+ 49f:	0f be cb             	movsbl %bl,%ecx
+ 4a2:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4a5:	85 d2                	test   %edx,%edx
+ 4a7:	74 c7                	je     470 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4a9:	83 fa 25             	cmp    $0x25,%edx
+ 4ac:	75 e6                	jne    494 <printf+0x54>
+      if(c == 'd'){
+ 4ae:	83 f8 64             	cmp    $0x64,%eax
+ 4b1:	0f 84 99 00 00 00    	je     550 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4b7:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4bd:	83 f9 70             	cmp    $0x70,%ecx
+ 4c0:	74 5e                	je     520 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4c2:	83 f8 73             	cmp    $0x73,%eax
+ 4c5:	0f 84 d5 00 00 00    	je     5a0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4cb:	83 f8 63             	cmp    $0x63,%eax
+ 4ce:	0f 84 8c 00 00 00    	je     560 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4d4:	83 f8 25             	cmp    $0x25,%eax
+ 4d7:	0f 84 b3 00 00 00    	je     590 <printf+0x150>
+  write(fd, &c, 1);
+ 4dd:	83 ec 04             	sub    $0x4,%esp
+ 4e0:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4e4:	6a 01                	push   $0x1
+ 4e6:	57                   	push   %edi
+ 4e7:	ff 75 08             	pushl  0x8(%ebp)
+ 4ea:	e8 02 fe ff ff       	call   2f1 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4ef:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4f2:	83 c4 0c             	add    $0xc,%esp
+ 4f5:	6a 01                	push   $0x1
+ 4f7:	83 c6 01             	add    $0x1,%esi
+ 4fa:	57                   	push   %edi
+ 4fb:	ff 75 08             	pushl  0x8(%ebp)
+ 4fe:	e8 ee fd ff ff       	call   2f1 <write>
+  for(i = 0; fmt[i]; i++){
+ 503:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 507:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 50a:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 50c:	84 db                	test   %bl,%bl
+ 50e:	75 8f                	jne    49f <printf+0x5f>
+    }
+  }
+}
+ 510:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 513:	5b                   	pop    %ebx
+ 514:	5e                   	pop    %esi
+ 515:	5f                   	pop    %edi
+ 516:	5d                   	pop    %ebp
+ 517:	c3                   	ret    
+ 518:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51f:	90                   	nop
+        printint(fd, *ap, 16, 0);
+ 520:	83 ec 0c             	sub    $0xc,%esp
+ 523:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 528:	6a 00                	push   $0x0
+ 52a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 52d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 530:	8b 13                	mov    (%ebx),%edx
+ 532:	e8 49 fe ff ff       	call   380 <printint>
+        ap++;
+ 537:	89 d8                	mov    %ebx,%eax
+ 539:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 53c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 53e:	83 c0 04             	add    $0x4,%eax
+ 541:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 544:	e9 4b ff ff ff       	jmp    494 <printf+0x54>
+ 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 558:	6a 01                	push   $0x1
+ 55a:	eb ce                	jmp    52a <printf+0xea>
+ 55c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 560:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 563:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 566:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 568:	6a 01                	push   $0x1
+        ap++;
+ 56a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 56d:	57                   	push   %edi
+ 56e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 571:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 574:	e8 78 fd ff ff       	call   2f1 <write>
+        ap++;
+ 579:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 57c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 57f:	31 d2                	xor    %edx,%edx
+ 581:	e9 0e ff ff ff       	jmp    494 <printf+0x54>
+ 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 593:	83 ec 04             	sub    $0x4,%esp
+ 596:	e9 5a ff ff ff       	jmp    4f5 <printf+0xb5>
+ 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 59f:	90                   	nop
+        s = (char*)*ap;
+ 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5a3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5a5:	83 c0 04             	add    $0x4,%eax
+ 5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5ab:	85 db                	test   %ebx,%ebx
+ 5ad:	74 17                	je     5c6 <printf+0x186>
+        while(*s != 0){
+ 5af:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5b2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5b4:	84 c0                	test   %al,%al
+ 5b6:	0f 84 d8 fe ff ff    	je     494 <printf+0x54>
+ 5bc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5bf:	89 de                	mov    %ebx,%esi
+ 5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
+          s = "(null)";
+ 5c6:	bb db 07 00 00       	mov    $0x7db,%ebx
+        while(*s != 0){
+ 5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5d3:	89 de                	mov    %ebx,%esi
+ 5d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5df:	90                   	nop
+  write(fd, &c, 1);
+ 5e0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5e3:	83 c6 01             	add    $0x1,%esi
+ 5e6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5e9:	6a 01                	push   $0x1
+ 5eb:	57                   	push   %edi
+ 5ec:	53                   	push   %ebx
+ 5ed:	e8 ff fc ff ff       	call   2f1 <write>
+        while(*s != 0){
+ 5f2:	0f b6 06             	movzbl (%esi),%eax
+ 5f5:	83 c4 10             	add    $0x10,%esp
+ 5f8:	84 c0                	test   %al,%al
+ 5fa:	75 e4                	jne    5e0 <printf+0x1a0>
+ 5fc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5ff:	31 d2                	xor    %edx,%edx
+ 601:	e9 8e fe ff ff       	jmp    494 <printf+0x54>
+ 606:	66 90                	xchg   %ax,%ax
+ 608:	66 90                	xchg   %ax,%ax
+ 60a:	66 90                	xchg   %ax,%ax
+ 60c:	66 90                	xchg   %ax,%ax
+ 60e:	66 90                	xchg   %ax,%ax
+
+00000610 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 610:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 611:	a1 9c 0a 00 00       	mov    0xa9c,%eax
+{
+ 616:	89 e5                	mov    %esp,%ebp
+ 618:	57                   	push   %edi
+ 619:	56                   	push   %esi
+ 61a:	53                   	push   %ebx
+ 61b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 61e:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 620:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 623:	39 c8                	cmp    %ecx,%eax
+ 625:	73 19                	jae    640 <free+0x30>
+ 627:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 62e:	66 90                	xchg   %ax,%ax
+ 630:	39 d1                	cmp    %edx,%ecx
+ 632:	72 14                	jb     648 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 634:	39 d0                	cmp    %edx,%eax
+ 636:	73 10                	jae    648 <free+0x38>
+{
+ 638:	89 d0                	mov    %edx,%eax
+ 63a:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 63c:	39 c8                	cmp    %ecx,%eax
+ 63e:	72 f0                	jb     630 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 640:	39 d0                	cmp    %edx,%eax
+ 642:	72 f4                	jb     638 <free+0x28>
+ 644:	39 d1                	cmp    %edx,%ecx
+ 646:	73 f0                	jae    638 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64e:	39 fa                	cmp    %edi,%edx
+ 650:	74 1e                	je     670 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 652:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 655:	8b 50 04             	mov    0x4(%eax),%edx
+ 658:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 65b:	39 f1                	cmp    %esi,%ecx
+ 65d:	74 28                	je     687 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 65f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 661:	5b                   	pop    %ebx
+  freep = p;
+ 662:	a3 9c 0a 00 00       	mov    %eax,0xa9c
+}
+ 667:	5e                   	pop    %esi
+ 668:	5f                   	pop    %edi
+ 669:	5d                   	pop    %ebp
+ 66a:	c3                   	ret    
+ 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 66f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 670:	03 72 04             	add    0x4(%edx),%esi
+ 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 676:	8b 10                	mov    (%eax),%edx
+ 678:	8b 12                	mov    (%edx),%edx
+ 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 67d:	8b 50 04             	mov    0x4(%eax),%edx
+ 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 683:	39 f1                	cmp    %esi,%ecx
+ 685:	75 d8                	jne    65f <free+0x4f>
+    p->s.size += bp->s.size;
+ 687:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 68a:	a3 9c 0a 00 00       	mov    %eax,0xa9c
+    p->s.size += bp->s.size;
+ 68f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 695:	89 10                	mov    %edx,(%eax)
+}
+ 697:	5b                   	pop    %ebx
+ 698:	5e                   	pop    %esi
+ 699:	5f                   	pop    %edi
+ 69a:	5d                   	pop    %ebp
+ 69b:	c3                   	ret    
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006a0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6a0:	55                   	push   %ebp
+ 6a1:	89 e5                	mov    %esp,%ebp
+ 6a3:	57                   	push   %edi
+ 6a4:	56                   	push   %esi
+ 6a5:	53                   	push   %ebx
+ 6a6:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6ac:	8b 3d 9c 0a 00 00    	mov    0xa9c,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6b2:	8d 70 07             	lea    0x7(%eax),%esi
+ 6b5:	c1 ee 03             	shr    $0x3,%esi
+ 6b8:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6bb:	85 ff                	test   %edi,%edi
+ 6bd:	0f 84 ad 00 00 00    	je     770 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6c3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 6c5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6c8:	39 f1                	cmp    %esi,%ecx
+ 6ca:	73 72                	jae    73e <malloc+0x9e>
+ 6cc:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6d2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6d7:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6da:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6e4:	eb 1b                	jmp    701 <malloc+0x61>
+ 6e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6ed:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6f0:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6f2:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6f5:	39 f1                	cmp    %esi,%ecx
+ 6f7:	73 4f                	jae    748 <malloc+0xa8>
+ 6f9:	8b 3d 9c 0a 00 00    	mov    0xa9c,%edi
+ 6ff:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 701:	39 d7                	cmp    %edx,%edi
+ 703:	75 eb                	jne    6f0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 705:	83 ec 0c             	sub    $0xc,%esp
+ 708:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 70b:	e8 49 fc ff ff       	call   359 <sbrk>
+  if(p == (char*)-1)
+ 710:	83 c4 10             	add    $0x10,%esp
+ 713:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 716:	74 1c                	je     734 <malloc+0x94>
+  hp->s.size = nu;
+ 718:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 71b:	83 ec 0c             	sub    $0xc,%esp
+ 71e:	83 c0 08             	add    $0x8,%eax
+ 721:	50                   	push   %eax
+ 722:	e8 e9 fe ff ff       	call   610 <free>
+  return freep;
+ 727:	8b 15 9c 0a 00 00    	mov    0xa9c,%edx
+      if((p = morecore(nunits)) == 0)
+ 72d:	83 c4 10             	add    $0x10,%esp
+ 730:	85 d2                	test   %edx,%edx
+ 732:	75 bc                	jne    6f0 <malloc+0x50>
+        return 0;
+  }
+}
+ 734:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 737:	31 c0                	xor    %eax,%eax
+}
+ 739:	5b                   	pop    %ebx
+ 73a:	5e                   	pop    %esi
+ 73b:	5f                   	pop    %edi
+ 73c:	5d                   	pop    %ebp
+ 73d:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 73e:	89 d0                	mov    %edx,%eax
+ 740:	89 fa                	mov    %edi,%edx
+ 742:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 748:	39 ce                	cmp    %ecx,%esi
+ 74a:	74 54                	je     7a0 <malloc+0x100>
+        p->s.size -= nunits;
+ 74c:	29 f1                	sub    %esi,%ecx
+ 74e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 751:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 754:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 757:	89 15 9c 0a 00 00    	mov    %edx,0xa9c
+}
+ 75d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 760:	83 c0 08             	add    $0x8,%eax
+}
+ 763:	5b                   	pop    %ebx
+ 764:	5e                   	pop    %esi
+ 765:	5f                   	pop    %edi
+ 766:	5d                   	pop    %ebp
+ 767:	c3                   	ret    
+ 768:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 76f:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+ 770:	c7 05 9c 0a 00 00 a0 	movl   $0xaa0,0xa9c
+ 777:	0a 00 00 
+    base.s.size = 0;
+ 77a:	bf a0 0a 00 00       	mov    $0xaa0,%edi
+    base.s.ptr = freep = prevp = &base;
+ 77f:	c7 05 a0 0a 00 00 a0 	movl   $0xaa0,0xaa0
+ 786:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 789:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 78b:	c7 05 a4 0a 00 00 00 	movl   $0x0,0xaa4
+ 792:	00 00 00 
+    if(p->s.size >= nunits){
+ 795:	e9 32 ff ff ff       	jmp    6cc <malloc+0x2c>
+ 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7a0:	8b 08                	mov    (%eax),%ecx
+ 7a2:	89 0a                	mov    %ecx,(%edx)
+ 7a4:	eb b1                	jmp    757 <malloc+0xb7>
diff -urN xv6-public/mkdir.d xv6-public-new/mkdir.d
--- xv6-public/mkdir.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/mkdir.d	2019-10-04 10:45:48.780028886 +0530
@@ -0,0 +1 @@
+mkdir.o: mkdir.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/mkdir.o and xv6-public-new/mkdir.o differ
diff -urN xv6-public/mkdir.sym xv6-public-new/mkdir.sym
--- xv6-public/mkdir.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/mkdir.sym	2019-10-04 10:45:48.796028887 +0530
@@ -0,0 +1,57 @@
+00000000 .text
+000007a8 .rodata
+000007f8 .eh_frame
+00000a9c .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 mkdir.c
+00000000 ulib.c
+00000000 printf.c
+00000380 printint
+000007e4 digits.1101
+00000000 umalloc.c
+00000a9c freep
+00000aa0 base
+00000080 strcpy
+00000440 printf
+000002a0 memmove
+00000319 mknod
+00000190 gets
+00000351 getpid
+000006a0 malloc
+00000361 sleep
+000002e1 pipe
+000002f1 write
+00000329 fstat
+00000301 kill
+00000341 chdir
+00000309 exec
+000002d9 wait
+000002e9 read
+00000321 unlink
+000002c9 fork
+00000359 sbrk
+00000369 uptime
+00000a9c __bss_start
+00000130 memset
+00000000 main
+000000b0 strcmp
+00000349 dup
+00000210 stat
+00000a9c _edata
+00000aa8 _end
+00000331 link
+000002d1 exit
+00000260 atoi
+00000100 strlen
+00000311 open
+00000150 strchr
+00000339 mkdir
+000002f9 close
+00000610 free
Binary files xv6-public/mkfs and xv6-public-new/mkfs differ
diff -urN xv6-public/mp.d xv6-public-new/mp.d
--- xv6-public/mp.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/mp.d	2019-10-04 10:45:50.136028951 +0530
@@ -0,0 +1,2 @@
+mp.o: mp.c /usr/include/stdc-predef.h types.h defs.h param.h memlayout.h \
+ mp.h x86.h mmu.h proc.h
Binary files xv6-public/mp.o and xv6-public-new/mp.o differ
Binary files xv6-public/_my_fork and xv6-public-new/_my_fork differ
diff -urN xv6-public/my_fork.asm xv6-public-new/my_fork.asm
--- xv6-public/my_fork.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/my_fork.asm	2019-10-04 14:23:22.300280823 +0530
@@ -0,0 +1,1183 @@
+
+_my_fork:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+	printf(1,"(%d)hello",getpid());
+  11:	e8 1b 03 00 00       	call   331 <getpid>
+  16:	83 ec 04             	sub    $0x4,%esp
+  19:	50                   	push   %eax
+  1a:	68 88 07 00 00       	push   $0x788
+  1f:	6a 01                	push   $0x1
+  21:	e8 fa 03 00 00       	call   420 <printf>
+	int p = fork();
+  26:	e8 7e 02 00 00       	call   2a9 <fork>
+	if(p == 0)
+  2b:	83 c4 10             	add    $0x10,%esp
+  2e:	85 c0                	test   %eax,%eax
+  30:	75 18                	jne    4a <main+0x4a>
+	{
+		printf(1,"(%d)world",getpid());
+  32:	e8 fa 02 00 00       	call   331 <getpid>
+  37:	52                   	push   %edx
+  38:	50                   	push   %eax
+  39:	68 92 07 00 00       	push   $0x792
+  3e:	6a 01                	push   $0x1
+  40:	e8 db 03 00 00       	call   420 <printf>
+		exit();
+  45:	e8 67 02 00 00       	call   2b1 <exit>
+	}
+	wait();
+  4a:	e8 6a 02 00 00       	call   2b9 <wait>
+  exit();
+  4f:	e8 5d 02 00 00       	call   2b1 <exit>
+  54:	66 90                	xchg   %ax,%ax
+  56:	66 90                	xchg   %ax,%ax
+  58:	66 90                	xchg   %ax,%ax
+  5a:	66 90                	xchg   %ax,%ax
+  5c:	66 90                	xchg   %ax,%ax
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  61:	31 d2                	xor    %edx,%edx
+{
+  63:	89 e5                	mov    %esp,%ebp
+  65:	53                   	push   %ebx
+  66:	8b 45 08             	mov    0x8(%ebp),%eax
+  69:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  70:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+  74:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+  77:	83 c2 01             	add    $0x1,%edx
+  7a:	84 c9                	test   %cl,%cl
+  7c:	75 f2                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  7e:	5b                   	pop    %ebx
+  7f:	5d                   	pop    %ebp
+  80:	c3                   	ret    
+  81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  8f:	90                   	nop
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	56                   	push   %esi
+  94:	53                   	push   %ebx
+  95:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  98:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+  9b:	0f b6 13             	movzbl (%ebx),%edx
+  9e:	0f b6 0e             	movzbl (%esi),%ecx
+  a1:	84 d2                	test   %dl,%dl
+  a3:	74 1e                	je     c3 <strcmp+0x33>
+  a5:	b8 01 00 00 00       	mov    $0x1,%eax
+  aa:	38 ca                	cmp    %cl,%dl
+  ac:	74 09                	je     b7 <strcmp+0x27>
+  ae:	eb 20                	jmp    d0 <strcmp+0x40>
+  b0:	83 c0 01             	add    $0x1,%eax
+  b3:	38 ca                	cmp    %cl,%dl
+  b5:	75 19                	jne    d0 <strcmp+0x40>
+  b7:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  bb:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+  bf:	84 d2                	test   %dl,%dl
+  c1:	75 ed                	jne    b0 <strcmp+0x20>
+  c3:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+  c5:	5b                   	pop    %ebx
+  c6:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+  c7:	29 c8                	sub    %ecx,%eax
+}
+  c9:	5d                   	pop    %ebp
+  ca:	c3                   	ret    
+  cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  cf:	90                   	nop
+  d0:	0f b6 c2             	movzbl %dl,%eax
+  d3:	5b                   	pop    %ebx
+  d4:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+  d5:	29 c8                	sub    %ecx,%eax
+}
+  d7:	5d                   	pop    %ebp
+  d8:	c3                   	ret    
+  d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000000e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  e6:	80 39 00             	cmpb   $0x0,(%ecx)
+  e9:	74 15                	je     100 <strlen+0x20>
+  eb:	31 d2                	xor    %edx,%edx
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  f0:	83 c2 01             	add    $0x1,%edx
+  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  f7:	89 d0                	mov    %edx,%eax
+  f9:	75 f5                	jne    f0 <strlen+0x10>
+    ;
+  return n;
+}
+  fb:	5d                   	pop    %ebp
+  fc:	c3                   	ret    
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 100:	31 c0                	xor    %eax,%eax
+}
+ 102:	5d                   	pop    %ebp
+ 103:	c3                   	ret    
+ 104:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 10f:	90                   	nop
+
+00000110 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	57                   	push   %edi
+ 114:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 117:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 11a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 11d:	89 d7                	mov    %edx,%edi
+ 11f:	fc                   	cld    
+ 120:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 122:	89 d0                	mov    %edx,%eax
+ 124:	5f                   	pop    %edi
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+
+00000130 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	53                   	push   %ebx
+ 134:	8b 45 08             	mov    0x8(%ebp),%eax
+ 137:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 13a:	0f b6 18             	movzbl (%eax),%ebx
+ 13d:	84 db                	test   %bl,%bl
+ 13f:	74 1d                	je     15e <strchr+0x2e>
+ 141:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 143:	38 d3                	cmp    %dl,%bl
+ 145:	75 0d                	jne    154 <strchr+0x24>
+ 147:	eb 17                	jmp    160 <strchr+0x30>
+ 149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 150:	38 ca                	cmp    %cl,%dl
+ 152:	74 0c                	je     160 <strchr+0x30>
+  for(; *s; s++)
+ 154:	83 c0 01             	add    $0x1,%eax
+ 157:	0f b6 10             	movzbl (%eax),%edx
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 15e:	31 c0                	xor    %eax,%eax
+}
+ 160:	5b                   	pop    %ebx
+ 161:	5d                   	pop    %ebp
+ 162:	c3                   	ret    
+ 163:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000170 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	57                   	push   %edi
+ 174:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 175:	31 f6                	xor    %esi,%esi
+{
+ 177:	53                   	push   %ebx
+ 178:	89 f3                	mov    %esi,%ebx
+ 17a:	83 ec 1c             	sub    $0x1c,%esp
+ 17d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 180:	eb 2f                	jmp    1b1 <gets+0x41>
+ 182:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 188:	83 ec 04             	sub    $0x4,%esp
+ 18b:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 18e:	6a 01                	push   $0x1
+ 190:	50                   	push   %eax
+ 191:	6a 00                	push   $0x0
+ 193:	e8 31 01 00 00       	call   2c9 <read>
+    if(cc < 1)
+ 198:	83 c4 10             	add    $0x10,%esp
+ 19b:	85 c0                	test   %eax,%eax
+ 19d:	7e 1c                	jle    1bb <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 19f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1a3:	83 c7 01             	add    $0x1,%edi
+ 1a6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1a9:	3c 0a                	cmp    $0xa,%al
+ 1ab:	74 23                	je     1d0 <gets+0x60>
+ 1ad:	3c 0d                	cmp    $0xd,%al
+ 1af:	74 1f                	je     1d0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1b1:	83 c3 01             	add    $0x1,%ebx
+ 1b4:	89 fe                	mov    %edi,%esi
+ 1b6:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1b9:	7c cd                	jl     188 <gets+0x18>
+ 1bb:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1bd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1c0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1c6:	5b                   	pop    %ebx
+ 1c7:	5e                   	pop    %esi
+ 1c8:	5f                   	pop    %edi
+ 1c9:	5d                   	pop    %ebp
+ 1ca:	c3                   	ret    
+ 1cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1cf:	90                   	nop
+ 1d0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1d3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d6:	01 de                	add    %ebx,%esi
+ 1d8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1da:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1e0:	5b                   	pop    %ebx
+ 1e1:	5e                   	pop    %esi
+ 1e2:	5f                   	pop    %edi
+ 1e3:	5d                   	pop    %ebp
+ 1e4:	c3                   	ret    
+ 1e5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	56                   	push   %esi
+ 1f4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1f5:	83 ec 08             	sub    $0x8,%esp
+ 1f8:	6a 00                	push   $0x0
+ 1fa:	ff 75 08             	pushl  0x8(%ebp)
+ 1fd:	e8 ef 00 00 00       	call   2f1 <open>
+  if(fd < 0)
+ 202:	83 c4 10             	add    $0x10,%esp
+ 205:	85 c0                	test   %eax,%eax
+ 207:	78 27                	js     230 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 209:	83 ec 08             	sub    $0x8,%esp
+ 20c:	ff 75 0c             	pushl  0xc(%ebp)
+ 20f:	89 c3                	mov    %eax,%ebx
+ 211:	50                   	push   %eax
+ 212:	e8 f2 00 00 00       	call   309 <fstat>
+  close(fd);
+ 217:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 21a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 21c:	e8 b8 00 00 00       	call   2d9 <close>
+  return r;
+ 221:	83 c4 10             	add    $0x10,%esp
+}
+ 224:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 227:	89 f0                	mov    %esi,%eax
+ 229:	5b                   	pop    %ebx
+ 22a:	5e                   	pop    %esi
+ 22b:	5d                   	pop    %ebp
+ 22c:	c3                   	ret    
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 230:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 235:	eb ed                	jmp    224 <stat+0x34>
+ 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23e:	66 90                	xchg   %ax,%ax
+
+00000240 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	53                   	push   %ebx
+ 244:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 247:	0f be 11             	movsbl (%ecx),%edx
+ 24a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 24d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 24f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 254:	77 1f                	ja     275 <atoi+0x35>
+ 256:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25d:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 260:	83 c1 01             	add    $0x1,%ecx
+ 263:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 266:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 26a:	0f be 11             	movsbl (%ecx),%edx
+ 26d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 270:	80 fb 09             	cmp    $0x9,%bl
+ 273:	76 eb                	jbe    260 <atoi+0x20>
+  return n;
+}
+ 275:	5b                   	pop    %ebx
+ 276:	5d                   	pop    %ebp
+ 277:	c3                   	ret    
+ 278:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27f:	90                   	nop
+
+00000280 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	57                   	push   %edi
+ 284:	8b 55 10             	mov    0x10(%ebp),%edx
+ 287:	8b 45 08             	mov    0x8(%ebp),%eax
+ 28a:	56                   	push   %esi
+ 28b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 28e:	85 d2                	test   %edx,%edx
+ 290:	7e 13                	jle    2a5 <memmove+0x25>
+ 292:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 294:	89 c7                	mov    %eax,%edi
+ 296:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2a1:	39 fa                	cmp    %edi,%edx
+ 2a3:	75 fb                	jne    2a0 <memmove+0x20>
+  return vdst;
+}
+ 2a5:	5e                   	pop    %esi
+ 2a6:	5f                   	pop    %edi
+ 2a7:	5d                   	pop    %ebp
+ 2a8:	c3                   	ret    
+
+000002a9 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2a9:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2ae:	cd 40                	int    $0x40
+ 2b0:	c3                   	ret    
+
+000002b1 <exit>:
+SYSCALL(exit)
+ 2b1:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2b6:	cd 40                	int    $0x40
+ 2b8:	c3                   	ret    
+
+000002b9 <wait>:
+SYSCALL(wait)
+ 2b9:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2be:	cd 40                	int    $0x40
+ 2c0:	c3                   	ret    
+
+000002c1 <pipe>:
+SYSCALL(pipe)
+ 2c1:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2c6:	cd 40                	int    $0x40
+ 2c8:	c3                   	ret    
+
+000002c9 <read>:
+SYSCALL(read)
+ 2c9:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2ce:	cd 40                	int    $0x40
+ 2d0:	c3                   	ret    
+
+000002d1 <write>:
+SYSCALL(write)
+ 2d1:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2d6:	cd 40                	int    $0x40
+ 2d8:	c3                   	ret    
+
+000002d9 <close>:
+SYSCALL(close)
+ 2d9:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2de:	cd 40                	int    $0x40
+ 2e0:	c3                   	ret    
+
+000002e1 <kill>:
+SYSCALL(kill)
+ 2e1:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2e6:	cd 40                	int    $0x40
+ 2e8:	c3                   	ret    
+
+000002e9 <exec>:
+SYSCALL(exec)
+ 2e9:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2ee:	cd 40                	int    $0x40
+ 2f0:	c3                   	ret    
+
+000002f1 <open>:
+SYSCALL(open)
+ 2f1:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2f6:	cd 40                	int    $0x40
+ 2f8:	c3                   	ret    
+
+000002f9 <mknod>:
+SYSCALL(mknod)
+ 2f9:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2fe:	cd 40                	int    $0x40
+ 300:	c3                   	ret    
+
+00000301 <unlink>:
+SYSCALL(unlink)
+ 301:	b8 12 00 00 00       	mov    $0x12,%eax
+ 306:	cd 40                	int    $0x40
+ 308:	c3                   	ret    
+
+00000309 <fstat>:
+SYSCALL(fstat)
+ 309:	b8 08 00 00 00       	mov    $0x8,%eax
+ 30e:	cd 40                	int    $0x40
+ 310:	c3                   	ret    
+
+00000311 <link>:
+SYSCALL(link)
+ 311:	b8 13 00 00 00       	mov    $0x13,%eax
+ 316:	cd 40                	int    $0x40
+ 318:	c3                   	ret    
+
+00000319 <mkdir>:
+SYSCALL(mkdir)
+ 319:	b8 14 00 00 00       	mov    $0x14,%eax
+ 31e:	cd 40                	int    $0x40
+ 320:	c3                   	ret    
+
+00000321 <chdir>:
+SYSCALL(chdir)
+ 321:	b8 09 00 00 00       	mov    $0x9,%eax
+ 326:	cd 40                	int    $0x40
+ 328:	c3                   	ret    
+
+00000329 <dup>:
+SYSCALL(dup)
+ 329:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 32e:	cd 40                	int    $0x40
+ 330:	c3                   	ret    
+
+00000331 <getpid>:
+SYSCALL(getpid)
+ 331:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 336:	cd 40                	int    $0x40
+ 338:	c3                   	ret    
+
+00000339 <sbrk>:
+SYSCALL(sbrk)
+ 339:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 33e:	cd 40                	int    $0x40
+ 340:	c3                   	ret    
+
+00000341 <sleep>:
+SYSCALL(sleep)
+ 341:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 346:	cd 40                	int    $0x40
+ 348:	c3                   	ret    
+
+00000349 <uptime>:
+SYSCALL(uptime)
+ 349:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 34e:	cd 40                	int    $0x40
+ 350:	c3                   	ret    
+ 351:	66 90                	xchg   %ax,%ax
+ 353:	66 90                	xchg   %ax,%ax
+ 355:	66 90                	xchg   %ax,%ax
+ 357:	66 90                	xchg   %ax,%ax
+ 359:	66 90                	xchg   %ax,%ax
+ 35b:	66 90                	xchg   %ax,%ax
+ 35d:	66 90                	xchg   %ax,%ax
+ 35f:	90                   	nop
+
+00000360 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 366:	89 d3                	mov    %edx,%ebx
+{
+ 368:	83 ec 3c             	sub    $0x3c,%esp
+ 36b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+ 36e:	85 d2                	test   %edx,%edx
+ 370:	0f 89 92 00 00 00    	jns    408 <printint+0xa8>
+ 376:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 37a:	0f 84 88 00 00 00    	je     408 <printint+0xa8>
+    neg = 1;
+ 380:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+ 387:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 389:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 390:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 393:	eb 08                	jmp    39d <printint+0x3d>
+ 395:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 398:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+ 39b:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+ 39d:	89 d8                	mov    %ebx,%eax
+ 39f:	31 d2                	xor    %edx,%edx
+ 3a1:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 3a4:	f7 f1                	div    %ecx
+ 3a6:	83 c7 01             	add    $0x1,%edi
+ 3a9:	0f b6 92 a4 07 00 00 	movzbl 0x7a4(%edx),%edx
+ 3b0:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+ 3b3:	39 d9                	cmp    %ebx,%ecx
+ 3b5:	76 e1                	jbe    398 <printint+0x38>
+  if(neg)
+ 3b7:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 3ba:	85 c0                	test   %eax,%eax
+ 3bc:	74 0d                	je     3cb <printint+0x6b>
+    buf[i++] = '-';
+ 3be:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3c3:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+ 3c8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 3cb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ce:	8b 7d bc             	mov    -0x44(%ebp),%edi
+ 3d1:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3d5:	eb 0f                	jmp    3e6 <printint+0x86>
+ 3d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3de:	66 90                	xchg   %ax,%ax
+ 3e0:	0f b6 13             	movzbl (%ebx),%edx
+ 3e3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3e6:	83 ec 04             	sub    $0x4,%esp
+ 3e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3ec:	6a 01                	push   $0x1
+ 3ee:	56                   	push   %esi
+ 3ef:	57                   	push   %edi
+ 3f0:	e8 dc fe ff ff       	call   2d1 <write>
+
+  while(--i >= 0)
+ 3f5:	83 c4 10             	add    $0x10,%esp
+ 3f8:	39 de                	cmp    %ebx,%esi
+ 3fa:	75 e4                	jne    3e0 <printint+0x80>
+    putc(fd, buf[i]);
+}
+ 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ff:	5b                   	pop    %ebx
+ 400:	5e                   	pop    %esi
+ 401:	5f                   	pop    %edi
+ 402:	5d                   	pop    %ebp
+ 403:	c3                   	ret    
+ 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 408:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+ 40f:	e9 75 ff ff ff       	jmp    389 <printint+0x29>
+ 414:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
+
+00000420 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	57                   	push   %edi
+ 424:	56                   	push   %esi
+ 425:	53                   	push   %ebx
+ 426:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 429:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 42c:	0f b6 1e             	movzbl (%esi),%ebx
+ 42f:	84 db                	test   %bl,%bl
+ 431:	0f 84 b9 00 00 00    	je     4f0 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+ 437:	8d 45 10             	lea    0x10(%ebp),%eax
+ 43a:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 43d:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 440:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 442:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 445:	eb 38                	jmp    47f <printf+0x5f>
+ 447:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44e:	66 90                	xchg   %ax,%ax
+ 450:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 453:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 458:	83 f8 25             	cmp    $0x25,%eax
+ 45b:	74 17                	je     474 <printf+0x54>
+  write(fd, &c, 1);
+ 45d:	83 ec 04             	sub    $0x4,%esp
+ 460:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 463:	6a 01                	push   $0x1
+ 465:	57                   	push   %edi
+ 466:	ff 75 08             	pushl  0x8(%ebp)
+ 469:	e8 63 fe ff ff       	call   2d1 <write>
+ 46e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 471:	83 c4 10             	add    $0x10,%esp
+ 474:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 477:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 47b:	84 db                	test   %bl,%bl
+ 47d:	74 71                	je     4f0 <printf+0xd0>
+    c = fmt[i] & 0xff;
+ 47f:	0f be cb             	movsbl %bl,%ecx
+ 482:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 485:	85 d2                	test   %edx,%edx
+ 487:	74 c7                	je     450 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 489:	83 fa 25             	cmp    $0x25,%edx
+ 48c:	75 e6                	jne    474 <printf+0x54>
+      if(c == 'd'){
+ 48e:	83 f8 64             	cmp    $0x64,%eax
+ 491:	0f 84 99 00 00 00    	je     530 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 497:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 49d:	83 f9 70             	cmp    $0x70,%ecx
+ 4a0:	74 5e                	je     500 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4a2:	83 f8 73             	cmp    $0x73,%eax
+ 4a5:	0f 84 d5 00 00 00    	je     580 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ab:	83 f8 63             	cmp    $0x63,%eax
+ 4ae:	0f 84 8c 00 00 00    	je     540 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4b4:	83 f8 25             	cmp    $0x25,%eax
+ 4b7:	0f 84 b3 00 00 00    	je     570 <printf+0x150>
+  write(fd, &c, 1);
+ 4bd:	83 ec 04             	sub    $0x4,%esp
+ 4c0:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4c4:	6a 01                	push   $0x1
+ 4c6:	57                   	push   %edi
+ 4c7:	ff 75 08             	pushl  0x8(%ebp)
+ 4ca:	e8 02 fe ff ff       	call   2d1 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4cf:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4d2:	83 c4 0c             	add    $0xc,%esp
+ 4d5:	6a 01                	push   $0x1
+ 4d7:	83 c6 01             	add    $0x1,%esi
+ 4da:	57                   	push   %edi
+ 4db:	ff 75 08             	pushl  0x8(%ebp)
+ 4de:	e8 ee fd ff ff       	call   2d1 <write>
+  for(i = 0; fmt[i]; i++){
+ 4e3:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 4e7:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 4ea:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 4ec:	84 db                	test   %bl,%bl
+ 4ee:	75 8f                	jne    47f <printf+0x5f>
+    }
+  }
+}
+ 4f0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4f3:	5b                   	pop    %ebx
+ 4f4:	5e                   	pop    %esi
+ 4f5:	5f                   	pop    %edi
+ 4f6:	5d                   	pop    %ebp
+ 4f7:	c3                   	ret    
+ 4f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ff:	90                   	nop
+        printint(fd, *ap, 16, 0);
+ 500:	83 ec 0c             	sub    $0xc,%esp
+ 503:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 508:	6a 00                	push   $0x0
+ 50a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 50d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 510:	8b 13                	mov    (%ebx),%edx
+ 512:	e8 49 fe ff ff       	call   360 <printint>
+        ap++;
+ 517:	89 d8                	mov    %ebx,%eax
+ 519:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 51c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 51e:	83 c0 04             	add    $0x4,%eax
+ 521:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 524:	e9 4b ff ff ff       	jmp    474 <printf+0x54>
+ 529:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 538:	6a 01                	push   $0x1
+ 53a:	eb ce                	jmp    50a <printf+0xea>
+ 53c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 540:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 543:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 546:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 548:	6a 01                	push   $0x1
+        ap++;
+ 54a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 54d:	57                   	push   %edi
+ 54e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 551:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 554:	e8 78 fd ff ff       	call   2d1 <write>
+        ap++;
+ 559:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 55c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 55f:	31 d2                	xor    %edx,%edx
+ 561:	e9 0e ff ff ff       	jmp    474 <printf+0x54>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 570:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 573:	83 ec 04             	sub    $0x4,%esp
+ 576:	e9 5a ff ff ff       	jmp    4d5 <printf+0xb5>
+ 57b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 57f:	90                   	nop
+        s = (char*)*ap;
+ 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 583:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 585:	83 c0 04             	add    $0x4,%eax
+ 588:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 58b:	85 db                	test   %ebx,%ebx
+ 58d:	74 17                	je     5a6 <printf+0x186>
+        while(*s != 0){
+ 58f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 592:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 594:	84 c0                	test   %al,%al
+ 596:	0f 84 d8 fe ff ff    	je     474 <printf+0x54>
+ 59c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 59f:	89 de                	mov    %ebx,%esi
+ 5a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5a4:	eb 1a                	jmp    5c0 <printf+0x1a0>
+          s = "(null)";
+ 5a6:	bb 9c 07 00 00       	mov    $0x79c,%ebx
+        while(*s != 0){
+ 5ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5b3:	89 de                	mov    %ebx,%esi
+ 5b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+  write(fd, &c, 1);
+ 5c0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5c3:	83 c6 01             	add    $0x1,%esi
+ 5c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5c9:	6a 01                	push   $0x1
+ 5cb:	57                   	push   %edi
+ 5cc:	53                   	push   %ebx
+ 5cd:	e8 ff fc ff ff       	call   2d1 <write>
+        while(*s != 0){
+ 5d2:	0f b6 06             	movzbl (%esi),%eax
+ 5d5:	83 c4 10             	add    $0x10,%esp
+ 5d8:	84 c0                	test   %al,%al
+ 5da:	75 e4                	jne    5c0 <printf+0x1a0>
+ 5dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5df:	31 d2                	xor    %edx,%edx
+ 5e1:	e9 8e fe ff ff       	jmp    474 <printf+0x54>
+ 5e6:	66 90                	xchg   %ax,%ax
+ 5e8:	66 90                	xchg   %ax,%ax
+ 5ea:	66 90                	xchg   %ax,%ax
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
+
+000005f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5f0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f1:	a1 4c 0a 00 00       	mov    0xa4c,%eax
+{
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5fe:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 600:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 603:	39 c8                	cmp    %ecx,%eax
+ 605:	73 19                	jae    620 <free+0x30>
+ 607:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60e:	66 90                	xchg   %ax,%ax
+ 610:	39 d1                	cmp    %edx,%ecx
+ 612:	72 14                	jb     628 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 614:	39 d0                	cmp    %edx,%eax
+ 616:	73 10                	jae    628 <free+0x38>
+{
+ 618:	89 d0                	mov    %edx,%eax
+ 61a:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 61c:	39 c8                	cmp    %ecx,%eax
+ 61e:	72 f0                	jb     610 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 620:	39 d0                	cmp    %edx,%eax
+ 622:	72 f4                	jb     618 <free+0x28>
+ 624:	39 d1                	cmp    %edx,%ecx
+ 626:	73 f0                	jae    618 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 fa                	cmp    %edi,%edx
+ 630:	74 1e                	je     650 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 632:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 635:	8b 50 04             	mov    0x4(%eax),%edx
+ 638:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 63b:	39 f1                	cmp    %esi,%ecx
+ 63d:	74 28                	je     667 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 63f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 641:	5b                   	pop    %ebx
+  freep = p;
+ 642:	a3 4c 0a 00 00       	mov    %eax,0xa4c
+}
+ 647:	5e                   	pop    %esi
+ 648:	5f                   	pop    %edi
+ 649:	5d                   	pop    %ebp
+ 64a:	c3                   	ret    
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 650:	03 72 04             	add    0x4(%edx),%esi
+ 653:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 656:	8b 10                	mov    (%eax),%edx
+ 658:	8b 12                	mov    (%edx),%edx
+ 65a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 65d:	8b 50 04             	mov    0x4(%eax),%edx
+ 660:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 663:	39 f1                	cmp    %esi,%ecx
+ 665:	75 d8                	jne    63f <free+0x4f>
+    p->s.size += bp->s.size;
+ 667:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 66a:	a3 4c 0a 00 00       	mov    %eax,0xa4c
+    p->s.size += bp->s.size;
+ 66f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 672:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 675:	89 10                	mov    %edx,(%eax)
+}
+ 677:	5b                   	pop    %ebx
+ 678:	5e                   	pop    %esi
+ 679:	5f                   	pop    %edi
+ 67a:	5d                   	pop    %ebp
+ 67b:	c3                   	ret    
+ 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000680 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 68c:	8b 3d 4c 0a 00 00    	mov    0xa4c,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 692:	8d 70 07             	lea    0x7(%eax),%esi
+ 695:	c1 ee 03             	shr    $0x3,%esi
+ 698:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 69b:	85 ff                	test   %edi,%edi
+ 69d:	0f 84 ad 00 00 00    	je     750 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 6a5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6a8:	39 f1                	cmp    %esi,%ecx
+ 6aa:	73 72                	jae    71e <malloc+0x9e>
+ 6ac:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6b2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6b7:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ba:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6c4:	eb 1b                	jmp    6e1 <malloc+0x61>
+ 6c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6cd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d0:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6d2:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6d5:	39 f1                	cmp    %esi,%ecx
+ 6d7:	73 4f                	jae    728 <malloc+0xa8>
+ 6d9:	8b 3d 4c 0a 00 00    	mov    0xa4c,%edi
+ 6df:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6e1:	39 d7                	cmp    %edx,%edi
+ 6e3:	75 eb                	jne    6d0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 6e5:	83 ec 0c             	sub    $0xc,%esp
+ 6e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6eb:	e8 49 fc ff ff       	call   339 <sbrk>
+  if(p == (char*)-1)
+ 6f0:	83 c4 10             	add    $0x10,%esp
+ 6f3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6f6:	74 1c                	je     714 <malloc+0x94>
+  hp->s.size = nu;
+ 6f8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6fb:	83 ec 0c             	sub    $0xc,%esp
+ 6fe:	83 c0 08             	add    $0x8,%eax
+ 701:	50                   	push   %eax
+ 702:	e8 e9 fe ff ff       	call   5f0 <free>
+  return freep;
+ 707:	8b 15 4c 0a 00 00    	mov    0xa4c,%edx
+      if((p = morecore(nunits)) == 0)
+ 70d:	83 c4 10             	add    $0x10,%esp
+ 710:	85 d2                	test   %edx,%edx
+ 712:	75 bc                	jne    6d0 <malloc+0x50>
+        return 0;
+  }
+}
+ 714:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 717:	31 c0                	xor    %eax,%eax
+}
+ 719:	5b                   	pop    %ebx
+ 71a:	5e                   	pop    %esi
+ 71b:	5f                   	pop    %edi
+ 71c:	5d                   	pop    %ebp
+ 71d:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 71e:	89 d0                	mov    %edx,%eax
+ 720:	89 fa                	mov    %edi,%edx
+ 722:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 728:	39 ce                	cmp    %ecx,%esi
+ 72a:	74 54                	je     780 <malloc+0x100>
+        p->s.size -= nunits;
+ 72c:	29 f1                	sub    %esi,%ecx
+ 72e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 731:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 734:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 737:	89 15 4c 0a 00 00    	mov    %edx,0xa4c
+}
+ 73d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 740:	83 c0 08             	add    $0x8,%eax
+}
+ 743:	5b                   	pop    %ebx
+ 744:	5e                   	pop    %esi
+ 745:	5f                   	pop    %edi
+ 746:	5d                   	pop    %ebp
+ 747:	c3                   	ret    
+ 748:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 74f:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+ 750:	c7 05 4c 0a 00 00 50 	movl   $0xa50,0xa4c
+ 757:	0a 00 00 
+    base.s.size = 0;
+ 75a:	bf 50 0a 00 00       	mov    $0xa50,%edi
+    base.s.ptr = freep = prevp = &base;
+ 75f:	c7 05 50 0a 00 00 50 	movl   $0xa50,0xa50
+ 766:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 769:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 76b:	c7 05 54 0a 00 00 00 	movl   $0x0,0xa54
+ 772:	00 00 00 
+    if(p->s.size >= nunits){
+ 775:	e9 32 ff ff ff       	jmp    6ac <malloc+0x2c>
+ 77a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 780:	8b 08                	mov    (%eax),%ecx
+ 782:	89 0a                	mov    %ecx,(%edx)
+ 784:	eb b1                	jmp    737 <malloc+0xb7>
diff -urN xv6-public/my_fork.c xv6-public-new/my_fork.c
--- xv6-public/my_fork.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/my_fork.c	2019-10-04 14:23:15.104280480 +0530
@@ -0,0 +1,17 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+	printf(1,"(%d)hello",getpid());
+	int p = fork();
+	if(p == 0)
+	{
+		printf(1,"(%d)world",getpid());
+		exit();
+	}
+	wait();
+  exit();
+}
diff -urN xv6-public/my_fork.d xv6-public-new/my_fork.d
--- xv6-public/my_fork.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/my_fork.d	2019-10-04 14:23:22.284280823 +0530
@@ -0,0 +1 @@
+my_fork.o: my_fork.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/my_fork.o and xv6-public-new/my_fork.o differ
diff -urN xv6-public/my_fork.sym xv6-public-new/my_fork.sym
--- xv6-public/my_fork.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/my_fork.sym	2019-10-04 14:23:22.300280823 +0530
@@ -0,0 +1,57 @@
+00000000 .text
+00000788 .rodata
+000007b8 .eh_frame
+00000a4c .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 my_fork.c
+00000000 ulib.c
+00000000 printf.c
+00000360 printint
+000007a4 digits.1101
+00000000 umalloc.c
+00000a4c freep
+00000a50 base
+00000060 strcpy
+00000420 printf
+00000280 memmove
+000002f9 mknod
+00000170 gets
+00000331 getpid
+00000680 malloc
+00000341 sleep
+000002c1 pipe
+000002d1 write
+00000309 fstat
+000002e1 kill
+00000321 chdir
+000002e9 exec
+000002b9 wait
+000002c9 read
+00000301 unlink
+000002a9 fork
+00000339 sbrk
+00000349 uptime
+00000a4c __bss_start
+00000110 memset
+00000000 main
+00000090 strcmp
+00000329 dup
+000001f0 stat
+00000a4c _edata
+00000a58 _end
+00000311 link
+000002b1 exit
+00000240 atoi
+000000e0 strlen
+000002f1 open
+00000130 strchr
+00000319 mkdir
+000002d9 close
+000005f0 free
Binary files xv6-public/_nhead and xv6-public-new/_nhead differ
diff -urN xv6-public/nhead.asm xv6-public-new/nhead.asm
--- xv6-public/nhead.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/nhead.asm	2019-10-04 16:23:07.388623435 +0530
@@ -0,0 +1,1279 @@
+
+_nhead:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	81 ec 20 02 00 00    	sub    $0x220,%esp
+  17:	8b 79 04             	mov    0x4(%ecx),%edi
+  1a:	8b 31                	mov    (%ecx),%esi
+    char buff1[512];
+    //gets(buff,512);
+    int fd,count = 0,n,max = 10;
+    if((fd = open(argv[1], 0)) < 0){
+  1c:	6a 00                	push   $0x0
+  1e:	ff 77 04             	pushl  0x4(%edi)
+  21:	e8 9b 03 00 00       	call   3c1 <open>
+  26:	83 c4 10             	add    $0x10,%esp
+  29:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
+  2f:	85 c0                	test   %eax,%eax
+  31:	0f 88 c0 00 00 00    	js     f7 <main+0xf7>
+    int fd,count = 0,n,max = 10;
+  37:	bb 0a 00 00 00       	mov    $0xa,%ebx
+      printf(1, "head: cannot open %s\n", argv[1]);
+      exit();
+    }
+    if(argc == 3)
+  3c:	83 fe 03             	cmp    $0x3,%esi
+  3f:	0f 84 c7 00 00 00    	je     10c <main+0x10c>
+    int fd,count = 0,n,max = 10;
+  45:	31 f6                	xor    %esi,%esi
+  47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  4e:	66 90                	xchg   %ax,%ax
+    {
+        max = atoi(argv[2]);
+    }
+    //printf(1,"%s\n", buff);
+    while((n = read(fd, buff1, sizeof(buff1))) > 0) {
+  50:	83 ec 04             	sub    $0x4,%esp
+  53:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
+  59:	68 00 02 00 00       	push   $0x200
+  5e:	50                   	push   %eax
+  5f:	ff b5 e4 fd ff ff    	pushl  -0x21c(%ebp)
+  65:	e8 2f 03 00 00       	call   399 <read>
+  6a:	83 c4 10             	add    $0x10,%esp
+  6d:	85 c0                	test   %eax,%eax
+  6f:	7e 3e                	jle    af <main+0xaf>
+  71:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
+  77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  7e:	66 90                	xchg   %ax,%ax
+        int i;
+     for(i = 0;i < sizeof(buff1);i++)
+     {
+        if(buff1[i] == '\n')
+  80:	0f be 07             	movsbl (%edi),%eax
+        {
+            count++;
+  83:	31 d2                	xor    %edx,%edx
+  85:	3c 0a                	cmp    $0xa,%al
+  87:	0f 94 c2             	sete   %dl
+  8a:	01 d6                	add    %edx,%esi
+        }
+        if(count < max)
+  8c:	39 de                	cmp    %ebx,%esi
+  8e:	7d c0                	jge    50 <main+0x50>
+        {
+            printf(1,"%c",buff1[i]);
+  90:	83 ec 04             	sub    $0x4,%esp
+  93:	83 c7 01             	add    $0x1,%edi
+  96:	50                   	push   %eax
+  97:	68 6e 08 00 00       	push   $0x86e
+  9c:	6a 01                	push   $0x1
+  9e:	e8 4d 04 00 00       	call   4f0 <printf>
+     for(i = 0;i < sizeof(buff1);i++)
+  a3:	8d 45 e8             	lea    -0x18(%ebp),%eax
+  a6:	83 c4 10             	add    $0x10,%esp
+  a9:	39 c7                	cmp    %eax,%edi
+  ab:	75 d3                	jne    80 <main+0x80>
+  ad:	eb a1                	jmp    50 <main+0x50>
+        {
+            break;
+        }
+     }
+ }
+     printf(1,"\n");
+  af:	83 ec 08             	sub    $0x8,%esp
+  b2:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
+  b8:	68 81 08 00 00       	push   $0x881
+  bd:	6a 01                	push   $0x1
+  bf:	e8 2c 04 00 00       	call   4f0 <printf>
+    if(n < 0){
+  c4:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
+  ca:	83 c4 10             	add    $0x10,%esp
+  cd:	85 c0                	test   %eax,%eax
+  cf:	75 13                	jne    e4 <main+0xe4>
+    printf(1, "head: read error\n");
+    exit();
+  }
+    close(fd);
+  d1:	83 ec 0c             	sub    $0xc,%esp
+  d4:	ff b5 e4 fd ff ff    	pushl  -0x21c(%ebp)
+  da:	e8 ca 02 00 00       	call   3a9 <close>
+    exit();
+  df:	e8 9d 02 00 00       	call   381 <exit>
+    printf(1, "head: read error\n");
+  e4:	50                   	push   %eax
+  e5:	50                   	push   %eax
+  e6:	68 71 08 00 00       	push   $0x871
+  eb:	6a 01                	push   $0x1
+  ed:	e8 fe 03 00 00       	call   4f0 <printf>
+    exit();
+  f2:	e8 8a 02 00 00       	call   381 <exit>
+      printf(1, "head: cannot open %s\n", argv[1]);
+  f7:	52                   	push   %edx
+  f8:	ff 77 04             	pushl  0x4(%edi)
+  fb:	68 58 08 00 00       	push   $0x858
+ 100:	6a 01                	push   $0x1
+ 102:	e8 e9 03 00 00       	call   4f0 <printf>
+      exit();
+ 107:	e8 75 02 00 00       	call   381 <exit>
+        max = atoi(argv[2]);
+ 10c:	83 ec 0c             	sub    $0xc,%esp
+ 10f:	ff 77 08             	pushl  0x8(%edi)
+ 112:	e8 f9 01 00 00       	call   310 <atoi>
+ 117:	83 c4 10             	add    $0x10,%esp
+ 11a:	89 c3                	mov    %eax,%ebx
+ 11c:	e9 24 ff ff ff       	jmp    45 <main+0x45>
+ 121:	66 90                	xchg   %ax,%ax
+ 123:	66 90                	xchg   %ax,%ax
+ 125:	66 90                	xchg   %ax,%ax
+ 127:	66 90                	xchg   %ax,%ax
+ 129:	66 90                	xchg   %ax,%ax
+ 12b:	66 90                	xchg   %ax,%ax
+ 12d:	66 90                	xchg   %ax,%ax
+ 12f:	90                   	nop
+
+00000130 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 130:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 131:	31 d2                	xor    %edx,%edx
+{
+ 133:	89 e5                	mov    %esp,%ebp
+ 135:	53                   	push   %ebx
+ 136:	8b 45 08             	mov    0x8(%ebp),%eax
+ 139:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 140:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+ 144:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 147:	83 c2 01             	add    $0x1,%edx
+ 14a:	84 c9                	test   %cl,%cl
+ 14c:	75 f2                	jne    140 <strcpy+0x10>
+    ;
+  return os;
+}
+ 14e:	5b                   	pop    %ebx
+ 14f:	5d                   	pop    %ebp
+ 150:	c3                   	ret    
+ 151:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 158:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+
+00000160 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 160:	55                   	push   %ebp
+ 161:	89 e5                	mov    %esp,%ebp
+ 163:	56                   	push   %esi
+ 164:	53                   	push   %ebx
+ 165:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 168:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+ 16b:	0f b6 13             	movzbl (%ebx),%edx
+ 16e:	0f b6 0e             	movzbl (%esi),%ecx
+ 171:	84 d2                	test   %dl,%dl
+ 173:	74 1e                	je     193 <strcmp+0x33>
+ 175:	b8 01 00 00 00       	mov    $0x1,%eax
+ 17a:	38 ca                	cmp    %cl,%dl
+ 17c:	74 09                	je     187 <strcmp+0x27>
+ 17e:	eb 20                	jmp    1a0 <strcmp+0x40>
+ 180:	83 c0 01             	add    $0x1,%eax
+ 183:	38 ca                	cmp    %cl,%dl
+ 185:	75 19                	jne    1a0 <strcmp+0x40>
+ 187:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 18b:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+ 18f:	84 d2                	test   %dl,%dl
+ 191:	75 ed                	jne    180 <strcmp+0x20>
+ 193:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+ 195:	5b                   	pop    %ebx
+ 196:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 197:	29 c8                	sub    %ecx,%eax
+}
+ 199:	5d                   	pop    %ebp
+ 19a:	c3                   	ret    
+ 19b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 19f:	90                   	nop
+ 1a0:	0f b6 c2             	movzbl %dl,%eax
+ 1a3:	5b                   	pop    %ebx
+ 1a4:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 1a5:	29 c8                	sub    %ecx,%eax
+}
+ 1a7:	5d                   	pop    %ebp
+ 1a8:	c3                   	ret    
+ 1a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000001b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1b0:	55                   	push   %ebp
+ 1b1:	89 e5                	mov    %esp,%ebp
+ 1b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1b6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 1b9:	74 15                	je     1d0 <strlen+0x20>
+ 1bb:	31 d2                	xor    %edx,%edx
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1c0:	83 c2 01             	add    $0x1,%edx
+ 1c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1c7:	89 d0                	mov    %edx,%eax
+ 1c9:	75 f5                	jne    1c0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1cb:	5d                   	pop    %ebp
+ 1cc:	c3                   	ret    
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 1d0:	31 c0                	xor    %eax,%eax
+}
+ 1d2:	5d                   	pop    %ebp
+ 1d3:	c3                   	ret    
+ 1d4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1df:	90                   	nop
+
+000001e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1e0:	55                   	push   %ebp
+ 1e1:	89 e5                	mov    %esp,%ebp
+ 1e3:	57                   	push   %edi
+ 1e4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1ed:	89 d7                	mov    %edx,%edi
+ 1ef:	fc                   	cld    
+ 1f0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1f2:	89 d0                	mov    %edx,%eax
+ 1f4:	5f                   	pop    %edi
+ 1f5:	5d                   	pop    %ebp
+ 1f6:	c3                   	ret    
+ 1f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fe:	66 90                	xchg   %ax,%ax
+
+00000200 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	53                   	push   %ebx
+ 204:	8b 45 08             	mov    0x8(%ebp),%eax
+ 207:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 20a:	0f b6 18             	movzbl (%eax),%ebx
+ 20d:	84 db                	test   %bl,%bl
+ 20f:	74 1d                	je     22e <strchr+0x2e>
+ 211:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 213:	38 d3                	cmp    %dl,%bl
+ 215:	75 0d                	jne    224 <strchr+0x24>
+ 217:	eb 17                	jmp    230 <strchr+0x30>
+ 219:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 220:	38 ca                	cmp    %cl,%dl
+ 222:	74 0c                	je     230 <strchr+0x30>
+  for(; *s; s++)
+ 224:	83 c0 01             	add    $0x1,%eax
+ 227:	0f b6 10             	movzbl (%eax),%edx
+ 22a:	84 d2                	test   %dl,%dl
+ 22c:	75 f2                	jne    220 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 22e:	31 c0                	xor    %eax,%eax
+}
+ 230:	5b                   	pop    %ebx
+ 231:	5d                   	pop    %ebp
+ 232:	c3                   	ret    
+ 233:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000240 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	57                   	push   %edi
+ 244:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 245:	31 f6                	xor    %esi,%esi
+{
+ 247:	53                   	push   %ebx
+ 248:	89 f3                	mov    %esi,%ebx
+ 24a:	83 ec 1c             	sub    $0x1c,%esp
+ 24d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 250:	eb 2f                	jmp    281 <gets+0x41>
+ 252:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 258:	83 ec 04             	sub    $0x4,%esp
+ 25b:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 25e:	6a 01                	push   $0x1
+ 260:	50                   	push   %eax
+ 261:	6a 00                	push   $0x0
+ 263:	e8 31 01 00 00       	call   399 <read>
+    if(cc < 1)
+ 268:	83 c4 10             	add    $0x10,%esp
+ 26b:	85 c0                	test   %eax,%eax
+ 26d:	7e 1c                	jle    28b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 26f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 273:	83 c7 01             	add    $0x1,%edi
+ 276:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 279:	3c 0a                	cmp    $0xa,%al
+ 27b:	74 23                	je     2a0 <gets+0x60>
+ 27d:	3c 0d                	cmp    $0xd,%al
+ 27f:	74 1f                	je     2a0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 281:	83 c3 01             	add    $0x1,%ebx
+ 284:	89 fe                	mov    %edi,%esi
+ 286:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 289:	7c cd                	jl     258 <gets+0x18>
+ 28b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 28d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 290:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 293:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 296:	5b                   	pop    %ebx
+ 297:	5e                   	pop    %esi
+ 298:	5f                   	pop    %edi
+ 299:	5d                   	pop    %ebp
+ 29a:	c3                   	ret    
+ 29b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 29f:	90                   	nop
+ 2a0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2a3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2a6:	01 de                	add    %ebx,%esi
+ 2a8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2aa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2b0:	5b                   	pop    %ebx
+ 2b1:	5e                   	pop    %esi
+ 2b2:	5f                   	pop    %edi
+ 2b3:	5d                   	pop    %ebp
+ 2b4:	c3                   	ret    
+ 2b5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2c0:	55                   	push   %ebp
+ 2c1:	89 e5                	mov    %esp,%ebp
+ 2c3:	56                   	push   %esi
+ 2c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2c5:	83 ec 08             	sub    $0x8,%esp
+ 2c8:	6a 00                	push   $0x0
+ 2ca:	ff 75 08             	pushl  0x8(%ebp)
+ 2cd:	e8 ef 00 00 00       	call   3c1 <open>
+  if(fd < 0)
+ 2d2:	83 c4 10             	add    $0x10,%esp
+ 2d5:	85 c0                	test   %eax,%eax
+ 2d7:	78 27                	js     300 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2d9:	83 ec 08             	sub    $0x8,%esp
+ 2dc:	ff 75 0c             	pushl  0xc(%ebp)
+ 2df:	89 c3                	mov    %eax,%ebx
+ 2e1:	50                   	push   %eax
+ 2e2:	e8 f2 00 00 00       	call   3d9 <fstat>
+  close(fd);
+ 2e7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2ea:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2ec:	e8 b8 00 00 00       	call   3a9 <close>
+  return r;
+ 2f1:	83 c4 10             	add    $0x10,%esp
+}
+ 2f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2f7:	89 f0                	mov    %esi,%eax
+ 2f9:	5b                   	pop    %ebx
+ 2fa:	5e                   	pop    %esi
+ 2fb:	5d                   	pop    %ebp
+ 2fc:	c3                   	ret    
+ 2fd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 300:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 305:	eb ed                	jmp    2f4 <stat+0x34>
+ 307:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 30e:	66 90                	xchg   %ax,%ax
+
+00000310 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	53                   	push   %ebx
+ 314:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 317:	0f be 11             	movsbl (%ecx),%edx
+ 31a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 31d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 31f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 324:	77 1f                	ja     345 <atoi+0x35>
+ 326:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 32d:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 330:	83 c1 01             	add    $0x1,%ecx
+ 333:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 336:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 33a:	0f be 11             	movsbl (%ecx),%edx
+ 33d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 340:	80 fb 09             	cmp    $0x9,%bl
+ 343:	76 eb                	jbe    330 <atoi+0x20>
+  return n;
+}
+ 345:	5b                   	pop    %ebx
+ 346:	5d                   	pop    %ebp
+ 347:	c3                   	ret    
+ 348:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 34f:	90                   	nop
+
+00000350 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 350:	55                   	push   %ebp
+ 351:	89 e5                	mov    %esp,%ebp
+ 353:	57                   	push   %edi
+ 354:	8b 55 10             	mov    0x10(%ebp),%edx
+ 357:	8b 45 08             	mov    0x8(%ebp),%eax
+ 35a:	56                   	push   %esi
+ 35b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 35e:	85 d2                	test   %edx,%edx
+ 360:	7e 13                	jle    375 <memmove+0x25>
+ 362:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 364:	89 c7                	mov    %eax,%edi
+ 366:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 370:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 371:	39 fa                	cmp    %edi,%edx
+ 373:	75 fb                	jne    370 <memmove+0x20>
+  return vdst;
+}
+ 375:	5e                   	pop    %esi
+ 376:	5f                   	pop    %edi
+ 377:	5d                   	pop    %ebp
+ 378:	c3                   	ret    
+
+00000379 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 379:	b8 01 00 00 00       	mov    $0x1,%eax
+ 37e:	cd 40                	int    $0x40
+ 380:	c3                   	ret    
+
+00000381 <exit>:
+SYSCALL(exit)
+ 381:	b8 02 00 00 00       	mov    $0x2,%eax
+ 386:	cd 40                	int    $0x40
+ 388:	c3                   	ret    
+
+00000389 <wait>:
+SYSCALL(wait)
+ 389:	b8 03 00 00 00       	mov    $0x3,%eax
+ 38e:	cd 40                	int    $0x40
+ 390:	c3                   	ret    
+
+00000391 <pipe>:
+SYSCALL(pipe)
+ 391:	b8 04 00 00 00       	mov    $0x4,%eax
+ 396:	cd 40                	int    $0x40
+ 398:	c3                   	ret    
+
+00000399 <read>:
+SYSCALL(read)
+ 399:	b8 05 00 00 00       	mov    $0x5,%eax
+ 39e:	cd 40                	int    $0x40
+ 3a0:	c3                   	ret    
+
+000003a1 <write>:
+SYSCALL(write)
+ 3a1:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3a6:	cd 40                	int    $0x40
+ 3a8:	c3                   	ret    
+
+000003a9 <close>:
+SYSCALL(close)
+ 3a9:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3ae:	cd 40                	int    $0x40
+ 3b0:	c3                   	ret    
+
+000003b1 <kill>:
+SYSCALL(kill)
+ 3b1:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3b6:	cd 40                	int    $0x40
+ 3b8:	c3                   	ret    
+
+000003b9 <exec>:
+SYSCALL(exec)
+ 3b9:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3be:	cd 40                	int    $0x40
+ 3c0:	c3                   	ret    
+
+000003c1 <open>:
+SYSCALL(open)
+ 3c1:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3c6:	cd 40                	int    $0x40
+ 3c8:	c3                   	ret    
+
+000003c9 <mknod>:
+SYSCALL(mknod)
+ 3c9:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3ce:	cd 40                	int    $0x40
+ 3d0:	c3                   	ret    
+
+000003d1 <unlink>:
+SYSCALL(unlink)
+ 3d1:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3d6:	cd 40                	int    $0x40
+ 3d8:	c3                   	ret    
+
+000003d9 <fstat>:
+SYSCALL(fstat)
+ 3d9:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3de:	cd 40                	int    $0x40
+ 3e0:	c3                   	ret    
+
+000003e1 <link>:
+SYSCALL(link)
+ 3e1:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3e6:	cd 40                	int    $0x40
+ 3e8:	c3                   	ret    
+
+000003e9 <mkdir>:
+SYSCALL(mkdir)
+ 3e9:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3ee:	cd 40                	int    $0x40
+ 3f0:	c3                   	ret    
+
+000003f1 <chdir>:
+SYSCALL(chdir)
+ 3f1:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3f6:	cd 40                	int    $0x40
+ 3f8:	c3                   	ret    
+
+000003f9 <dup>:
+SYSCALL(dup)
+ 3f9:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3fe:	cd 40                	int    $0x40
+ 400:	c3                   	ret    
+
+00000401 <getpid>:
+SYSCALL(getpid)
+ 401:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 406:	cd 40                	int    $0x40
+ 408:	c3                   	ret    
+
+00000409 <sbrk>:
+SYSCALL(sbrk)
+ 409:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 40e:	cd 40                	int    $0x40
+ 410:	c3                   	ret    
+
+00000411 <sleep>:
+SYSCALL(sleep)
+ 411:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 416:	cd 40                	int    $0x40
+ 418:	c3                   	ret    
+
+00000419 <uptime>:
+SYSCALL(uptime)
+ 419:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 41e:	cd 40                	int    $0x40
+ 420:	c3                   	ret    
+ 421:	66 90                	xchg   %ax,%ax
+ 423:	66 90                	xchg   %ax,%ax
+ 425:	66 90                	xchg   %ax,%ax
+ 427:	66 90                	xchg   %ax,%ax
+ 429:	66 90                	xchg   %ax,%ax
+ 42b:	66 90                	xchg   %ax,%ax
+ 42d:	66 90                	xchg   %ax,%ax
+ 42f:	90                   	nop
+
+00000430 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 436:	89 d3                	mov    %edx,%ebx
+{
+ 438:	83 ec 3c             	sub    $0x3c,%esp
+ 43b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+ 43e:	85 d2                	test   %edx,%edx
+ 440:	0f 89 92 00 00 00    	jns    4d8 <printint+0xa8>
+ 446:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 44a:	0f 84 88 00 00 00    	je     4d8 <printint+0xa8>
+    neg = 1;
+ 450:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+ 457:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 459:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 460:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 463:	eb 08                	jmp    46d <printint+0x3d>
+ 465:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 468:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+ 46b:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+ 46d:	89 d8                	mov    %ebx,%eax
+ 46f:	31 d2                	xor    %edx,%edx
+ 471:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 474:	f7 f1                	div    %ecx
+ 476:	83 c7 01             	add    $0x1,%edi
+ 479:	0f b6 92 8c 08 00 00 	movzbl 0x88c(%edx),%edx
+ 480:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+ 483:	39 d9                	cmp    %ebx,%ecx
+ 485:	76 e1                	jbe    468 <printint+0x38>
+  if(neg)
+ 487:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 48a:	85 c0                	test   %eax,%eax
+ 48c:	74 0d                	je     49b <printint+0x6b>
+    buf[i++] = '-';
+ 48e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 493:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+ 498:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 49b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 49e:	8b 7d bc             	mov    -0x44(%ebp),%edi
+ 4a1:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4a5:	eb 0f                	jmp    4b6 <printint+0x86>
+ 4a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ae:	66 90                	xchg   %ax,%ax
+ 4b0:	0f b6 13             	movzbl (%ebx),%edx
+ 4b3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4b6:	83 ec 04             	sub    $0x4,%esp
+ 4b9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4bc:	6a 01                	push   $0x1
+ 4be:	56                   	push   %esi
+ 4bf:	57                   	push   %edi
+ 4c0:	e8 dc fe ff ff       	call   3a1 <write>
+
+  while(--i >= 0)
+ 4c5:	83 c4 10             	add    $0x10,%esp
+ 4c8:	39 de                	cmp    %ebx,%esi
+ 4ca:	75 e4                	jne    4b0 <printint+0x80>
+    putc(fd, buf[i]);
+}
+ 4cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4cf:	5b                   	pop    %ebx
+ 4d0:	5e                   	pop    %esi
+ 4d1:	5f                   	pop    %edi
+ 4d2:	5d                   	pop    %ebp
+ 4d3:	c3                   	ret    
+ 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4d8:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+ 4df:	e9 75 ff ff ff       	jmp    459 <printint+0x29>
+ 4e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4ef:	90                   	nop
+
+000004f0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4f0:	55                   	push   %ebp
+ 4f1:	89 e5                	mov    %esp,%ebp
+ 4f3:	57                   	push   %edi
+ 4f4:	56                   	push   %esi
+ 4f5:	53                   	push   %ebx
+ 4f6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4f9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4fc:	0f b6 1e             	movzbl (%esi),%ebx
+ 4ff:	84 db                	test   %bl,%bl
+ 501:	0f 84 b9 00 00 00    	je     5c0 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+ 507:	8d 45 10             	lea    0x10(%ebp),%eax
+ 50a:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 50d:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 510:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 512:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 515:	eb 38                	jmp    54f <printf+0x5f>
+ 517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51e:	66 90                	xchg   %ax,%ax
+ 520:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 523:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 528:	83 f8 25             	cmp    $0x25,%eax
+ 52b:	74 17                	je     544 <printf+0x54>
+  write(fd, &c, 1);
+ 52d:	83 ec 04             	sub    $0x4,%esp
+ 530:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 533:	6a 01                	push   $0x1
+ 535:	57                   	push   %edi
+ 536:	ff 75 08             	pushl  0x8(%ebp)
+ 539:	e8 63 fe ff ff       	call   3a1 <write>
+ 53e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 541:	83 c4 10             	add    $0x10,%esp
+ 544:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 547:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 54b:	84 db                	test   %bl,%bl
+ 54d:	74 71                	je     5c0 <printf+0xd0>
+    c = fmt[i] & 0xff;
+ 54f:	0f be cb             	movsbl %bl,%ecx
+ 552:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 555:	85 d2                	test   %edx,%edx
+ 557:	74 c7                	je     520 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 559:	83 fa 25             	cmp    $0x25,%edx
+ 55c:	75 e6                	jne    544 <printf+0x54>
+      if(c == 'd'){
+ 55e:	83 f8 64             	cmp    $0x64,%eax
+ 561:	0f 84 99 00 00 00    	je     600 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 567:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 56d:	83 f9 70             	cmp    $0x70,%ecx
+ 570:	74 5e                	je     5d0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 572:	83 f8 73             	cmp    $0x73,%eax
+ 575:	0f 84 d5 00 00 00    	je     650 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 57b:	83 f8 63             	cmp    $0x63,%eax
+ 57e:	0f 84 8c 00 00 00    	je     610 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 584:	83 f8 25             	cmp    $0x25,%eax
+ 587:	0f 84 b3 00 00 00    	je     640 <printf+0x150>
+  write(fd, &c, 1);
+ 58d:	83 ec 04             	sub    $0x4,%esp
+ 590:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 594:	6a 01                	push   $0x1
+ 596:	57                   	push   %edi
+ 597:	ff 75 08             	pushl  0x8(%ebp)
+ 59a:	e8 02 fe ff ff       	call   3a1 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 59f:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5a2:	83 c4 0c             	add    $0xc,%esp
+ 5a5:	6a 01                	push   $0x1
+ 5a7:	83 c6 01             	add    $0x1,%esi
+ 5aa:	57                   	push   %edi
+ 5ab:	ff 75 08             	pushl  0x8(%ebp)
+ 5ae:	e8 ee fd ff ff       	call   3a1 <write>
+  for(i = 0; fmt[i]; i++){
+ 5b3:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 5b7:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5ba:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 5bc:	84 db                	test   %bl,%bl
+ 5be:	75 8f                	jne    54f <printf+0x5f>
+    }
+  }
+}
+ 5c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5c3:	5b                   	pop    %ebx
+ 5c4:	5e                   	pop    %esi
+ 5c5:	5f                   	pop    %edi
+ 5c6:	5d                   	pop    %ebp
+ 5c7:	c3                   	ret    
+ 5c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5cf:	90                   	nop
+        printint(fd, *ap, 16, 0);
+ 5d0:	83 ec 0c             	sub    $0xc,%esp
+ 5d3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5d8:	6a 00                	push   $0x0
+ 5da:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5dd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5e0:	8b 13                	mov    (%ebx),%edx
+ 5e2:	e8 49 fe ff ff       	call   430 <printint>
+        ap++;
+ 5e7:	89 d8                	mov    %ebx,%eax
+ 5e9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5ec:	31 d2                	xor    %edx,%edx
+        ap++;
+ 5ee:	83 c0 04             	add    $0x4,%eax
+ 5f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5f4:	e9 4b ff ff ff       	jmp    544 <printf+0x54>
+ 5f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 600:	83 ec 0c             	sub    $0xc,%esp
+ 603:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 608:	6a 01                	push   $0x1
+ 60a:	eb ce                	jmp    5da <printf+0xea>
+ 60c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 610:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 613:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 616:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 618:	6a 01                	push   $0x1
+        ap++;
+ 61a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 61d:	57                   	push   %edi
+ 61e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 621:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 624:	e8 78 fd ff ff       	call   3a1 <write>
+        ap++;
+ 629:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 62c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 62f:	31 d2                	xor    %edx,%edx
+ 631:	e9 0e ff ff ff       	jmp    544 <printf+0x54>
+ 636:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 63d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 640:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 643:	83 ec 04             	sub    $0x4,%esp
+ 646:	e9 5a ff ff ff       	jmp    5a5 <printf+0xb5>
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+        s = (char*)*ap;
+ 650:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 653:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 655:	83 c0 04             	add    $0x4,%eax
+ 658:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 65b:	85 db                	test   %ebx,%ebx
+ 65d:	74 17                	je     676 <printf+0x186>
+        while(*s != 0){
+ 65f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 662:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 664:	84 c0                	test   %al,%al
+ 666:	0f 84 d8 fe ff ff    	je     544 <printf+0x54>
+ 66c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 66f:	89 de                	mov    %ebx,%esi
+ 671:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 674:	eb 1a                	jmp    690 <printf+0x1a0>
+          s = "(null)";
+ 676:	bb 83 08 00 00       	mov    $0x883,%ebx
+        while(*s != 0){
+ 67b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 67e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 683:	89 de                	mov    %ebx,%esi
+ 685:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 688:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 68f:	90                   	nop
+  write(fd, &c, 1);
+ 690:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 693:	83 c6 01             	add    $0x1,%esi
+ 696:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 699:	6a 01                	push   $0x1
+ 69b:	57                   	push   %edi
+ 69c:	53                   	push   %ebx
+ 69d:	e8 ff fc ff ff       	call   3a1 <write>
+        while(*s != 0){
+ 6a2:	0f b6 06             	movzbl (%esi),%eax
+ 6a5:	83 c4 10             	add    $0x10,%esp
+ 6a8:	84 c0                	test   %al,%al
+ 6aa:	75 e4                	jne    690 <printf+0x1a0>
+ 6ac:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 6af:	31 d2                	xor    %edx,%edx
+ 6b1:	e9 8e fe ff ff       	jmp    544 <printf+0x54>
+ 6b6:	66 90                	xchg   %ax,%ax
+ 6b8:	66 90                	xchg   %ax,%ax
+ 6ba:	66 90                	xchg   %ax,%ax
+ 6bc:	66 90                	xchg   %ax,%ax
+ 6be:	66 90                	xchg   %ax,%ax
+
+000006c0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6c0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6c1:	a1 40 0b 00 00       	mov    0xb40,%eax
+{
+ 6c6:	89 e5                	mov    %esp,%ebp
+ 6c8:	57                   	push   %edi
+ 6c9:	56                   	push   %esi
+ 6ca:	53                   	push   %ebx
+ 6cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6ce:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 6d0:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6d3:	39 c8                	cmp    %ecx,%eax
+ 6d5:	73 19                	jae    6f0 <free+0x30>
+ 6d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6de:	66 90                	xchg   %ax,%ax
+ 6e0:	39 d1                	cmp    %edx,%ecx
+ 6e2:	72 14                	jb     6f8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6e4:	39 d0                	cmp    %edx,%eax
+ 6e6:	73 10                	jae    6f8 <free+0x38>
+{
+ 6e8:	89 d0                	mov    %edx,%eax
+ 6ea:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ec:	39 c8                	cmp    %ecx,%eax
+ 6ee:	72 f0                	jb     6e0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6f0:	39 d0                	cmp    %edx,%eax
+ 6f2:	72 f4                	jb     6e8 <free+0x28>
+ 6f4:	39 d1                	cmp    %edx,%ecx
+ 6f6:	73 f0                	jae    6e8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6fe:	39 fa                	cmp    %edi,%edx
+ 700:	74 1e                	je     720 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 702:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 705:	8b 50 04             	mov    0x4(%eax),%edx
+ 708:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 70b:	39 f1                	cmp    %esi,%ecx
+ 70d:	74 28                	je     737 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 70f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 711:	5b                   	pop    %ebx
+  freep = p;
+ 712:	a3 40 0b 00 00       	mov    %eax,0xb40
+}
+ 717:	5e                   	pop    %esi
+ 718:	5f                   	pop    %edi
+ 719:	5d                   	pop    %ebp
+ 71a:	c3                   	ret    
+ 71b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 71f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 720:	03 72 04             	add    0x4(%edx),%esi
+ 723:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 726:	8b 10                	mov    (%eax),%edx
+ 728:	8b 12                	mov    (%edx),%edx
+ 72a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 72d:	8b 50 04             	mov    0x4(%eax),%edx
+ 730:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 733:	39 f1                	cmp    %esi,%ecx
+ 735:	75 d8                	jne    70f <free+0x4f>
+    p->s.size += bp->s.size;
+ 737:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 73a:	a3 40 0b 00 00       	mov    %eax,0xb40
+    p->s.size += bp->s.size;
+ 73f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 742:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 745:	89 10                	mov    %edx,(%eax)
+}
+ 747:	5b                   	pop    %ebx
+ 748:	5e                   	pop    %esi
+ 749:	5f                   	pop    %edi
+ 74a:	5d                   	pop    %ebp
+ 74b:	c3                   	ret    
+ 74c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000750 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 750:	55                   	push   %ebp
+ 751:	89 e5                	mov    %esp,%ebp
+ 753:	57                   	push   %edi
+ 754:	56                   	push   %esi
+ 755:	53                   	push   %ebx
+ 756:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 759:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 75c:	8b 3d 40 0b 00 00    	mov    0xb40,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 762:	8d 70 07             	lea    0x7(%eax),%esi
+ 765:	c1 ee 03             	shr    $0x3,%esi
+ 768:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 76b:	85 ff                	test   %edi,%edi
+ 76d:	0f 84 ad 00 00 00    	je     820 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 773:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 775:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 778:	39 f1                	cmp    %esi,%ecx
+ 77a:	73 72                	jae    7ee <malloc+0x9e>
+ 77c:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 782:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 787:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 78a:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 791:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 794:	eb 1b                	jmp    7b1 <malloc+0x61>
+ 796:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 79d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a0:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 7a2:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7a5:	39 f1                	cmp    %esi,%ecx
+ 7a7:	73 4f                	jae    7f8 <malloc+0xa8>
+ 7a9:	8b 3d 40 0b 00 00    	mov    0xb40,%edi
+ 7af:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7b1:	39 d7                	cmp    %edx,%edi
+ 7b3:	75 eb                	jne    7a0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 7b5:	83 ec 0c             	sub    $0xc,%esp
+ 7b8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7bb:	e8 49 fc ff ff       	call   409 <sbrk>
+  if(p == (char*)-1)
+ 7c0:	83 c4 10             	add    $0x10,%esp
+ 7c3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7c6:	74 1c                	je     7e4 <malloc+0x94>
+  hp->s.size = nu;
+ 7c8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7cb:	83 ec 0c             	sub    $0xc,%esp
+ 7ce:	83 c0 08             	add    $0x8,%eax
+ 7d1:	50                   	push   %eax
+ 7d2:	e8 e9 fe ff ff       	call   6c0 <free>
+  return freep;
+ 7d7:	8b 15 40 0b 00 00    	mov    0xb40,%edx
+      if((p = morecore(nunits)) == 0)
+ 7dd:	83 c4 10             	add    $0x10,%esp
+ 7e0:	85 d2                	test   %edx,%edx
+ 7e2:	75 bc                	jne    7a0 <malloc+0x50>
+        return 0;
+  }
+}
+ 7e4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7e7:	31 c0                	xor    %eax,%eax
+}
+ 7e9:	5b                   	pop    %ebx
+ 7ea:	5e                   	pop    %esi
+ 7eb:	5f                   	pop    %edi
+ 7ec:	5d                   	pop    %ebp
+ 7ed:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7ee:	89 d0                	mov    %edx,%eax
+ 7f0:	89 fa                	mov    %edi,%edx
+ 7f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 7f8:	39 ce                	cmp    %ecx,%esi
+ 7fa:	74 54                	je     850 <malloc+0x100>
+        p->s.size -= nunits;
+ 7fc:	29 f1                	sub    %esi,%ecx
+ 7fe:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 801:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 804:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 807:	89 15 40 0b 00 00    	mov    %edx,0xb40
+}
+ 80d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 810:	83 c0 08             	add    $0x8,%eax
+}
+ 813:	5b                   	pop    %ebx
+ 814:	5e                   	pop    %esi
+ 815:	5f                   	pop    %edi
+ 816:	5d                   	pop    %ebp
+ 817:	c3                   	ret    
+ 818:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 81f:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+ 820:	c7 05 40 0b 00 00 44 	movl   $0xb44,0xb40
+ 827:	0b 00 00 
+    base.s.size = 0;
+ 82a:	bf 44 0b 00 00       	mov    $0xb44,%edi
+    base.s.ptr = freep = prevp = &base;
+ 82f:	c7 05 44 0b 00 00 44 	movl   $0xb44,0xb44
+ 836:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 839:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 83b:	c7 05 48 0b 00 00 00 	movl   $0x0,0xb48
+ 842:	00 00 00 
+    if(p->s.size >= nunits){
+ 845:	e9 32 ff ff ff       	jmp    77c <malloc+0x2c>
+ 84a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 850:	8b 08                	mov    (%eax),%ecx
+ 852:	89 0a                	mov    %ecx,(%edx)
+ 854:	eb b1                	jmp    807 <malloc+0xb7>
diff -urN xv6-public/nhead.c xv6-public-new/nhead.c
--- xv6-public/nhead.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/nhead.c	2019-10-04 16:22:54.960622842 +0530
@@ -0,0 +1,45 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+    char buff1[512];
+    //gets(buff,512);
+    int fd,count = 0,n,max = 10;
+    if((fd = open(argv[1], 0)) < 0){
+      printf(1, "head: cannot open %s\n", argv[1]);
+      exit();
+    }
+    if(argc == 3)
+    {
+        max = atoi(argv[2]);
+    }
+    //printf(1,"%s\n", buff);
+    while((n = read(fd, buff1, sizeof(buff1))) > 0) {
+        int i;
+     for(i = 0;i < sizeof(buff1);i++)
+     {
+        if(buff1[i] == '\n')
+        {
+            count++;
+        }
+        if(count < max)
+        {
+            printf(1,"%c",buff1[i]);
+        }
+        else
+        {
+            break;
+        }
+     }
+ }
+     printf(1,"\n");
+    if(n < 0){
+    printf(1, "head: read error\n");
+    exit();
+  }
+    close(fd);
+    exit();
+}
\ No newline at end of file
diff -urN xv6-public/nhead.d xv6-public-new/nhead.d
--- xv6-public/nhead.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/nhead.d	2019-10-04 16:23:07.372623434 +0530
@@ -0,0 +1 @@
+nhead.o: nhead.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/nhead.o and xv6-public-new/nhead.o differ
diff -urN xv6-public/nhead.sym xv6-public-new/nhead.sym
--- xv6-public/nhead.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/nhead.sym	2019-10-04 16:23:07.392623435 +0530
@@ -0,0 +1,57 @@
+00000000 .text
+00000858 .rodata
+000008a0 .eh_frame
+00000b40 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 nhead.c
+00000000 ulib.c
+00000000 printf.c
+00000430 printint
+0000088c digits.1101
+00000000 umalloc.c
+00000b40 freep
+00000b44 base
+00000130 strcpy
+000004f0 printf
+00000350 memmove
+000003c9 mknod
+00000240 gets
+00000401 getpid
+00000750 malloc
+00000411 sleep
+00000391 pipe
+000003a1 write
+000003d9 fstat
+000003b1 kill
+000003f1 chdir
+000003b9 exec
+00000389 wait
+00000399 read
+000003d1 unlink
+00000379 fork
+00000409 sbrk
+00000419 uptime
+00000b40 __bss_start
+000001e0 memset
+00000000 main
+00000160 strcmp
+000003f9 dup
+000002c0 stat
+00000b40 _edata
+00000b4c _end
+000003e1 link
+00000381 exit
+00000310 atoi
+000001b0 strlen
+000003c1 open
+00000200 strchr
+000003e9 mkdir
+000003a9 close
+000006c0 free
diff -urN xv6-public/picirq.d xv6-public-new/picirq.d
--- xv6-public/picirq.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/picirq.d	2019-10-04 10:45:50.156028952 +0530
@@ -0,0 +1 @@
+picirq.o: picirq.c /usr/include/stdc-predef.h types.h x86.h traps.h
Binary files xv6-public/picirq.o and xv6-public-new/picirq.o differ
diff -urN xv6-public/pipe.d xv6-public-new/pipe.d
--- xv6-public/pipe.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/pipe.d	2019-10-04 10:45:50.200028954 +0530
@@ -0,0 +1,2 @@
+pipe.o: pipe.c /usr/include/stdc-predef.h types.h defs.h param.h mmu.h \
+ proc.h fs.h spinlock.h sleeplock.h file.h
Binary files xv6-public/pipe.o and xv6-public-new/pipe.o differ
diff -urN xv6-public/printf.d xv6-public-new/printf.d
--- xv6-public/printf.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/printf.d	2019-10-04 10:45:48.400028868 +0530
@@ -0,0 +1 @@
+printf.o: printf.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/printf.o and xv6-public-new/printf.o differ
diff -urN xv6-public/proc.d xv6-public-new/proc.d
--- xv6-public/proc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/proc.d	2019-10-04 10:45:50.304028959 +0530
@@ -0,0 +1,2 @@
+proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h x86.h proc.h spinlock.h
Binary files xv6-public/proc.o and xv6-public-new/proc.o differ
Binary files xv6-public/_rm and xv6-public-new/_rm differ
diff -urN xv6-public/rm.asm xv6-public-new/rm.asm
--- xv6-public/rm.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/rm.asm	2019-10-04 10:45:48.828028889 +0530
@@ -0,0 +1,1209 @@
+
+_rm:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	bf 01 00 00 00       	mov    $0x1,%edi
+  13:	56                   	push   %esi
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1c:	8b 31                	mov    (%ecx),%esi
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  21:	83 fe 01             	cmp    $0x1,%esi
+  24:	7e 3e                	jle    64 <main+0x64>
+  26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  2d:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(2, "Usage: rm files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(unlink(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	e8 e7 02 00 00       	call   321 <unlink>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 81 02 00 00       	call   2d1 <exit>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	pushl  (%ebx)
+  53:	68 bc 07 00 00       	push   $0x7bc
+  58:	6a 02                	push   $0x2
+  5a:	e8 e1 03 00 00       	call   440 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: rm files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 a8 07 00 00       	push   $0x7a8
+  6b:	6a 02                	push   $0x2
+  6d:	e8 ce 03 00 00       	call   440 <printf>
+    exit();
+  72:	e8 5a 02 00 00       	call   2d1 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  81:	31 d2                	xor    %edx,%edx
+{
+  83:	89 e5                	mov    %esp,%ebp
+  85:	53                   	push   %ebx
+  86:	8b 45 08             	mov    0x8(%ebp),%eax
+  89:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  90:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+  94:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+  97:	83 c2 01             	add    $0x1,%edx
+  9a:	84 c9                	test   %cl,%cl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	5b                   	pop    %ebx
+  9f:	5d                   	pop    %ebp
+  a0:	c3                   	ret    
+  a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  af:	90                   	nop
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	56                   	push   %esi
+  b4:	53                   	push   %ebx
+  b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  b8:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+  bb:	0f b6 13             	movzbl (%ebx),%edx
+  be:	0f b6 0e             	movzbl (%esi),%ecx
+  c1:	84 d2                	test   %dl,%dl
+  c3:	74 1e                	je     e3 <strcmp+0x33>
+  c5:	b8 01 00 00 00       	mov    $0x1,%eax
+  ca:	38 ca                	cmp    %cl,%dl
+  cc:	74 09                	je     d7 <strcmp+0x27>
+  ce:	eb 20                	jmp    f0 <strcmp+0x40>
+  d0:	83 c0 01             	add    $0x1,%eax
+  d3:	38 ca                	cmp    %cl,%dl
+  d5:	75 19                	jne    f0 <strcmp+0x40>
+  d7:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  db:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+  df:	84 d2                	test   %dl,%dl
+  e1:	75 ed                	jne    d0 <strcmp+0x20>
+  e3:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+  e5:	5b                   	pop    %ebx
+  e6:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+  e7:	29 c8                	sub    %ecx,%eax
+}
+  e9:	5d                   	pop    %ebp
+  ea:	c3                   	ret    
+  eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  ef:	90                   	nop
+  f0:	0f b6 c2             	movzbl %dl,%eax
+  f3:	5b                   	pop    %ebx
+  f4:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+  f5:	29 c8                	sub    %ecx,%eax
+}
+  f7:	5d                   	pop    %ebp
+  f8:	c3                   	ret    
+  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 106:	80 39 00             	cmpb   $0x0,(%ecx)
+ 109:	74 15                	je     120 <strlen+0x20>
+ 10b:	31 d2                	xor    %edx,%edx
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+ 110:	83 c2 01             	add    $0x1,%edx
+ 113:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 117:	89 d0                	mov    %edx,%eax
+ 119:	75 f5                	jne    110 <strlen+0x10>
+    ;
+  return n;
+}
+ 11b:	5d                   	pop    %ebp
+ 11c:	c3                   	ret    
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 120:	31 c0                	xor    %eax,%eax
+}
+ 122:	5d                   	pop    %ebp
+ 123:	c3                   	ret    
+ 124:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 12f:	90                   	nop
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	57                   	push   %edi
+ 134:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 137:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 13d:	89 d7                	mov    %edx,%edi
+ 13f:	fc                   	cld    
+ 140:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 142:	89 d0                	mov    %edx,%eax
+ 144:	5f                   	pop    %edi
+ 145:	5d                   	pop    %ebp
+ 146:	c3                   	ret    
+ 147:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 14e:	66 90                	xchg   %ax,%ax
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 45 08             	mov    0x8(%ebp),%eax
+ 157:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 15a:	0f b6 18             	movzbl (%eax),%ebx
+ 15d:	84 db                	test   %bl,%bl
+ 15f:	74 1d                	je     17e <strchr+0x2e>
+ 161:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 163:	38 d3                	cmp    %dl,%bl
+ 165:	75 0d                	jne    174 <strchr+0x24>
+ 167:	eb 17                	jmp    180 <strchr+0x30>
+ 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 170:	38 ca                	cmp    %cl,%dl
+ 172:	74 0c                	je     180 <strchr+0x30>
+  for(; *s; s++)
+ 174:	83 c0 01             	add    $0x1,%eax
+ 177:	0f b6 10             	movzbl (%eax),%edx
+ 17a:	84 d2                	test   %dl,%dl
+ 17c:	75 f2                	jne    170 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 17e:	31 c0                	xor    %eax,%eax
+}
+ 180:	5b                   	pop    %ebx
+ 181:	5d                   	pop    %ebp
+ 182:	c3                   	ret    
+ 183:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 18a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	57                   	push   %edi
+ 194:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 195:	31 f6                	xor    %esi,%esi
+{
+ 197:	53                   	push   %ebx
+ 198:	89 f3                	mov    %esi,%ebx
+ 19a:	83 ec 1c             	sub    $0x1c,%esp
+ 19d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1a0:	eb 2f                	jmp    1d1 <gets+0x41>
+ 1a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1a8:	83 ec 04             	sub    $0x4,%esp
+ 1ab:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1ae:	6a 01                	push   $0x1
+ 1b0:	50                   	push   %eax
+ 1b1:	6a 00                	push   $0x0
+ 1b3:	e8 31 01 00 00       	call   2e9 <read>
+    if(cc < 1)
+ 1b8:	83 c4 10             	add    $0x10,%esp
+ 1bb:	85 c0                	test   %eax,%eax
+ 1bd:	7e 1c                	jle    1db <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 1bf:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1c3:	83 c7 01             	add    $0x1,%edi
+ 1c6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1c9:	3c 0a                	cmp    $0xa,%al
+ 1cb:	74 23                	je     1f0 <gets+0x60>
+ 1cd:	3c 0d                	cmp    $0xd,%al
+ 1cf:	74 1f                	je     1f0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 1d1:	83 c3 01             	add    $0x1,%ebx
+ 1d4:	89 fe                	mov    %edi,%esi
+ 1d6:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1d9:	7c cd                	jl     1a8 <gets+0x18>
+ 1db:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1e0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1e6:	5b                   	pop    %ebx
+ 1e7:	5e                   	pop    %esi
+ 1e8:	5f                   	pop    %edi
+ 1e9:	5d                   	pop    %ebp
+ 1ea:	c3                   	ret    
+ 1eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1ef:	90                   	nop
+ 1f0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1f3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f6:	01 de                	add    %ebx,%esi
+ 1f8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1fa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 200:	5b                   	pop    %ebx
+ 201:	5e                   	pop    %esi
+ 202:	5f                   	pop    %edi
+ 203:	5d                   	pop    %ebp
+ 204:	c3                   	ret    
+ 205:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	56                   	push   %esi
+ 214:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 215:	83 ec 08             	sub    $0x8,%esp
+ 218:	6a 00                	push   $0x0
+ 21a:	ff 75 08             	pushl  0x8(%ebp)
+ 21d:	e8 ef 00 00 00       	call   311 <open>
+  if(fd < 0)
+ 222:	83 c4 10             	add    $0x10,%esp
+ 225:	85 c0                	test   %eax,%eax
+ 227:	78 27                	js     250 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	ff 75 0c             	pushl  0xc(%ebp)
+ 22f:	89 c3                	mov    %eax,%ebx
+ 231:	50                   	push   %eax
+ 232:	e8 f2 00 00 00       	call   329 <fstat>
+  close(fd);
+ 237:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 23a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 23c:	e8 b8 00 00 00       	call   2f9 <close>
+  return r;
+ 241:	83 c4 10             	add    $0x10,%esp
+}
+ 244:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 247:	89 f0                	mov    %esi,%eax
+ 249:	5b                   	pop    %ebx
+ 24a:	5e                   	pop    %esi
+ 24b:	5d                   	pop    %ebp
+ 24c:	c3                   	ret    
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 250:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 255:	eb ed                	jmp    244 <stat+0x34>
+ 257:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25e:	66 90                	xchg   %ax,%ax
+
+00000260 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	53                   	push   %ebx
+ 264:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 267:	0f be 11             	movsbl (%ecx),%edx
+ 26a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 26d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 26f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 274:	77 1f                	ja     295 <atoi+0x35>
+ 276:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27d:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 280:	83 c1 01             	add    $0x1,%ecx
+ 283:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 286:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 28a:	0f be 11             	movsbl (%ecx),%edx
+ 28d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 290:	80 fb 09             	cmp    $0x9,%bl
+ 293:	76 eb                	jbe    280 <atoi+0x20>
+  return n;
+}
+ 295:	5b                   	pop    %ebx
+ 296:	5d                   	pop    %ebp
+ 297:	c3                   	ret    
+ 298:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29f:	90                   	nop
+
+000002a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	57                   	push   %edi
+ 2a4:	8b 55 10             	mov    0x10(%ebp),%edx
+ 2a7:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2aa:	56                   	push   %esi
+ 2ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2ae:	85 d2                	test   %edx,%edx
+ 2b0:	7e 13                	jle    2c5 <memmove+0x25>
+ 2b2:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 2b4:	89 c7                	mov    %eax,%edi
+ 2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2c1:	39 fa                	cmp    %edi,%edx
+ 2c3:	75 fb                	jne    2c0 <memmove+0x20>
+  return vdst;
+}
+ 2c5:	5e                   	pop    %esi
+ 2c6:	5f                   	pop    %edi
+ 2c7:	5d                   	pop    %ebp
+ 2c8:	c3                   	ret    
+
+000002c9 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2c9:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2ce:	cd 40                	int    $0x40
+ 2d0:	c3                   	ret    
+
+000002d1 <exit>:
+SYSCALL(exit)
+ 2d1:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d6:	cd 40                	int    $0x40
+ 2d8:	c3                   	ret    
+
+000002d9 <wait>:
+SYSCALL(wait)
+ 2d9:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2de:	cd 40                	int    $0x40
+ 2e0:	c3                   	ret    
+
+000002e1 <pipe>:
+SYSCALL(pipe)
+ 2e1:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e6:	cd 40                	int    $0x40
+ 2e8:	c3                   	ret    
+
+000002e9 <read>:
+SYSCALL(read)
+ 2e9:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2ee:	cd 40                	int    $0x40
+ 2f0:	c3                   	ret    
+
+000002f1 <write>:
+SYSCALL(write)
+ 2f1:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f6:	cd 40                	int    $0x40
+ 2f8:	c3                   	ret    
+
+000002f9 <close>:
+SYSCALL(close)
+ 2f9:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2fe:	cd 40                	int    $0x40
+ 300:	c3                   	ret    
+
+00000301 <kill>:
+SYSCALL(kill)
+ 301:	b8 06 00 00 00       	mov    $0x6,%eax
+ 306:	cd 40                	int    $0x40
+ 308:	c3                   	ret    
+
+00000309 <exec>:
+SYSCALL(exec)
+ 309:	b8 07 00 00 00       	mov    $0x7,%eax
+ 30e:	cd 40                	int    $0x40
+ 310:	c3                   	ret    
+
+00000311 <open>:
+SYSCALL(open)
+ 311:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 316:	cd 40                	int    $0x40
+ 318:	c3                   	ret    
+
+00000319 <mknod>:
+SYSCALL(mknod)
+ 319:	b8 11 00 00 00       	mov    $0x11,%eax
+ 31e:	cd 40                	int    $0x40
+ 320:	c3                   	ret    
+
+00000321 <unlink>:
+SYSCALL(unlink)
+ 321:	b8 12 00 00 00       	mov    $0x12,%eax
+ 326:	cd 40                	int    $0x40
+ 328:	c3                   	ret    
+
+00000329 <fstat>:
+SYSCALL(fstat)
+ 329:	b8 08 00 00 00       	mov    $0x8,%eax
+ 32e:	cd 40                	int    $0x40
+ 330:	c3                   	ret    
+
+00000331 <link>:
+SYSCALL(link)
+ 331:	b8 13 00 00 00       	mov    $0x13,%eax
+ 336:	cd 40                	int    $0x40
+ 338:	c3                   	ret    
+
+00000339 <mkdir>:
+SYSCALL(mkdir)
+ 339:	b8 14 00 00 00       	mov    $0x14,%eax
+ 33e:	cd 40                	int    $0x40
+ 340:	c3                   	ret    
+
+00000341 <chdir>:
+SYSCALL(chdir)
+ 341:	b8 09 00 00 00       	mov    $0x9,%eax
+ 346:	cd 40                	int    $0x40
+ 348:	c3                   	ret    
+
+00000349 <dup>:
+SYSCALL(dup)
+ 349:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 34e:	cd 40                	int    $0x40
+ 350:	c3                   	ret    
+
+00000351 <getpid>:
+SYSCALL(getpid)
+ 351:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 356:	cd 40                	int    $0x40
+ 358:	c3                   	ret    
+
+00000359 <sbrk>:
+SYSCALL(sbrk)
+ 359:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 35e:	cd 40                	int    $0x40
+ 360:	c3                   	ret    
+
+00000361 <sleep>:
+SYSCALL(sleep)
+ 361:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 366:	cd 40                	int    $0x40
+ 368:	c3                   	ret    
+
+00000369 <uptime>:
+SYSCALL(uptime)
+ 369:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 36e:	cd 40                	int    $0x40
+ 370:	c3                   	ret    
+ 371:	66 90                	xchg   %ax,%ax
+ 373:	66 90                	xchg   %ax,%ax
+ 375:	66 90                	xchg   %ax,%ax
+ 377:	66 90                	xchg   %ax,%ax
+ 379:	66 90                	xchg   %ax,%ax
+ 37b:	66 90                	xchg   %ax,%ax
+ 37d:	66 90                	xchg   %ax,%ax
+ 37f:	90                   	nop
+
+00000380 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 386:	89 d3                	mov    %edx,%ebx
+{
+ 388:	83 ec 3c             	sub    $0x3c,%esp
+ 38b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+ 38e:	85 d2                	test   %edx,%edx
+ 390:	0f 89 92 00 00 00    	jns    428 <printint+0xa8>
+ 396:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 39a:	0f 84 88 00 00 00    	je     428 <printint+0xa8>
+    neg = 1;
+ 3a0:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+ 3a7:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3a9:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3b0:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3b3:	eb 08                	jmp    3bd <printint+0x3d>
+ 3b5:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3b8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+ 3bb:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+ 3bd:	89 d8                	mov    %ebx,%eax
+ 3bf:	31 d2                	xor    %edx,%edx
+ 3c1:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 3c4:	f7 f1                	div    %ecx
+ 3c6:	83 c7 01             	add    $0x1,%edi
+ 3c9:	0f b6 92 dc 07 00 00 	movzbl 0x7dc(%edx),%edx
+ 3d0:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+ 3d3:	39 d9                	cmp    %ebx,%ecx
+ 3d5:	76 e1                	jbe    3b8 <printint+0x38>
+  if(neg)
+ 3d7:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 3da:	85 c0                	test   %eax,%eax
+ 3dc:	74 0d                	je     3eb <printint+0x6b>
+    buf[i++] = '-';
+ 3de:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 3e3:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+ 3e8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 3eb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3ee:	8b 7d bc             	mov    -0x44(%ebp),%edi
+ 3f1:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3f5:	eb 0f                	jmp    406 <printint+0x86>
+ 3f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fe:	66 90                	xchg   %ax,%ax
+ 400:	0f b6 13             	movzbl (%ebx),%edx
+ 403:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 406:	83 ec 04             	sub    $0x4,%esp
+ 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 40c:	6a 01                	push   $0x1
+ 40e:	56                   	push   %esi
+ 40f:	57                   	push   %edi
+ 410:	e8 dc fe ff ff       	call   2f1 <write>
+
+  while(--i >= 0)
+ 415:	83 c4 10             	add    $0x10,%esp
+ 418:	39 de                	cmp    %ebx,%esi
+ 41a:	75 e4                	jne    400 <printint+0x80>
+    putc(fd, buf[i]);
+}
+ 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 41f:	5b                   	pop    %ebx
+ 420:	5e                   	pop    %esi
+ 421:	5f                   	pop    %edi
+ 422:	5d                   	pop    %ebp
+ 423:	c3                   	ret    
+ 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 428:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+ 42f:	e9 75 ff ff ff       	jmp    3a9 <printint+0x29>
+ 434:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 43f:	90                   	nop
+
+00000440 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+ 446:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 449:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 44c:	0f b6 1e             	movzbl (%esi),%ebx
+ 44f:	84 db                	test   %bl,%bl
+ 451:	0f 84 b9 00 00 00    	je     510 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+ 457:	8d 45 10             	lea    0x10(%ebp),%eax
+ 45a:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 45d:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 460:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 462:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 465:	eb 38                	jmp    49f <printf+0x5f>
+ 467:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 46e:	66 90                	xchg   %ax,%ax
+ 470:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 473:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 478:	83 f8 25             	cmp    $0x25,%eax
+ 47b:	74 17                	je     494 <printf+0x54>
+  write(fd, &c, 1);
+ 47d:	83 ec 04             	sub    $0x4,%esp
+ 480:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 483:	6a 01                	push   $0x1
+ 485:	57                   	push   %edi
+ 486:	ff 75 08             	pushl  0x8(%ebp)
+ 489:	e8 63 fe ff ff       	call   2f1 <write>
+ 48e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 491:	83 c4 10             	add    $0x10,%esp
+ 494:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 497:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 49b:	84 db                	test   %bl,%bl
+ 49d:	74 71                	je     510 <printf+0xd0>
+    c = fmt[i] & 0xff;
+ 49f:	0f be cb             	movsbl %bl,%ecx
+ 4a2:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4a5:	85 d2                	test   %edx,%edx
+ 4a7:	74 c7                	je     470 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4a9:	83 fa 25             	cmp    $0x25,%edx
+ 4ac:	75 e6                	jne    494 <printf+0x54>
+      if(c == 'd'){
+ 4ae:	83 f8 64             	cmp    $0x64,%eax
+ 4b1:	0f 84 99 00 00 00    	je     550 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4b7:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4bd:	83 f9 70             	cmp    $0x70,%ecx
+ 4c0:	74 5e                	je     520 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4c2:	83 f8 73             	cmp    $0x73,%eax
+ 4c5:	0f 84 d5 00 00 00    	je     5a0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4cb:	83 f8 63             	cmp    $0x63,%eax
+ 4ce:	0f 84 8c 00 00 00    	je     560 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4d4:	83 f8 25             	cmp    $0x25,%eax
+ 4d7:	0f 84 b3 00 00 00    	je     590 <printf+0x150>
+  write(fd, &c, 1);
+ 4dd:	83 ec 04             	sub    $0x4,%esp
+ 4e0:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4e4:	6a 01                	push   $0x1
+ 4e6:	57                   	push   %edi
+ 4e7:	ff 75 08             	pushl  0x8(%ebp)
+ 4ea:	e8 02 fe ff ff       	call   2f1 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4ef:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4f2:	83 c4 0c             	add    $0xc,%esp
+ 4f5:	6a 01                	push   $0x1
+ 4f7:	83 c6 01             	add    $0x1,%esi
+ 4fa:	57                   	push   %edi
+ 4fb:	ff 75 08             	pushl  0x8(%ebp)
+ 4fe:	e8 ee fd ff ff       	call   2f1 <write>
+  for(i = 0; fmt[i]; i++){
+ 503:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 507:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 50a:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 50c:	84 db                	test   %bl,%bl
+ 50e:	75 8f                	jne    49f <printf+0x5f>
+    }
+  }
+}
+ 510:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 513:	5b                   	pop    %ebx
+ 514:	5e                   	pop    %esi
+ 515:	5f                   	pop    %edi
+ 516:	5d                   	pop    %ebp
+ 517:	c3                   	ret    
+ 518:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51f:	90                   	nop
+        printint(fd, *ap, 16, 0);
+ 520:	83 ec 0c             	sub    $0xc,%esp
+ 523:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 528:	6a 00                	push   $0x0
+ 52a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 52d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 530:	8b 13                	mov    (%ebx),%edx
+ 532:	e8 49 fe ff ff       	call   380 <printint>
+        ap++;
+ 537:	89 d8                	mov    %ebx,%eax
+ 539:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 53c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 53e:	83 c0 04             	add    $0x4,%eax
+ 541:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 544:	e9 4b ff ff ff       	jmp    494 <printf+0x54>
+ 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 558:	6a 01                	push   $0x1
+ 55a:	eb ce                	jmp    52a <printf+0xea>
+ 55c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 560:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 563:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 566:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 568:	6a 01                	push   $0x1
+        ap++;
+ 56a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 56d:	57                   	push   %edi
+ 56e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 571:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 574:	e8 78 fd ff ff       	call   2f1 <write>
+        ap++;
+ 579:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 57c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 57f:	31 d2                	xor    %edx,%edx
+ 581:	e9 0e ff ff ff       	jmp    494 <printf+0x54>
+ 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 593:	83 ec 04             	sub    $0x4,%esp
+ 596:	e9 5a ff ff ff       	jmp    4f5 <printf+0xb5>
+ 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 59f:	90                   	nop
+        s = (char*)*ap;
+ 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5a3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5a5:	83 c0 04             	add    $0x4,%eax
+ 5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5ab:	85 db                	test   %ebx,%ebx
+ 5ad:	74 17                	je     5c6 <printf+0x186>
+        while(*s != 0){
+ 5af:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5b2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5b4:	84 c0                	test   %al,%al
+ 5b6:	0f 84 d8 fe ff ff    	je     494 <printf+0x54>
+ 5bc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5bf:	89 de                	mov    %ebx,%esi
+ 5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
+          s = "(null)";
+ 5c6:	bb d5 07 00 00       	mov    $0x7d5,%ebx
+        while(*s != 0){
+ 5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5d3:	89 de                	mov    %ebx,%esi
+ 5d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5df:	90                   	nop
+  write(fd, &c, 1);
+ 5e0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5e3:	83 c6 01             	add    $0x1,%esi
+ 5e6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5e9:	6a 01                	push   $0x1
+ 5eb:	57                   	push   %edi
+ 5ec:	53                   	push   %ebx
+ 5ed:	e8 ff fc ff ff       	call   2f1 <write>
+        while(*s != 0){
+ 5f2:	0f b6 06             	movzbl (%esi),%eax
+ 5f5:	83 c4 10             	add    $0x10,%esp
+ 5f8:	84 c0                	test   %al,%al
+ 5fa:	75 e4                	jne    5e0 <printf+0x1a0>
+ 5fc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5ff:	31 d2                	xor    %edx,%edx
+ 601:	e9 8e fe ff ff       	jmp    494 <printf+0x54>
+ 606:	66 90                	xchg   %ax,%ax
+ 608:	66 90                	xchg   %ax,%ax
+ 60a:	66 90                	xchg   %ax,%ax
+ 60c:	66 90                	xchg   %ax,%ax
+ 60e:	66 90                	xchg   %ax,%ax
+
+00000610 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 610:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 611:	a1 94 0a 00 00       	mov    0xa94,%eax
+{
+ 616:	89 e5                	mov    %esp,%ebp
+ 618:	57                   	push   %edi
+ 619:	56                   	push   %esi
+ 61a:	53                   	push   %ebx
+ 61b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 61e:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 620:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 623:	39 c8                	cmp    %ecx,%eax
+ 625:	73 19                	jae    640 <free+0x30>
+ 627:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 62e:	66 90                	xchg   %ax,%ax
+ 630:	39 d1                	cmp    %edx,%ecx
+ 632:	72 14                	jb     648 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 634:	39 d0                	cmp    %edx,%eax
+ 636:	73 10                	jae    648 <free+0x38>
+{
+ 638:	89 d0                	mov    %edx,%eax
+ 63a:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 63c:	39 c8                	cmp    %ecx,%eax
+ 63e:	72 f0                	jb     630 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 640:	39 d0                	cmp    %edx,%eax
+ 642:	72 f4                	jb     638 <free+0x28>
+ 644:	39 d1                	cmp    %edx,%ecx
+ 646:	73 f0                	jae    638 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64e:	39 fa                	cmp    %edi,%edx
+ 650:	74 1e                	je     670 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 652:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 655:	8b 50 04             	mov    0x4(%eax),%edx
+ 658:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 65b:	39 f1                	cmp    %esi,%ecx
+ 65d:	74 28                	je     687 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 65f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 661:	5b                   	pop    %ebx
+  freep = p;
+ 662:	a3 94 0a 00 00       	mov    %eax,0xa94
+}
+ 667:	5e                   	pop    %esi
+ 668:	5f                   	pop    %edi
+ 669:	5d                   	pop    %ebp
+ 66a:	c3                   	ret    
+ 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 66f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 670:	03 72 04             	add    0x4(%edx),%esi
+ 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 676:	8b 10                	mov    (%eax),%edx
+ 678:	8b 12                	mov    (%edx),%edx
+ 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 67d:	8b 50 04             	mov    0x4(%eax),%edx
+ 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 683:	39 f1                	cmp    %esi,%ecx
+ 685:	75 d8                	jne    65f <free+0x4f>
+    p->s.size += bp->s.size;
+ 687:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 68a:	a3 94 0a 00 00       	mov    %eax,0xa94
+    p->s.size += bp->s.size;
+ 68f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 695:	89 10                	mov    %edx,(%eax)
+}
+ 697:	5b                   	pop    %ebx
+ 698:	5e                   	pop    %esi
+ 699:	5f                   	pop    %edi
+ 69a:	5d                   	pop    %ebp
+ 69b:	c3                   	ret    
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006a0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6a0:	55                   	push   %ebp
+ 6a1:	89 e5                	mov    %esp,%ebp
+ 6a3:	57                   	push   %edi
+ 6a4:	56                   	push   %esi
+ 6a5:	53                   	push   %ebx
+ 6a6:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6ac:	8b 3d 94 0a 00 00    	mov    0xa94,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6b2:	8d 70 07             	lea    0x7(%eax),%esi
+ 6b5:	c1 ee 03             	shr    $0x3,%esi
+ 6b8:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6bb:	85 ff                	test   %edi,%edi
+ 6bd:	0f 84 ad 00 00 00    	je     770 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6c3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 6c5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6c8:	39 f1                	cmp    %esi,%ecx
+ 6ca:	73 72                	jae    73e <malloc+0x9e>
+ 6cc:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6d2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6d7:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6da:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6e4:	eb 1b                	jmp    701 <malloc+0x61>
+ 6e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6ed:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6f0:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6f2:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6f5:	39 f1                	cmp    %esi,%ecx
+ 6f7:	73 4f                	jae    748 <malloc+0xa8>
+ 6f9:	8b 3d 94 0a 00 00    	mov    0xa94,%edi
+ 6ff:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 701:	39 d7                	cmp    %edx,%edi
+ 703:	75 eb                	jne    6f0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 705:	83 ec 0c             	sub    $0xc,%esp
+ 708:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 70b:	e8 49 fc ff ff       	call   359 <sbrk>
+  if(p == (char*)-1)
+ 710:	83 c4 10             	add    $0x10,%esp
+ 713:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 716:	74 1c                	je     734 <malloc+0x94>
+  hp->s.size = nu;
+ 718:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 71b:	83 ec 0c             	sub    $0xc,%esp
+ 71e:	83 c0 08             	add    $0x8,%eax
+ 721:	50                   	push   %eax
+ 722:	e8 e9 fe ff ff       	call   610 <free>
+  return freep;
+ 727:	8b 15 94 0a 00 00    	mov    0xa94,%edx
+      if((p = morecore(nunits)) == 0)
+ 72d:	83 c4 10             	add    $0x10,%esp
+ 730:	85 d2                	test   %edx,%edx
+ 732:	75 bc                	jne    6f0 <malloc+0x50>
+        return 0;
+  }
+}
+ 734:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 737:	31 c0                	xor    %eax,%eax
+}
+ 739:	5b                   	pop    %ebx
+ 73a:	5e                   	pop    %esi
+ 73b:	5f                   	pop    %edi
+ 73c:	5d                   	pop    %ebp
+ 73d:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 73e:	89 d0                	mov    %edx,%eax
+ 740:	89 fa                	mov    %edi,%edx
+ 742:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 748:	39 ce                	cmp    %ecx,%esi
+ 74a:	74 54                	je     7a0 <malloc+0x100>
+        p->s.size -= nunits;
+ 74c:	29 f1                	sub    %esi,%ecx
+ 74e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 751:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 754:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 757:	89 15 94 0a 00 00    	mov    %edx,0xa94
+}
+ 75d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 760:	83 c0 08             	add    $0x8,%eax
+}
+ 763:	5b                   	pop    %ebx
+ 764:	5e                   	pop    %esi
+ 765:	5f                   	pop    %edi
+ 766:	5d                   	pop    %ebp
+ 767:	c3                   	ret    
+ 768:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 76f:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+ 770:	c7 05 94 0a 00 00 98 	movl   $0xa98,0xa94
+ 777:	0a 00 00 
+    base.s.size = 0;
+ 77a:	bf 98 0a 00 00       	mov    $0xa98,%edi
+    base.s.ptr = freep = prevp = &base;
+ 77f:	c7 05 98 0a 00 00 98 	movl   $0xa98,0xa98
+ 786:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 789:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 78b:	c7 05 9c 0a 00 00 00 	movl   $0x0,0xa9c
+ 792:	00 00 00 
+    if(p->s.size >= nunits){
+ 795:	e9 32 ff ff ff       	jmp    6cc <malloc+0x2c>
+ 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7a0:	8b 08                	mov    (%eax),%ecx
+ 7a2:	89 0a                	mov    %ecx,(%edx)
+ 7a4:	eb b1                	jmp    757 <malloc+0xb7>
diff -urN xv6-public/rm.d xv6-public-new/rm.d
--- xv6-public/rm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/rm.d	2019-10-04 10:45:48.812028888 +0530
@@ -0,0 +1 @@
+rm.o: rm.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/rm.o and xv6-public-new/rm.o differ
diff -urN xv6-public/rm.sym xv6-public-new/rm.sym
--- xv6-public/rm.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/rm.sym	2019-10-04 10:45:48.828028889 +0530
@@ -0,0 +1,57 @@
+00000000 .text
+000007a8 .rodata
+000007f0 .eh_frame
+00000a94 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 rm.c
+00000000 ulib.c
+00000000 printf.c
+00000380 printint
+000007dc digits.1101
+00000000 umalloc.c
+00000a94 freep
+00000a98 base
+00000080 strcpy
+00000440 printf
+000002a0 memmove
+00000319 mknod
+00000190 gets
+00000351 getpid
+000006a0 malloc
+00000361 sleep
+000002e1 pipe
+000002f1 write
+00000329 fstat
+00000301 kill
+00000341 chdir
+00000309 exec
+000002d9 wait
+000002e9 read
+00000321 unlink
+000002c9 fork
+00000359 sbrk
+00000369 uptime
+00000a94 __bss_start
+00000130 memset
+00000000 main
+000000b0 strcmp
+00000349 dup
+00000210 stat
+00000a94 _edata
+00000aa0 _end
+00000331 link
+000002d1 exit
+00000260 atoi
+00000100 strlen
+00000311 open
+00000150 strchr
+00000339 mkdir
+000002f9 close
+00000610 free
Binary files xv6-public/_sh and xv6-public-new/_sh differ
diff -urN xv6-public/sh.asm xv6-public-new/sh.asm
--- xv6-public/sh.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/sh.asm	2019-10-04 10:45:48.940028894 +0530
@@ -0,0 +1,2586 @@
+
+_sh:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return 0;
+}
+
+int
+main(void)
+{
+       0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       4:	83 e4 f0             	and    $0xfffffff0,%esp
+       7:	ff 71 fc             	pushl  -0x4(%ecx)
+       a:	55                   	push   %ebp
+       b:	89 e5                	mov    %esp,%ebp
+       d:	51                   	push   %ecx
+       e:	83 ec 04             	sub    $0x4,%esp
+  static char buf[100];
+  int fd;
+
+  // Ensure that three file descriptors are open.
+  while((fd = open("console", O_RDWR)) >= 0){
+      11:	eb 0e                	jmp    21 <main+0x21>
+      13:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      17:	90                   	nop
+    if(fd >= 3){
+      18:	83 f8 02             	cmp    $0x2,%eax
+      1b:	0f 8f b7 00 00 00    	jg     d8 <main+0xd8>
+  while((fd = open("console", O_RDWR)) >= 0){
+      21:	83 ec 08             	sub    $0x8,%esp
+      24:	6a 02                	push   $0x2
+      26:	68 a9 12 00 00       	push   $0x12a9
+      2b:	e8 41 0d 00 00       	call   d71 <open>
+      30:	83 c4 10             	add    $0x10,%esp
+      33:	85 c0                	test   %eax,%eax
+      35:	79 e1                	jns    18 <main+0x18>
+      37:	eb 32                	jmp    6b <main+0x6b>
+      39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+
+  // Read and run input commands.
+  while(getcmd(buf, sizeof(buf)) >= 0){
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      40:	80 3d e2 18 00 00 20 	cmpb   $0x20,0x18e2
+      47:	74 51                	je     9a <main+0x9a>
+      49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+int
+fork1(void)
+{
+  int pid;
+
+  pid = fork();
+      50:	e8 d4 0c 00 00       	call   d29 <fork>
+  if(pid == -1)
+      55:	83 f8 ff             	cmp    $0xffffffff,%eax
+      58:	0f 84 9d 00 00 00    	je     fb <main+0xfb>
+    if(fork1() == 0)
+      5e:	85 c0                	test   %eax,%eax
+      60:	0f 84 80 00 00 00    	je     e6 <main+0xe6>
+    wait();
+      66:	e8 ce 0c 00 00       	call   d39 <wait>
+  while(getcmd(buf, sizeof(buf)) >= 0){
+      6b:	83 ec 08             	sub    $0x8,%esp
+      6e:	6a 64                	push   $0x64
+      70:	68 e0 18 00 00       	push   $0x18e0
+      75:	e8 96 00 00 00       	call   110 <getcmd>
+      7a:	83 c4 10             	add    $0x10,%esp
+      7d:	85 c0                	test   %eax,%eax
+      7f:	78 14                	js     95 <main+0x95>
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      81:	80 3d e0 18 00 00 63 	cmpb   $0x63,0x18e0
+      88:	75 c6                	jne    50 <main+0x50>
+      8a:	80 3d e1 18 00 00 64 	cmpb   $0x64,0x18e1
+      91:	75 bd                	jne    50 <main+0x50>
+      93:	eb ab                	jmp    40 <main+0x40>
+  exit();
+      95:	e8 97 0c 00 00       	call   d31 <exit>
+      buf[strlen(buf)-1] = 0;  // chop \n
+      9a:	83 ec 0c             	sub    $0xc,%esp
+      9d:	68 e0 18 00 00       	push   $0x18e0
+      a2:	e8 b9 0a 00 00       	call   b60 <strlen>
+      if(chdir(buf+3) < 0)
+      a7:	c7 04 24 e3 18 00 00 	movl   $0x18e3,(%esp)
+      buf[strlen(buf)-1] = 0;  // chop \n
+      ae:	c6 80 df 18 00 00 00 	movb   $0x0,0x18df(%eax)
+      if(chdir(buf+3) < 0)
+      b5:	e8 e7 0c 00 00       	call   da1 <chdir>
+      ba:	83 c4 10             	add    $0x10,%esp
+      bd:	85 c0                	test   %eax,%eax
+      bf:	79 aa                	jns    6b <main+0x6b>
+        printf(2, "cannot cd %s\n", buf+3);
+      c1:	50                   	push   %eax
+      c2:	68 e3 18 00 00       	push   $0x18e3
+      c7:	68 b1 12 00 00       	push   $0x12b1
+      cc:	6a 02                	push   $0x2
+      ce:	e8 cd 0d 00 00       	call   ea0 <printf>
+      d3:	83 c4 10             	add    $0x10,%esp
+      d6:	eb 93                	jmp    6b <main+0x6b>
+      close(fd);
+      d8:	83 ec 0c             	sub    $0xc,%esp
+      db:	50                   	push   %eax
+      dc:	e8 78 0c 00 00       	call   d59 <close>
+      break;
+      e1:	83 c4 10             	add    $0x10,%esp
+      e4:	eb 85                	jmp    6b <main+0x6b>
+      runcmd(parsecmd(buf));
+      e6:	83 ec 0c             	sub    $0xc,%esp
+      e9:	68 e0 18 00 00       	push   $0x18e0
+      ee:	e8 7d 09 00 00       	call   a70 <parsecmd>
+      f3:	89 04 24             	mov    %eax,(%esp)
+      f6:	e8 85 00 00 00       	call   180 <runcmd>
+    panic("fork");
+      fb:	83 ec 0c             	sub    $0xc,%esp
+      fe:	68 32 12 00 00       	push   $0x1232
+     103:	e8 58 00 00 00       	call   160 <panic>
+     108:	66 90                	xchg   %ax,%ax
+     10a:	66 90                	xchg   %ax,%ax
+     10c:	66 90                	xchg   %ax,%ax
+     10e:	66 90                	xchg   %ax,%ax
+
+00000110 <getcmd>:
+{
+     110:	55                   	push   %ebp
+     111:	89 e5                	mov    %esp,%ebp
+     113:	56                   	push   %esi
+     114:	53                   	push   %ebx
+     115:	8b 75 0c             	mov    0xc(%ebp),%esi
+     118:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  printf(2, "$ ");
+     11b:	83 ec 08             	sub    $0x8,%esp
+     11e:	68 08 12 00 00       	push   $0x1208
+     123:	6a 02                	push   $0x2
+     125:	e8 76 0d 00 00       	call   ea0 <printf>
+  memset(buf, 0, nbuf);
+     12a:	83 c4 0c             	add    $0xc,%esp
+     12d:	56                   	push   %esi
+     12e:	6a 00                	push   $0x0
+     130:	53                   	push   %ebx
+     131:	e8 5a 0a 00 00       	call   b90 <memset>
+  gets(buf, nbuf);
+     136:	58                   	pop    %eax
+     137:	5a                   	pop    %edx
+     138:	56                   	push   %esi
+     139:	53                   	push   %ebx
+     13a:	e8 b1 0a 00 00       	call   bf0 <gets>
+  if(buf[0] == 0) // EOF
+     13f:	83 c4 10             	add    $0x10,%esp
+     142:	31 c0                	xor    %eax,%eax
+     144:	80 3b 00             	cmpb   $0x0,(%ebx)
+     147:	0f 94 c0             	sete   %al
+}
+     14a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     14d:	5b                   	pop    %ebx
+  if(buf[0] == 0) // EOF
+     14e:	f7 d8                	neg    %eax
+}
+     150:	5e                   	pop    %esi
+     151:	5d                   	pop    %ebp
+     152:	c3                   	ret    
+     153:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     15a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000160 <panic>:
+{
+     160:	55                   	push   %ebp
+     161:	89 e5                	mov    %esp,%ebp
+     163:	83 ec 0c             	sub    $0xc,%esp
+  printf(2, "%s\n", s);
+     166:	ff 75 08             	pushl  0x8(%ebp)
+     169:	68 a5 12 00 00       	push   $0x12a5
+     16e:	6a 02                	push   $0x2
+     170:	e8 2b 0d 00 00       	call   ea0 <printf>
+  exit();
+     175:	e8 b7 0b 00 00       	call   d31 <exit>
+     17a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000180 <runcmd>:
+{
+     180:	55                   	push   %ebp
+     181:	89 e5                	mov    %esp,%ebp
+     183:	53                   	push   %ebx
+     184:	83 ec 14             	sub    $0x14,%esp
+     187:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(cmd == 0)
+     18a:	85 db                	test   %ebx,%ebx
+     18c:	74 7a                	je     208 <runcmd+0x88>
+  switch(cmd->type){
+     18e:	83 3b 05             	cmpl   $0x5,(%ebx)
+     191:	0f 87 00 01 00 00    	ja     297 <runcmd+0x117>
+     197:	8b 03                	mov    (%ebx),%eax
+     199:	ff 24 85 c0 12 00 00 	jmp    *0x12c0(,%eax,4)
+    if(pipe(p) < 0)
+     1a0:	83 ec 0c             	sub    $0xc,%esp
+     1a3:	8d 45 f0             	lea    -0x10(%ebp),%eax
+     1a6:	50                   	push   %eax
+     1a7:	e8 95 0b 00 00       	call   d41 <pipe>
+     1ac:	83 c4 10             	add    $0x10,%esp
+     1af:	85 c0                	test   %eax,%eax
+     1b1:	0f 88 02 01 00 00    	js     2b9 <runcmd+0x139>
+  pid = fork();
+     1b7:	e8 6d 0b 00 00       	call   d29 <fork>
+  if(pid == -1)
+     1bc:	83 f8 ff             	cmp    $0xffffffff,%eax
+     1bf:	0f 84 5d 01 00 00    	je     322 <runcmd+0x1a2>
+    if(fork1() == 0){
+     1c5:	85 c0                	test   %eax,%eax
+     1c7:	0f 84 f9 00 00 00    	je     2c6 <runcmd+0x146>
+  pid = fork();
+     1cd:	e8 57 0b 00 00       	call   d29 <fork>
+  if(pid == -1)
+     1d2:	83 f8 ff             	cmp    $0xffffffff,%eax
+     1d5:	0f 84 47 01 00 00    	je     322 <runcmd+0x1a2>
+    if(fork1() == 0){
+     1db:	85 c0                	test   %eax,%eax
+     1dd:	0f 84 11 01 00 00    	je     2f4 <runcmd+0x174>
+    close(p[0]);
+     1e3:	83 ec 0c             	sub    $0xc,%esp
+     1e6:	ff 75 f0             	pushl  -0x10(%ebp)
+     1e9:	e8 6b 0b 00 00       	call   d59 <close>
+    close(p[1]);
+     1ee:	58                   	pop    %eax
+     1ef:	ff 75 f4             	pushl  -0xc(%ebp)
+     1f2:	e8 62 0b 00 00       	call   d59 <close>
+    wait();
+     1f7:	e8 3d 0b 00 00       	call   d39 <wait>
+    wait();
+     1fc:	e8 38 0b 00 00       	call   d39 <wait>
+    break;
+     201:	83 c4 10             	add    $0x10,%esp
+     204:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    exit();
+     208:	e8 24 0b 00 00       	call   d31 <exit>
+  pid = fork();
+     20d:	e8 17 0b 00 00       	call   d29 <fork>
+  if(pid == -1)
+     212:	83 f8 ff             	cmp    $0xffffffff,%eax
+     215:	0f 84 07 01 00 00    	je     322 <runcmd+0x1a2>
+    if(fork1() == 0)
+     21b:	85 c0                	test   %eax,%eax
+     21d:	75 e9                	jne    208 <runcmd+0x88>
+     21f:	eb 6b                	jmp    28c <runcmd+0x10c>
+    if(ecmd->argv[0] == 0)
+     221:	8b 43 04             	mov    0x4(%ebx),%eax
+     224:	85 c0                	test   %eax,%eax
+     226:	74 e0                	je     208 <runcmd+0x88>
+    exec(ecmd->argv[0], ecmd->argv);
+     228:	52                   	push   %edx
+     229:	52                   	push   %edx
+     22a:	8d 53 04             	lea    0x4(%ebx),%edx
+     22d:	52                   	push   %edx
+     22e:	50                   	push   %eax
+     22f:	e8 35 0b 00 00       	call   d69 <exec>
+    printf(2, "exec %s failed\n", ecmd->argv[0]);
+     234:	83 c4 0c             	add    $0xc,%esp
+     237:	ff 73 04             	pushl  0x4(%ebx)
+     23a:	68 12 12 00 00       	push   $0x1212
+     23f:	6a 02                	push   $0x2
+     241:	e8 5a 0c 00 00       	call   ea0 <printf>
+    break;
+     246:	83 c4 10             	add    $0x10,%esp
+     249:	eb bd                	jmp    208 <runcmd+0x88>
+  pid = fork();
+     24b:	e8 d9 0a 00 00       	call   d29 <fork>
+  if(pid == -1)
+     250:	83 f8 ff             	cmp    $0xffffffff,%eax
+     253:	0f 84 c9 00 00 00    	je     322 <runcmd+0x1a2>
+    if(fork1() == 0)
+     259:	85 c0                	test   %eax,%eax
+     25b:	74 2f                	je     28c <runcmd+0x10c>
+    wait();
+     25d:	e8 d7 0a 00 00       	call   d39 <wait>
+    runcmd(lcmd->right);
+     262:	83 ec 0c             	sub    $0xc,%esp
+     265:	ff 73 08             	pushl  0x8(%ebx)
+     268:	e8 13 ff ff ff       	call   180 <runcmd>
+    close(rcmd->fd);
+     26d:	83 ec 0c             	sub    $0xc,%esp
+     270:	ff 73 14             	pushl  0x14(%ebx)
+     273:	e8 e1 0a 00 00       	call   d59 <close>
+    if(open(rcmd->file, rcmd->mode) < 0){
+     278:	59                   	pop    %ecx
+     279:	58                   	pop    %eax
+     27a:	ff 73 10             	pushl  0x10(%ebx)
+     27d:	ff 73 08             	pushl  0x8(%ebx)
+     280:	e8 ec 0a 00 00       	call   d71 <open>
+     285:	83 c4 10             	add    $0x10,%esp
+     288:	85 c0                	test   %eax,%eax
+     28a:	78 18                	js     2a4 <runcmd+0x124>
+      runcmd(bcmd->cmd);
+     28c:	83 ec 0c             	sub    $0xc,%esp
+     28f:	ff 73 04             	pushl  0x4(%ebx)
+     292:	e8 e9 fe ff ff       	call   180 <runcmd>
+    panic("runcmd");
+     297:	83 ec 0c             	sub    $0xc,%esp
+     29a:	68 0b 12 00 00       	push   $0x120b
+     29f:	e8 bc fe ff ff       	call   160 <panic>
+      printf(2, "open %s failed\n", rcmd->file);
+     2a4:	52                   	push   %edx
+     2a5:	ff 73 08             	pushl  0x8(%ebx)
+     2a8:	68 22 12 00 00       	push   $0x1222
+     2ad:	6a 02                	push   $0x2
+     2af:	e8 ec 0b 00 00       	call   ea0 <printf>
+      exit();
+     2b4:	e8 78 0a 00 00       	call   d31 <exit>
+      panic("pipe");
+     2b9:	83 ec 0c             	sub    $0xc,%esp
+     2bc:	68 37 12 00 00       	push   $0x1237
+     2c1:	e8 9a fe ff ff       	call   160 <panic>
+      close(1);
+     2c6:	83 ec 0c             	sub    $0xc,%esp
+     2c9:	6a 01                	push   $0x1
+     2cb:	e8 89 0a 00 00       	call   d59 <close>
+      dup(p[1]);
+     2d0:	58                   	pop    %eax
+     2d1:	ff 75 f4             	pushl  -0xc(%ebp)
+     2d4:	e8 d0 0a 00 00       	call   da9 <dup>
+      close(p[0]);
+     2d9:	58                   	pop    %eax
+     2da:	ff 75 f0             	pushl  -0x10(%ebp)
+     2dd:	e8 77 0a 00 00       	call   d59 <close>
+      close(p[1]);
+     2e2:	58                   	pop    %eax
+     2e3:	ff 75 f4             	pushl  -0xc(%ebp)
+     2e6:	e8 6e 0a 00 00       	call   d59 <close>
+      runcmd(pcmd->left);
+     2eb:	58                   	pop    %eax
+     2ec:	ff 73 04             	pushl  0x4(%ebx)
+     2ef:	e8 8c fe ff ff       	call   180 <runcmd>
+      close(0);
+     2f4:	83 ec 0c             	sub    $0xc,%esp
+     2f7:	6a 00                	push   $0x0
+     2f9:	e8 5b 0a 00 00       	call   d59 <close>
+      dup(p[0]);
+     2fe:	5a                   	pop    %edx
+     2ff:	ff 75 f0             	pushl  -0x10(%ebp)
+     302:	e8 a2 0a 00 00       	call   da9 <dup>
+      close(p[0]);
+     307:	59                   	pop    %ecx
+     308:	ff 75 f0             	pushl  -0x10(%ebp)
+     30b:	e8 49 0a 00 00       	call   d59 <close>
+      close(p[1]);
+     310:	58                   	pop    %eax
+     311:	ff 75 f4             	pushl  -0xc(%ebp)
+     314:	e8 40 0a 00 00       	call   d59 <close>
+      runcmd(pcmd->right);
+     319:	58                   	pop    %eax
+     31a:	ff 73 08             	pushl  0x8(%ebx)
+     31d:	e8 5e fe ff ff       	call   180 <runcmd>
+    panic("fork");
+     322:	83 ec 0c             	sub    $0xc,%esp
+     325:	68 32 12 00 00       	push   $0x1232
+     32a:	e8 31 fe ff ff       	call   160 <panic>
+     32f:	90                   	nop
+
+00000330 <fork1>:
+{
+     330:	55                   	push   %ebp
+     331:	89 e5                	mov    %esp,%ebp
+     333:	83 ec 08             	sub    $0x8,%esp
+  pid = fork();
+     336:	e8 ee 09 00 00       	call   d29 <fork>
+  if(pid == -1)
+     33b:	83 f8 ff             	cmp    $0xffffffff,%eax
+     33e:	74 02                	je     342 <fork1+0x12>
+  return pid;
+}
+     340:	c9                   	leave  
+     341:	c3                   	ret    
+    panic("fork");
+     342:	83 ec 0c             	sub    $0xc,%esp
+     345:	68 32 12 00 00       	push   $0x1232
+     34a:	e8 11 fe ff ff       	call   160 <panic>
+     34f:	90                   	nop
+
+00000350 <execcmd>:
+//PAGEBREAK!
+// Constructors
+
+struct cmd*
+execcmd(void)
+{
+     350:	55                   	push   %ebp
+     351:	89 e5                	mov    %esp,%ebp
+     353:	53                   	push   %ebx
+     354:	83 ec 10             	sub    $0x10,%esp
+  struct execcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     357:	6a 54                	push   $0x54
+     359:	e8 a2 0d 00 00       	call   1100 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     35e:	83 c4 0c             	add    $0xc,%esp
+     361:	6a 54                	push   $0x54
+  cmd = malloc(sizeof(*cmd));
+     363:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     365:	6a 00                	push   $0x0
+     367:	50                   	push   %eax
+     368:	e8 23 08 00 00       	call   b90 <memset>
+  cmd->type = EXEC;
+     36d:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  return (struct cmd*)cmd;
+}
+     373:	89 d8                	mov    %ebx,%eax
+     375:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     378:	c9                   	leave  
+     379:	c3                   	ret    
+     37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000380 <redircmd>:
+
+struct cmd*
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
+{
+     380:	55                   	push   %ebp
+     381:	89 e5                	mov    %esp,%ebp
+     383:	53                   	push   %ebx
+     384:	83 ec 10             	sub    $0x10,%esp
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     387:	6a 18                	push   $0x18
+     389:	e8 72 0d 00 00       	call   1100 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     38e:	83 c4 0c             	add    $0xc,%esp
+     391:	6a 18                	push   $0x18
+  cmd = malloc(sizeof(*cmd));
+     393:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     395:	6a 00                	push   $0x0
+     397:	50                   	push   %eax
+     398:	e8 f3 07 00 00       	call   b90 <memset>
+  cmd->type = REDIR;
+  cmd->cmd = subcmd;
+     39d:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = REDIR;
+     3a0:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
+  cmd->cmd = subcmd;
+     3a6:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->file = file;
+     3a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+     3ac:	89 43 08             	mov    %eax,0x8(%ebx)
+  cmd->efile = efile;
+     3af:	8b 45 10             	mov    0x10(%ebp),%eax
+     3b2:	89 43 0c             	mov    %eax,0xc(%ebx)
+  cmd->mode = mode;
+     3b5:	8b 45 14             	mov    0x14(%ebp),%eax
+     3b8:	89 43 10             	mov    %eax,0x10(%ebx)
+  cmd->fd = fd;
+     3bb:	8b 45 18             	mov    0x18(%ebp),%eax
+     3be:	89 43 14             	mov    %eax,0x14(%ebx)
+  return (struct cmd*)cmd;
+}
+     3c1:	89 d8                	mov    %ebx,%eax
+     3c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     3c6:	c9                   	leave  
+     3c7:	c3                   	ret    
+     3c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     3cf:	90                   	nop
+
+000003d0 <pipecmd>:
+
+struct cmd*
+pipecmd(struct cmd *left, struct cmd *right)
+{
+     3d0:	55                   	push   %ebp
+     3d1:	89 e5                	mov    %esp,%ebp
+     3d3:	53                   	push   %ebx
+     3d4:	83 ec 10             	sub    $0x10,%esp
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     3d7:	6a 0c                	push   $0xc
+     3d9:	e8 22 0d 00 00       	call   1100 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     3de:	83 c4 0c             	add    $0xc,%esp
+     3e1:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     3e3:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     3e5:	6a 00                	push   $0x0
+     3e7:	50                   	push   %eax
+     3e8:	e8 a3 07 00 00       	call   b90 <memset>
+  cmd->type = PIPE;
+  cmd->left = left;
+     3ed:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = PIPE;
+     3f0:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
+  cmd->left = left;
+     3f6:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     3f9:	8b 45 0c             	mov    0xc(%ebp),%eax
+     3fc:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     3ff:	89 d8                	mov    %ebx,%eax
+     401:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     404:	c9                   	leave  
+     405:	c3                   	ret    
+     406:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     40d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000410 <listcmd>:
+
+struct cmd*
+listcmd(struct cmd *left, struct cmd *right)
+{
+     410:	55                   	push   %ebp
+     411:	89 e5                	mov    %esp,%ebp
+     413:	53                   	push   %ebx
+     414:	83 ec 10             	sub    $0x10,%esp
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     417:	6a 0c                	push   $0xc
+     419:	e8 e2 0c 00 00       	call   1100 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     41e:	83 c4 0c             	add    $0xc,%esp
+     421:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     423:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     425:	6a 00                	push   $0x0
+     427:	50                   	push   %eax
+     428:	e8 63 07 00 00       	call   b90 <memset>
+  cmd->type = LIST;
+  cmd->left = left;
+     42d:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = LIST;
+     430:	c7 03 04 00 00 00    	movl   $0x4,(%ebx)
+  cmd->left = left;
+     436:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     439:	8b 45 0c             	mov    0xc(%ebp),%eax
+     43c:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     43f:	89 d8                	mov    %ebx,%eax
+     441:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     444:	c9                   	leave  
+     445:	c3                   	ret    
+     446:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     44d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000450 <backcmd>:
+
+struct cmd*
+backcmd(struct cmd *subcmd)
+{
+     450:	55                   	push   %ebp
+     451:	89 e5                	mov    %esp,%ebp
+     453:	53                   	push   %ebx
+     454:	83 ec 10             	sub    $0x10,%esp
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     457:	6a 08                	push   $0x8
+     459:	e8 a2 0c 00 00       	call   1100 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     45e:	83 c4 0c             	add    $0xc,%esp
+     461:	6a 08                	push   $0x8
+  cmd = malloc(sizeof(*cmd));
+     463:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     465:	6a 00                	push   $0x0
+     467:	50                   	push   %eax
+     468:	e8 23 07 00 00       	call   b90 <memset>
+  cmd->type = BACK;
+  cmd->cmd = subcmd;
+     46d:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = BACK;
+     470:	c7 03 05 00 00 00    	movl   $0x5,(%ebx)
+  cmd->cmd = subcmd;
+     476:	89 43 04             	mov    %eax,0x4(%ebx)
+  return (struct cmd*)cmd;
+}
+     479:	89 d8                	mov    %ebx,%eax
+     47b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     47e:	c9                   	leave  
+     47f:	c3                   	ret    
+
+00000480 <gettoken>:
+char whitespace[] = " \t\r\n\v";
+char symbols[] = "<|>&;()";
+
+int
+gettoken(char **ps, char *es, char **q, char **eq)
+{
+     480:	55                   	push   %ebp
+     481:	89 e5                	mov    %esp,%ebp
+     483:	57                   	push   %edi
+     484:	56                   	push   %esi
+     485:	53                   	push   %ebx
+     486:	83 ec 0c             	sub    $0xc,%esp
+  char *s;
+  int ret;
+
+  s = *ps;
+     489:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+     48c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     48f:	8b 7d 10             	mov    0x10(%ebp),%edi
+  s = *ps;
+     492:	8b 30                	mov    (%eax),%esi
+  while(s < es && strchr(whitespace, *s))
+     494:	39 de                	cmp    %ebx,%esi
+     496:	72 0f                	jb     4a7 <gettoken+0x27>
+     498:	eb 25                	jmp    4bf <gettoken+0x3f>
+     49a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    s++;
+     4a0:	83 c6 01             	add    $0x1,%esi
+  while(s < es && strchr(whitespace, *s))
+     4a3:	39 f3                	cmp    %esi,%ebx
+     4a5:	74 18                	je     4bf <gettoken+0x3f>
+     4a7:	0f be 06             	movsbl (%esi),%eax
+     4aa:	83 ec 08             	sub    $0x8,%esp
+     4ad:	50                   	push   %eax
+     4ae:	68 d0 18 00 00       	push   $0x18d0
+     4b3:	e8 f8 06 00 00       	call   bb0 <strchr>
+     4b8:	83 c4 10             	add    $0x10,%esp
+     4bb:	85 c0                	test   %eax,%eax
+     4bd:	75 e1                	jne    4a0 <gettoken+0x20>
+  if(q)
+     4bf:	85 ff                	test   %edi,%edi
+     4c1:	74 02                	je     4c5 <gettoken+0x45>
+    *q = s;
+     4c3:	89 37                	mov    %esi,(%edi)
+  ret = *s;
+     4c5:	0f be 06             	movsbl (%esi),%eax
+  switch(*s){
+     4c8:	3c 29                	cmp    $0x29,%al
+     4ca:	0f 8f b8 00 00 00    	jg     588 <gettoken+0x108>
+     4d0:	3c 28                	cmp    $0x28,%al
+     4d2:	0f 8d de 00 00 00    	jge    5b6 <gettoken+0x136>
+     4d8:	31 ff                	xor    %edi,%edi
+     4da:	84 c0                	test   %al,%al
+     4dc:	75 42                	jne    520 <gettoken+0xa0>
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+      s++;
+    break;
+  }
+  if(eq)
+     4de:	8b 55 14             	mov    0x14(%ebp),%edx
+     4e1:	85 d2                	test   %edx,%edx
+     4e3:	74 05                	je     4ea <gettoken+0x6a>
+    *eq = s;
+     4e5:	8b 45 14             	mov    0x14(%ebp),%eax
+     4e8:	89 30                	mov    %esi,(%eax)
+
+  while(s < es && strchr(whitespace, *s))
+     4ea:	39 de                	cmp    %ebx,%esi
+     4ec:	72 09                	jb     4f7 <gettoken+0x77>
+     4ee:	eb 1f                	jmp    50f <gettoken+0x8f>
+    s++;
+     4f0:	83 c6 01             	add    $0x1,%esi
+  while(s < es && strchr(whitespace, *s))
+     4f3:	39 f3                	cmp    %esi,%ebx
+     4f5:	74 18                	je     50f <gettoken+0x8f>
+     4f7:	0f be 06             	movsbl (%esi),%eax
+     4fa:	83 ec 08             	sub    $0x8,%esp
+     4fd:	50                   	push   %eax
+     4fe:	68 d0 18 00 00       	push   $0x18d0
+     503:	e8 a8 06 00 00       	call   bb0 <strchr>
+     508:	83 c4 10             	add    $0x10,%esp
+     50b:	85 c0                	test   %eax,%eax
+     50d:	75 e1                	jne    4f0 <gettoken+0x70>
+  *ps = s;
+     50f:	8b 45 08             	mov    0x8(%ebp),%eax
+     512:	89 30                	mov    %esi,(%eax)
+  return ret;
+}
+     514:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     517:	89 f8                	mov    %edi,%eax
+     519:	5b                   	pop    %ebx
+     51a:	5e                   	pop    %esi
+     51b:	5f                   	pop    %edi
+     51c:	5d                   	pop    %ebp
+     51d:	c3                   	ret    
+     51e:	66 90                	xchg   %ax,%ax
+  switch(*s){
+     520:	3c 26                	cmp    $0x26,%al
+     522:	0f 84 8e 00 00 00    	je     5b6 <gettoken+0x136>
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     528:	39 f3                	cmp    %esi,%ebx
+     52a:	77 36                	ja     562 <gettoken+0xe2>
+  if(eq)
+     52c:	8b 45 14             	mov    0x14(%ebp),%eax
+     52f:	bf 61 00 00 00       	mov    $0x61,%edi
+     534:	85 c0                	test   %eax,%eax
+     536:	75 ad                	jne    4e5 <gettoken+0x65>
+     538:	eb d5                	jmp    50f <gettoken+0x8f>
+     53a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     540:	0f be 06             	movsbl (%esi),%eax
+     543:	83 ec 08             	sub    $0x8,%esp
+     546:	50                   	push   %eax
+     547:	68 c8 18 00 00       	push   $0x18c8
+     54c:	e8 5f 06 00 00       	call   bb0 <strchr>
+     551:	83 c4 10             	add    $0x10,%esp
+     554:	85 c0                	test   %eax,%eax
+     556:	75 1f                	jne    577 <gettoken+0xf7>
+      s++;
+     558:	83 c6 01             	add    $0x1,%esi
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     55b:	39 f3                	cmp    %esi,%ebx
+     55d:	74 cd                	je     52c <gettoken+0xac>
+     55f:	0f be 06             	movsbl (%esi),%eax
+     562:	83 ec 08             	sub    $0x8,%esp
+     565:	50                   	push   %eax
+     566:	68 d0 18 00 00       	push   $0x18d0
+     56b:	e8 40 06 00 00       	call   bb0 <strchr>
+     570:	83 c4 10             	add    $0x10,%esp
+     573:	85 c0                	test   %eax,%eax
+     575:	74 c9                	je     540 <gettoken+0xc0>
+    ret = 'a';
+     577:	bf 61 00 00 00       	mov    $0x61,%edi
+     57c:	e9 5d ff ff ff       	jmp    4de <gettoken+0x5e>
+     581:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     588:	3c 3e                	cmp    $0x3e,%al
+     58a:	75 1c                	jne    5a8 <gettoken+0x128>
+    if(*s == '>'){
+     58c:	80 7e 01 3e          	cmpb   $0x3e,0x1(%esi)
+    s++;
+     590:	8d 46 01             	lea    0x1(%esi),%eax
+    if(*s == '>'){
+     593:	74 3c                	je     5d1 <gettoken+0x151>
+    s++;
+     595:	89 c6                	mov    %eax,%esi
+     597:	bf 3e 00 00 00       	mov    $0x3e,%edi
+     59c:	e9 3d ff ff ff       	jmp    4de <gettoken+0x5e>
+     5a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     5a8:	7f 1e                	jg     5c8 <gettoken+0x148>
+     5aa:	8d 48 c5             	lea    -0x3b(%eax),%ecx
+     5ad:	80 f9 01             	cmp    $0x1,%cl
+     5b0:	0f 87 72 ff ff ff    	ja     528 <gettoken+0xa8>
+  ret = *s;
+     5b6:	0f be f8             	movsbl %al,%edi
+    s++;
+     5b9:	83 c6 01             	add    $0x1,%esi
+    break;
+     5bc:	e9 1d ff ff ff       	jmp    4de <gettoken+0x5e>
+     5c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     5c8:	3c 7c                	cmp    $0x7c,%al
+     5ca:	74 ea                	je     5b6 <gettoken+0x136>
+     5cc:	e9 57 ff ff ff       	jmp    528 <gettoken+0xa8>
+      s++;
+     5d1:	83 c6 02             	add    $0x2,%esi
+      ret = '+';
+     5d4:	bf 2b 00 00 00       	mov    $0x2b,%edi
+     5d9:	e9 00 ff ff ff       	jmp    4de <gettoken+0x5e>
+     5de:	66 90                	xchg   %ax,%ax
+
+000005e0 <peek>:
+
+int
+peek(char **ps, char *es, char *toks)
+{
+     5e0:	55                   	push   %ebp
+     5e1:	89 e5                	mov    %esp,%ebp
+     5e3:	57                   	push   %edi
+     5e4:	56                   	push   %esi
+     5e5:	53                   	push   %ebx
+     5e6:	83 ec 0c             	sub    $0xc,%esp
+     5e9:	8b 7d 08             	mov    0x8(%ebp),%edi
+     5ec:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *s;
+
+  s = *ps;
+     5ef:	8b 1f                	mov    (%edi),%ebx
+  while(s < es && strchr(whitespace, *s))
+     5f1:	39 f3                	cmp    %esi,%ebx
+     5f3:	72 12                	jb     607 <peek+0x27>
+     5f5:	eb 28                	jmp    61f <peek+0x3f>
+     5f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     5fe:	66 90                	xchg   %ax,%ax
+    s++;
+     600:	83 c3 01             	add    $0x1,%ebx
+  while(s < es && strchr(whitespace, *s))
+     603:	39 de                	cmp    %ebx,%esi
+     605:	74 18                	je     61f <peek+0x3f>
+     607:	0f be 03             	movsbl (%ebx),%eax
+     60a:	83 ec 08             	sub    $0x8,%esp
+     60d:	50                   	push   %eax
+     60e:	68 d0 18 00 00       	push   $0x18d0
+     613:	e8 98 05 00 00       	call   bb0 <strchr>
+     618:	83 c4 10             	add    $0x10,%esp
+     61b:	85 c0                	test   %eax,%eax
+     61d:	75 e1                	jne    600 <peek+0x20>
+  *ps = s;
+     61f:	89 1f                	mov    %ebx,(%edi)
+  return *s && strchr(toks, *s);
+     621:	0f be 13             	movsbl (%ebx),%edx
+     624:	31 c0                	xor    %eax,%eax
+     626:	84 d2                	test   %dl,%dl
+     628:	75 0e                	jne    638 <peek+0x58>
+}
+     62a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     62d:	5b                   	pop    %ebx
+     62e:	5e                   	pop    %esi
+     62f:	5f                   	pop    %edi
+     630:	5d                   	pop    %ebp
+     631:	c3                   	ret    
+     632:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  return *s && strchr(toks, *s);
+     638:	83 ec 08             	sub    $0x8,%esp
+     63b:	52                   	push   %edx
+     63c:	ff 75 10             	pushl  0x10(%ebp)
+     63f:	e8 6c 05 00 00       	call   bb0 <strchr>
+     644:	83 c4 10             	add    $0x10,%esp
+     647:	85 c0                	test   %eax,%eax
+     649:	0f 95 c0             	setne  %al
+}
+     64c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     64f:	5b                   	pop    %ebx
+  return *s && strchr(toks, *s);
+     650:	0f b6 c0             	movzbl %al,%eax
+}
+     653:	5e                   	pop    %esi
+     654:	5f                   	pop    %edi
+     655:	5d                   	pop    %ebp
+     656:	c3                   	ret    
+     657:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     65e:	66 90                	xchg   %ax,%ax
+
+00000660 <parseredirs>:
+  return cmd;
+}
+
+struct cmd*
+parseredirs(struct cmd *cmd, char **ps, char *es)
+{
+     660:	55                   	push   %ebp
+     661:	89 e5                	mov    %esp,%ebp
+     663:	57                   	push   %edi
+     664:	56                   	push   %esi
+     665:	53                   	push   %ebx
+     666:	83 ec 1c             	sub    $0x1c,%esp
+     669:	8b 75 0c             	mov    0xc(%ebp),%esi
+     66c:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  int tok;
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+     66f:	90                   	nop
+     670:	83 ec 04             	sub    $0x4,%esp
+     673:	68 59 12 00 00       	push   $0x1259
+     678:	53                   	push   %ebx
+     679:	56                   	push   %esi
+     67a:	e8 61 ff ff ff       	call   5e0 <peek>
+     67f:	83 c4 10             	add    $0x10,%esp
+     682:	85 c0                	test   %eax,%eax
+     684:	74 6a                	je     6f0 <parseredirs+0x90>
+    tok = gettoken(ps, es, 0, 0);
+     686:	6a 00                	push   $0x0
+     688:	6a 00                	push   $0x0
+     68a:	53                   	push   %ebx
+     68b:	56                   	push   %esi
+     68c:	e8 ef fd ff ff       	call   480 <gettoken>
+     691:	89 c7                	mov    %eax,%edi
+    if(gettoken(ps, es, &q, &eq) != 'a')
+     693:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     696:	50                   	push   %eax
+     697:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     69a:	50                   	push   %eax
+     69b:	53                   	push   %ebx
+     69c:	56                   	push   %esi
+     69d:	e8 de fd ff ff       	call   480 <gettoken>
+     6a2:	83 c4 20             	add    $0x20,%esp
+     6a5:	83 f8 61             	cmp    $0x61,%eax
+     6a8:	75 51                	jne    6fb <parseredirs+0x9b>
+      panic("missing file for redirection");
+    switch(tok){
+     6aa:	83 ff 3c             	cmp    $0x3c,%edi
+     6ad:	74 31                	je     6e0 <parseredirs+0x80>
+     6af:	83 ff 3e             	cmp    $0x3e,%edi
+     6b2:	74 05                	je     6b9 <parseredirs+0x59>
+     6b4:	83 ff 2b             	cmp    $0x2b,%edi
+     6b7:	75 b7                	jne    670 <parseredirs+0x10>
+      break;
+    case '>':
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      break;
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     6b9:	83 ec 0c             	sub    $0xc,%esp
+     6bc:	6a 01                	push   $0x1
+     6be:	68 01 02 00 00       	push   $0x201
+     6c3:	ff 75 e4             	pushl  -0x1c(%ebp)
+     6c6:	ff 75 e0             	pushl  -0x20(%ebp)
+     6c9:	ff 75 08             	pushl  0x8(%ebp)
+     6cc:	e8 af fc ff ff       	call   380 <redircmd>
+      break;
+     6d1:	83 c4 20             	add    $0x20,%esp
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     6d4:	89 45 08             	mov    %eax,0x8(%ebp)
+      break;
+     6d7:	eb 97                	jmp    670 <parseredirs+0x10>
+     6d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+     6e0:	83 ec 0c             	sub    $0xc,%esp
+     6e3:	6a 00                	push   $0x0
+     6e5:	6a 00                	push   $0x0
+     6e7:	eb da                	jmp    6c3 <parseredirs+0x63>
+     6e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+  return cmd;
+}
+     6f0:	8b 45 08             	mov    0x8(%ebp),%eax
+     6f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     6f6:	5b                   	pop    %ebx
+     6f7:	5e                   	pop    %esi
+     6f8:	5f                   	pop    %edi
+     6f9:	5d                   	pop    %ebp
+     6fa:	c3                   	ret    
+      panic("missing file for redirection");
+     6fb:	83 ec 0c             	sub    $0xc,%esp
+     6fe:	68 3c 12 00 00       	push   $0x123c
+     703:	e8 58 fa ff ff       	call   160 <panic>
+     708:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     70f:	90                   	nop
+
+00000710 <parseexec>:
+  return cmd;
+}
+
+struct cmd*
+parseexec(char **ps, char *es)
+{
+     710:	55                   	push   %ebp
+     711:	89 e5                	mov    %esp,%ebp
+     713:	57                   	push   %edi
+     714:	56                   	push   %esi
+     715:	53                   	push   %ebx
+     716:	83 ec 30             	sub    $0x30,%esp
+     719:	8b 75 08             	mov    0x8(%ebp),%esi
+     71c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  char *q, *eq;
+  int tok, argc;
+  struct execcmd *cmd;
+  struct cmd *ret;
+
+  if(peek(ps, es, "("))
+     71f:	68 5c 12 00 00       	push   $0x125c
+     724:	57                   	push   %edi
+     725:	56                   	push   %esi
+     726:	e8 b5 fe ff ff       	call   5e0 <peek>
+     72b:	83 c4 10             	add    $0x10,%esp
+     72e:	85 c0                	test   %eax,%eax
+     730:	0f 85 92 00 00 00    	jne    7c8 <parseexec+0xb8>
+     736:	89 c3                	mov    %eax,%ebx
+    return parseblock(ps, es);
+
+  ret = execcmd();
+     738:	e8 13 fc ff ff       	call   350 <execcmd>
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+     73d:	83 ec 04             	sub    $0x4,%esp
+     740:	57                   	push   %edi
+     741:	56                   	push   %esi
+     742:	50                   	push   %eax
+  ret = execcmd();
+     743:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  ret = parseredirs(ret, ps, es);
+     746:	e8 15 ff ff ff       	call   660 <parseredirs>
+     74b:	83 c4 10             	add    $0x10,%esp
+     74e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     751:	eb 18                	jmp    76b <parseexec+0x5b>
+     753:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     757:	90                   	nop
+    cmd->argv[argc] = q;
+    cmd->eargv[argc] = eq;
+    argc++;
+    if(argc >= MAXARGS)
+      panic("too many args");
+    ret = parseredirs(ret, ps, es);
+     758:	83 ec 04             	sub    $0x4,%esp
+     75b:	57                   	push   %edi
+     75c:	56                   	push   %esi
+     75d:	ff 75 d4             	pushl  -0x2c(%ebp)
+     760:	e8 fb fe ff ff       	call   660 <parseredirs>
+     765:	83 c4 10             	add    $0x10,%esp
+     768:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     76b:	83 ec 04             	sub    $0x4,%esp
+     76e:	68 73 12 00 00       	push   $0x1273
+     773:	57                   	push   %edi
+     774:	56                   	push   %esi
+     775:	e8 66 fe ff ff       	call   5e0 <peek>
+     77a:	83 c4 10             	add    $0x10,%esp
+     77d:	85 c0                	test   %eax,%eax
+     77f:	75 67                	jne    7e8 <parseexec+0xd8>
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+     781:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     784:	50                   	push   %eax
+     785:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     788:	50                   	push   %eax
+     789:	57                   	push   %edi
+     78a:	56                   	push   %esi
+     78b:	e8 f0 fc ff ff       	call   480 <gettoken>
+     790:	83 c4 10             	add    $0x10,%esp
+     793:	85 c0                	test   %eax,%eax
+     795:	74 51                	je     7e8 <parseexec+0xd8>
+    if(tok != 'a')
+     797:	83 f8 61             	cmp    $0x61,%eax
+     79a:	75 6b                	jne    807 <parseexec+0xf7>
+    cmd->argv[argc] = q;
+     79c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     79f:	8b 55 d0             	mov    -0x30(%ebp),%edx
+     7a2:	89 44 9a 04          	mov    %eax,0x4(%edx,%ebx,4)
+    cmd->eargv[argc] = eq;
+     7a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     7a9:	89 44 9a 2c          	mov    %eax,0x2c(%edx,%ebx,4)
+    argc++;
+     7ad:	83 c3 01             	add    $0x1,%ebx
+    if(argc >= MAXARGS)
+     7b0:	83 fb 0a             	cmp    $0xa,%ebx
+     7b3:	75 a3                	jne    758 <parseexec+0x48>
+      panic("too many args");
+     7b5:	83 ec 0c             	sub    $0xc,%esp
+     7b8:	68 65 12 00 00       	push   $0x1265
+     7bd:	e8 9e f9 ff ff       	call   160 <panic>
+     7c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return parseblock(ps, es);
+     7c8:	83 ec 08             	sub    $0x8,%esp
+     7cb:	57                   	push   %edi
+     7cc:	56                   	push   %esi
+     7cd:	e8 5e 01 00 00       	call   930 <parseblock>
+     7d2:	83 c4 10             	add    $0x10,%esp
+     7d5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  }
+  cmd->argv[argc] = 0;
+  cmd->eargv[argc] = 0;
+  return ret;
+}
+     7d8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     7db:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     7de:	5b                   	pop    %ebx
+     7df:	5e                   	pop    %esi
+     7e0:	5f                   	pop    %edi
+     7e1:	5d                   	pop    %ebp
+     7e2:	c3                   	ret    
+     7e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     7e7:	90                   	nop
+  cmd->argv[argc] = 0;
+     7e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+     7eb:	8d 04 98             	lea    (%eax,%ebx,4),%eax
+     7ee:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+  cmd->eargv[argc] = 0;
+     7f5:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
+}
+     7fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     7ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     802:	5b                   	pop    %ebx
+     803:	5e                   	pop    %esi
+     804:	5f                   	pop    %edi
+     805:	5d                   	pop    %ebp
+     806:	c3                   	ret    
+      panic("syntax");
+     807:	83 ec 0c             	sub    $0xc,%esp
+     80a:	68 5e 12 00 00       	push   $0x125e
+     80f:	e8 4c f9 ff ff       	call   160 <panic>
+     814:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     81b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     81f:	90                   	nop
+
+00000820 <parsepipe>:
+{
+     820:	55                   	push   %ebp
+     821:	89 e5                	mov    %esp,%ebp
+     823:	57                   	push   %edi
+     824:	56                   	push   %esi
+     825:	53                   	push   %ebx
+     826:	83 ec 14             	sub    $0x14,%esp
+     829:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     82c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  cmd = parseexec(ps, es);
+     82f:	56                   	push   %esi
+     830:	53                   	push   %ebx
+     831:	e8 da fe ff ff       	call   710 <parseexec>
+  if(peek(ps, es, "|")){
+     836:	83 c4 0c             	add    $0xc,%esp
+     839:	68 78 12 00 00       	push   $0x1278
+  cmd = parseexec(ps, es);
+     83e:	89 c7                	mov    %eax,%edi
+  if(peek(ps, es, "|")){
+     840:	56                   	push   %esi
+     841:	53                   	push   %ebx
+     842:	e8 99 fd ff ff       	call   5e0 <peek>
+     847:	83 c4 10             	add    $0x10,%esp
+     84a:	85 c0                	test   %eax,%eax
+     84c:	75 12                	jne    860 <parsepipe+0x40>
+}
+     84e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     851:	89 f8                	mov    %edi,%eax
+     853:	5b                   	pop    %ebx
+     854:	5e                   	pop    %esi
+     855:	5f                   	pop    %edi
+     856:	5d                   	pop    %ebp
+     857:	c3                   	ret    
+     858:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     85f:	90                   	nop
+    gettoken(ps, es, 0, 0);
+     860:	6a 00                	push   $0x0
+     862:	6a 00                	push   $0x0
+     864:	56                   	push   %esi
+     865:	53                   	push   %ebx
+     866:	e8 15 fc ff ff       	call   480 <gettoken>
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     86b:	58                   	pop    %eax
+     86c:	5a                   	pop    %edx
+     86d:	56                   	push   %esi
+     86e:	53                   	push   %ebx
+     86f:	e8 ac ff ff ff       	call   820 <parsepipe>
+     874:	89 7d 08             	mov    %edi,0x8(%ebp)
+     877:	83 c4 10             	add    $0x10,%esp
+     87a:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+     87d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     880:	5b                   	pop    %ebx
+     881:	5e                   	pop    %esi
+     882:	5f                   	pop    %edi
+     883:	5d                   	pop    %ebp
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     884:	e9 47 fb ff ff       	jmp    3d0 <pipecmd>
+     889:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000890 <parseline>:
+{
+     890:	55                   	push   %ebp
+     891:	89 e5                	mov    %esp,%ebp
+     893:	57                   	push   %edi
+     894:	56                   	push   %esi
+     895:	53                   	push   %ebx
+     896:	83 ec 14             	sub    $0x14,%esp
+     899:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     89c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  cmd = parsepipe(ps, es);
+     89f:	56                   	push   %esi
+     8a0:	53                   	push   %ebx
+     8a1:	e8 7a ff ff ff       	call   820 <parsepipe>
+  while(peek(ps, es, "&")){
+     8a6:	83 c4 10             	add    $0x10,%esp
+  cmd = parsepipe(ps, es);
+     8a9:	89 c7                	mov    %eax,%edi
+  while(peek(ps, es, "&")){
+     8ab:	eb 1b                	jmp    8c8 <parseline+0x38>
+     8ad:	8d 76 00             	lea    0x0(%esi),%esi
+    gettoken(ps, es, 0, 0);
+     8b0:	6a 00                	push   $0x0
+     8b2:	6a 00                	push   $0x0
+     8b4:	56                   	push   %esi
+     8b5:	53                   	push   %ebx
+     8b6:	e8 c5 fb ff ff       	call   480 <gettoken>
+    cmd = backcmd(cmd);
+     8bb:	89 3c 24             	mov    %edi,(%esp)
+     8be:	e8 8d fb ff ff       	call   450 <backcmd>
+     8c3:	83 c4 10             	add    $0x10,%esp
+     8c6:	89 c7                	mov    %eax,%edi
+  while(peek(ps, es, "&")){
+     8c8:	83 ec 04             	sub    $0x4,%esp
+     8cb:	68 7a 12 00 00       	push   $0x127a
+     8d0:	56                   	push   %esi
+     8d1:	53                   	push   %ebx
+     8d2:	e8 09 fd ff ff       	call   5e0 <peek>
+     8d7:	83 c4 10             	add    $0x10,%esp
+     8da:	85 c0                	test   %eax,%eax
+     8dc:	75 d2                	jne    8b0 <parseline+0x20>
+  if(peek(ps, es, ";")){
+     8de:	83 ec 04             	sub    $0x4,%esp
+     8e1:	68 76 12 00 00       	push   $0x1276
+     8e6:	56                   	push   %esi
+     8e7:	53                   	push   %ebx
+     8e8:	e8 f3 fc ff ff       	call   5e0 <peek>
+     8ed:	83 c4 10             	add    $0x10,%esp
+     8f0:	85 c0                	test   %eax,%eax
+     8f2:	75 0c                	jne    900 <parseline+0x70>
+}
+     8f4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     8f7:	89 f8                	mov    %edi,%eax
+     8f9:	5b                   	pop    %ebx
+     8fa:	5e                   	pop    %esi
+     8fb:	5f                   	pop    %edi
+     8fc:	5d                   	pop    %ebp
+     8fd:	c3                   	ret    
+     8fe:	66 90                	xchg   %ax,%ax
+    gettoken(ps, es, 0, 0);
+     900:	6a 00                	push   $0x0
+     902:	6a 00                	push   $0x0
+     904:	56                   	push   %esi
+     905:	53                   	push   %ebx
+     906:	e8 75 fb ff ff       	call   480 <gettoken>
+    cmd = listcmd(cmd, parseline(ps, es));
+     90b:	58                   	pop    %eax
+     90c:	5a                   	pop    %edx
+     90d:	56                   	push   %esi
+     90e:	53                   	push   %ebx
+     90f:	e8 7c ff ff ff       	call   890 <parseline>
+     914:	89 7d 08             	mov    %edi,0x8(%ebp)
+     917:	83 c4 10             	add    $0x10,%esp
+     91a:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+     91d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     920:	5b                   	pop    %ebx
+     921:	5e                   	pop    %esi
+     922:	5f                   	pop    %edi
+     923:	5d                   	pop    %ebp
+    cmd = listcmd(cmd, parseline(ps, es));
+     924:	e9 e7 fa ff ff       	jmp    410 <listcmd>
+     929:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000930 <parseblock>:
+{
+     930:	55                   	push   %ebp
+     931:	89 e5                	mov    %esp,%ebp
+     933:	57                   	push   %edi
+     934:	56                   	push   %esi
+     935:	53                   	push   %ebx
+     936:	83 ec 10             	sub    $0x10,%esp
+     939:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     93c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  if(!peek(ps, es, "("))
+     93f:	68 5c 12 00 00       	push   $0x125c
+     944:	56                   	push   %esi
+     945:	53                   	push   %ebx
+     946:	e8 95 fc ff ff       	call   5e0 <peek>
+     94b:	83 c4 10             	add    $0x10,%esp
+     94e:	85 c0                	test   %eax,%eax
+     950:	74 4a                	je     99c <parseblock+0x6c>
+  gettoken(ps, es, 0, 0);
+     952:	6a 00                	push   $0x0
+     954:	6a 00                	push   $0x0
+     956:	56                   	push   %esi
+     957:	53                   	push   %ebx
+     958:	e8 23 fb ff ff       	call   480 <gettoken>
+  cmd = parseline(ps, es);
+     95d:	58                   	pop    %eax
+     95e:	5a                   	pop    %edx
+     95f:	56                   	push   %esi
+     960:	53                   	push   %ebx
+     961:	e8 2a ff ff ff       	call   890 <parseline>
+  if(!peek(ps, es, ")"))
+     966:	83 c4 0c             	add    $0xc,%esp
+     969:	68 98 12 00 00       	push   $0x1298
+  cmd = parseline(ps, es);
+     96e:	89 c7                	mov    %eax,%edi
+  if(!peek(ps, es, ")"))
+     970:	56                   	push   %esi
+     971:	53                   	push   %ebx
+     972:	e8 69 fc ff ff       	call   5e0 <peek>
+     977:	83 c4 10             	add    $0x10,%esp
+     97a:	85 c0                	test   %eax,%eax
+     97c:	74 2b                	je     9a9 <parseblock+0x79>
+  gettoken(ps, es, 0, 0);
+     97e:	6a 00                	push   $0x0
+     980:	6a 00                	push   $0x0
+     982:	56                   	push   %esi
+     983:	53                   	push   %ebx
+     984:	e8 f7 fa ff ff       	call   480 <gettoken>
+  cmd = parseredirs(cmd, ps, es);
+     989:	83 c4 0c             	add    $0xc,%esp
+     98c:	56                   	push   %esi
+     98d:	53                   	push   %ebx
+     98e:	57                   	push   %edi
+     98f:	e8 cc fc ff ff       	call   660 <parseredirs>
+}
+     994:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     997:	5b                   	pop    %ebx
+     998:	5e                   	pop    %esi
+     999:	5f                   	pop    %edi
+     99a:	5d                   	pop    %ebp
+     99b:	c3                   	ret    
+    panic("parseblock");
+     99c:	83 ec 0c             	sub    $0xc,%esp
+     99f:	68 7c 12 00 00       	push   $0x127c
+     9a4:	e8 b7 f7 ff ff       	call   160 <panic>
+    panic("syntax - missing )");
+     9a9:	83 ec 0c             	sub    $0xc,%esp
+     9ac:	68 87 12 00 00       	push   $0x1287
+     9b1:	e8 aa f7 ff ff       	call   160 <panic>
+     9b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     9bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000009c0 <nulterminate>:
+
+// NUL-terminate all the counted strings.
+struct cmd*
+nulterminate(struct cmd *cmd)
+{
+     9c0:	55                   	push   %ebp
+     9c1:	89 e5                	mov    %esp,%ebp
+     9c3:	53                   	push   %ebx
+     9c4:	83 ec 04             	sub    $0x4,%esp
+     9c7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+     9ca:	85 db                	test   %ebx,%ebx
+     9cc:	74 20                	je     9ee <nulterminate+0x2e>
+    return 0;
+
+  switch(cmd->type){
+     9ce:	83 3b 05             	cmpl   $0x5,(%ebx)
+     9d1:	77 1b                	ja     9ee <nulterminate+0x2e>
+     9d3:	8b 03                	mov    (%ebx),%eax
+     9d5:	ff 24 85 d8 12 00 00 	jmp    *0x12d8(,%eax,4)
+     9dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    nulterminate(lcmd->right);
+    break;
+
+  case BACK:
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+     9e0:	83 ec 0c             	sub    $0xc,%esp
+     9e3:	ff 73 04             	pushl  0x4(%ebx)
+     9e6:	e8 d5 ff ff ff       	call   9c0 <nulterminate>
+    break;
+     9eb:	83 c4 10             	add    $0x10,%esp
+  }
+  return cmd;
+}
+     9ee:	89 d8                	mov    %ebx,%eax
+     9f0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     9f3:	c9                   	leave  
+     9f4:	c3                   	ret    
+     9f5:	8d 76 00             	lea    0x0(%esi),%esi
+    nulterminate(lcmd->left);
+     9f8:	83 ec 0c             	sub    $0xc,%esp
+     9fb:	ff 73 04             	pushl  0x4(%ebx)
+     9fe:	e8 bd ff ff ff       	call   9c0 <nulterminate>
+    nulterminate(lcmd->right);
+     a03:	58                   	pop    %eax
+     a04:	ff 73 08             	pushl  0x8(%ebx)
+     a07:	e8 b4 ff ff ff       	call   9c0 <nulterminate>
+}
+     a0c:	89 d8                	mov    %ebx,%eax
+    break;
+     a0e:	83 c4 10             	add    $0x10,%esp
+}
+     a11:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a14:	c9                   	leave  
+     a15:	c3                   	ret    
+     a16:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a1d:	8d 76 00             	lea    0x0(%esi),%esi
+    for(i=0; ecmd->argv[i]; i++)
+     a20:	8b 4b 04             	mov    0x4(%ebx),%ecx
+     a23:	8d 43 08             	lea    0x8(%ebx),%eax
+     a26:	85 c9                	test   %ecx,%ecx
+     a28:	74 c4                	je     9ee <nulterminate+0x2e>
+     a2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      *ecmd->eargv[i] = 0;
+     a30:	8b 50 24             	mov    0x24(%eax),%edx
+     a33:	83 c0 04             	add    $0x4,%eax
+     a36:	c6 02 00             	movb   $0x0,(%edx)
+    for(i=0; ecmd->argv[i]; i++)
+     a39:	8b 50 fc             	mov    -0x4(%eax),%edx
+     a3c:	85 d2                	test   %edx,%edx
+     a3e:	75 f0                	jne    a30 <nulterminate+0x70>
+}
+     a40:	89 d8                	mov    %ebx,%eax
+     a42:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a45:	c9                   	leave  
+     a46:	c3                   	ret    
+     a47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a4e:	66 90                	xchg   %ax,%ax
+    nulterminate(rcmd->cmd);
+     a50:	83 ec 0c             	sub    $0xc,%esp
+     a53:	ff 73 04             	pushl  0x4(%ebx)
+     a56:	e8 65 ff ff ff       	call   9c0 <nulterminate>
+    *rcmd->efile = 0;
+     a5b:	8b 43 0c             	mov    0xc(%ebx),%eax
+    break;
+     a5e:	83 c4 10             	add    $0x10,%esp
+    *rcmd->efile = 0;
+     a61:	c6 00 00             	movb   $0x0,(%eax)
+}
+     a64:	89 d8                	mov    %ebx,%eax
+     a66:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a69:	c9                   	leave  
+     a6a:	c3                   	ret    
+     a6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     a6f:	90                   	nop
+
+00000a70 <parsecmd>:
+{
+     a70:	55                   	push   %ebp
+     a71:	89 e5                	mov    %esp,%ebp
+     a73:	56                   	push   %esi
+     a74:	53                   	push   %ebx
+  es = s + strlen(s);
+     a75:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     a78:	83 ec 0c             	sub    $0xc,%esp
+     a7b:	53                   	push   %ebx
+     a7c:	e8 df 00 00 00       	call   b60 <strlen>
+  cmd = parseline(&s, es);
+     a81:	59                   	pop    %ecx
+     a82:	5e                   	pop    %esi
+  es = s + strlen(s);
+     a83:	01 c3                	add    %eax,%ebx
+  cmd = parseline(&s, es);
+     a85:	8d 45 08             	lea    0x8(%ebp),%eax
+     a88:	53                   	push   %ebx
+     a89:	50                   	push   %eax
+     a8a:	e8 01 fe ff ff       	call   890 <parseline>
+  peek(&s, es, "");
+     a8f:	83 c4 0c             	add    $0xc,%esp
+  cmd = parseline(&s, es);
+     a92:	89 c6                	mov    %eax,%esi
+  peek(&s, es, "");
+     a94:	8d 45 08             	lea    0x8(%ebp),%eax
+     a97:	68 21 12 00 00       	push   $0x1221
+     a9c:	53                   	push   %ebx
+     a9d:	50                   	push   %eax
+     a9e:	e8 3d fb ff ff       	call   5e0 <peek>
+  if(s != es){
+     aa3:	8b 45 08             	mov    0x8(%ebp),%eax
+     aa6:	83 c4 10             	add    $0x10,%esp
+     aa9:	39 d8                	cmp    %ebx,%eax
+     aab:	75 12                	jne    abf <parsecmd+0x4f>
+  nulterminate(cmd);
+     aad:	83 ec 0c             	sub    $0xc,%esp
+     ab0:	56                   	push   %esi
+     ab1:	e8 0a ff ff ff       	call   9c0 <nulterminate>
+}
+     ab6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     ab9:	89 f0                	mov    %esi,%eax
+     abb:	5b                   	pop    %ebx
+     abc:	5e                   	pop    %esi
+     abd:	5d                   	pop    %ebp
+     abe:	c3                   	ret    
+    printf(2, "leftovers: %s\n", s);
+     abf:	52                   	push   %edx
+     ac0:	50                   	push   %eax
+     ac1:	68 9a 12 00 00       	push   $0x129a
+     ac6:	6a 02                	push   $0x2
+     ac8:	e8 d3 03 00 00       	call   ea0 <printf>
+    panic("syntax");
+     acd:	c7 04 24 5e 12 00 00 	movl   $0x125e,(%esp)
+     ad4:	e8 87 f6 ff ff       	call   160 <panic>
+     ad9:	66 90                	xchg   %ax,%ax
+     adb:	66 90                	xchg   %ax,%ax
+     add:	66 90                	xchg   %ax,%ax
+     adf:	90                   	nop
+
+00000ae0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+     ae0:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+     ae1:	31 d2                	xor    %edx,%edx
+{
+     ae3:	89 e5                	mov    %esp,%ebp
+     ae5:	53                   	push   %ebx
+     ae6:	8b 45 08             	mov    0x8(%ebp),%eax
+     ae9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+     af0:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+     af4:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+     af7:	83 c2 01             	add    $0x1,%edx
+     afa:	84 c9                	test   %cl,%cl
+     afc:	75 f2                	jne    af0 <strcpy+0x10>
+    ;
+  return os;
+}
+     afe:	5b                   	pop    %ebx
+     aff:	5d                   	pop    %ebp
+     b00:	c3                   	ret    
+     b01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     b08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     b0f:	90                   	nop
+
+00000b10 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+     b10:	55                   	push   %ebp
+     b11:	89 e5                	mov    %esp,%ebp
+     b13:	56                   	push   %esi
+     b14:	53                   	push   %ebx
+     b15:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     b18:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+     b1b:	0f b6 13             	movzbl (%ebx),%edx
+     b1e:	0f b6 0e             	movzbl (%esi),%ecx
+     b21:	84 d2                	test   %dl,%dl
+     b23:	74 1e                	je     b43 <strcmp+0x33>
+     b25:	b8 01 00 00 00       	mov    $0x1,%eax
+     b2a:	38 ca                	cmp    %cl,%dl
+     b2c:	74 09                	je     b37 <strcmp+0x27>
+     b2e:	eb 20                	jmp    b50 <strcmp+0x40>
+     b30:	83 c0 01             	add    $0x1,%eax
+     b33:	38 ca                	cmp    %cl,%dl
+     b35:	75 19                	jne    b50 <strcmp+0x40>
+     b37:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+     b3b:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+     b3f:	84 d2                	test   %dl,%dl
+     b41:	75 ed                	jne    b30 <strcmp+0x20>
+     b43:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+     b45:	5b                   	pop    %ebx
+     b46:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+     b47:	29 c8                	sub    %ecx,%eax
+}
+     b49:	5d                   	pop    %ebp
+     b4a:	c3                   	ret    
+     b4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     b4f:	90                   	nop
+     b50:	0f b6 c2             	movzbl %dl,%eax
+     b53:	5b                   	pop    %ebx
+     b54:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+     b55:	29 c8                	sub    %ecx,%eax
+}
+     b57:	5d                   	pop    %ebp
+     b58:	c3                   	ret    
+     b59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000b60 <strlen>:
+
+uint
+strlen(const char *s)
+{
+     b60:	55                   	push   %ebp
+     b61:	89 e5                	mov    %esp,%ebp
+     b63:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+     b66:	80 39 00             	cmpb   $0x0,(%ecx)
+     b69:	74 15                	je     b80 <strlen+0x20>
+     b6b:	31 d2                	xor    %edx,%edx
+     b6d:	8d 76 00             	lea    0x0(%esi),%esi
+     b70:	83 c2 01             	add    $0x1,%edx
+     b73:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+     b77:	89 d0                	mov    %edx,%eax
+     b79:	75 f5                	jne    b70 <strlen+0x10>
+    ;
+  return n;
+}
+     b7b:	5d                   	pop    %ebp
+     b7c:	c3                   	ret    
+     b7d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+     b80:	31 c0                	xor    %eax,%eax
+}
+     b82:	5d                   	pop    %ebp
+     b83:	c3                   	ret    
+     b84:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     b8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     b8f:	90                   	nop
+
+00000b90 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+     b90:	55                   	push   %ebp
+     b91:	89 e5                	mov    %esp,%ebp
+     b93:	57                   	push   %edi
+     b94:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+     b97:	8b 4d 10             	mov    0x10(%ebp),%ecx
+     b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+     b9d:	89 d7                	mov    %edx,%edi
+     b9f:	fc                   	cld    
+     ba0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+     ba2:	89 d0                	mov    %edx,%eax
+     ba4:	5f                   	pop    %edi
+     ba5:	5d                   	pop    %ebp
+     ba6:	c3                   	ret    
+     ba7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bae:	66 90                	xchg   %ax,%ax
+
+00000bb0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+     bb0:	55                   	push   %ebp
+     bb1:	89 e5                	mov    %esp,%ebp
+     bb3:	53                   	push   %ebx
+     bb4:	8b 45 08             	mov    0x8(%ebp),%eax
+     bb7:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+     bba:	0f b6 18             	movzbl (%eax),%ebx
+     bbd:	84 db                	test   %bl,%bl
+     bbf:	74 1d                	je     bde <strchr+0x2e>
+     bc1:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+     bc3:	38 d3                	cmp    %dl,%bl
+     bc5:	75 0d                	jne    bd4 <strchr+0x24>
+     bc7:	eb 17                	jmp    be0 <strchr+0x30>
+     bc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bd0:	38 ca                	cmp    %cl,%dl
+     bd2:	74 0c                	je     be0 <strchr+0x30>
+  for(; *s; s++)
+     bd4:	83 c0 01             	add    $0x1,%eax
+     bd7:	0f b6 10             	movzbl (%eax),%edx
+     bda:	84 d2                	test   %dl,%dl
+     bdc:	75 f2                	jne    bd0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+     bde:	31 c0                	xor    %eax,%eax
+}
+     be0:	5b                   	pop    %ebx
+     be1:	5d                   	pop    %ebp
+     be2:	c3                   	ret    
+     be3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000bf0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+     bf0:	55                   	push   %ebp
+     bf1:	89 e5                	mov    %esp,%ebp
+     bf3:	57                   	push   %edi
+     bf4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     bf5:	31 f6                	xor    %esi,%esi
+{
+     bf7:	53                   	push   %ebx
+     bf8:	89 f3                	mov    %esi,%ebx
+     bfa:	83 ec 1c             	sub    $0x1c,%esp
+     bfd:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+     c00:	eb 2f                	jmp    c31 <gets+0x41>
+     c02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+     c08:	83 ec 04             	sub    $0x4,%esp
+     c0b:	8d 45 e7             	lea    -0x19(%ebp),%eax
+     c0e:	6a 01                	push   $0x1
+     c10:	50                   	push   %eax
+     c11:	6a 00                	push   $0x0
+     c13:	e8 31 01 00 00       	call   d49 <read>
+    if(cc < 1)
+     c18:	83 c4 10             	add    $0x10,%esp
+     c1b:	85 c0                	test   %eax,%eax
+     c1d:	7e 1c                	jle    c3b <gets+0x4b>
+      break;
+    buf[i++] = c;
+     c1f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+     c23:	83 c7 01             	add    $0x1,%edi
+     c26:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+     c29:	3c 0a                	cmp    $0xa,%al
+     c2b:	74 23                	je     c50 <gets+0x60>
+     c2d:	3c 0d                	cmp    $0xd,%al
+     c2f:	74 1f                	je     c50 <gets+0x60>
+  for(i=0; i+1 < max; ){
+     c31:	83 c3 01             	add    $0x1,%ebx
+     c34:	89 fe                	mov    %edi,%esi
+     c36:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+     c39:	7c cd                	jl     c08 <gets+0x18>
+     c3b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+     c3d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+     c40:	c6 03 00             	movb   $0x0,(%ebx)
+}
+     c43:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     c46:	5b                   	pop    %ebx
+     c47:	5e                   	pop    %esi
+     c48:	5f                   	pop    %edi
+     c49:	5d                   	pop    %ebp
+     c4a:	c3                   	ret    
+     c4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c4f:	90                   	nop
+     c50:	8b 75 08             	mov    0x8(%ebp),%esi
+     c53:	8b 45 08             	mov    0x8(%ebp),%eax
+     c56:	01 de                	add    %ebx,%esi
+     c58:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+     c5a:	c6 03 00             	movb   $0x0,(%ebx)
+}
+     c5d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     c60:	5b                   	pop    %ebx
+     c61:	5e                   	pop    %esi
+     c62:	5f                   	pop    %edi
+     c63:	5d                   	pop    %ebp
+     c64:	c3                   	ret    
+     c65:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000c70 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+     c70:	55                   	push   %ebp
+     c71:	89 e5                	mov    %esp,%ebp
+     c73:	56                   	push   %esi
+     c74:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+     c75:	83 ec 08             	sub    $0x8,%esp
+     c78:	6a 00                	push   $0x0
+     c7a:	ff 75 08             	pushl  0x8(%ebp)
+     c7d:	e8 ef 00 00 00       	call   d71 <open>
+  if(fd < 0)
+     c82:	83 c4 10             	add    $0x10,%esp
+     c85:	85 c0                	test   %eax,%eax
+     c87:	78 27                	js     cb0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+     c89:	83 ec 08             	sub    $0x8,%esp
+     c8c:	ff 75 0c             	pushl  0xc(%ebp)
+     c8f:	89 c3                	mov    %eax,%ebx
+     c91:	50                   	push   %eax
+     c92:	e8 f2 00 00 00       	call   d89 <fstat>
+  close(fd);
+     c97:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+     c9a:	89 c6                	mov    %eax,%esi
+  close(fd);
+     c9c:	e8 b8 00 00 00       	call   d59 <close>
+  return r;
+     ca1:	83 c4 10             	add    $0x10,%esp
+}
+     ca4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     ca7:	89 f0                	mov    %esi,%eax
+     ca9:	5b                   	pop    %ebx
+     caa:	5e                   	pop    %esi
+     cab:	5d                   	pop    %ebp
+     cac:	c3                   	ret    
+     cad:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+     cb0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+     cb5:	eb ed                	jmp    ca4 <stat+0x34>
+     cb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     cbe:	66 90                	xchg   %ax,%ax
+
+00000cc0 <atoi>:
+
+int
+atoi(const char *s)
+{
+     cc0:	55                   	push   %ebp
+     cc1:	89 e5                	mov    %esp,%ebp
+     cc3:	53                   	push   %ebx
+     cc4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+     cc7:	0f be 11             	movsbl (%ecx),%edx
+     cca:	8d 42 d0             	lea    -0x30(%edx),%eax
+     ccd:	3c 09                	cmp    $0x9,%al
+  n = 0;
+     ccf:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+     cd4:	77 1f                	ja     cf5 <atoi+0x35>
+     cd6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     cdd:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+     ce0:	83 c1 01             	add    $0x1,%ecx
+     ce3:	8d 04 80             	lea    (%eax,%eax,4),%eax
+     ce6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+     cea:	0f be 11             	movsbl (%ecx),%edx
+     ced:	8d 5a d0             	lea    -0x30(%edx),%ebx
+     cf0:	80 fb 09             	cmp    $0x9,%bl
+     cf3:	76 eb                	jbe    ce0 <atoi+0x20>
+  return n;
+}
+     cf5:	5b                   	pop    %ebx
+     cf6:	5d                   	pop    %ebp
+     cf7:	c3                   	ret    
+     cf8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     cff:	90                   	nop
+
+00000d00 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+     d00:	55                   	push   %ebp
+     d01:	89 e5                	mov    %esp,%ebp
+     d03:	57                   	push   %edi
+     d04:	8b 55 10             	mov    0x10(%ebp),%edx
+     d07:	8b 45 08             	mov    0x8(%ebp),%eax
+     d0a:	56                   	push   %esi
+     d0b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+     d0e:	85 d2                	test   %edx,%edx
+     d10:	7e 13                	jle    d25 <memmove+0x25>
+     d12:	01 c2                	add    %eax,%edx
+  dst = vdst;
+     d14:	89 c7                	mov    %eax,%edi
+     d16:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     d1d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+     d20:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+     d21:	39 fa                	cmp    %edi,%edx
+     d23:	75 fb                	jne    d20 <memmove+0x20>
+  return vdst;
+}
+     d25:	5e                   	pop    %esi
+     d26:	5f                   	pop    %edi
+     d27:	5d                   	pop    %ebp
+     d28:	c3                   	ret    
+
+00000d29 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+     d29:	b8 01 00 00 00       	mov    $0x1,%eax
+     d2e:	cd 40                	int    $0x40
+     d30:	c3                   	ret    
+
+00000d31 <exit>:
+SYSCALL(exit)
+     d31:	b8 02 00 00 00       	mov    $0x2,%eax
+     d36:	cd 40                	int    $0x40
+     d38:	c3                   	ret    
+
+00000d39 <wait>:
+SYSCALL(wait)
+     d39:	b8 03 00 00 00       	mov    $0x3,%eax
+     d3e:	cd 40                	int    $0x40
+     d40:	c3                   	ret    
+
+00000d41 <pipe>:
+SYSCALL(pipe)
+     d41:	b8 04 00 00 00       	mov    $0x4,%eax
+     d46:	cd 40                	int    $0x40
+     d48:	c3                   	ret    
+
+00000d49 <read>:
+SYSCALL(read)
+     d49:	b8 05 00 00 00       	mov    $0x5,%eax
+     d4e:	cd 40                	int    $0x40
+     d50:	c3                   	ret    
+
+00000d51 <write>:
+SYSCALL(write)
+     d51:	b8 10 00 00 00       	mov    $0x10,%eax
+     d56:	cd 40                	int    $0x40
+     d58:	c3                   	ret    
+
+00000d59 <close>:
+SYSCALL(close)
+     d59:	b8 15 00 00 00       	mov    $0x15,%eax
+     d5e:	cd 40                	int    $0x40
+     d60:	c3                   	ret    
+
+00000d61 <kill>:
+SYSCALL(kill)
+     d61:	b8 06 00 00 00       	mov    $0x6,%eax
+     d66:	cd 40                	int    $0x40
+     d68:	c3                   	ret    
+
+00000d69 <exec>:
+SYSCALL(exec)
+     d69:	b8 07 00 00 00       	mov    $0x7,%eax
+     d6e:	cd 40                	int    $0x40
+     d70:	c3                   	ret    
+
+00000d71 <open>:
+SYSCALL(open)
+     d71:	b8 0f 00 00 00       	mov    $0xf,%eax
+     d76:	cd 40                	int    $0x40
+     d78:	c3                   	ret    
+
+00000d79 <mknod>:
+SYSCALL(mknod)
+     d79:	b8 11 00 00 00       	mov    $0x11,%eax
+     d7e:	cd 40                	int    $0x40
+     d80:	c3                   	ret    
+
+00000d81 <unlink>:
+SYSCALL(unlink)
+     d81:	b8 12 00 00 00       	mov    $0x12,%eax
+     d86:	cd 40                	int    $0x40
+     d88:	c3                   	ret    
+
+00000d89 <fstat>:
+SYSCALL(fstat)
+     d89:	b8 08 00 00 00       	mov    $0x8,%eax
+     d8e:	cd 40                	int    $0x40
+     d90:	c3                   	ret    
+
+00000d91 <link>:
+SYSCALL(link)
+     d91:	b8 13 00 00 00       	mov    $0x13,%eax
+     d96:	cd 40                	int    $0x40
+     d98:	c3                   	ret    
+
+00000d99 <mkdir>:
+SYSCALL(mkdir)
+     d99:	b8 14 00 00 00       	mov    $0x14,%eax
+     d9e:	cd 40                	int    $0x40
+     da0:	c3                   	ret    
+
+00000da1 <chdir>:
+SYSCALL(chdir)
+     da1:	b8 09 00 00 00       	mov    $0x9,%eax
+     da6:	cd 40                	int    $0x40
+     da8:	c3                   	ret    
+
+00000da9 <dup>:
+SYSCALL(dup)
+     da9:	b8 0a 00 00 00       	mov    $0xa,%eax
+     dae:	cd 40                	int    $0x40
+     db0:	c3                   	ret    
+
+00000db1 <getpid>:
+SYSCALL(getpid)
+     db1:	b8 0b 00 00 00       	mov    $0xb,%eax
+     db6:	cd 40                	int    $0x40
+     db8:	c3                   	ret    
+
+00000db9 <sbrk>:
+SYSCALL(sbrk)
+     db9:	b8 0c 00 00 00       	mov    $0xc,%eax
+     dbe:	cd 40                	int    $0x40
+     dc0:	c3                   	ret    
+
+00000dc1 <sleep>:
+SYSCALL(sleep)
+     dc1:	b8 0d 00 00 00       	mov    $0xd,%eax
+     dc6:	cd 40                	int    $0x40
+     dc8:	c3                   	ret    
+
+00000dc9 <uptime>:
+SYSCALL(uptime)
+     dc9:	b8 0e 00 00 00       	mov    $0xe,%eax
+     dce:	cd 40                	int    $0x40
+     dd0:	c3                   	ret    
+     dd1:	66 90                	xchg   %ax,%ax
+     dd3:	66 90                	xchg   %ax,%ax
+     dd5:	66 90                	xchg   %ax,%ax
+     dd7:	66 90                	xchg   %ax,%ax
+     dd9:	66 90                	xchg   %ax,%ax
+     ddb:	66 90                	xchg   %ax,%ax
+     ddd:	66 90                	xchg   %ax,%ax
+     ddf:	90                   	nop
+
+00000de0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+     de0:	55                   	push   %ebp
+     de1:	89 e5                	mov    %esp,%ebp
+     de3:	57                   	push   %edi
+     de4:	56                   	push   %esi
+     de5:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+     de6:	89 d3                	mov    %edx,%ebx
+{
+     de8:	83 ec 3c             	sub    $0x3c,%esp
+     deb:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+     dee:	85 d2                	test   %edx,%edx
+     df0:	0f 89 92 00 00 00    	jns    e88 <printint+0xa8>
+     df6:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+     dfa:	0f 84 88 00 00 00    	je     e88 <printint+0xa8>
+    neg = 1;
+     e00:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+     e07:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+     e09:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+     e10:	8d 75 d7             	lea    -0x29(%ebp),%esi
+     e13:	eb 08                	jmp    e1d <printint+0x3d>
+     e15:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+     e18:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+     e1b:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+     e1d:	89 d8                	mov    %ebx,%eax
+     e1f:	31 d2                	xor    %edx,%edx
+     e21:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+     e24:	f7 f1                	div    %ecx
+     e26:	83 c7 01             	add    $0x1,%edi
+     e29:	0f b6 92 f8 12 00 00 	movzbl 0x12f8(%edx),%edx
+     e30:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+     e33:	39 d9                	cmp    %ebx,%ecx
+     e35:	76 e1                	jbe    e18 <printint+0x38>
+  if(neg)
+     e37:	8b 45 c0             	mov    -0x40(%ebp),%eax
+     e3a:	85 c0                	test   %eax,%eax
+     e3c:	74 0d                	je     e4b <printint+0x6b>
+    buf[i++] = '-';
+     e3e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+     e43:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+     e48:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+     e4b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+     e4e:	8b 7d bc             	mov    -0x44(%ebp),%edi
+     e51:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+     e55:	eb 0f                	jmp    e66 <printint+0x86>
+     e57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     e5e:	66 90                	xchg   %ax,%ax
+     e60:	0f b6 13             	movzbl (%ebx),%edx
+     e63:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+     e66:	83 ec 04             	sub    $0x4,%esp
+     e69:	88 55 d7             	mov    %dl,-0x29(%ebp)
+     e6c:	6a 01                	push   $0x1
+     e6e:	56                   	push   %esi
+     e6f:	57                   	push   %edi
+     e70:	e8 dc fe ff ff       	call   d51 <write>
+
+  while(--i >= 0)
+     e75:	83 c4 10             	add    $0x10,%esp
+     e78:	39 de                	cmp    %ebx,%esi
+     e7a:	75 e4                	jne    e60 <printint+0x80>
+    putc(fd, buf[i]);
+}
+     e7c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     e7f:	5b                   	pop    %ebx
+     e80:	5e                   	pop    %esi
+     e81:	5f                   	pop    %edi
+     e82:	5d                   	pop    %ebp
+     e83:	c3                   	ret    
+     e84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+     e88:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+     e8f:	e9 75 ff ff ff       	jmp    e09 <printint+0x29>
+     e94:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     e9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     e9f:	90                   	nop
+
+00000ea0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+     ea0:	55                   	push   %ebp
+     ea1:	89 e5                	mov    %esp,%ebp
+     ea3:	57                   	push   %edi
+     ea4:	56                   	push   %esi
+     ea5:	53                   	push   %ebx
+     ea6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+     ea9:	8b 75 0c             	mov    0xc(%ebp),%esi
+     eac:	0f b6 1e             	movzbl (%esi),%ebx
+     eaf:	84 db                	test   %bl,%bl
+     eb1:	0f 84 b9 00 00 00    	je     f70 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+     eb7:	8d 45 10             	lea    0x10(%ebp),%eax
+     eba:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+     ebd:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+     ec0:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+     ec2:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     ec5:	eb 38                	jmp    eff <printf+0x5f>
+     ec7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     ece:	66 90                	xchg   %ax,%ax
+     ed0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+     ed3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+     ed8:	83 f8 25             	cmp    $0x25,%eax
+     edb:	74 17                	je     ef4 <printf+0x54>
+  write(fd, &c, 1);
+     edd:	83 ec 04             	sub    $0x4,%esp
+     ee0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+     ee3:	6a 01                	push   $0x1
+     ee5:	57                   	push   %edi
+     ee6:	ff 75 08             	pushl  0x8(%ebp)
+     ee9:	e8 63 fe ff ff       	call   d51 <write>
+     eee:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+     ef1:	83 c4 10             	add    $0x10,%esp
+     ef4:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+     ef7:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+     efb:	84 db                	test   %bl,%bl
+     efd:	74 71                	je     f70 <printf+0xd0>
+    c = fmt[i] & 0xff;
+     eff:	0f be cb             	movsbl %bl,%ecx
+     f02:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+     f05:	85 d2                	test   %edx,%edx
+     f07:	74 c7                	je     ed0 <printf+0x30>
+      }
+    } else if(state == '%'){
+     f09:	83 fa 25             	cmp    $0x25,%edx
+     f0c:	75 e6                	jne    ef4 <printf+0x54>
+      if(c == 'd'){
+     f0e:	83 f8 64             	cmp    $0x64,%eax
+     f11:	0f 84 99 00 00 00    	je     fb0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+     f17:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+     f1d:	83 f9 70             	cmp    $0x70,%ecx
+     f20:	74 5e                	je     f80 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+     f22:	83 f8 73             	cmp    $0x73,%eax
+     f25:	0f 84 d5 00 00 00    	je     1000 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+     f2b:	83 f8 63             	cmp    $0x63,%eax
+     f2e:	0f 84 8c 00 00 00    	je     fc0 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+     f34:	83 f8 25             	cmp    $0x25,%eax
+     f37:	0f 84 b3 00 00 00    	je     ff0 <printf+0x150>
+  write(fd, &c, 1);
+     f3d:	83 ec 04             	sub    $0x4,%esp
+     f40:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+     f44:	6a 01                	push   $0x1
+     f46:	57                   	push   %edi
+     f47:	ff 75 08             	pushl  0x8(%ebp)
+     f4a:	e8 02 fe ff ff       	call   d51 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+     f4f:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+     f52:	83 c4 0c             	add    $0xc,%esp
+     f55:	6a 01                	push   $0x1
+     f57:	83 c6 01             	add    $0x1,%esi
+     f5a:	57                   	push   %edi
+     f5b:	ff 75 08             	pushl  0x8(%ebp)
+     f5e:	e8 ee fd ff ff       	call   d51 <write>
+  for(i = 0; fmt[i]; i++){
+     f63:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+     f67:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+     f6a:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+     f6c:	84 db                	test   %bl,%bl
+     f6e:	75 8f                	jne    eff <printf+0x5f>
+    }
+  }
+}
+     f70:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     f73:	5b                   	pop    %ebx
+     f74:	5e                   	pop    %esi
+     f75:	5f                   	pop    %edi
+     f76:	5d                   	pop    %ebp
+     f77:	c3                   	ret    
+     f78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f7f:	90                   	nop
+        printint(fd, *ap, 16, 0);
+     f80:	83 ec 0c             	sub    $0xc,%esp
+     f83:	b9 10 00 00 00       	mov    $0x10,%ecx
+     f88:	6a 00                	push   $0x0
+     f8a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+     f8d:	8b 45 08             	mov    0x8(%ebp),%eax
+     f90:	8b 13                	mov    (%ebx),%edx
+     f92:	e8 49 fe ff ff       	call   de0 <printint>
+        ap++;
+     f97:	89 d8                	mov    %ebx,%eax
+     f99:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+     f9c:	31 d2                	xor    %edx,%edx
+        ap++;
+     f9e:	83 c0 04             	add    $0x4,%eax
+     fa1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     fa4:	e9 4b ff ff ff       	jmp    ef4 <printf+0x54>
+     fa9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+     fb0:	83 ec 0c             	sub    $0xc,%esp
+     fb3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+     fb8:	6a 01                	push   $0x1
+     fba:	eb ce                	jmp    f8a <printf+0xea>
+     fbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+     fc0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+     fc3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+     fc6:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+     fc8:	6a 01                	push   $0x1
+        ap++;
+     fca:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+     fcd:	57                   	push   %edi
+     fce:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+     fd1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+     fd4:	e8 78 fd ff ff       	call   d51 <write>
+        ap++;
+     fd9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+     fdc:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+     fdf:	31 d2                	xor    %edx,%edx
+     fe1:	e9 0e ff ff ff       	jmp    ef4 <printf+0x54>
+     fe6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     fed:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+     ff0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+     ff3:	83 ec 04             	sub    $0x4,%esp
+     ff6:	e9 5a ff ff ff       	jmp    f55 <printf+0xb5>
+     ffb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     fff:	90                   	nop
+        s = (char*)*ap;
+    1000:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    1003:	8b 18                	mov    (%eax),%ebx
+        ap++;
+    1005:	83 c0 04             	add    $0x4,%eax
+    1008:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+    100b:	85 db                	test   %ebx,%ebx
+    100d:	74 17                	je     1026 <printf+0x186>
+        while(*s != 0){
+    100f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+    1012:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+    1014:	84 c0                	test   %al,%al
+    1016:	0f 84 d8 fe ff ff    	je     ef4 <printf+0x54>
+    101c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    101f:	89 de                	mov    %ebx,%esi
+    1021:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1024:	eb 1a                	jmp    1040 <printf+0x1a0>
+          s = "(null)";
+    1026:	bb f0 12 00 00       	mov    $0x12f0,%ebx
+        while(*s != 0){
+    102b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    102e:	b8 28 00 00 00       	mov    $0x28,%eax
+    1033:	89 de                	mov    %ebx,%esi
+    1035:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1038:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    103f:	90                   	nop
+  write(fd, &c, 1);
+    1040:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    1043:	83 c6 01             	add    $0x1,%esi
+    1046:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    1049:	6a 01                	push   $0x1
+    104b:	57                   	push   %edi
+    104c:	53                   	push   %ebx
+    104d:	e8 ff fc ff ff       	call   d51 <write>
+        while(*s != 0){
+    1052:	0f b6 06             	movzbl (%esi),%eax
+    1055:	83 c4 10             	add    $0x10,%esp
+    1058:	84 c0                	test   %al,%al
+    105a:	75 e4                	jne    1040 <printf+0x1a0>
+    105c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+    105f:	31 d2                	xor    %edx,%edx
+    1061:	e9 8e fe ff ff       	jmp    ef4 <printf+0x54>
+    1066:	66 90                	xchg   %ax,%ax
+    1068:	66 90                	xchg   %ax,%ax
+    106a:	66 90                	xchg   %ax,%ax
+    106c:	66 90                	xchg   %ax,%ax
+    106e:	66 90                	xchg   %ax,%ax
+
+00001070 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    1070:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    1071:	a1 44 19 00 00       	mov    0x1944,%eax
+{
+    1076:	89 e5                	mov    %esp,%ebp
+    1078:	57                   	push   %edi
+    1079:	56                   	push   %esi
+    107a:	53                   	push   %ebx
+    107b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    107e:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+    1080:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    1083:	39 c8                	cmp    %ecx,%eax
+    1085:	73 19                	jae    10a0 <free+0x30>
+    1087:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    108e:	66 90                	xchg   %ax,%ax
+    1090:	39 d1                	cmp    %edx,%ecx
+    1092:	72 14                	jb     10a8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    1094:	39 d0                	cmp    %edx,%eax
+    1096:	73 10                	jae    10a8 <free+0x38>
+{
+    1098:	89 d0                	mov    %edx,%eax
+    109a:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    109c:	39 c8                	cmp    %ecx,%eax
+    109e:	72 f0                	jb     1090 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    10a0:	39 d0                	cmp    %edx,%eax
+    10a2:	72 f4                	jb     1098 <free+0x28>
+    10a4:	39 d1                	cmp    %edx,%ecx
+    10a6:	73 f0                	jae    1098 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    10a8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    10ab:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    10ae:	39 fa                	cmp    %edi,%edx
+    10b0:	74 1e                	je     10d0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    10b2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    10b5:	8b 50 04             	mov    0x4(%eax),%edx
+    10b8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    10bb:	39 f1                	cmp    %esi,%ecx
+    10bd:	74 28                	je     10e7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    10bf:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+    10c1:	5b                   	pop    %ebx
+  freep = p;
+    10c2:	a3 44 19 00 00       	mov    %eax,0x1944
+}
+    10c7:	5e                   	pop    %esi
+    10c8:	5f                   	pop    %edi
+    10c9:	5d                   	pop    %ebp
+    10ca:	c3                   	ret    
+    10cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    10cf:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+    10d0:	03 72 04             	add    0x4(%edx),%esi
+    10d3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    10d6:	8b 10                	mov    (%eax),%edx
+    10d8:	8b 12                	mov    (%edx),%edx
+    10da:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    10dd:	8b 50 04             	mov    0x4(%eax),%edx
+    10e0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    10e3:	39 f1                	cmp    %esi,%ecx
+    10e5:	75 d8                	jne    10bf <free+0x4f>
+    p->s.size += bp->s.size;
+    10e7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+    10ea:	a3 44 19 00 00       	mov    %eax,0x1944
+    p->s.size += bp->s.size;
+    10ef:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    10f2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    10f5:	89 10                	mov    %edx,(%eax)
+}
+    10f7:	5b                   	pop    %ebx
+    10f8:	5e                   	pop    %esi
+    10f9:	5f                   	pop    %edi
+    10fa:	5d                   	pop    %ebp
+    10fb:	c3                   	ret    
+    10fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001100 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    1100:	55                   	push   %ebp
+    1101:	89 e5                	mov    %esp,%ebp
+    1103:	57                   	push   %edi
+    1104:	56                   	push   %esi
+    1105:	53                   	push   %ebx
+    1106:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    1109:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    110c:	8b 3d 44 19 00 00    	mov    0x1944,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    1112:	8d 70 07             	lea    0x7(%eax),%esi
+    1115:	c1 ee 03             	shr    $0x3,%esi
+    1118:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+    111b:	85 ff                	test   %edi,%edi
+    111d:	0f 84 ad 00 00 00    	je     11d0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1123:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+    1125:	8b 4a 04             	mov    0x4(%edx),%ecx
+    1128:	39 f1                	cmp    %esi,%ecx
+    112a:	73 72                	jae    119e <malloc+0x9e>
+    112c:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    1132:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    1137:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    113a:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+    1141:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    1144:	eb 1b                	jmp    1161 <malloc+0x61>
+    1146:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    114d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1150:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+    1152:	8b 48 04             	mov    0x4(%eax),%ecx
+    1155:	39 f1                	cmp    %esi,%ecx
+    1157:	73 4f                	jae    11a8 <malloc+0xa8>
+    1159:	8b 3d 44 19 00 00    	mov    0x1944,%edi
+    115f:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    1161:	39 d7                	cmp    %edx,%edi
+    1163:	75 eb                	jne    1150 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+    1165:	83 ec 0c             	sub    $0xc,%esp
+    1168:	ff 75 e4             	pushl  -0x1c(%ebp)
+    116b:	e8 49 fc ff ff       	call   db9 <sbrk>
+  if(p == (char*)-1)
+    1170:	83 c4 10             	add    $0x10,%esp
+    1173:	83 f8 ff             	cmp    $0xffffffff,%eax
+    1176:	74 1c                	je     1194 <malloc+0x94>
+  hp->s.size = nu;
+    1178:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    117b:	83 ec 0c             	sub    $0xc,%esp
+    117e:	83 c0 08             	add    $0x8,%eax
+    1181:	50                   	push   %eax
+    1182:	e8 e9 fe ff ff       	call   1070 <free>
+  return freep;
+    1187:	8b 15 44 19 00 00    	mov    0x1944,%edx
+      if((p = morecore(nunits)) == 0)
+    118d:	83 c4 10             	add    $0x10,%esp
+    1190:	85 d2                	test   %edx,%edx
+    1192:	75 bc                	jne    1150 <malloc+0x50>
+        return 0;
+  }
+}
+    1194:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    1197:	31 c0                	xor    %eax,%eax
+}
+    1199:	5b                   	pop    %ebx
+    119a:	5e                   	pop    %esi
+    119b:	5f                   	pop    %edi
+    119c:	5d                   	pop    %ebp
+    119d:	c3                   	ret    
+    if(p->s.size >= nunits){
+    119e:	89 d0                	mov    %edx,%eax
+    11a0:	89 fa                	mov    %edi,%edx
+    11a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+    11a8:	39 ce                	cmp    %ecx,%esi
+    11aa:	74 54                	je     1200 <malloc+0x100>
+        p->s.size -= nunits;
+    11ac:	29 f1                	sub    %esi,%ecx
+    11ae:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+    11b1:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+    11b4:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+    11b7:	89 15 44 19 00 00    	mov    %edx,0x1944
+}
+    11bd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    11c0:	83 c0 08             	add    $0x8,%eax
+}
+    11c3:	5b                   	pop    %ebx
+    11c4:	5e                   	pop    %esi
+    11c5:	5f                   	pop    %edi
+    11c6:	5d                   	pop    %ebp
+    11c7:	c3                   	ret    
+    11c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    11cf:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+    11d0:	c7 05 44 19 00 00 48 	movl   $0x1948,0x1944
+    11d7:	19 00 00 
+    base.s.size = 0;
+    11da:	bf 48 19 00 00       	mov    $0x1948,%edi
+    base.s.ptr = freep = prevp = &base;
+    11df:	c7 05 48 19 00 00 48 	movl   $0x1948,0x1948
+    11e6:	19 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    11e9:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+    11eb:	c7 05 4c 19 00 00 00 	movl   $0x0,0x194c
+    11f2:	00 00 00 
+    if(p->s.size >= nunits){
+    11f5:	e9 32 ff ff ff       	jmp    112c <malloc+0x2c>
+    11fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+    1200:	8b 08                	mov    (%eax),%ecx
+    1202:	89 0a                	mov    %ecx,(%edx)
+    1204:	eb b1                	jmp    11b7 <malloc+0xb7>
diff -urN xv6-public/sh.d xv6-public-new/sh.d
--- xv6-public/sh.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/sh.d	2019-10-04 10:45:48.924028893 +0530
@@ -0,0 +1 @@
+sh.o: sh.c /usr/include/stdc-predef.h types.h user.h fcntl.h
Binary files xv6-public/sh.o and xv6-public-new/sh.o differ
diff -urN xv6-public/sh.sym xv6-public-new/sh.sym
--- xv6-public/sh.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/sh.sym	2019-10-04 10:45:48.944028894 +0530
@@ -0,0 +1,79 @@
+00000000 .text
+00001208 .rodata
+0000130c .eh_frame
+000018c8 .data
+000018e0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 sh.c
+000018e0 buf.1139
+00000000 ulib.c
+00000000 printf.c
+00000de0 printint
+000012f8 digits.1101
+00000000 umalloc.c
+00001944 freep
+00001948 base
+00000ae0 strcpy
+00000ea0 printf
+00000d00 memmove
+00000d79 mknod
+00000350 execcmd
+00000bf0 gets
+00000db1 getpid
+00000820 parsepipe
+00000a70 parsecmd
+00000450 backcmd
+000005e0 peek
+00000660 parseredirs
+00000480 gettoken
+00001100 malloc
+00000dc1 sleep
+000018d0 whitespace
+00000330 fork1
+000009c0 nulterminate
+00000d41 pipe
+00000110 getcmd
+00000d51 write
+00000d89 fstat
+00000d61 kill
+00000da1 chdir
+00000890 parseline
+00000180 runcmd
+00000930 parseblock
+00000d69 exec
+00000d39 wait
+000018c8 symbols
+00000d49 read
+00000710 parseexec
+00000d81 unlink
+00000160 panic
+00000d29 fork
+00000db9 sbrk
+00000dc9 uptime
+000018d6 __bss_start
+00000b90 memset
+00000000 main
+00000b10 strcmp
+00000da9 dup
+000003d0 pipecmd
+00000380 redircmd
+00000c70 stat
+000018d6 _edata
+00001950 _end
+00000d91 link
+00000d31 exit
+00000cc0 atoi
+00000b60 strlen
+00000d71 open
+00000bb0 strchr
+00000d99 mkdir
+00000d59 close
+00000410 listcmd
+00001070 free
diff -urN xv6-public/sleeplock.d xv6-public-new/sleeplock.d
--- xv6-public/sleeplock.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/sleeplock.d	2019-10-04 10:45:50.336028960 +0530
@@ -0,0 +1,2 @@
+sleeplock.o: sleeplock.c /usr/include/stdc-predef.h types.h defs.h \
+ param.h x86.h memlayout.h mmu.h proc.h spinlock.h sleeplock.h
Binary files xv6-public/sleeplock.o and xv6-public-new/sleeplock.o differ
diff -urN xv6-public/spinlock.d xv6-public-new/spinlock.d
--- xv6-public/spinlock.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/spinlock.d	2019-10-04 10:45:50.380028963 +0530
@@ -0,0 +1,2 @@
+spinlock.o: spinlock.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ x86.h memlayout.h mmu.h proc.h spinlock.h
Binary files xv6-public/spinlock.o and xv6-public-new/spinlock.o differ
Binary files xv6-public/_stressfs and xv6-public-new/_stressfs differ
diff -urN xv6-public/stressfs.asm xv6-public-new/stressfs.asm
--- xv6-public/stressfs.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/stressfs.asm	2019-10-04 10:45:48.980028896 +0530
@@ -0,0 +1,1289 @@
+
+_stressfs:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "fs.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+  int fd, i;
+  char path[] = "stressfs0";
+   7:	b8 30 00 00 00       	mov    $0x30,%eax
+{
+   c:	ff 71 fc             	pushl  -0x4(%ecx)
+   f:	55                   	push   %ebp
+  10:	89 e5                	mov    %esp,%ebp
+  12:	57                   	push   %edi
+  13:	56                   	push   %esi
+  char data[512];
+
+  printf(1, "stressfs starting\n");
+  memset(data, 'a', sizeof(data));
+  14:	8d b5 e8 fd ff ff    	lea    -0x218(%ebp),%esi
+{
+  1a:	53                   	push   %ebx
+
+  for(i = 0; i < 4; i++)
+  1b:	31 db                	xor    %ebx,%ebx
+{
+  1d:	51                   	push   %ecx
+  1e:	81 ec 20 02 00 00    	sub    $0x220,%esp
+  char path[] = "stressfs0";
+  24:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
+  printf(1, "stressfs starting\n");
+  2b:	68 68 08 00 00       	push   $0x868
+  30:	6a 01                	push   $0x1
+  char path[] = "stressfs0";
+  32:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
+  39:	74 72 65 
+  3c:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
+  43:	73 66 73 
+  printf(1, "stressfs starting\n");
+  46:	e8 b5 04 00 00       	call   500 <printf>
+  memset(data, 'a', sizeof(data));
+  4b:	83 c4 0c             	add    $0xc,%esp
+  4e:	68 00 02 00 00       	push   $0x200
+  53:	6a 61                	push   $0x61
+  55:	56                   	push   %esi
+  56:	e8 95 01 00 00       	call   1f0 <memset>
+  5b:	83 c4 10             	add    $0x10,%esp
+    if(fork() > 0)
+  5e:	e8 26 03 00 00       	call   389 <fork>
+  63:	85 c0                	test   %eax,%eax
+  65:	0f 8f bf 00 00 00    	jg     12a <main+0x12a>
+  for(i = 0; i < 4; i++)
+  6b:	83 c3 01             	add    $0x1,%ebx
+  6e:	83 fb 04             	cmp    $0x4,%ebx
+  71:	75 eb                	jne    5e <main+0x5e>
+  73:	bf 04 00 00 00       	mov    $0x4,%edi
+      break;
+
+  printf(1, "write %d\n", i);
+  78:	83 ec 04             	sub    $0x4,%esp
+  7b:	53                   	push   %ebx
+
+  path[8] += i;
+  fd = open(path, O_CREATE | O_RDWR);
+  7c:	bb 14 00 00 00       	mov    $0x14,%ebx
+  printf(1, "write %d\n", i);
+  81:	68 7b 08 00 00       	push   $0x87b
+  86:	6a 01                	push   $0x1
+  88:	e8 73 04 00 00       	call   500 <printf>
+  path[8] += i;
+  8d:	89 f8                	mov    %edi,%eax
+  fd = open(path, O_CREATE | O_RDWR);
+  8f:	5f                   	pop    %edi
+  path[8] += i;
+  90:	00 85 e6 fd ff ff    	add    %al,-0x21a(%ebp)
+  fd = open(path, O_CREATE | O_RDWR);
+  96:	58                   	pop    %eax
+  97:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  9d:	68 02 02 00 00       	push   $0x202
+  a2:	50                   	push   %eax
+  a3:	e8 29 03 00 00       	call   3d1 <open>
+  a8:	83 c4 10             	add    $0x10,%esp
+  ab:	89 c7                	mov    %eax,%edi
+  for(i = 0; i < 20; i++)
+  ad:	8d 76 00             	lea    0x0(%esi),%esi
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  b0:	83 ec 04             	sub    $0x4,%esp
+  b3:	68 00 02 00 00       	push   $0x200
+  b8:	56                   	push   %esi
+  b9:	57                   	push   %edi
+  ba:	e8 f2 02 00 00       	call   3b1 <write>
+  for(i = 0; i < 20; i++)
+  bf:	83 c4 10             	add    $0x10,%esp
+  c2:	83 eb 01             	sub    $0x1,%ebx
+  c5:	75 e9                	jne    b0 <main+0xb0>
+  close(fd);
+  c7:	83 ec 0c             	sub    $0xc,%esp
+  ca:	57                   	push   %edi
+  cb:	e8 e9 02 00 00       	call   3b9 <close>
+
+  printf(1, "read\n");
+  d0:	58                   	pop    %eax
+  d1:	5a                   	pop    %edx
+  d2:	68 85 08 00 00       	push   $0x885
+  d7:	6a 01                	push   $0x1
+  d9:	e8 22 04 00 00       	call   500 <printf>
+
+  fd = open(path, O_RDONLY);
+  de:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  e4:	59                   	pop    %ecx
+  e5:	5b                   	pop    %ebx
+  e6:	6a 00                	push   $0x0
+  e8:	bb 14 00 00 00       	mov    $0x14,%ebx
+  ed:	50                   	push   %eax
+  ee:	e8 de 02 00 00       	call   3d1 <open>
+  f3:	83 c4 10             	add    $0x10,%esp
+  f6:	89 c7                	mov    %eax,%edi
+  for (i = 0; i < 20; i++)
+  f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ff:	90                   	nop
+    read(fd, data, sizeof(data));
+ 100:	83 ec 04             	sub    $0x4,%esp
+ 103:	68 00 02 00 00       	push   $0x200
+ 108:	56                   	push   %esi
+ 109:	57                   	push   %edi
+ 10a:	e8 9a 02 00 00       	call   3a9 <read>
+  for (i = 0; i < 20; i++)
+ 10f:	83 c4 10             	add    $0x10,%esp
+ 112:	83 eb 01             	sub    $0x1,%ebx
+ 115:	75 e9                	jne    100 <main+0x100>
+  close(fd);
+ 117:	83 ec 0c             	sub    $0xc,%esp
+ 11a:	57                   	push   %edi
+ 11b:	e8 99 02 00 00       	call   3b9 <close>
+
+  wait();
+ 120:	e8 74 02 00 00       	call   399 <wait>
+
+  exit();
+ 125:	e8 67 02 00 00       	call   391 <exit>
+ 12a:	89 df                	mov    %ebx,%edi
+ 12c:	e9 47 ff ff ff       	jmp    78 <main+0x78>
+ 131:	66 90                	xchg   %ax,%ax
+ 133:	66 90                	xchg   %ax,%ax
+ 135:	66 90                	xchg   %ax,%ax
+ 137:	66 90                	xchg   %ax,%ax
+ 139:	66 90                	xchg   %ax,%ax
+ 13b:	66 90                	xchg   %ax,%ax
+ 13d:	66 90                	xchg   %ax,%ax
+ 13f:	90                   	nop
+
+00000140 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 140:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 141:	31 d2                	xor    %edx,%edx
+{
+ 143:	89 e5                	mov    %esp,%ebp
+ 145:	53                   	push   %ebx
+ 146:	8b 45 08             	mov    0x8(%ebp),%eax
+ 149:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 150:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+ 154:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 157:	83 c2 01             	add    $0x1,%edx
+ 15a:	84 c9                	test   %cl,%cl
+ 15c:	75 f2                	jne    150 <strcpy+0x10>
+    ;
+  return os;
+}
+ 15e:	5b                   	pop    %ebx
+ 15f:	5d                   	pop    %ebp
+ 160:	c3                   	ret    
+ 161:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 168:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16f:	90                   	nop
+
+00000170 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	56                   	push   %esi
+ 174:	53                   	push   %ebx
+ 175:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 178:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+ 17b:	0f b6 13             	movzbl (%ebx),%edx
+ 17e:	0f b6 0e             	movzbl (%esi),%ecx
+ 181:	84 d2                	test   %dl,%dl
+ 183:	74 1e                	je     1a3 <strcmp+0x33>
+ 185:	b8 01 00 00 00       	mov    $0x1,%eax
+ 18a:	38 ca                	cmp    %cl,%dl
+ 18c:	74 09                	je     197 <strcmp+0x27>
+ 18e:	eb 20                	jmp    1b0 <strcmp+0x40>
+ 190:	83 c0 01             	add    $0x1,%eax
+ 193:	38 ca                	cmp    %cl,%dl
+ 195:	75 19                	jne    1b0 <strcmp+0x40>
+ 197:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 19b:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+ 19f:	84 d2                	test   %dl,%dl
+ 1a1:	75 ed                	jne    190 <strcmp+0x20>
+ 1a3:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+ 1a5:	5b                   	pop    %ebx
+ 1a6:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 1a7:	29 c8                	sub    %ecx,%eax
+}
+ 1a9:	5d                   	pop    %ebp
+ 1aa:	c3                   	ret    
+ 1ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1af:	90                   	nop
+ 1b0:	0f b6 c2             	movzbl %dl,%eax
+ 1b3:	5b                   	pop    %ebx
+ 1b4:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 1b5:	29 c8                	sub    %ecx,%eax
+}
+ 1b7:	5d                   	pop    %ebp
+ 1b8:	c3                   	ret    
+ 1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000001c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1c6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 1c9:	74 15                	je     1e0 <strlen+0x20>
+ 1cb:	31 d2                	xor    %edx,%edx
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1d0:	83 c2 01             	add    $0x1,%edx
+ 1d3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1d7:	89 d0                	mov    %edx,%eax
+ 1d9:	75 f5                	jne    1d0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1db:	5d                   	pop    %ebp
+ 1dc:	c3                   	ret    
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 1e0:	31 c0                	xor    %eax,%eax
+}
+ 1e2:	5d                   	pop    %ebp
+ 1e3:	c3                   	ret    
+ 1e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1ef:	90                   	nop
+
+000001f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	57                   	push   %edi
+ 1f4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1fd:	89 d7                	mov    %edx,%edi
+ 1ff:	fc                   	cld    
+ 200:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 202:	89 d0                	mov    %edx,%eax
+ 204:	5f                   	pop    %edi
+ 205:	5d                   	pop    %ebp
+ 206:	c3                   	ret    
+ 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20e:	66 90                	xchg   %ax,%ax
+
+00000210 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 45 08             	mov    0x8(%ebp),%eax
+ 217:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 21a:	0f b6 18             	movzbl (%eax),%ebx
+ 21d:	84 db                	test   %bl,%bl
+ 21f:	74 1d                	je     23e <strchr+0x2e>
+ 221:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 223:	38 d3                	cmp    %dl,%bl
+ 225:	75 0d                	jne    234 <strchr+0x24>
+ 227:	eb 17                	jmp    240 <strchr+0x30>
+ 229:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 230:	38 ca                	cmp    %cl,%dl
+ 232:	74 0c                	je     240 <strchr+0x30>
+  for(; *s; s++)
+ 234:	83 c0 01             	add    $0x1,%eax
+ 237:	0f b6 10             	movzbl (%eax),%edx
+ 23a:	84 d2                	test   %dl,%dl
+ 23c:	75 f2                	jne    230 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 23e:	31 c0                	xor    %eax,%eax
+}
+ 240:	5b                   	pop    %ebx
+ 241:	5d                   	pop    %ebp
+ 242:	c3                   	ret    
+ 243:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000250 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	57                   	push   %edi
+ 254:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 255:	31 f6                	xor    %esi,%esi
+{
+ 257:	53                   	push   %ebx
+ 258:	89 f3                	mov    %esi,%ebx
+ 25a:	83 ec 1c             	sub    $0x1c,%esp
+ 25d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 260:	eb 2f                	jmp    291 <gets+0x41>
+ 262:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 268:	83 ec 04             	sub    $0x4,%esp
+ 26b:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 26e:	6a 01                	push   $0x1
+ 270:	50                   	push   %eax
+ 271:	6a 00                	push   $0x0
+ 273:	e8 31 01 00 00       	call   3a9 <read>
+    if(cc < 1)
+ 278:	83 c4 10             	add    $0x10,%esp
+ 27b:	85 c0                	test   %eax,%eax
+ 27d:	7e 1c                	jle    29b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 27f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 283:	83 c7 01             	add    $0x1,%edi
+ 286:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 289:	3c 0a                	cmp    $0xa,%al
+ 28b:	74 23                	je     2b0 <gets+0x60>
+ 28d:	3c 0d                	cmp    $0xd,%al
+ 28f:	74 1f                	je     2b0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 291:	83 c3 01             	add    $0x1,%ebx
+ 294:	89 fe                	mov    %edi,%esi
+ 296:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 299:	7c cd                	jl     268 <gets+0x18>
+ 29b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 29d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2a0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2a3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2a6:	5b                   	pop    %ebx
+ 2a7:	5e                   	pop    %esi
+ 2a8:	5f                   	pop    %edi
+ 2a9:	5d                   	pop    %ebp
+ 2aa:	c3                   	ret    
+ 2ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2af:	90                   	nop
+ 2b0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2b3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2b6:	01 de                	add    %ebx,%esi
+ 2b8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2ba:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2bd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2c0:	5b                   	pop    %ebx
+ 2c1:	5e                   	pop    %esi
+ 2c2:	5f                   	pop    %edi
+ 2c3:	5d                   	pop    %ebp
+ 2c4:	c3                   	ret    
+ 2c5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2d0:	55                   	push   %ebp
+ 2d1:	89 e5                	mov    %esp,%ebp
+ 2d3:	56                   	push   %esi
+ 2d4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2d5:	83 ec 08             	sub    $0x8,%esp
+ 2d8:	6a 00                	push   $0x0
+ 2da:	ff 75 08             	pushl  0x8(%ebp)
+ 2dd:	e8 ef 00 00 00       	call   3d1 <open>
+  if(fd < 0)
+ 2e2:	83 c4 10             	add    $0x10,%esp
+ 2e5:	85 c0                	test   %eax,%eax
+ 2e7:	78 27                	js     310 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2e9:	83 ec 08             	sub    $0x8,%esp
+ 2ec:	ff 75 0c             	pushl  0xc(%ebp)
+ 2ef:	89 c3                	mov    %eax,%ebx
+ 2f1:	50                   	push   %eax
+ 2f2:	e8 f2 00 00 00       	call   3e9 <fstat>
+  close(fd);
+ 2f7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2fa:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2fc:	e8 b8 00 00 00       	call   3b9 <close>
+  return r;
+ 301:	83 c4 10             	add    $0x10,%esp
+}
+ 304:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 307:	89 f0                	mov    %esi,%eax
+ 309:	5b                   	pop    %ebx
+ 30a:	5e                   	pop    %esi
+ 30b:	5d                   	pop    %ebp
+ 30c:	c3                   	ret    
+ 30d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 310:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 315:	eb ed                	jmp    304 <stat+0x34>
+ 317:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 31e:	66 90                	xchg   %ax,%ax
+
+00000320 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 320:	55                   	push   %ebp
+ 321:	89 e5                	mov    %esp,%ebp
+ 323:	53                   	push   %ebx
+ 324:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 327:	0f be 11             	movsbl (%ecx),%edx
+ 32a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 32d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 32f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 334:	77 1f                	ja     355 <atoi+0x35>
+ 336:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 33d:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 340:	83 c1 01             	add    $0x1,%ecx
+ 343:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 346:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 34a:	0f be 11             	movsbl (%ecx),%edx
+ 34d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 350:	80 fb 09             	cmp    $0x9,%bl
+ 353:	76 eb                	jbe    340 <atoi+0x20>
+  return n;
+}
+ 355:	5b                   	pop    %ebx
+ 356:	5d                   	pop    %ebp
+ 357:	c3                   	ret    
+ 358:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 35f:	90                   	nop
+
+00000360 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	8b 55 10             	mov    0x10(%ebp),%edx
+ 367:	8b 45 08             	mov    0x8(%ebp),%eax
+ 36a:	56                   	push   %esi
+ 36b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 36e:	85 d2                	test   %edx,%edx
+ 370:	7e 13                	jle    385 <memmove+0x25>
+ 372:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 374:	89 c7                	mov    %eax,%edi
+ 376:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 37d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 380:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 381:	39 fa                	cmp    %edi,%edx
+ 383:	75 fb                	jne    380 <memmove+0x20>
+  return vdst;
+}
+ 385:	5e                   	pop    %esi
+ 386:	5f                   	pop    %edi
+ 387:	5d                   	pop    %ebp
+ 388:	c3                   	ret    
+
+00000389 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 389:	b8 01 00 00 00       	mov    $0x1,%eax
+ 38e:	cd 40                	int    $0x40
+ 390:	c3                   	ret    
+
+00000391 <exit>:
+SYSCALL(exit)
+ 391:	b8 02 00 00 00       	mov    $0x2,%eax
+ 396:	cd 40                	int    $0x40
+ 398:	c3                   	ret    
+
+00000399 <wait>:
+SYSCALL(wait)
+ 399:	b8 03 00 00 00       	mov    $0x3,%eax
+ 39e:	cd 40                	int    $0x40
+ 3a0:	c3                   	ret    
+
+000003a1 <pipe>:
+SYSCALL(pipe)
+ 3a1:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3a6:	cd 40                	int    $0x40
+ 3a8:	c3                   	ret    
+
+000003a9 <read>:
+SYSCALL(read)
+ 3a9:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3ae:	cd 40                	int    $0x40
+ 3b0:	c3                   	ret    
+
+000003b1 <write>:
+SYSCALL(write)
+ 3b1:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3b6:	cd 40                	int    $0x40
+ 3b8:	c3                   	ret    
+
+000003b9 <close>:
+SYSCALL(close)
+ 3b9:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3be:	cd 40                	int    $0x40
+ 3c0:	c3                   	ret    
+
+000003c1 <kill>:
+SYSCALL(kill)
+ 3c1:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3c6:	cd 40                	int    $0x40
+ 3c8:	c3                   	ret    
+
+000003c9 <exec>:
+SYSCALL(exec)
+ 3c9:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3ce:	cd 40                	int    $0x40
+ 3d0:	c3                   	ret    
+
+000003d1 <open>:
+SYSCALL(open)
+ 3d1:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3d6:	cd 40                	int    $0x40
+ 3d8:	c3                   	ret    
+
+000003d9 <mknod>:
+SYSCALL(mknod)
+ 3d9:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3de:	cd 40                	int    $0x40
+ 3e0:	c3                   	ret    
+
+000003e1 <unlink>:
+SYSCALL(unlink)
+ 3e1:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3e6:	cd 40                	int    $0x40
+ 3e8:	c3                   	ret    
+
+000003e9 <fstat>:
+SYSCALL(fstat)
+ 3e9:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3ee:	cd 40                	int    $0x40
+ 3f0:	c3                   	ret    
+
+000003f1 <link>:
+SYSCALL(link)
+ 3f1:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3f6:	cd 40                	int    $0x40
+ 3f8:	c3                   	ret    
+
+000003f9 <mkdir>:
+SYSCALL(mkdir)
+ 3f9:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3fe:	cd 40                	int    $0x40
+ 400:	c3                   	ret    
+
+00000401 <chdir>:
+SYSCALL(chdir)
+ 401:	b8 09 00 00 00       	mov    $0x9,%eax
+ 406:	cd 40                	int    $0x40
+ 408:	c3                   	ret    
+
+00000409 <dup>:
+SYSCALL(dup)
+ 409:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 40e:	cd 40                	int    $0x40
+ 410:	c3                   	ret    
+
+00000411 <getpid>:
+SYSCALL(getpid)
+ 411:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 416:	cd 40                	int    $0x40
+ 418:	c3                   	ret    
+
+00000419 <sbrk>:
+SYSCALL(sbrk)
+ 419:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 41e:	cd 40                	int    $0x40
+ 420:	c3                   	ret    
+
+00000421 <sleep>:
+SYSCALL(sleep)
+ 421:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 426:	cd 40                	int    $0x40
+ 428:	c3                   	ret    
+
+00000429 <uptime>:
+SYSCALL(uptime)
+ 429:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 42e:	cd 40                	int    $0x40
+ 430:	c3                   	ret    
+ 431:	66 90                	xchg   %ax,%ax
+ 433:	66 90                	xchg   %ax,%ax
+ 435:	66 90                	xchg   %ax,%ax
+ 437:	66 90                	xchg   %ax,%ax
+ 439:	66 90                	xchg   %ax,%ax
+ 43b:	66 90                	xchg   %ax,%ax
+ 43d:	66 90                	xchg   %ax,%ax
+ 43f:	90                   	nop
+
+00000440 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 446:	89 d3                	mov    %edx,%ebx
+{
+ 448:	83 ec 3c             	sub    $0x3c,%esp
+ 44b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+ 44e:	85 d2                	test   %edx,%edx
+ 450:	0f 89 92 00 00 00    	jns    4e8 <printint+0xa8>
+ 456:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 45a:	0f 84 88 00 00 00    	je     4e8 <printint+0xa8>
+    neg = 1;
+ 460:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+ 467:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 469:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 470:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 473:	eb 08                	jmp    47d <printint+0x3d>
+ 475:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 478:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+ 47b:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+ 47d:	89 d8                	mov    %ebx,%eax
+ 47f:	31 d2                	xor    %edx,%edx
+ 481:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 484:	f7 f1                	div    %ecx
+ 486:	83 c7 01             	add    $0x1,%edi
+ 489:	0f b6 92 94 08 00 00 	movzbl 0x894(%edx),%edx
+ 490:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+ 493:	39 d9                	cmp    %ebx,%ecx
+ 495:	76 e1                	jbe    478 <printint+0x38>
+  if(neg)
+ 497:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 49a:	85 c0                	test   %eax,%eax
+ 49c:	74 0d                	je     4ab <printint+0x6b>
+    buf[i++] = '-';
+ 49e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 4a3:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+ 4a8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 4ab:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 4ae:	8b 7d bc             	mov    -0x44(%ebp),%edi
+ 4b1:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4b5:	eb 0f                	jmp    4c6 <printint+0x86>
+ 4b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4be:	66 90                	xchg   %ax,%ax
+ 4c0:	0f b6 13             	movzbl (%ebx),%edx
+ 4c3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4c6:	83 ec 04             	sub    $0x4,%esp
+ 4c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4cc:	6a 01                	push   $0x1
+ 4ce:	56                   	push   %esi
+ 4cf:	57                   	push   %edi
+ 4d0:	e8 dc fe ff ff       	call   3b1 <write>
+
+  while(--i >= 0)
+ 4d5:	83 c4 10             	add    $0x10,%esp
+ 4d8:	39 de                	cmp    %ebx,%esi
+ 4da:	75 e4                	jne    4c0 <printint+0x80>
+    putc(fd, buf[i]);
+}
+ 4dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4df:	5b                   	pop    %ebx
+ 4e0:	5e                   	pop    %esi
+ 4e1:	5f                   	pop    %edi
+ 4e2:	5d                   	pop    %ebp
+ 4e3:	c3                   	ret    
+ 4e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4e8:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+ 4ef:	e9 75 ff ff ff       	jmp    469 <printint+0x29>
+ 4f4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4ff:	90                   	nop
+
+00000500 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 500:	55                   	push   %ebp
+ 501:	89 e5                	mov    %esp,%ebp
+ 503:	57                   	push   %edi
+ 504:	56                   	push   %esi
+ 505:	53                   	push   %ebx
+ 506:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 509:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 50c:	0f b6 1e             	movzbl (%esi),%ebx
+ 50f:	84 db                	test   %bl,%bl
+ 511:	0f 84 b9 00 00 00    	je     5d0 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+ 517:	8d 45 10             	lea    0x10(%ebp),%eax
+ 51a:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 51d:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 520:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 522:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 525:	eb 38                	jmp    55f <printf+0x5f>
+ 527:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52e:	66 90                	xchg   %ax,%ax
+ 530:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 533:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 538:	83 f8 25             	cmp    $0x25,%eax
+ 53b:	74 17                	je     554 <printf+0x54>
+  write(fd, &c, 1);
+ 53d:	83 ec 04             	sub    $0x4,%esp
+ 540:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 543:	6a 01                	push   $0x1
+ 545:	57                   	push   %edi
+ 546:	ff 75 08             	pushl  0x8(%ebp)
+ 549:	e8 63 fe ff ff       	call   3b1 <write>
+ 54e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 551:	83 c4 10             	add    $0x10,%esp
+ 554:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 557:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 55b:	84 db                	test   %bl,%bl
+ 55d:	74 71                	je     5d0 <printf+0xd0>
+    c = fmt[i] & 0xff;
+ 55f:	0f be cb             	movsbl %bl,%ecx
+ 562:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 565:	85 d2                	test   %edx,%edx
+ 567:	74 c7                	je     530 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 569:	83 fa 25             	cmp    $0x25,%edx
+ 56c:	75 e6                	jne    554 <printf+0x54>
+      if(c == 'd'){
+ 56e:	83 f8 64             	cmp    $0x64,%eax
+ 571:	0f 84 99 00 00 00    	je     610 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 577:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 57d:	83 f9 70             	cmp    $0x70,%ecx
+ 580:	74 5e                	je     5e0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 582:	83 f8 73             	cmp    $0x73,%eax
+ 585:	0f 84 d5 00 00 00    	je     660 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 58b:	83 f8 63             	cmp    $0x63,%eax
+ 58e:	0f 84 8c 00 00 00    	je     620 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 594:	83 f8 25             	cmp    $0x25,%eax
+ 597:	0f 84 b3 00 00 00    	je     650 <printf+0x150>
+  write(fd, &c, 1);
+ 59d:	83 ec 04             	sub    $0x4,%esp
+ 5a0:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5a4:	6a 01                	push   $0x1
+ 5a6:	57                   	push   %edi
+ 5a7:	ff 75 08             	pushl  0x8(%ebp)
+ 5aa:	e8 02 fe ff ff       	call   3b1 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 5af:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5b2:	83 c4 0c             	add    $0xc,%esp
+ 5b5:	6a 01                	push   $0x1
+ 5b7:	83 c6 01             	add    $0x1,%esi
+ 5ba:	57                   	push   %edi
+ 5bb:	ff 75 08             	pushl  0x8(%ebp)
+ 5be:	e8 ee fd ff ff       	call   3b1 <write>
+  for(i = 0; fmt[i]; i++){
+ 5c3:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 5c7:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5ca:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 5cc:	84 db                	test   %bl,%bl
+ 5ce:	75 8f                	jne    55f <printf+0x5f>
+    }
+  }
+}
+ 5d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5d3:	5b                   	pop    %ebx
+ 5d4:	5e                   	pop    %esi
+ 5d5:	5f                   	pop    %edi
+ 5d6:	5d                   	pop    %ebp
+ 5d7:	c3                   	ret    
+ 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5df:	90                   	nop
+        printint(fd, *ap, 16, 0);
+ 5e0:	83 ec 0c             	sub    $0xc,%esp
+ 5e3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5e8:	6a 00                	push   $0x0
+ 5ea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5ed:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5f0:	8b 13                	mov    (%ebx),%edx
+ 5f2:	e8 49 fe ff ff       	call   440 <printint>
+        ap++;
+ 5f7:	89 d8                	mov    %ebx,%eax
+ 5f9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5fc:	31 d2                	xor    %edx,%edx
+        ap++;
+ 5fe:	83 c0 04             	add    $0x4,%eax
+ 601:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 604:	e9 4b ff ff ff       	jmp    554 <printf+0x54>
+ 609:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 610:	83 ec 0c             	sub    $0xc,%esp
+ 613:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 618:	6a 01                	push   $0x1
+ 61a:	eb ce                	jmp    5ea <printf+0xea>
+ 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 620:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 623:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 626:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 628:	6a 01                	push   $0x1
+        ap++;
+ 62a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 62d:	57                   	push   %edi
+ 62e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 631:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 634:	e8 78 fd ff ff       	call   3b1 <write>
+        ap++;
+ 639:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 63c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 63f:	31 d2                	xor    %edx,%edx
+ 641:	e9 0e ff ff ff       	jmp    554 <printf+0x54>
+ 646:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 64d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 650:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 653:	83 ec 04             	sub    $0x4,%esp
+ 656:	e9 5a ff ff ff       	jmp    5b5 <printf+0xb5>
+ 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
+        s = (char*)*ap;
+ 660:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 663:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 665:	83 c0 04             	add    $0x4,%eax
+ 668:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 66b:	85 db                	test   %ebx,%ebx
+ 66d:	74 17                	je     686 <printf+0x186>
+        while(*s != 0){
+ 66f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 672:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 674:	84 c0                	test   %al,%al
+ 676:	0f 84 d8 fe ff ff    	je     554 <printf+0x54>
+ 67c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 67f:	89 de                	mov    %ebx,%esi
+ 681:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 684:	eb 1a                	jmp    6a0 <printf+0x1a0>
+          s = "(null)";
+ 686:	bb 8b 08 00 00       	mov    $0x88b,%ebx
+        while(*s != 0){
+ 68b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 68e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 693:	89 de                	mov    %ebx,%esi
+ 695:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 698:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 69f:	90                   	nop
+  write(fd, &c, 1);
+ 6a0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 6a3:	83 c6 01             	add    $0x1,%esi
+ 6a6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6a9:	6a 01                	push   $0x1
+ 6ab:	57                   	push   %edi
+ 6ac:	53                   	push   %ebx
+ 6ad:	e8 ff fc ff ff       	call   3b1 <write>
+        while(*s != 0){
+ 6b2:	0f b6 06             	movzbl (%esi),%eax
+ 6b5:	83 c4 10             	add    $0x10,%esp
+ 6b8:	84 c0                	test   %al,%al
+ 6ba:	75 e4                	jne    6a0 <printf+0x1a0>
+ 6bc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 6bf:	31 d2                	xor    %edx,%edx
+ 6c1:	e9 8e fe ff ff       	jmp    554 <printf+0x54>
+ 6c6:	66 90                	xchg   %ax,%ax
+ 6c8:	66 90                	xchg   %ax,%ax
+ 6ca:	66 90                	xchg   %ax,%ax
+ 6cc:	66 90                	xchg   %ax,%ax
+ 6ce:	66 90                	xchg   %ax,%ax
+
+000006d0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6d0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6d1:	a1 4c 0b 00 00       	mov    0xb4c,%eax
+{
+ 6d6:	89 e5                	mov    %esp,%ebp
+ 6d8:	57                   	push   %edi
+ 6d9:	56                   	push   %esi
+ 6da:	53                   	push   %ebx
+ 6db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6de:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 6e0:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6e3:	39 c8                	cmp    %ecx,%eax
+ 6e5:	73 19                	jae    700 <free+0x30>
+ 6e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6ee:	66 90                	xchg   %ax,%ax
+ 6f0:	39 d1                	cmp    %edx,%ecx
+ 6f2:	72 14                	jb     708 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6f4:	39 d0                	cmp    %edx,%eax
+ 6f6:	73 10                	jae    708 <free+0x38>
+{
+ 6f8:	89 d0                	mov    %edx,%eax
+ 6fa:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6fc:	39 c8                	cmp    %ecx,%eax
+ 6fe:	72 f0                	jb     6f0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 700:	39 d0                	cmp    %edx,%eax
+ 702:	72 f4                	jb     6f8 <free+0x28>
+ 704:	39 d1                	cmp    %edx,%ecx
+ 706:	73 f0                	jae    6f8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 708:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 70b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 70e:	39 fa                	cmp    %edi,%edx
+ 710:	74 1e                	je     730 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 712:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 715:	8b 50 04             	mov    0x4(%eax),%edx
+ 718:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 71b:	39 f1                	cmp    %esi,%ecx
+ 71d:	74 28                	je     747 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 71f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 721:	5b                   	pop    %ebx
+  freep = p;
+ 722:	a3 4c 0b 00 00       	mov    %eax,0xb4c
+}
+ 727:	5e                   	pop    %esi
+ 728:	5f                   	pop    %edi
+ 729:	5d                   	pop    %ebp
+ 72a:	c3                   	ret    
+ 72b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 72f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 730:	03 72 04             	add    0x4(%edx),%esi
+ 733:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 736:	8b 10                	mov    (%eax),%edx
+ 738:	8b 12                	mov    (%edx),%edx
+ 73a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 73d:	8b 50 04             	mov    0x4(%eax),%edx
+ 740:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 743:	39 f1                	cmp    %esi,%ecx
+ 745:	75 d8                	jne    71f <free+0x4f>
+    p->s.size += bp->s.size;
+ 747:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 74a:	a3 4c 0b 00 00       	mov    %eax,0xb4c
+    p->s.size += bp->s.size;
+ 74f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 752:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 755:	89 10                	mov    %edx,(%eax)
+}
+ 757:	5b                   	pop    %ebx
+ 758:	5e                   	pop    %esi
+ 759:	5f                   	pop    %edi
+ 75a:	5d                   	pop    %ebp
+ 75b:	c3                   	ret    
+ 75c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000760 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 760:	55                   	push   %ebp
+ 761:	89 e5                	mov    %esp,%ebp
+ 763:	57                   	push   %edi
+ 764:	56                   	push   %esi
+ 765:	53                   	push   %ebx
+ 766:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 769:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 76c:	8b 3d 4c 0b 00 00    	mov    0xb4c,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 772:	8d 70 07             	lea    0x7(%eax),%esi
+ 775:	c1 ee 03             	shr    $0x3,%esi
+ 778:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 77b:	85 ff                	test   %edi,%edi
+ 77d:	0f 84 ad 00 00 00    	je     830 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 783:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 785:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 788:	39 f1                	cmp    %esi,%ecx
+ 78a:	73 72                	jae    7fe <malloc+0x9e>
+ 78c:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 792:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 797:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 79a:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 7a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 7a4:	eb 1b                	jmp    7c1 <malloc+0x61>
+ 7a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ad:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7b0:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 7b2:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7b5:	39 f1                	cmp    %esi,%ecx
+ 7b7:	73 4f                	jae    808 <malloc+0xa8>
+ 7b9:	8b 3d 4c 0b 00 00    	mov    0xb4c,%edi
+ 7bf:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7c1:	39 d7                	cmp    %edx,%edi
+ 7c3:	75 eb                	jne    7b0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 7c5:	83 ec 0c             	sub    $0xc,%esp
+ 7c8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7cb:	e8 49 fc ff ff       	call   419 <sbrk>
+  if(p == (char*)-1)
+ 7d0:	83 c4 10             	add    $0x10,%esp
+ 7d3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7d6:	74 1c                	je     7f4 <malloc+0x94>
+  hp->s.size = nu;
+ 7d8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7db:	83 ec 0c             	sub    $0xc,%esp
+ 7de:	83 c0 08             	add    $0x8,%eax
+ 7e1:	50                   	push   %eax
+ 7e2:	e8 e9 fe ff ff       	call   6d0 <free>
+  return freep;
+ 7e7:	8b 15 4c 0b 00 00    	mov    0xb4c,%edx
+      if((p = morecore(nunits)) == 0)
+ 7ed:	83 c4 10             	add    $0x10,%esp
+ 7f0:	85 d2                	test   %edx,%edx
+ 7f2:	75 bc                	jne    7b0 <malloc+0x50>
+        return 0;
+  }
+}
+ 7f4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7f7:	31 c0                	xor    %eax,%eax
+}
+ 7f9:	5b                   	pop    %ebx
+ 7fa:	5e                   	pop    %esi
+ 7fb:	5f                   	pop    %edi
+ 7fc:	5d                   	pop    %ebp
+ 7fd:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7fe:	89 d0                	mov    %edx,%eax
+ 800:	89 fa                	mov    %edi,%edx
+ 802:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 808:	39 ce                	cmp    %ecx,%esi
+ 80a:	74 54                	je     860 <malloc+0x100>
+        p->s.size -= nunits;
+ 80c:	29 f1                	sub    %esi,%ecx
+ 80e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 811:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 814:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 817:	89 15 4c 0b 00 00    	mov    %edx,0xb4c
+}
+ 81d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 820:	83 c0 08             	add    $0x8,%eax
+}
+ 823:	5b                   	pop    %ebx
+ 824:	5e                   	pop    %esi
+ 825:	5f                   	pop    %edi
+ 826:	5d                   	pop    %ebp
+ 827:	c3                   	ret    
+ 828:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 82f:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+ 830:	c7 05 4c 0b 00 00 50 	movl   $0xb50,0xb4c
+ 837:	0b 00 00 
+    base.s.size = 0;
+ 83a:	bf 50 0b 00 00       	mov    $0xb50,%edi
+    base.s.ptr = freep = prevp = &base;
+ 83f:	c7 05 50 0b 00 00 50 	movl   $0xb50,0xb50
+ 846:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 849:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 84b:	c7 05 54 0b 00 00 00 	movl   $0x0,0xb54
+ 852:	00 00 00 
+    if(p->s.size >= nunits){
+ 855:	e9 32 ff ff ff       	jmp    78c <malloc+0x2c>
+ 85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 860:	8b 08                	mov    (%eax),%ecx
+ 862:	89 0a                	mov    %ecx,(%edx)
+ 864:	eb b1                	jmp    817 <malloc+0xb7>
diff -urN xv6-public/stressfs.d xv6-public-new/stressfs.d
--- xv6-public/stressfs.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/stressfs.d	2019-10-04 10:45:48.964028895 +0530
@@ -0,0 +1,2 @@
+stressfs.o: stressfs.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ fs.h fcntl.h
Binary files xv6-public/stressfs.o and xv6-public-new/stressfs.o differ
diff -urN xv6-public/stressfs.sym xv6-public-new/stressfs.sym
--- xv6-public/stressfs.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/stressfs.sym	2019-10-04 10:45:48.980028896 +0530
@@ -0,0 +1,57 @@
+00000000 .text
+00000868 .rodata
+000008a8 .eh_frame
+00000b4c .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 stressfs.c
+00000000 ulib.c
+00000000 printf.c
+00000440 printint
+00000894 digits.1101
+00000000 umalloc.c
+00000b4c freep
+00000b50 base
+00000140 strcpy
+00000500 printf
+00000360 memmove
+000003d9 mknod
+00000250 gets
+00000411 getpid
+00000760 malloc
+00000421 sleep
+000003a1 pipe
+000003b1 write
+000003e9 fstat
+000003c1 kill
+00000401 chdir
+000003c9 exec
+00000399 wait
+000003a9 read
+000003e1 unlink
+00000389 fork
+00000419 sbrk
+00000429 uptime
+00000b4c __bss_start
+000001f0 memset
+00000000 main
+00000170 strcmp
+00000409 dup
+000002d0 stat
+00000b4c _edata
+00000b58 _end
+000003f1 link
+00000391 exit
+00000320 atoi
+000001c0 strlen
+000003d1 open
+00000210 strchr
+000003f9 mkdir
+000003b9 close
+000006d0 free
diff -urN xv6-public/string.d xv6-public-new/string.d
--- xv6-public/string.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/string.d	2019-10-04 10:45:50.432028965 +0530
@@ -0,0 +1 @@
+string.o: string.c /usr/include/stdc-predef.h types.h x86.h
Binary files xv6-public/string.o and xv6-public-new/string.o differ
Binary files xv6-public/swtch.o and xv6-public-new/swtch.o differ
diff -urN xv6-public/syscall.d xv6-public-new/syscall.d
--- xv6-public/syscall.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/syscall.d	2019-10-04 10:45:50.484028967 +0530
@@ -0,0 +1,2 @@
+syscall.o: syscall.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h syscall.h
Binary files xv6-public/syscall.o and xv6-public-new/syscall.o differ
diff -urN xv6-public/sysfile.d xv6-public-new/sysfile.d
--- xv6-public/sysfile.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/sysfile.d	2019-10-04 10:45:50.588028972 +0530
@@ -0,0 +1,2 @@
+sysfile.o: sysfile.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ stat.h mmu.h proc.h fs.h spinlock.h sleeplock.h file.h fcntl.h
Binary files xv6-public/sysfile.o and xv6-public-new/sysfile.o differ
diff -urN xv6-public/sysproc.d xv6-public-new/sysproc.d
--- xv6-public/sysproc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/sysproc.d	2019-10-04 10:45:50.624028974 +0530
@@ -0,0 +1,2 @@
+sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \
+ date.h param.h memlayout.h mmu.h proc.h
Binary files xv6-public/sysproc.o and xv6-public-new/sysproc.o differ
Binary files xv6-public/trapasm.o and xv6-public-new/trapasm.o differ
diff -urN xv6-public/trap.d xv6-public-new/trap.d
--- xv6-public/trap.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/trap.d	2019-10-04 10:45:50.672028976 +0530
@@ -0,0 +1,2 @@
+trap.o: trap.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h
Binary files xv6-public/trap.o and xv6-public-new/trap.o differ
diff -urN xv6-public/uart.d xv6-public-new/uart.d
--- xv6-public/uart.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/uart.d	2019-10-04 10:45:50.708028978 +0530
@@ -0,0 +1,2 @@
+uart.o: uart.c /usr/include/stdc-predef.h types.h defs.h param.h traps.h \
+ spinlock.h sleeplock.h fs.h file.h mmu.h proc.h x86.h
Binary files xv6-public/uart.o and xv6-public-new/uart.o differ
diff -urN xv6-public/ulib.d xv6-public-new/ulib.d
--- xv6-public/ulib.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/ulib.d	2019-10-04 10:45:48.352028866 +0530
@@ -0,0 +1,2 @@
+ulib.o: ulib.c /usr/include/stdc-predef.h types.h stat.h fcntl.h user.h \
+ x86.h
Binary files xv6-public/ulib.o and xv6-public-new/ulib.o differ
diff -urN xv6-public/umalloc.d xv6-public-new/umalloc.d
--- xv6-public/umalloc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/umalloc.d	2019-10-04 10:45:48.432028870 +0530
@@ -0,0 +1,2 @@
+umalloc.o: umalloc.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ param.h
Binary files xv6-public/umalloc.o and xv6-public-new/umalloc.o differ
Binary files xv6-public/_usertests and xv6-public-new/_usertests differ
diff -urN xv6-public/usertests.asm xv6-public-new/usertests.asm
--- xv6-public/usertests.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/usertests.asm	2019-10-04 10:45:49.316028912 +0530
@@ -0,0 +1,6642 @@
+
+_usertests:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return randstate;
+}
+
+int
+main(int argc, char *argv[])
+{
+       0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       4:	83 e4 f0             	and    $0xfffffff0,%esp
+       7:	ff 71 fc             	pushl  -0x4(%ecx)
+       a:	55                   	push   %ebp
+       b:	89 e5                	mov    %esp,%ebp
+       d:	51                   	push   %ecx
+       e:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "usertests starting\n");
+      11:	68 96 4d 00 00       	push   $0x4d96
+      16:	6a 01                	push   $0x1
+      18:	e8 23 3a 00 00       	call   3a40 <printf>
+
+  if(open("usertests.ran", 0) >= 0){
+      1d:	59                   	pop    %ecx
+      1e:	58                   	pop    %eax
+      1f:	6a 00                	push   $0x0
+      21:	68 aa 4d 00 00       	push   $0x4daa
+      26:	e8 e6 38 00 00       	call   3911 <open>
+      2b:	83 c4 10             	add    $0x10,%esp
+      2e:	85 c0                	test   %eax,%eax
+      30:	78 13                	js     45 <main+0x45>
+    printf(1, "already ran user tests -- rebuild fs.img\n");
+      32:	52                   	push   %edx
+      33:	52                   	push   %edx
+      34:	68 14 55 00 00       	push   $0x5514
+      39:	6a 01                	push   $0x1
+      3b:	e8 00 3a 00 00       	call   3a40 <printf>
+    exit();
+      40:	e8 8c 38 00 00       	call   38d1 <exit>
+  }
+  close(open("usertests.ran", O_CREATE));
+      45:	50                   	push   %eax
+      46:	50                   	push   %eax
+      47:	68 00 02 00 00       	push   $0x200
+      4c:	68 aa 4d 00 00       	push   $0x4daa
+      51:	e8 bb 38 00 00       	call   3911 <open>
+      56:	89 04 24             	mov    %eax,(%esp)
+      59:	e8 9b 38 00 00       	call   38f9 <close>
+
+  argptest();
+      5e:	e8 8d 35 00 00       	call   35f0 <argptest>
+  createdelete();
+      63:	e8 b8 11 00 00       	call   1220 <createdelete>
+  linkunlink();
+      68:	e8 73 1a 00 00       	call   1ae0 <linkunlink>
+  concreate();
+      6d:	e8 6e 17 00 00       	call   17e0 <concreate>
+  fourfiles();
+      72:	e8 a9 0f 00 00       	call   1020 <fourfiles>
+  sharedfd();
+      77:	e8 e4 0d 00 00       	call   e60 <sharedfd>
+
+  bigargtest();
+      7c:	e8 1f 32 00 00       	call   32a0 <bigargtest>
+  bigwrite();
+      81:	e8 7a 23 00 00       	call   2400 <bigwrite>
+  bigargtest();
+      86:	e8 15 32 00 00       	call   32a0 <bigargtest>
+  bsstest();
+      8b:	e8 90 31 00 00       	call   3220 <bsstest>
+  sbrktest();
+      90:	e8 ab 2c 00 00       	call   2d40 <sbrktest>
+  validatetest();
+      95:	e8 d6 30 00 00       	call   3170 <validatetest>
+
+  opentest();
+      9a:	e8 61 03 00 00       	call   400 <opentest>
+  writetest();
+      9f:	e8 ec 03 00 00       	call   490 <writetest>
+  writetest1();
+      a4:	e8 c7 05 00 00       	call   670 <writetest1>
+  createtest();
+      a9:	e8 92 07 00 00       	call   840 <createtest>
+
+  openiputtest();
+      ae:	e8 4d 02 00 00       	call   300 <openiputtest>
+  exitiputtest();
+      b3:	e8 48 01 00 00       	call   200 <exitiputtest>
+  iputtest();
+      b8:	e8 63 00 00 00       	call   120 <iputtest>
+
+  mem();
+      bd:	e8 ce 0c 00 00       	call   d90 <mem>
+  pipe1();
+      c2:	e8 59 09 00 00       	call   a20 <pipe1>
+  preempt();
+      c7:	e8 e4 0a 00 00       	call   bb0 <preempt>
+  exitwait();
+      cc:	e8 3f 0c 00 00       	call   d10 <exitwait>
+
+  rmdot();
+      d1:	e8 1a 27 00 00       	call   27f0 <rmdot>
+  fourteen();
+      d6:	e8 d5 25 00 00       	call   26b0 <fourteen>
+  bigfile();
+      db:	e8 00 24 00 00       	call   24e0 <bigfile>
+  subdir();
+      e0:	e8 3b 1c 00 00       	call   1d20 <subdir>
+  linktest();
+      e5:	e8 e6 14 00 00       	call   15d0 <linktest>
+  unlinkread();
+      ea:	e8 51 13 00 00       	call   1440 <unlinkread>
+  dirfile();
+      ef:	e8 7c 28 00 00       	call   2970 <dirfile>
+  iref();
+      f4:	e8 77 2a 00 00       	call   2b70 <iref>
+  forktest();
+      f9:	e8 92 2b 00 00       	call   2c90 <forktest>
+  bigdir(); // slow
+      fe:	e8 ed 1a 00 00       	call   1bf0 <bigdir>
+
+  uio();
+     103:	e8 78 34 00 00       	call   3580 <uio>
+
+  exectest();
+     108:	e8 c3 08 00 00       	call   9d0 <exectest>
+
+  exit();
+     10d:	e8 bf 37 00 00       	call   38d1 <exit>
+     112:	66 90                	xchg   %ax,%ax
+     114:	66 90                	xchg   %ax,%ax
+     116:	66 90                	xchg   %ax,%ax
+     118:	66 90                	xchg   %ax,%ax
+     11a:	66 90                	xchg   %ax,%ax
+     11c:	66 90                	xchg   %ax,%ax
+     11e:	66 90                	xchg   %ax,%ax
+
+00000120 <iputtest>:
+{
+     120:	55                   	push   %ebp
+     121:	89 e5                	mov    %esp,%ebp
+     123:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "iput test\n");
+     126:	68 3c 3e 00 00       	push   $0x3e3c
+     12b:	ff 35 40 5e 00 00    	pushl  0x5e40
+     131:	e8 0a 39 00 00       	call   3a40 <printf>
+  if(mkdir("iputdir") < 0){
+     136:	c7 04 24 cf 3d 00 00 	movl   $0x3dcf,(%esp)
+     13d:	e8 f7 37 00 00       	call   3939 <mkdir>
+     142:	83 c4 10             	add    $0x10,%esp
+     145:	85 c0                	test   %eax,%eax
+     147:	78 58                	js     1a1 <iputtest+0x81>
+  if(chdir("iputdir") < 0){
+     149:	83 ec 0c             	sub    $0xc,%esp
+     14c:	68 cf 3d 00 00       	push   $0x3dcf
+     151:	e8 eb 37 00 00       	call   3941 <chdir>
+     156:	83 c4 10             	add    $0x10,%esp
+     159:	85 c0                	test   %eax,%eax
+     15b:	0f 88 85 00 00 00    	js     1e6 <iputtest+0xc6>
+  if(unlink("../iputdir") < 0){
+     161:	83 ec 0c             	sub    $0xc,%esp
+     164:	68 cc 3d 00 00       	push   $0x3dcc
+     169:	e8 b3 37 00 00       	call   3921 <unlink>
+     16e:	83 c4 10             	add    $0x10,%esp
+     171:	85 c0                	test   %eax,%eax
+     173:	78 5a                	js     1cf <iputtest+0xaf>
+  if(chdir("/") < 0){
+     175:	83 ec 0c             	sub    $0xc,%esp
+     178:	68 f1 3d 00 00       	push   $0x3df1
+     17d:	e8 bf 37 00 00       	call   3941 <chdir>
+     182:	83 c4 10             	add    $0x10,%esp
+     185:	85 c0                	test   %eax,%eax
+     187:	78 2f                	js     1b8 <iputtest+0x98>
+  printf(stdout, "iput test ok\n");
+     189:	83 ec 08             	sub    $0x8,%esp
+     18c:	68 74 3e 00 00       	push   $0x3e74
+     191:	ff 35 40 5e 00 00    	pushl  0x5e40
+     197:	e8 a4 38 00 00       	call   3a40 <printf>
+}
+     19c:	83 c4 10             	add    $0x10,%esp
+     19f:	c9                   	leave  
+     1a0:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     1a1:	50                   	push   %eax
+     1a2:	50                   	push   %eax
+     1a3:	68 a8 3d 00 00       	push   $0x3da8
+     1a8:	ff 35 40 5e 00 00    	pushl  0x5e40
+     1ae:	e8 8d 38 00 00       	call   3a40 <printf>
+    exit();
+     1b3:	e8 19 37 00 00       	call   38d1 <exit>
+    printf(stdout, "chdir / failed\n");
+     1b8:	50                   	push   %eax
+     1b9:	50                   	push   %eax
+     1ba:	68 f3 3d 00 00       	push   $0x3df3
+     1bf:	ff 35 40 5e 00 00    	pushl  0x5e40
+     1c5:	e8 76 38 00 00       	call   3a40 <printf>
+    exit();
+     1ca:	e8 02 37 00 00       	call   38d1 <exit>
+    printf(stdout, "unlink ../iputdir failed\n");
+     1cf:	52                   	push   %edx
+     1d0:	52                   	push   %edx
+     1d1:	68 d7 3d 00 00       	push   $0x3dd7
+     1d6:	ff 35 40 5e 00 00    	pushl  0x5e40
+     1dc:	e8 5f 38 00 00       	call   3a40 <printf>
+    exit();
+     1e1:	e8 eb 36 00 00       	call   38d1 <exit>
+    printf(stdout, "chdir iputdir failed\n");
+     1e6:	51                   	push   %ecx
+     1e7:	51                   	push   %ecx
+     1e8:	68 b6 3d 00 00       	push   $0x3db6
+     1ed:	ff 35 40 5e 00 00    	pushl  0x5e40
+     1f3:	e8 48 38 00 00       	call   3a40 <printf>
+    exit();
+     1f8:	e8 d4 36 00 00       	call   38d1 <exit>
+     1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <exitiputtest>:
+{
+     200:	55                   	push   %ebp
+     201:	89 e5                	mov    %esp,%ebp
+     203:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exitiput test\n");
+     206:	68 03 3e 00 00       	push   $0x3e03
+     20b:	ff 35 40 5e 00 00    	pushl  0x5e40
+     211:	e8 2a 38 00 00       	call   3a40 <printf>
+  pid = fork();
+     216:	e8 ae 36 00 00       	call   38c9 <fork>
+  if(pid < 0){
+     21b:	83 c4 10             	add    $0x10,%esp
+     21e:	85 c0                	test   %eax,%eax
+     220:	0f 88 8a 00 00 00    	js     2b0 <exitiputtest+0xb0>
+  if(pid == 0){
+     226:	75 50                	jne    278 <exitiputtest+0x78>
+    if(mkdir("iputdir") < 0){
+     228:	83 ec 0c             	sub    $0xc,%esp
+     22b:	68 cf 3d 00 00       	push   $0x3dcf
+     230:	e8 04 37 00 00       	call   3939 <mkdir>
+     235:	83 c4 10             	add    $0x10,%esp
+     238:	85 c0                	test   %eax,%eax
+     23a:	0f 88 87 00 00 00    	js     2c7 <exitiputtest+0xc7>
+    if(chdir("iputdir") < 0){
+     240:	83 ec 0c             	sub    $0xc,%esp
+     243:	68 cf 3d 00 00       	push   $0x3dcf
+     248:	e8 f4 36 00 00       	call   3941 <chdir>
+     24d:	83 c4 10             	add    $0x10,%esp
+     250:	85 c0                	test   %eax,%eax
+     252:	0f 88 86 00 00 00    	js     2de <exitiputtest+0xde>
+    if(unlink("../iputdir") < 0){
+     258:	83 ec 0c             	sub    $0xc,%esp
+     25b:	68 cc 3d 00 00       	push   $0x3dcc
+     260:	e8 bc 36 00 00       	call   3921 <unlink>
+     265:	83 c4 10             	add    $0x10,%esp
+     268:	85 c0                	test   %eax,%eax
+     26a:	78 2c                	js     298 <exitiputtest+0x98>
+    exit();
+     26c:	e8 60 36 00 00       	call   38d1 <exit>
+     271:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  wait();
+     278:	e8 5c 36 00 00       	call   38d9 <wait>
+  printf(stdout, "exitiput test ok\n");
+     27d:	83 ec 08             	sub    $0x8,%esp
+     280:	68 26 3e 00 00       	push   $0x3e26
+     285:	ff 35 40 5e 00 00    	pushl  0x5e40
+     28b:	e8 b0 37 00 00       	call   3a40 <printf>
+}
+     290:	83 c4 10             	add    $0x10,%esp
+     293:	c9                   	leave  
+     294:	c3                   	ret    
+     295:	8d 76 00             	lea    0x0(%esi),%esi
+      printf(stdout, "unlink ../iputdir failed\n");
+     298:	83 ec 08             	sub    $0x8,%esp
+     29b:	68 d7 3d 00 00       	push   $0x3dd7
+     2a0:	ff 35 40 5e 00 00    	pushl  0x5e40
+     2a6:	e8 95 37 00 00       	call   3a40 <printf>
+      exit();
+     2ab:	e8 21 36 00 00       	call   38d1 <exit>
+    printf(stdout, "fork failed\n");
+     2b0:	51                   	push   %ecx
+     2b1:	51                   	push   %ecx
+     2b2:	68 e9 4c 00 00       	push   $0x4ce9
+     2b7:	ff 35 40 5e 00 00    	pushl  0x5e40
+     2bd:	e8 7e 37 00 00       	call   3a40 <printf>
+    exit();
+     2c2:	e8 0a 36 00 00       	call   38d1 <exit>
+      printf(stdout, "mkdir failed\n");
+     2c7:	52                   	push   %edx
+     2c8:	52                   	push   %edx
+     2c9:	68 a8 3d 00 00       	push   $0x3da8
+     2ce:	ff 35 40 5e 00 00    	pushl  0x5e40
+     2d4:	e8 67 37 00 00       	call   3a40 <printf>
+      exit();
+     2d9:	e8 f3 35 00 00       	call   38d1 <exit>
+      printf(stdout, "child chdir failed\n");
+     2de:	50                   	push   %eax
+     2df:	50                   	push   %eax
+     2e0:	68 12 3e 00 00       	push   $0x3e12
+     2e5:	ff 35 40 5e 00 00    	pushl  0x5e40
+     2eb:	e8 50 37 00 00       	call   3a40 <printf>
+      exit();
+     2f0:	e8 dc 35 00 00       	call   38d1 <exit>
+     2f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     2fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000300 <openiputtest>:
+{
+     300:	55                   	push   %ebp
+     301:	89 e5                	mov    %esp,%ebp
+     303:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "openiput test\n");
+     306:	68 38 3e 00 00       	push   $0x3e38
+     30b:	ff 35 40 5e 00 00    	pushl  0x5e40
+     311:	e8 2a 37 00 00       	call   3a40 <printf>
+  if(mkdir("oidir") < 0){
+     316:	c7 04 24 47 3e 00 00 	movl   $0x3e47,(%esp)
+     31d:	e8 17 36 00 00       	call   3939 <mkdir>
+     322:	83 c4 10             	add    $0x10,%esp
+     325:	85 c0                	test   %eax,%eax
+     327:	0f 88 9f 00 00 00    	js     3cc <openiputtest+0xcc>
+  pid = fork();
+     32d:	e8 97 35 00 00       	call   38c9 <fork>
+  if(pid < 0){
+     332:	85 c0                	test   %eax,%eax
+     334:	78 7f                	js     3b5 <openiputtest+0xb5>
+  if(pid == 0){
+     336:	75 38                	jne    370 <openiputtest+0x70>
+    int fd = open("oidir", O_RDWR);
+     338:	83 ec 08             	sub    $0x8,%esp
+     33b:	6a 02                	push   $0x2
+     33d:	68 47 3e 00 00       	push   $0x3e47
+     342:	e8 ca 35 00 00       	call   3911 <open>
+    if(fd >= 0){
+     347:	83 c4 10             	add    $0x10,%esp
+     34a:	85 c0                	test   %eax,%eax
+     34c:	78 62                	js     3b0 <openiputtest+0xb0>
+      printf(stdout, "open directory for write succeeded\n");
+     34e:	83 ec 08             	sub    $0x8,%esp
+     351:	68 cc 4d 00 00       	push   $0x4dcc
+     356:	ff 35 40 5e 00 00    	pushl  0x5e40
+     35c:	e8 df 36 00 00       	call   3a40 <printf>
+      exit();
+     361:	e8 6b 35 00 00       	call   38d1 <exit>
+     366:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     36d:	8d 76 00             	lea    0x0(%esi),%esi
+  sleep(1);
+     370:	83 ec 0c             	sub    $0xc,%esp
+     373:	6a 01                	push   $0x1
+     375:	e8 e7 35 00 00       	call   3961 <sleep>
+  if(unlink("oidir") != 0){
+     37a:	c7 04 24 47 3e 00 00 	movl   $0x3e47,(%esp)
+     381:	e8 9b 35 00 00       	call   3921 <unlink>
+     386:	83 c4 10             	add    $0x10,%esp
+     389:	85 c0                	test   %eax,%eax
+     38b:	75 56                	jne    3e3 <openiputtest+0xe3>
+  wait();
+     38d:	e8 47 35 00 00       	call   38d9 <wait>
+  printf(stdout, "openiput test ok\n");
+     392:	83 ec 08             	sub    $0x8,%esp
+     395:	68 70 3e 00 00       	push   $0x3e70
+     39a:	ff 35 40 5e 00 00    	pushl  0x5e40
+     3a0:	e8 9b 36 00 00       	call   3a40 <printf>
+     3a5:	83 c4 10             	add    $0x10,%esp
+}
+     3a8:	c9                   	leave  
+     3a9:	c3                   	ret    
+     3aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    exit();
+     3b0:	e8 1c 35 00 00       	call   38d1 <exit>
+    printf(stdout, "fork failed\n");
+     3b5:	52                   	push   %edx
+     3b6:	52                   	push   %edx
+     3b7:	68 e9 4c 00 00       	push   $0x4ce9
+     3bc:	ff 35 40 5e 00 00    	pushl  0x5e40
+     3c2:	e8 79 36 00 00       	call   3a40 <printf>
+    exit();
+     3c7:	e8 05 35 00 00       	call   38d1 <exit>
+    printf(stdout, "mkdir oidir failed\n");
+     3cc:	51                   	push   %ecx
+     3cd:	51                   	push   %ecx
+     3ce:	68 4d 3e 00 00       	push   $0x3e4d
+     3d3:	ff 35 40 5e 00 00    	pushl  0x5e40
+     3d9:	e8 62 36 00 00       	call   3a40 <printf>
+    exit();
+     3de:	e8 ee 34 00 00       	call   38d1 <exit>
+    printf(stdout, "unlink failed\n");
+     3e3:	50                   	push   %eax
+     3e4:	50                   	push   %eax
+     3e5:	68 61 3e 00 00       	push   $0x3e61
+     3ea:	ff 35 40 5e 00 00    	pushl  0x5e40
+     3f0:	e8 4b 36 00 00       	call   3a40 <printf>
+    exit();
+     3f5:	e8 d7 34 00 00       	call   38d1 <exit>
+     3fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000400 <opentest>:
+{
+     400:	55                   	push   %ebp
+     401:	89 e5                	mov    %esp,%ebp
+     403:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "open test\n");
+     406:	68 82 3e 00 00       	push   $0x3e82
+     40b:	ff 35 40 5e 00 00    	pushl  0x5e40
+     411:	e8 2a 36 00 00       	call   3a40 <printf>
+  fd = open("echo", 0);
+     416:	58                   	pop    %eax
+     417:	5a                   	pop    %edx
+     418:	6a 00                	push   $0x0
+     41a:	68 8d 3e 00 00       	push   $0x3e8d
+     41f:	e8 ed 34 00 00       	call   3911 <open>
+  if(fd < 0){
+     424:	83 c4 10             	add    $0x10,%esp
+     427:	85 c0                	test   %eax,%eax
+     429:	78 36                	js     461 <opentest+0x61>
+  close(fd);
+     42b:	83 ec 0c             	sub    $0xc,%esp
+     42e:	50                   	push   %eax
+     42f:	e8 c5 34 00 00       	call   38f9 <close>
+  fd = open("doesnotexist", 0);
+     434:	5a                   	pop    %edx
+     435:	59                   	pop    %ecx
+     436:	6a 00                	push   $0x0
+     438:	68 a5 3e 00 00       	push   $0x3ea5
+     43d:	e8 cf 34 00 00       	call   3911 <open>
+  if(fd >= 0){
+     442:	83 c4 10             	add    $0x10,%esp
+     445:	85 c0                	test   %eax,%eax
+     447:	79 2f                	jns    478 <opentest+0x78>
+  printf(stdout, "open test ok\n");
+     449:	83 ec 08             	sub    $0x8,%esp
+     44c:	68 d0 3e 00 00       	push   $0x3ed0
+     451:	ff 35 40 5e 00 00    	pushl  0x5e40
+     457:	e8 e4 35 00 00       	call   3a40 <printf>
+}
+     45c:	83 c4 10             	add    $0x10,%esp
+     45f:	c9                   	leave  
+     460:	c3                   	ret    
+    printf(stdout, "open echo failed!\n");
+     461:	50                   	push   %eax
+     462:	50                   	push   %eax
+     463:	68 92 3e 00 00       	push   $0x3e92
+     468:	ff 35 40 5e 00 00    	pushl  0x5e40
+     46e:	e8 cd 35 00 00       	call   3a40 <printf>
+    exit();
+     473:	e8 59 34 00 00       	call   38d1 <exit>
+    printf(stdout, "open doesnotexist succeeded!\n");
+     478:	50                   	push   %eax
+     479:	50                   	push   %eax
+     47a:	68 b2 3e 00 00       	push   $0x3eb2
+     47f:	ff 35 40 5e 00 00    	pushl  0x5e40
+     485:	e8 b6 35 00 00       	call   3a40 <printf>
+    exit();
+     48a:	e8 42 34 00 00       	call   38d1 <exit>
+     48f:	90                   	nop
+
+00000490 <writetest>:
+{
+     490:	55                   	push   %ebp
+     491:	89 e5                	mov    %esp,%ebp
+     493:	56                   	push   %esi
+     494:	53                   	push   %ebx
+  printf(stdout, "small file test\n");
+     495:	83 ec 08             	sub    $0x8,%esp
+     498:	68 de 3e 00 00       	push   $0x3ede
+     49d:	ff 35 40 5e 00 00    	pushl  0x5e40
+     4a3:	e8 98 35 00 00       	call   3a40 <printf>
+  fd = open("small", O_CREATE|O_RDWR);
+     4a8:	58                   	pop    %eax
+     4a9:	5a                   	pop    %edx
+     4aa:	68 02 02 00 00       	push   $0x202
+     4af:	68 ef 3e 00 00       	push   $0x3eef
+     4b4:	e8 58 34 00 00       	call   3911 <open>
+  if(fd >= 0){
+     4b9:	83 c4 10             	add    $0x10,%esp
+     4bc:	85 c0                	test   %eax,%eax
+     4be:	0f 88 88 01 00 00    	js     64c <writetest+0x1bc>
+    printf(stdout, "creat small succeeded; ok\n");
+     4c4:	83 ec 08             	sub    $0x8,%esp
+     4c7:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 100; i++){
+     4c9:	31 db                	xor    %ebx,%ebx
+    printf(stdout, "creat small succeeded; ok\n");
+     4cb:	68 f5 3e 00 00       	push   $0x3ef5
+     4d0:	ff 35 40 5e 00 00    	pushl  0x5e40
+     4d6:	e8 65 35 00 00       	call   3a40 <printf>
+     4db:	83 c4 10             	add    $0x10,%esp
+     4de:	66 90                	xchg   %ax,%ax
+    if(write(fd, "aaaaaaaaaa", 10) != 10){
+     4e0:	83 ec 04             	sub    $0x4,%esp
+     4e3:	6a 0a                	push   $0xa
+     4e5:	68 2c 3f 00 00       	push   $0x3f2c
+     4ea:	56                   	push   %esi
+     4eb:	e8 01 34 00 00       	call   38f1 <write>
+     4f0:	83 c4 10             	add    $0x10,%esp
+     4f3:	83 f8 0a             	cmp    $0xa,%eax
+     4f6:	0f 85 d9 00 00 00    	jne    5d5 <writetest+0x145>
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+     4fc:	83 ec 04             	sub    $0x4,%esp
+     4ff:	6a 0a                	push   $0xa
+     501:	68 37 3f 00 00       	push   $0x3f37
+     506:	56                   	push   %esi
+     507:	e8 e5 33 00 00       	call   38f1 <write>
+     50c:	83 c4 10             	add    $0x10,%esp
+     50f:	83 f8 0a             	cmp    $0xa,%eax
+     512:	0f 85 d6 00 00 00    	jne    5ee <writetest+0x15e>
+  for(i = 0; i < 100; i++){
+     518:	83 c3 01             	add    $0x1,%ebx
+     51b:	83 fb 64             	cmp    $0x64,%ebx
+     51e:	75 c0                	jne    4e0 <writetest+0x50>
+  printf(stdout, "writes ok\n");
+     520:	83 ec 08             	sub    $0x8,%esp
+     523:	68 42 3f 00 00       	push   $0x3f42
+     528:	ff 35 40 5e 00 00    	pushl  0x5e40
+     52e:	e8 0d 35 00 00       	call   3a40 <printf>
+  close(fd);
+     533:	89 34 24             	mov    %esi,(%esp)
+     536:	e8 be 33 00 00       	call   38f9 <close>
+  fd = open("small", O_RDONLY);
+     53b:	5b                   	pop    %ebx
+     53c:	5e                   	pop    %esi
+     53d:	6a 00                	push   $0x0
+     53f:	68 ef 3e 00 00       	push   $0x3eef
+     544:	e8 c8 33 00 00       	call   3911 <open>
+  if(fd >= 0){
+     549:	83 c4 10             	add    $0x10,%esp
+  fd = open("small", O_RDONLY);
+     54c:	89 c3                	mov    %eax,%ebx
+  if(fd >= 0){
+     54e:	85 c0                	test   %eax,%eax
+     550:	0f 88 b1 00 00 00    	js     607 <writetest+0x177>
+    printf(stdout, "open small succeeded ok\n");
+     556:	83 ec 08             	sub    $0x8,%esp
+     559:	68 4d 3f 00 00       	push   $0x3f4d
+     55e:	ff 35 40 5e 00 00    	pushl  0x5e40
+     564:	e8 d7 34 00 00       	call   3a40 <printf>
+  i = read(fd, buf, 2000);
+     569:	83 c4 0c             	add    $0xc,%esp
+     56c:	68 d0 07 00 00       	push   $0x7d0
+     571:	68 20 86 00 00       	push   $0x8620
+     576:	53                   	push   %ebx
+     577:	e8 6d 33 00 00       	call   38e9 <read>
+  if(i == 2000){
+     57c:	83 c4 10             	add    $0x10,%esp
+     57f:	3d d0 07 00 00       	cmp    $0x7d0,%eax
+     584:	0f 85 94 00 00 00    	jne    61e <writetest+0x18e>
+    printf(stdout, "read succeeded ok\n");
+     58a:	83 ec 08             	sub    $0x8,%esp
+     58d:	68 81 3f 00 00       	push   $0x3f81
+     592:	ff 35 40 5e 00 00    	pushl  0x5e40
+     598:	e8 a3 34 00 00       	call   3a40 <printf>
+  close(fd);
+     59d:	89 1c 24             	mov    %ebx,(%esp)
+     5a0:	e8 54 33 00 00       	call   38f9 <close>
+  if(unlink("small") < 0){
+     5a5:	c7 04 24 ef 3e 00 00 	movl   $0x3eef,(%esp)
+     5ac:	e8 70 33 00 00       	call   3921 <unlink>
+     5b1:	83 c4 10             	add    $0x10,%esp
+     5b4:	85 c0                	test   %eax,%eax
+     5b6:	78 7d                	js     635 <writetest+0x1a5>
+  printf(stdout, "small file test ok\n");
+     5b8:	83 ec 08             	sub    $0x8,%esp
+     5bb:	68 a9 3f 00 00       	push   $0x3fa9
+     5c0:	ff 35 40 5e 00 00    	pushl  0x5e40
+     5c6:	e8 75 34 00 00       	call   3a40 <printf>
+}
+     5cb:	83 c4 10             	add    $0x10,%esp
+     5ce:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     5d1:	5b                   	pop    %ebx
+     5d2:	5e                   	pop    %esi
+     5d3:	5d                   	pop    %ebp
+     5d4:	c3                   	ret    
+      printf(stdout, "error: write aa %d new file failed\n", i);
+     5d5:	83 ec 04             	sub    $0x4,%esp
+     5d8:	53                   	push   %ebx
+     5d9:	68 f0 4d 00 00       	push   $0x4df0
+     5de:	ff 35 40 5e 00 00    	pushl  0x5e40
+     5e4:	e8 57 34 00 00       	call   3a40 <printf>
+      exit();
+     5e9:	e8 e3 32 00 00       	call   38d1 <exit>
+      printf(stdout, "error: write bb %d new file failed\n", i);
+     5ee:	83 ec 04             	sub    $0x4,%esp
+     5f1:	53                   	push   %ebx
+     5f2:	68 14 4e 00 00       	push   $0x4e14
+     5f7:	ff 35 40 5e 00 00    	pushl  0x5e40
+     5fd:	e8 3e 34 00 00       	call   3a40 <printf>
+      exit();
+     602:	e8 ca 32 00 00       	call   38d1 <exit>
+    printf(stdout, "error: open small failed!\n");
+     607:	51                   	push   %ecx
+     608:	51                   	push   %ecx
+     609:	68 66 3f 00 00       	push   $0x3f66
+     60e:	ff 35 40 5e 00 00    	pushl  0x5e40
+     614:	e8 27 34 00 00       	call   3a40 <printf>
+    exit();
+     619:	e8 b3 32 00 00       	call   38d1 <exit>
+    printf(stdout, "read failed\n");
+     61e:	52                   	push   %edx
+     61f:	52                   	push   %edx
+     620:	68 ad 42 00 00       	push   $0x42ad
+     625:	ff 35 40 5e 00 00    	pushl  0x5e40
+     62b:	e8 10 34 00 00       	call   3a40 <printf>
+    exit();
+     630:	e8 9c 32 00 00       	call   38d1 <exit>
+    printf(stdout, "unlink small failed\n");
+     635:	50                   	push   %eax
+     636:	50                   	push   %eax
+     637:	68 94 3f 00 00       	push   $0x3f94
+     63c:	ff 35 40 5e 00 00    	pushl  0x5e40
+     642:	e8 f9 33 00 00       	call   3a40 <printf>
+    exit();
+     647:	e8 85 32 00 00       	call   38d1 <exit>
+    printf(stdout, "error: creat small failed!\n");
+     64c:	50                   	push   %eax
+     64d:	50                   	push   %eax
+     64e:	68 10 3f 00 00       	push   $0x3f10
+     653:	ff 35 40 5e 00 00    	pushl  0x5e40
+     659:	e8 e2 33 00 00       	call   3a40 <printf>
+    exit();
+     65e:	e8 6e 32 00 00       	call   38d1 <exit>
+     663:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     66a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000670 <writetest1>:
+{
+     670:	55                   	push   %ebp
+     671:	89 e5                	mov    %esp,%ebp
+     673:	56                   	push   %esi
+     674:	53                   	push   %ebx
+  printf(stdout, "big files test\n");
+     675:	83 ec 08             	sub    $0x8,%esp
+     678:	68 bd 3f 00 00       	push   $0x3fbd
+     67d:	ff 35 40 5e 00 00    	pushl  0x5e40
+     683:	e8 b8 33 00 00       	call   3a40 <printf>
+  fd = open("big", O_CREATE|O_RDWR);
+     688:	58                   	pop    %eax
+     689:	5a                   	pop    %edx
+     68a:	68 02 02 00 00       	push   $0x202
+     68f:	68 37 40 00 00       	push   $0x4037
+     694:	e8 78 32 00 00       	call   3911 <open>
+  if(fd < 0){
+     699:	83 c4 10             	add    $0x10,%esp
+     69c:	85 c0                	test   %eax,%eax
+     69e:	0f 88 61 01 00 00    	js     805 <writetest1+0x195>
+     6a4:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < MAXFILE; i++){
+     6a6:	31 db                	xor    %ebx,%ebx
+     6a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     6af:	90                   	nop
+    if(write(fd, buf, 512) != 512){
+     6b0:	83 ec 04             	sub    $0x4,%esp
+    ((int*)buf)[0] = i;
+     6b3:	89 1d 20 86 00 00    	mov    %ebx,0x8620
+    if(write(fd, buf, 512) != 512){
+     6b9:	68 00 02 00 00       	push   $0x200
+     6be:	68 20 86 00 00       	push   $0x8620
+     6c3:	56                   	push   %esi
+     6c4:	e8 28 32 00 00       	call   38f1 <write>
+     6c9:	83 c4 10             	add    $0x10,%esp
+     6cc:	3d 00 02 00 00       	cmp    $0x200,%eax
+     6d1:	0f 85 b3 00 00 00    	jne    78a <writetest1+0x11a>
+  for(i = 0; i < MAXFILE; i++){
+     6d7:	83 c3 01             	add    $0x1,%ebx
+     6da:	81 fb 8c 00 00 00    	cmp    $0x8c,%ebx
+     6e0:	75 ce                	jne    6b0 <writetest1+0x40>
+  close(fd);
+     6e2:	83 ec 0c             	sub    $0xc,%esp
+     6e5:	56                   	push   %esi
+     6e6:	e8 0e 32 00 00       	call   38f9 <close>
+  fd = open("big", O_RDONLY);
+     6eb:	5b                   	pop    %ebx
+     6ec:	5e                   	pop    %esi
+     6ed:	6a 00                	push   $0x0
+     6ef:	68 37 40 00 00       	push   $0x4037
+     6f4:	e8 18 32 00 00       	call   3911 <open>
+  if(fd < 0){
+     6f9:	83 c4 10             	add    $0x10,%esp
+  fd = open("big", O_RDONLY);
+     6fc:	89 c6                	mov    %eax,%esi
+  if(fd < 0){
+     6fe:	85 c0                	test   %eax,%eax
+     700:	0f 88 e8 00 00 00    	js     7ee <writetest1+0x17e>
+  n = 0;
+     706:	31 db                	xor    %ebx,%ebx
+     708:	eb 1d                	jmp    727 <writetest1+0xb7>
+     70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    } else if(i != 512){
+     710:	3d 00 02 00 00       	cmp    $0x200,%eax
+     715:	0f 85 9f 00 00 00    	jne    7ba <writetest1+0x14a>
+    if(((int*)buf)[0] != n){
+     71b:	a1 20 86 00 00       	mov    0x8620,%eax
+     720:	39 d8                	cmp    %ebx,%eax
+     722:	75 7f                	jne    7a3 <writetest1+0x133>
+    n++;
+     724:	83 c3 01             	add    $0x1,%ebx
+    i = read(fd, buf, 512);
+     727:	83 ec 04             	sub    $0x4,%esp
+     72a:	68 00 02 00 00       	push   $0x200
+     72f:	68 20 86 00 00       	push   $0x8620
+     734:	56                   	push   %esi
+     735:	e8 af 31 00 00       	call   38e9 <read>
+    if(i == 0){
+     73a:	83 c4 10             	add    $0x10,%esp
+     73d:	85 c0                	test   %eax,%eax
+     73f:	75 cf                	jne    710 <writetest1+0xa0>
+      if(n == MAXFILE - 1){
+     741:	81 fb 8b 00 00 00    	cmp    $0x8b,%ebx
+     747:	0f 84 86 00 00 00    	je     7d3 <writetest1+0x163>
+  close(fd);
+     74d:	83 ec 0c             	sub    $0xc,%esp
+     750:	56                   	push   %esi
+     751:	e8 a3 31 00 00       	call   38f9 <close>
+  if(unlink("big") < 0){
+     756:	c7 04 24 37 40 00 00 	movl   $0x4037,(%esp)
+     75d:	e8 bf 31 00 00       	call   3921 <unlink>
+     762:	83 c4 10             	add    $0x10,%esp
+     765:	85 c0                	test   %eax,%eax
+     767:	0f 88 af 00 00 00    	js     81c <writetest1+0x1ac>
+  printf(stdout, "big files ok\n");
+     76d:	83 ec 08             	sub    $0x8,%esp
+     770:	68 5e 40 00 00       	push   $0x405e
+     775:	ff 35 40 5e 00 00    	pushl  0x5e40
+     77b:	e8 c0 32 00 00       	call   3a40 <printf>
+}
+     780:	83 c4 10             	add    $0x10,%esp
+     783:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     786:	5b                   	pop    %ebx
+     787:	5e                   	pop    %esi
+     788:	5d                   	pop    %ebp
+     789:	c3                   	ret    
+      printf(stdout, "error: write big file failed\n", i);
+     78a:	83 ec 04             	sub    $0x4,%esp
+     78d:	53                   	push   %ebx
+     78e:	68 e7 3f 00 00       	push   $0x3fe7
+     793:	ff 35 40 5e 00 00    	pushl  0x5e40
+     799:	e8 a2 32 00 00       	call   3a40 <printf>
+      exit();
+     79e:	e8 2e 31 00 00       	call   38d1 <exit>
+      printf(stdout, "read content of block %d is %d\n",
+     7a3:	50                   	push   %eax
+     7a4:	53                   	push   %ebx
+     7a5:	68 38 4e 00 00       	push   $0x4e38
+     7aa:	ff 35 40 5e 00 00    	pushl  0x5e40
+     7b0:	e8 8b 32 00 00       	call   3a40 <printf>
+      exit();
+     7b5:	e8 17 31 00 00       	call   38d1 <exit>
+      printf(stdout, "read failed %d\n", i);
+     7ba:	83 ec 04             	sub    $0x4,%esp
+     7bd:	50                   	push   %eax
+     7be:	68 3b 40 00 00       	push   $0x403b
+     7c3:	ff 35 40 5e 00 00    	pushl  0x5e40
+     7c9:	e8 72 32 00 00       	call   3a40 <printf>
+      exit();
+     7ce:	e8 fe 30 00 00       	call   38d1 <exit>
+        printf(stdout, "read only %d blocks from big", n);
+     7d3:	52                   	push   %edx
+     7d4:	68 8b 00 00 00       	push   $0x8b
+     7d9:	68 1e 40 00 00       	push   $0x401e
+     7de:	ff 35 40 5e 00 00    	pushl  0x5e40
+     7e4:	e8 57 32 00 00       	call   3a40 <printf>
+        exit();
+     7e9:	e8 e3 30 00 00       	call   38d1 <exit>
+    printf(stdout, "error: open big failed!\n");
+     7ee:	51                   	push   %ecx
+     7ef:	51                   	push   %ecx
+     7f0:	68 05 40 00 00       	push   $0x4005
+     7f5:	ff 35 40 5e 00 00    	pushl  0x5e40
+     7fb:	e8 40 32 00 00       	call   3a40 <printf>
+    exit();
+     800:	e8 cc 30 00 00       	call   38d1 <exit>
+    printf(stdout, "error: creat big failed!\n");
+     805:	50                   	push   %eax
+     806:	50                   	push   %eax
+     807:	68 cd 3f 00 00       	push   $0x3fcd
+     80c:	ff 35 40 5e 00 00    	pushl  0x5e40
+     812:	e8 29 32 00 00       	call   3a40 <printf>
+    exit();
+     817:	e8 b5 30 00 00       	call   38d1 <exit>
+    printf(stdout, "unlink big failed\n");
+     81c:	50                   	push   %eax
+     81d:	50                   	push   %eax
+     81e:	68 4b 40 00 00       	push   $0x404b
+     823:	ff 35 40 5e 00 00    	pushl  0x5e40
+     829:	e8 12 32 00 00       	call   3a40 <printf>
+    exit();
+     82e:	e8 9e 30 00 00       	call   38d1 <exit>
+     833:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     83a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000840 <createtest>:
+{
+     840:	55                   	push   %ebp
+     841:	89 e5                	mov    %esp,%ebp
+     843:	53                   	push   %ebx
+  name[2] = '\0';
+     844:	bb 30 00 00 00       	mov    $0x30,%ebx
+{
+     849:	83 ec 0c             	sub    $0xc,%esp
+  printf(stdout, "many creates, followed by unlink test\n");
+     84c:	68 58 4e 00 00       	push   $0x4e58
+     851:	ff 35 40 5e 00 00    	pushl  0x5e40
+     857:	e8 e4 31 00 00       	call   3a40 <printf>
+  name[0] = 'a';
+     85c:	c6 05 20 a6 00 00 61 	movb   $0x61,0xa620
+  name[2] = '\0';
+     863:	83 c4 10             	add    $0x10,%esp
+     866:	c6 05 22 a6 00 00 00 	movb   $0x0,0xa622
+  for(i = 0; i < 52; i++){
+     86d:	8d 76 00             	lea    0x0(%esi),%esi
+    fd = open(name, O_CREATE|O_RDWR);
+     870:	83 ec 08             	sub    $0x8,%esp
+    name[1] = '0' + i;
+     873:	88 1d 21 a6 00 00    	mov    %bl,0xa621
+    fd = open(name, O_CREATE|O_RDWR);
+     879:	83 c3 01             	add    $0x1,%ebx
+     87c:	68 02 02 00 00       	push   $0x202
+     881:	68 20 a6 00 00       	push   $0xa620
+     886:	e8 86 30 00 00       	call   3911 <open>
+    close(fd);
+     88b:	89 04 24             	mov    %eax,(%esp)
+     88e:	e8 66 30 00 00       	call   38f9 <close>
+  for(i = 0; i < 52; i++){
+     893:	83 c4 10             	add    $0x10,%esp
+     896:	80 fb 64             	cmp    $0x64,%bl
+     899:	75 d5                	jne    870 <createtest+0x30>
+  name[0] = 'a';
+     89b:	c6 05 20 a6 00 00 61 	movb   $0x61,0xa620
+  name[2] = '\0';
+     8a2:	bb 30 00 00 00       	mov    $0x30,%ebx
+     8a7:	c6 05 22 a6 00 00 00 	movb   $0x0,0xa622
+  for(i = 0; i < 52; i++){
+     8ae:	66 90                	xchg   %ax,%ax
+    unlink(name);
+     8b0:	83 ec 0c             	sub    $0xc,%esp
+    name[1] = '0' + i;
+     8b3:	88 1d 21 a6 00 00    	mov    %bl,0xa621
+    unlink(name);
+     8b9:	83 c3 01             	add    $0x1,%ebx
+     8bc:	68 20 a6 00 00       	push   $0xa620
+     8c1:	e8 5b 30 00 00       	call   3921 <unlink>
+  for(i = 0; i < 52; i++){
+     8c6:	83 c4 10             	add    $0x10,%esp
+     8c9:	80 fb 64             	cmp    $0x64,%bl
+     8cc:	75 e2                	jne    8b0 <createtest+0x70>
+  printf(stdout, "many creates, followed by unlink; ok\n");
+     8ce:	83 ec 08             	sub    $0x8,%esp
+     8d1:	68 80 4e 00 00       	push   $0x4e80
+     8d6:	ff 35 40 5e 00 00    	pushl  0x5e40
+     8dc:	e8 5f 31 00 00       	call   3a40 <printf>
+}
+     8e1:	83 c4 10             	add    $0x10,%esp
+     8e4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     8e7:	c9                   	leave  
+     8e8:	c3                   	ret    
+     8e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000008f0 <dirtest>:
+{
+     8f0:	55                   	push   %ebp
+     8f1:	89 e5                	mov    %esp,%ebp
+     8f3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "mkdir test\n");
+     8f6:	68 6c 40 00 00       	push   $0x406c
+     8fb:	ff 35 40 5e 00 00    	pushl  0x5e40
+     901:	e8 3a 31 00 00       	call   3a40 <printf>
+  if(mkdir("dir0") < 0){
+     906:	c7 04 24 78 40 00 00 	movl   $0x4078,(%esp)
+     90d:	e8 27 30 00 00       	call   3939 <mkdir>
+     912:	83 c4 10             	add    $0x10,%esp
+     915:	85 c0                	test   %eax,%eax
+     917:	78 58                	js     971 <dirtest+0x81>
+  if(chdir("dir0") < 0){
+     919:	83 ec 0c             	sub    $0xc,%esp
+     91c:	68 78 40 00 00       	push   $0x4078
+     921:	e8 1b 30 00 00       	call   3941 <chdir>
+     926:	83 c4 10             	add    $0x10,%esp
+     929:	85 c0                	test   %eax,%eax
+     92b:	0f 88 85 00 00 00    	js     9b6 <dirtest+0xc6>
+  if(chdir("..") < 0){
+     931:	83 ec 0c             	sub    $0xc,%esp
+     934:	68 1d 46 00 00       	push   $0x461d
+     939:	e8 03 30 00 00       	call   3941 <chdir>
+     93e:	83 c4 10             	add    $0x10,%esp
+     941:	85 c0                	test   %eax,%eax
+     943:	78 5a                	js     99f <dirtest+0xaf>
+  if(unlink("dir0") < 0){
+     945:	83 ec 0c             	sub    $0xc,%esp
+     948:	68 78 40 00 00       	push   $0x4078
+     94d:	e8 cf 2f 00 00       	call   3921 <unlink>
+     952:	83 c4 10             	add    $0x10,%esp
+     955:	85 c0                	test   %eax,%eax
+     957:	78 2f                	js     988 <dirtest+0x98>
+  printf(stdout, "mkdir test ok\n");
+     959:	83 ec 08             	sub    $0x8,%esp
+     95c:	68 b5 40 00 00       	push   $0x40b5
+     961:	ff 35 40 5e 00 00    	pushl  0x5e40
+     967:	e8 d4 30 00 00       	call   3a40 <printf>
+}
+     96c:	83 c4 10             	add    $0x10,%esp
+     96f:	c9                   	leave  
+     970:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     971:	50                   	push   %eax
+     972:	50                   	push   %eax
+     973:	68 a8 3d 00 00       	push   $0x3da8
+     978:	ff 35 40 5e 00 00    	pushl  0x5e40
+     97e:	e8 bd 30 00 00       	call   3a40 <printf>
+    exit();
+     983:	e8 49 2f 00 00       	call   38d1 <exit>
+    printf(stdout, "unlink dir0 failed\n");
+     988:	50                   	push   %eax
+     989:	50                   	push   %eax
+     98a:	68 a1 40 00 00       	push   $0x40a1
+     98f:	ff 35 40 5e 00 00    	pushl  0x5e40
+     995:	e8 a6 30 00 00       	call   3a40 <printf>
+    exit();
+     99a:	e8 32 2f 00 00       	call   38d1 <exit>
+    printf(stdout, "chdir .. failed\n");
+     99f:	52                   	push   %edx
+     9a0:	52                   	push   %edx
+     9a1:	68 90 40 00 00       	push   $0x4090
+     9a6:	ff 35 40 5e 00 00    	pushl  0x5e40
+     9ac:	e8 8f 30 00 00       	call   3a40 <printf>
+    exit();
+     9b1:	e8 1b 2f 00 00       	call   38d1 <exit>
+    printf(stdout, "chdir dir0 failed\n");
+     9b6:	51                   	push   %ecx
+     9b7:	51                   	push   %ecx
+     9b8:	68 7d 40 00 00       	push   $0x407d
+     9bd:	ff 35 40 5e 00 00    	pushl  0x5e40
+     9c3:	e8 78 30 00 00       	call   3a40 <printf>
+    exit();
+     9c8:	e8 04 2f 00 00       	call   38d1 <exit>
+     9cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000009d0 <exectest>:
+{
+     9d0:	55                   	push   %ebp
+     9d1:	89 e5                	mov    %esp,%ebp
+     9d3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exec test\n");
+     9d6:	68 c4 40 00 00       	push   $0x40c4
+     9db:	ff 35 40 5e 00 00    	pushl  0x5e40
+     9e1:	e8 5a 30 00 00       	call   3a40 <printf>
+  if(exec("echo", echoargv) < 0){
+     9e6:	5a                   	pop    %edx
+     9e7:	59                   	pop    %ecx
+     9e8:	68 44 5e 00 00       	push   $0x5e44
+     9ed:	68 8d 3e 00 00       	push   $0x3e8d
+     9f2:	e8 12 2f 00 00       	call   3909 <exec>
+     9f7:	83 c4 10             	add    $0x10,%esp
+     9fa:	85 c0                	test   %eax,%eax
+     9fc:	78 02                	js     a00 <exectest+0x30>
+}
+     9fe:	c9                   	leave  
+     9ff:	c3                   	ret    
+    printf(stdout, "exec echo failed\n");
+     a00:	50                   	push   %eax
+     a01:	50                   	push   %eax
+     a02:	68 cf 40 00 00       	push   $0x40cf
+     a07:	ff 35 40 5e 00 00    	pushl  0x5e40
+     a0d:	e8 2e 30 00 00       	call   3a40 <printf>
+    exit();
+     a12:	e8 ba 2e 00 00       	call   38d1 <exit>
+     a17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a1e:	66 90                	xchg   %ax,%ax
+
+00000a20 <pipe1>:
+{
+     a20:	55                   	push   %ebp
+     a21:	89 e5                	mov    %esp,%ebp
+     a23:	57                   	push   %edi
+     a24:	56                   	push   %esi
+  if(pipe(fds) != 0){
+     a25:	8d 45 e0             	lea    -0x20(%ebp),%eax
+{
+     a28:	53                   	push   %ebx
+     a29:	83 ec 38             	sub    $0x38,%esp
+  if(pipe(fds) != 0){
+     a2c:	50                   	push   %eax
+     a2d:	e8 af 2e 00 00       	call   38e1 <pipe>
+     a32:	83 c4 10             	add    $0x10,%esp
+     a35:	85 c0                	test   %eax,%eax
+     a37:	0f 85 34 01 00 00    	jne    b71 <pipe1+0x151>
+  pid = fork();
+     a3d:	e8 87 2e 00 00       	call   38c9 <fork>
+  if(pid == 0){
+     a42:	85 c0                	test   %eax,%eax
+     a44:	0f 84 89 00 00 00    	je     ad3 <pipe1+0xb3>
+  } else if(pid > 0){
+     a4a:	0f 8e 34 01 00 00    	jle    b84 <pipe1+0x164>
+    close(fds[1]);
+     a50:	83 ec 0c             	sub    $0xc,%esp
+     a53:	ff 75 e4             	pushl  -0x1c(%ebp)
+  seq = 0;
+     a56:	31 db                	xor    %ebx,%ebx
+    cc = 1;
+     a58:	bf 01 00 00 00       	mov    $0x1,%edi
+    close(fds[1]);
+     a5d:	e8 97 2e 00 00       	call   38f9 <close>
+    total = 0;
+     a62:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+    while((n = read(fds[0], buf, cc)) > 0){
+     a69:	83 c4 10             	add    $0x10,%esp
+     a6c:	83 ec 04             	sub    $0x4,%esp
+     a6f:	57                   	push   %edi
+     a70:	68 20 86 00 00       	push   $0x8620
+     a75:	ff 75 e0             	pushl  -0x20(%ebp)
+     a78:	e8 6c 2e 00 00       	call   38e9 <read>
+     a7d:	83 c4 10             	add    $0x10,%esp
+     a80:	85 c0                	test   %eax,%eax
+     a82:	0f 8e a5 00 00 00    	jle    b2d <pipe1+0x10d>
+     a88:	8d 34 03             	lea    (%ebx,%eax,1),%esi
+      for(i = 0; i < n; i++){
+     a8b:	31 d2                	xor    %edx,%edx
+     a8d:	8d 76 00             	lea    0x0(%esi),%esi
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+     a90:	8d 4b 01             	lea    0x1(%ebx),%ecx
+     a93:	38 9a 20 86 00 00    	cmp    %bl,0x8620(%edx)
+     a99:	75 1e                	jne    ab9 <pipe1+0x99>
+      for(i = 0; i < n; i++){
+     a9b:	83 c2 01             	add    $0x1,%edx
+     a9e:	89 cb                	mov    %ecx,%ebx
+     aa0:	39 ce                	cmp    %ecx,%esi
+     aa2:	75 ec                	jne    a90 <pipe1+0x70>
+      cc = cc * 2;
+     aa4:	01 ff                	add    %edi,%edi
+      total += n;
+     aa6:	01 45 d4             	add    %eax,-0x2c(%ebp)
+     aa9:	b8 00 20 00 00       	mov    $0x2000,%eax
+     aae:	81 ff 00 20 00 00    	cmp    $0x2000,%edi
+     ab4:	0f 4f f8             	cmovg  %eax,%edi
+     ab7:	eb b3                	jmp    a6c <pipe1+0x4c>
+          printf(1, "pipe1 oops 2\n");
+     ab9:	83 ec 08             	sub    $0x8,%esp
+     abc:	68 fe 40 00 00       	push   $0x40fe
+     ac1:	6a 01                	push   $0x1
+     ac3:	e8 78 2f 00 00       	call   3a40 <printf>
+          return;
+     ac8:	83 c4 10             	add    $0x10,%esp
+}
+     acb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     ace:	5b                   	pop    %ebx
+     acf:	5e                   	pop    %esi
+     ad0:	5f                   	pop    %edi
+     ad1:	5d                   	pop    %ebp
+     ad2:	c3                   	ret    
+    close(fds[0]);
+     ad3:	83 ec 0c             	sub    $0xc,%esp
+     ad6:	ff 75 e0             	pushl  -0x20(%ebp)
+  seq = 0;
+     ad9:	31 db                	xor    %ebx,%ebx
+    close(fds[0]);
+     adb:	e8 19 2e 00 00       	call   38f9 <close>
+     ae0:	83 c4 10             	add    $0x10,%esp
+      for(i = 0; i < 1033; i++)
+     ae3:	31 c0                	xor    %eax,%eax
+     ae5:	8d 76 00             	lea    0x0(%esi),%esi
+        buf[i] = seq++;
+     ae8:	8d 14 18             	lea    (%eax,%ebx,1),%edx
+      for(i = 0; i < 1033; i++)
+     aeb:	83 c0 01             	add    $0x1,%eax
+        buf[i] = seq++;
+     aee:	88 90 1f 86 00 00    	mov    %dl,0x861f(%eax)
+      for(i = 0; i < 1033; i++)
+     af4:	3d 09 04 00 00       	cmp    $0x409,%eax
+     af9:	75 ed                	jne    ae8 <pipe1+0xc8>
+      if(write(fds[1], buf, 1033) != 1033){
+     afb:	83 ec 04             	sub    $0x4,%esp
+     afe:	81 c3 09 04 00 00    	add    $0x409,%ebx
+     b04:	68 09 04 00 00       	push   $0x409
+     b09:	68 20 86 00 00       	push   $0x8620
+     b0e:	ff 75 e4             	pushl  -0x1c(%ebp)
+     b11:	e8 db 2d 00 00       	call   38f1 <write>
+     b16:	83 c4 10             	add    $0x10,%esp
+     b19:	3d 09 04 00 00       	cmp    $0x409,%eax
+     b1e:	75 77                	jne    b97 <pipe1+0x177>
+    for(n = 0; n < 5; n++){
+     b20:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebx
+     b26:	75 bb                	jne    ae3 <pipe1+0xc3>
+    exit();
+     b28:	e8 a4 2d 00 00       	call   38d1 <exit>
+    if(total != 5 * 1033){
+     b2d:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)
+     b34:	75 26                	jne    b5c <pipe1+0x13c>
+    close(fds[0]);
+     b36:	83 ec 0c             	sub    $0xc,%esp
+     b39:	ff 75 e0             	pushl  -0x20(%ebp)
+     b3c:	e8 b8 2d 00 00       	call   38f9 <close>
+    wait();
+     b41:	e8 93 2d 00 00       	call   38d9 <wait>
+  printf(1, "pipe1 ok\n");
+     b46:	5a                   	pop    %edx
+     b47:	59                   	pop    %ecx
+     b48:	68 23 41 00 00       	push   $0x4123
+     b4d:	6a 01                	push   $0x1
+     b4f:	e8 ec 2e 00 00       	call   3a40 <printf>
+     b54:	83 c4 10             	add    $0x10,%esp
+     b57:	e9 6f ff ff ff       	jmp    acb <pipe1+0xab>
+      printf(1, "pipe1 oops 3 total %d\n", total);
+     b5c:	53                   	push   %ebx
+     b5d:	ff 75 d4             	pushl  -0x2c(%ebp)
+     b60:	68 0c 41 00 00       	push   $0x410c
+     b65:	6a 01                	push   $0x1
+     b67:	e8 d4 2e 00 00       	call   3a40 <printf>
+      exit();
+     b6c:	e8 60 2d 00 00       	call   38d1 <exit>
+    printf(1, "pipe() failed\n");
+     b71:	57                   	push   %edi
+     b72:	57                   	push   %edi
+     b73:	68 e1 40 00 00       	push   $0x40e1
+     b78:	6a 01                	push   $0x1
+     b7a:	e8 c1 2e 00 00       	call   3a40 <printf>
+    exit();
+     b7f:	e8 4d 2d 00 00       	call   38d1 <exit>
+    printf(1, "fork() failed\n");
+     b84:	50                   	push   %eax
+     b85:	50                   	push   %eax
+     b86:	68 2d 41 00 00       	push   $0x412d
+     b8b:	6a 01                	push   $0x1
+     b8d:	e8 ae 2e 00 00       	call   3a40 <printf>
+    exit();
+     b92:	e8 3a 2d 00 00       	call   38d1 <exit>
+        printf(1, "pipe1 oops 1\n");
+     b97:	56                   	push   %esi
+     b98:	56                   	push   %esi
+     b99:	68 f0 40 00 00       	push   $0x40f0
+     b9e:	6a 01                	push   $0x1
+     ba0:	e8 9b 2e 00 00       	call   3a40 <printf>
+        exit();
+     ba5:	e8 27 2d 00 00       	call   38d1 <exit>
+     baa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000bb0 <preempt>:
+{
+     bb0:	55                   	push   %ebp
+     bb1:	89 e5                	mov    %esp,%ebp
+     bb3:	57                   	push   %edi
+     bb4:	56                   	push   %esi
+     bb5:	53                   	push   %ebx
+     bb6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "preempt: ");
+     bb9:	68 3c 41 00 00       	push   $0x413c
+     bbe:	6a 01                	push   $0x1
+     bc0:	e8 7b 2e 00 00       	call   3a40 <printf>
+  pid1 = fork();
+     bc5:	e8 ff 2c 00 00       	call   38c9 <fork>
+  if(pid1 == 0)
+     bca:	83 c4 10             	add    $0x10,%esp
+     bcd:	85 c0                	test   %eax,%eax
+     bcf:	75 07                	jne    bd8 <preempt+0x28>
+      ;
+     bd1:	eb fe                	jmp    bd1 <preempt+0x21>
+     bd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     bd7:	90                   	nop
+     bd8:	89 c7                	mov    %eax,%edi
+  pid2 = fork();
+     bda:	e8 ea 2c 00 00       	call   38c9 <fork>
+     bdf:	89 c6                	mov    %eax,%esi
+  if(pid2 == 0)
+     be1:	85 c0                	test   %eax,%eax
+     be3:	75 0b                	jne    bf0 <preempt+0x40>
+      ;
+     be5:	eb fe                	jmp    be5 <preempt+0x35>
+     be7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bee:	66 90                	xchg   %ax,%ax
+  pipe(pfds);
+     bf0:	83 ec 0c             	sub    $0xc,%esp
+     bf3:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     bf6:	50                   	push   %eax
+     bf7:	e8 e5 2c 00 00       	call   38e1 <pipe>
+  pid3 = fork();
+     bfc:	e8 c8 2c 00 00       	call   38c9 <fork>
+  if(pid3 == 0){
+     c01:	83 c4 10             	add    $0x10,%esp
+  pid3 = fork();
+     c04:	89 c3                	mov    %eax,%ebx
+  if(pid3 == 0){
+     c06:	85 c0                	test   %eax,%eax
+     c08:	75 3e                	jne    c48 <preempt+0x98>
+    close(pfds[0]);
+     c0a:	83 ec 0c             	sub    $0xc,%esp
+     c0d:	ff 75 e0             	pushl  -0x20(%ebp)
+     c10:	e8 e4 2c 00 00       	call   38f9 <close>
+    if(write(pfds[1], "x", 1) != 1)
+     c15:	83 c4 0c             	add    $0xc,%esp
+     c18:	6a 01                	push   $0x1
+     c1a:	68 01 47 00 00       	push   $0x4701
+     c1f:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c22:	e8 ca 2c 00 00       	call   38f1 <write>
+     c27:	83 c4 10             	add    $0x10,%esp
+     c2a:	83 f8 01             	cmp    $0x1,%eax
+     c2d:	0f 85 a4 00 00 00    	jne    cd7 <preempt+0x127>
+    close(pfds[1]);
+     c33:	83 ec 0c             	sub    $0xc,%esp
+     c36:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c39:	e8 bb 2c 00 00       	call   38f9 <close>
+     c3e:	83 c4 10             	add    $0x10,%esp
+      ;
+     c41:	eb fe                	jmp    c41 <preempt+0x91>
+     c43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c47:	90                   	nop
+  close(pfds[1]);
+     c48:	83 ec 0c             	sub    $0xc,%esp
+     c4b:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c4e:	e8 a6 2c 00 00       	call   38f9 <close>
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+     c53:	83 c4 0c             	add    $0xc,%esp
+     c56:	68 00 20 00 00       	push   $0x2000
+     c5b:	68 20 86 00 00       	push   $0x8620
+     c60:	ff 75 e0             	pushl  -0x20(%ebp)
+     c63:	e8 81 2c 00 00       	call   38e9 <read>
+     c68:	83 c4 10             	add    $0x10,%esp
+     c6b:	83 f8 01             	cmp    $0x1,%eax
+     c6e:	75 7e                	jne    cee <preempt+0x13e>
+  close(pfds[0]);
+     c70:	83 ec 0c             	sub    $0xc,%esp
+     c73:	ff 75 e0             	pushl  -0x20(%ebp)
+     c76:	e8 7e 2c 00 00       	call   38f9 <close>
+  printf(1, "kill... ");
+     c7b:	58                   	pop    %eax
+     c7c:	5a                   	pop    %edx
+     c7d:	68 6d 41 00 00       	push   $0x416d
+     c82:	6a 01                	push   $0x1
+     c84:	e8 b7 2d 00 00       	call   3a40 <printf>
+  kill(pid1);
+     c89:	89 3c 24             	mov    %edi,(%esp)
+     c8c:	e8 70 2c 00 00       	call   3901 <kill>
+  kill(pid2);
+     c91:	89 34 24             	mov    %esi,(%esp)
+     c94:	e8 68 2c 00 00       	call   3901 <kill>
+  kill(pid3);
+     c99:	89 1c 24             	mov    %ebx,(%esp)
+     c9c:	e8 60 2c 00 00       	call   3901 <kill>
+  printf(1, "wait... ");
+     ca1:	59                   	pop    %ecx
+     ca2:	5b                   	pop    %ebx
+     ca3:	68 76 41 00 00       	push   $0x4176
+     ca8:	6a 01                	push   $0x1
+     caa:	e8 91 2d 00 00       	call   3a40 <printf>
+  wait();
+     caf:	e8 25 2c 00 00       	call   38d9 <wait>
+  wait();
+     cb4:	e8 20 2c 00 00       	call   38d9 <wait>
+  wait();
+     cb9:	e8 1b 2c 00 00       	call   38d9 <wait>
+  printf(1, "preempt ok\n");
+     cbe:	5e                   	pop    %esi
+     cbf:	5f                   	pop    %edi
+     cc0:	68 7f 41 00 00       	push   $0x417f
+     cc5:	6a 01                	push   $0x1
+     cc7:	e8 74 2d 00 00       	call   3a40 <printf>
+     ccc:	83 c4 10             	add    $0x10,%esp
+}
+     ccf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     cd2:	5b                   	pop    %ebx
+     cd3:	5e                   	pop    %esi
+     cd4:	5f                   	pop    %edi
+     cd5:	5d                   	pop    %ebp
+     cd6:	c3                   	ret    
+      printf(1, "preempt write error");
+     cd7:	83 ec 08             	sub    $0x8,%esp
+     cda:	68 46 41 00 00       	push   $0x4146
+     cdf:	6a 01                	push   $0x1
+     ce1:	e8 5a 2d 00 00       	call   3a40 <printf>
+     ce6:	83 c4 10             	add    $0x10,%esp
+     ce9:	e9 45 ff ff ff       	jmp    c33 <preempt+0x83>
+    printf(1, "preempt read error");
+     cee:	83 ec 08             	sub    $0x8,%esp
+     cf1:	68 5a 41 00 00       	push   $0x415a
+     cf6:	6a 01                	push   $0x1
+     cf8:	e8 43 2d 00 00       	call   3a40 <printf>
+    return;
+     cfd:	83 c4 10             	add    $0x10,%esp
+     d00:	eb cd                	jmp    ccf <preempt+0x11f>
+     d02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     d09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000d10 <exitwait>:
+{
+     d10:	55                   	push   %ebp
+     d11:	89 e5                	mov    %esp,%ebp
+     d13:	56                   	push   %esi
+     d14:	be 64 00 00 00       	mov    $0x64,%esi
+     d19:	53                   	push   %ebx
+     d1a:	eb 14                	jmp    d30 <exitwait+0x20>
+     d1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(pid){
+     d20:	74 68                	je     d8a <exitwait+0x7a>
+      if(wait() != pid){
+     d22:	e8 b2 2b 00 00       	call   38d9 <wait>
+     d27:	39 d8                	cmp    %ebx,%eax
+     d29:	75 2d                	jne    d58 <exitwait+0x48>
+  for(i = 0; i < 100; i++){
+     d2b:	83 ee 01             	sub    $0x1,%esi
+     d2e:	74 41                	je     d71 <exitwait+0x61>
+    pid = fork();
+     d30:	e8 94 2b 00 00       	call   38c9 <fork>
+     d35:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+     d37:	85 c0                	test   %eax,%eax
+     d39:	79 e5                	jns    d20 <exitwait+0x10>
+      printf(1, "fork failed\n");
+     d3b:	83 ec 08             	sub    $0x8,%esp
+     d3e:	68 e9 4c 00 00       	push   $0x4ce9
+     d43:	6a 01                	push   $0x1
+     d45:	e8 f6 2c 00 00       	call   3a40 <printf>
+      return;
+     d4a:	83 c4 10             	add    $0x10,%esp
+}
+     d4d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d50:	5b                   	pop    %ebx
+     d51:	5e                   	pop    %esi
+     d52:	5d                   	pop    %ebp
+     d53:	c3                   	ret    
+     d54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        printf(1, "wait wrong pid\n");
+     d58:	83 ec 08             	sub    $0x8,%esp
+     d5b:	68 8b 41 00 00       	push   $0x418b
+     d60:	6a 01                	push   $0x1
+     d62:	e8 d9 2c 00 00       	call   3a40 <printf>
+        return;
+     d67:	83 c4 10             	add    $0x10,%esp
+}
+     d6a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d6d:	5b                   	pop    %ebx
+     d6e:	5e                   	pop    %esi
+     d6f:	5d                   	pop    %ebp
+     d70:	c3                   	ret    
+  printf(1, "exitwait ok\n");
+     d71:	83 ec 08             	sub    $0x8,%esp
+     d74:	68 9b 41 00 00       	push   $0x419b
+     d79:	6a 01                	push   $0x1
+     d7b:	e8 c0 2c 00 00       	call   3a40 <printf>
+     d80:	83 c4 10             	add    $0x10,%esp
+}
+     d83:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d86:	5b                   	pop    %ebx
+     d87:	5e                   	pop    %esi
+     d88:	5d                   	pop    %ebp
+     d89:	c3                   	ret    
+      exit();
+     d8a:	e8 42 2b 00 00       	call   38d1 <exit>
+     d8f:	90                   	nop
+
+00000d90 <mem>:
+{
+     d90:	55                   	push   %ebp
+     d91:	89 e5                	mov    %esp,%ebp
+     d93:	57                   	push   %edi
+     d94:	56                   	push   %esi
+     d95:	53                   	push   %ebx
+     d96:	31 db                	xor    %ebx,%ebx
+     d98:	83 ec 14             	sub    $0x14,%esp
+  printf(1, "mem test\n");
+     d9b:	68 a8 41 00 00       	push   $0x41a8
+     da0:	6a 01                	push   $0x1
+     da2:	e8 99 2c 00 00       	call   3a40 <printf>
+  ppid = getpid();
+     da7:	e8 a5 2b 00 00       	call   3951 <getpid>
+     dac:	89 c6                	mov    %eax,%esi
+  if((pid = fork()) == 0){
+     dae:	e8 16 2b 00 00       	call   38c9 <fork>
+     db3:	83 c4 10             	add    $0x10,%esp
+     db6:	85 c0                	test   %eax,%eax
+     db8:	74 0a                	je     dc4 <mem+0x34>
+     dba:	e9 89 00 00 00       	jmp    e48 <mem+0xb8>
+     dbf:	90                   	nop
+      *(char**)m2 = m1;
+     dc0:	89 18                	mov    %ebx,(%eax)
+     dc2:	89 c3                	mov    %eax,%ebx
+    while((m2 = malloc(10001)) != 0){
+     dc4:	83 ec 0c             	sub    $0xc,%esp
+     dc7:	68 11 27 00 00       	push   $0x2711
+     dcc:	e8 cf 2e 00 00       	call   3ca0 <malloc>
+     dd1:	83 c4 10             	add    $0x10,%esp
+     dd4:	85 c0                	test   %eax,%eax
+     dd6:	75 e8                	jne    dc0 <mem+0x30>
+    while(m1){
+     dd8:	85 db                	test   %ebx,%ebx
+     dda:	74 18                	je     df4 <mem+0x64>
+     ddc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      free(m1);
+     de0:	83 ec 0c             	sub    $0xc,%esp
+      m2 = *(char**)m1;
+     de3:	8b 3b                	mov    (%ebx),%edi
+      free(m1);
+     de5:	53                   	push   %ebx
+     de6:	89 fb                	mov    %edi,%ebx
+     de8:	e8 23 2e 00 00       	call   3c10 <free>
+    while(m1){
+     ded:	83 c4 10             	add    $0x10,%esp
+     df0:	85 db                	test   %ebx,%ebx
+     df2:	75 ec                	jne    de0 <mem+0x50>
+    m1 = malloc(1024*20);
+     df4:	83 ec 0c             	sub    $0xc,%esp
+     df7:	68 00 50 00 00       	push   $0x5000
+     dfc:	e8 9f 2e 00 00       	call   3ca0 <malloc>
+    if(m1 == 0){
+     e01:	83 c4 10             	add    $0x10,%esp
+     e04:	85 c0                	test   %eax,%eax
+     e06:	74 20                	je     e28 <mem+0x98>
+    free(m1);
+     e08:	83 ec 0c             	sub    $0xc,%esp
+     e0b:	50                   	push   %eax
+     e0c:	e8 ff 2d 00 00       	call   3c10 <free>
+    printf(1, "mem ok\n");
+     e11:	58                   	pop    %eax
+     e12:	5a                   	pop    %edx
+     e13:	68 cc 41 00 00       	push   $0x41cc
+     e18:	6a 01                	push   $0x1
+     e1a:	e8 21 2c 00 00       	call   3a40 <printf>
+    exit();
+     e1f:	e8 ad 2a 00 00       	call   38d1 <exit>
+     e24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      printf(1, "couldn't allocate mem?!!\n");
+     e28:	83 ec 08             	sub    $0x8,%esp
+     e2b:	68 b2 41 00 00       	push   $0x41b2
+     e30:	6a 01                	push   $0x1
+     e32:	e8 09 2c 00 00       	call   3a40 <printf>
+      kill(ppid);
+     e37:	89 34 24             	mov    %esi,(%esp)
+     e3a:	e8 c2 2a 00 00       	call   3901 <kill>
+      exit();
+     e3f:	e8 8d 2a 00 00       	call   38d1 <exit>
+     e44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+}
+     e48:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     e4b:	5b                   	pop    %ebx
+     e4c:	5e                   	pop    %esi
+     e4d:	5f                   	pop    %edi
+     e4e:	5d                   	pop    %ebp
+    wait();
+     e4f:	e9 85 2a 00 00       	jmp    38d9 <wait>
+     e54:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     e5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     e5f:	90                   	nop
+
+00000e60 <sharedfd>:
+{
+     e60:	55                   	push   %ebp
+     e61:	89 e5                	mov    %esp,%ebp
+     e63:	57                   	push   %edi
+     e64:	56                   	push   %esi
+     e65:	53                   	push   %ebx
+     e66:	83 ec 34             	sub    $0x34,%esp
+  printf(1, "sharedfd test\n");
+     e69:	68 d4 41 00 00       	push   $0x41d4
+     e6e:	6a 01                	push   $0x1
+     e70:	e8 cb 2b 00 00       	call   3a40 <printf>
+  unlink("sharedfd");
+     e75:	c7 04 24 e3 41 00 00 	movl   $0x41e3,(%esp)
+     e7c:	e8 a0 2a 00 00       	call   3921 <unlink>
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+     e81:	5b                   	pop    %ebx
+     e82:	5e                   	pop    %esi
+     e83:	68 02 02 00 00       	push   $0x202
+     e88:	68 e3 41 00 00       	push   $0x41e3
+     e8d:	e8 7f 2a 00 00       	call   3911 <open>
+  if(fd < 0){
+     e92:	83 c4 10             	add    $0x10,%esp
+     e95:	85 c0                	test   %eax,%eax
+     e97:	0f 88 2a 01 00 00    	js     fc7 <sharedfd+0x167>
+     e9d:	89 c7                	mov    %eax,%edi
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     e9f:	8d 75 de             	lea    -0x22(%ebp),%esi
+     ea2:	bb e8 03 00 00       	mov    $0x3e8,%ebx
+  pid = fork();
+     ea7:	e8 1d 2a 00 00       	call   38c9 <fork>
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     eac:	83 f8 01             	cmp    $0x1,%eax
+  pid = fork();
+     eaf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     eb2:	19 c0                	sbb    %eax,%eax
+     eb4:	83 ec 04             	sub    $0x4,%esp
+     eb7:	83 e0 f3             	and    $0xfffffff3,%eax
+     eba:	6a 0a                	push   $0xa
+     ebc:	83 c0 70             	add    $0x70,%eax
+     ebf:	50                   	push   %eax
+     ec0:	56                   	push   %esi
+     ec1:	e8 6a 28 00 00       	call   3730 <memset>
+     ec6:	83 c4 10             	add    $0x10,%esp
+     ec9:	eb 0a                	jmp    ed5 <sharedfd+0x75>
+     ecb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     ecf:	90                   	nop
+  for(i = 0; i < 1000; i++){
+     ed0:	83 eb 01             	sub    $0x1,%ebx
+     ed3:	74 26                	je     efb <sharedfd+0x9b>
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+     ed5:	83 ec 04             	sub    $0x4,%esp
+     ed8:	6a 0a                	push   $0xa
+     eda:	56                   	push   %esi
+     edb:	57                   	push   %edi
+     edc:	e8 10 2a 00 00       	call   38f1 <write>
+     ee1:	83 c4 10             	add    $0x10,%esp
+     ee4:	83 f8 0a             	cmp    $0xa,%eax
+     ee7:	74 e7                	je     ed0 <sharedfd+0x70>
+      printf(1, "fstests: write sharedfd failed\n");
+     ee9:	83 ec 08             	sub    $0x8,%esp
+     eec:	68 d4 4e 00 00       	push   $0x4ed4
+     ef1:	6a 01                	push   $0x1
+     ef3:	e8 48 2b 00 00       	call   3a40 <printf>
+      break;
+     ef8:	83 c4 10             	add    $0x10,%esp
+  if(pid == 0)
+     efb:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+     efe:	85 c9                	test   %ecx,%ecx
+     f00:	0f 84 f5 00 00 00    	je     ffb <sharedfd+0x19b>
+    wait();
+     f06:	e8 ce 29 00 00       	call   38d9 <wait>
+  close(fd);
+     f0b:	83 ec 0c             	sub    $0xc,%esp
+  nc = np = 0;
+     f0e:	31 db                	xor    %ebx,%ebx
+  close(fd);
+     f10:	57                   	push   %edi
+     f11:	8d 7d e8             	lea    -0x18(%ebp),%edi
+     f14:	e8 e0 29 00 00       	call   38f9 <close>
+  fd = open("sharedfd", 0);
+     f19:	58                   	pop    %eax
+     f1a:	5a                   	pop    %edx
+     f1b:	6a 00                	push   $0x0
+     f1d:	68 e3 41 00 00       	push   $0x41e3
+     f22:	e8 ea 29 00 00       	call   3911 <open>
+  if(fd < 0){
+     f27:	83 c4 10             	add    $0x10,%esp
+  nc = np = 0;
+     f2a:	31 d2                	xor    %edx,%edx
+  fd = open("sharedfd", 0);
+     f2c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  if(fd < 0){
+     f2f:	85 c0                	test   %eax,%eax
+     f31:	0f 88 aa 00 00 00    	js     fe1 <sharedfd+0x181>
+     f37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f3e:	66 90                	xchg   %ax,%ax
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+     f40:	83 ec 04             	sub    $0x4,%esp
+     f43:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+     f46:	6a 0a                	push   $0xa
+     f48:	56                   	push   %esi
+     f49:	ff 75 d0             	pushl  -0x30(%ebp)
+     f4c:	e8 98 29 00 00       	call   38e9 <read>
+     f51:	83 c4 10             	add    $0x10,%esp
+     f54:	85 c0                	test   %eax,%eax
+     f56:	7e 28                	jle    f80 <sharedfd+0x120>
+     f58:	89 f0                	mov    %esi,%eax
+     f5a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     f5d:	eb 13                	jmp    f72 <sharedfd+0x112>
+     f5f:	90                   	nop
+        np++;
+     f60:	80 f9 70             	cmp    $0x70,%cl
+     f63:	0f 94 c1             	sete   %cl
+     f66:	0f b6 c9             	movzbl %cl,%ecx
+     f69:	01 cb                	add    %ecx,%ebx
+     f6b:	83 c0 01             	add    $0x1,%eax
+    for(i = 0; i < sizeof(buf); i++){
+     f6e:	39 c7                	cmp    %eax,%edi
+     f70:	74 ce                	je     f40 <sharedfd+0xe0>
+      if(buf[i] == 'c')
+     f72:	0f b6 08             	movzbl (%eax),%ecx
+     f75:	80 f9 63             	cmp    $0x63,%cl
+     f78:	75 e6                	jne    f60 <sharedfd+0x100>
+        nc++;
+     f7a:	83 c2 01             	add    $0x1,%edx
+      if(buf[i] == 'p')
+     f7d:	eb ec                	jmp    f6b <sharedfd+0x10b>
+     f7f:	90                   	nop
+  close(fd);
+     f80:	83 ec 0c             	sub    $0xc,%esp
+     f83:	ff 75 d0             	pushl  -0x30(%ebp)
+     f86:	e8 6e 29 00 00       	call   38f9 <close>
+  unlink("sharedfd");
+     f8b:	c7 04 24 e3 41 00 00 	movl   $0x41e3,(%esp)
+     f92:	e8 8a 29 00 00       	call   3921 <unlink>
+  if(nc == 10000 && np == 10000){
+     f97:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     f9a:	83 c4 10             	add    $0x10,%esp
+     f9d:	81 fa 10 27 00 00    	cmp    $0x2710,%edx
+     fa3:	75 5b                	jne    1000 <sharedfd+0x1a0>
+     fa5:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx
+     fab:	75 53                	jne    1000 <sharedfd+0x1a0>
+    printf(1, "sharedfd ok\n");
+     fad:	83 ec 08             	sub    $0x8,%esp
+     fb0:	68 ec 41 00 00       	push   $0x41ec
+     fb5:	6a 01                	push   $0x1
+     fb7:	e8 84 2a 00 00       	call   3a40 <printf>
+     fbc:	83 c4 10             	add    $0x10,%esp
+}
+     fbf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fc2:	5b                   	pop    %ebx
+     fc3:	5e                   	pop    %esi
+     fc4:	5f                   	pop    %edi
+     fc5:	5d                   	pop    %ebp
+     fc6:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for writing");
+     fc7:	83 ec 08             	sub    $0x8,%esp
+     fca:	68 a8 4e 00 00       	push   $0x4ea8
+     fcf:	6a 01                	push   $0x1
+     fd1:	e8 6a 2a 00 00       	call   3a40 <printf>
+    return;
+     fd6:	83 c4 10             	add    $0x10,%esp
+}
+     fd9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fdc:	5b                   	pop    %ebx
+     fdd:	5e                   	pop    %esi
+     fde:	5f                   	pop    %edi
+     fdf:	5d                   	pop    %ebp
+     fe0:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+     fe1:	83 ec 08             	sub    $0x8,%esp
+     fe4:	68 f4 4e 00 00       	push   $0x4ef4
+     fe9:	6a 01                	push   $0x1
+     feb:	e8 50 2a 00 00       	call   3a40 <printf>
+    return;
+     ff0:	83 c4 10             	add    $0x10,%esp
+}
+     ff3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     ff6:	5b                   	pop    %ebx
+     ff7:	5e                   	pop    %esi
+     ff8:	5f                   	pop    %edi
+     ff9:	5d                   	pop    %ebp
+     ffa:	c3                   	ret    
+    exit();
+     ffb:	e8 d1 28 00 00       	call   38d1 <exit>
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+    1000:	53                   	push   %ebx
+    1001:	52                   	push   %edx
+    1002:	68 f9 41 00 00       	push   $0x41f9
+    1007:	6a 01                	push   $0x1
+    1009:	e8 32 2a 00 00       	call   3a40 <printf>
+    exit();
+    100e:	e8 be 28 00 00       	call   38d1 <exit>
+    1013:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    101a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00001020 <fourfiles>:
+{
+    1020:	55                   	push   %ebp
+    1021:	89 e5                	mov    %esp,%ebp
+    1023:	57                   	push   %edi
+    1024:	56                   	push   %esi
+  printf(1, "fourfiles test\n");
+    1025:	be 0e 42 00 00       	mov    $0x420e,%esi
+{
+    102a:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    102b:	31 db                	xor    %ebx,%ebx
+{
+    102d:	83 ec 34             	sub    $0x34,%esp
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1030:	c7 45 d8 0e 42 00 00 	movl   $0x420e,-0x28(%ebp)
+  printf(1, "fourfiles test\n");
+    1037:	68 14 42 00 00       	push   $0x4214
+    103c:	6a 01                	push   $0x1
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    103e:	c7 45 dc 57 43 00 00 	movl   $0x4357,-0x24(%ebp)
+    1045:	c7 45 e0 5b 43 00 00 	movl   $0x435b,-0x20(%ebp)
+    104c:	c7 45 e4 11 42 00 00 	movl   $0x4211,-0x1c(%ebp)
+  printf(1, "fourfiles test\n");
+    1053:	e8 e8 29 00 00       	call   3a40 <printf>
+    1058:	83 c4 10             	add    $0x10,%esp
+    unlink(fname);
+    105b:	83 ec 0c             	sub    $0xc,%esp
+    105e:	56                   	push   %esi
+    105f:	e8 bd 28 00 00       	call   3921 <unlink>
+    pid = fork();
+    1064:	e8 60 28 00 00       	call   38c9 <fork>
+    if(pid < 0){
+    1069:	83 c4 10             	add    $0x10,%esp
+    106c:	85 c0                	test   %eax,%eax
+    106e:	0f 88 6c 01 00 00    	js     11e0 <fourfiles+0x1c0>
+    if(pid == 0){
+    1074:	0f 84 ef 00 00 00    	je     1169 <fourfiles+0x149>
+  for(pi = 0; pi < 4; pi++){
+    107a:	83 c3 01             	add    $0x1,%ebx
+    107d:	83 fb 04             	cmp    $0x4,%ebx
+    1080:	74 06                	je     1088 <fourfiles+0x68>
+    1082:	8b 74 9d d8          	mov    -0x28(%ebp,%ebx,4),%esi
+    1086:	eb d3                	jmp    105b <fourfiles+0x3b>
+    wait();
+    1088:	e8 4c 28 00 00       	call   38d9 <wait>
+  for(i = 0; i < 2; i++){
+    108d:	31 ff                	xor    %edi,%edi
+    wait();
+    108f:	e8 45 28 00 00       	call   38d9 <wait>
+    1094:	e8 40 28 00 00       	call   38d9 <wait>
+    1099:	e8 3b 28 00 00       	call   38d9 <wait>
+    109e:	c7 45 d0 0e 42 00 00 	movl   $0x420e,-0x30(%ebp)
+    fd = open(fname, 0);
+    10a5:	83 ec 08             	sub    $0x8,%esp
+    total = 0;
+    10a8:	31 db                	xor    %ebx,%ebx
+    fd = open(fname, 0);
+    10aa:	6a 00                	push   $0x0
+    10ac:	ff 75 d0             	pushl  -0x30(%ebp)
+    10af:	e8 5d 28 00 00       	call   3911 <open>
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    10b4:	83 c4 10             	add    $0x10,%esp
+    fd = open(fname, 0);
+    10b7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    10ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    10c0:	83 ec 04             	sub    $0x4,%esp
+    10c3:	68 00 20 00 00       	push   $0x2000
+    10c8:	68 20 86 00 00       	push   $0x8620
+    10cd:	ff 75 d4             	pushl  -0x2c(%ebp)
+    10d0:	e8 14 28 00 00       	call   38e9 <read>
+    10d5:	83 c4 10             	add    $0x10,%esp
+    10d8:	85 c0                	test   %eax,%eax
+    10da:	7e 22                	jle    10fe <fourfiles+0xde>
+      for(j = 0; j < n; j++){
+    10dc:	31 d2                	xor    %edx,%edx
+    10de:	66 90                	xchg   %ax,%ax
+        if(buf[j] != '0'+i){
+    10e0:	83 ff 01             	cmp    $0x1,%edi
+    10e3:	0f be b2 20 86 00 00 	movsbl 0x8620(%edx),%esi
+    10ea:	19 c9                	sbb    %ecx,%ecx
+    10ec:	83 c1 31             	add    $0x31,%ecx
+    10ef:	39 ce                	cmp    %ecx,%esi
+    10f1:	75 62                	jne    1155 <fourfiles+0x135>
+      for(j = 0; j < n; j++){
+    10f3:	83 c2 01             	add    $0x1,%edx
+    10f6:	39 d0                	cmp    %edx,%eax
+    10f8:	75 e6                	jne    10e0 <fourfiles+0xc0>
+      total += n;
+    10fa:	01 c3                	add    %eax,%ebx
+    10fc:	eb c2                	jmp    10c0 <fourfiles+0xa0>
+    close(fd);
+    10fe:	83 ec 0c             	sub    $0xc,%esp
+    1101:	ff 75 d4             	pushl  -0x2c(%ebp)
+    1104:	e8 f0 27 00 00       	call   38f9 <close>
+    if(total != 12*500){
+    1109:	83 c4 10             	add    $0x10,%esp
+    110c:	81 fb 70 17 00 00    	cmp    $0x1770,%ebx
+    1112:	0f 85 dc 00 00 00    	jne    11f4 <fourfiles+0x1d4>
+    unlink(fname);
+    1118:	83 ec 0c             	sub    $0xc,%esp
+    111b:	ff 75 d0             	pushl  -0x30(%ebp)
+    111e:	e8 fe 27 00 00       	call   3921 <unlink>
+  for(i = 0; i < 2; i++){
+    1123:	83 c4 10             	add    $0x10,%esp
+    1126:	83 ff 01             	cmp    $0x1,%edi
+    1129:	75 1a                	jne    1145 <fourfiles+0x125>
+  printf(1, "fourfiles ok\n");
+    112b:	83 ec 08             	sub    $0x8,%esp
+    112e:	68 52 42 00 00       	push   $0x4252
+    1133:	6a 01                	push   $0x1
+    1135:	e8 06 29 00 00       	call   3a40 <printf>
+}
+    113a:	83 c4 10             	add    $0x10,%esp
+    113d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1140:	5b                   	pop    %ebx
+    1141:	5e                   	pop    %esi
+    1142:	5f                   	pop    %edi
+    1143:	5d                   	pop    %ebp
+    1144:	c3                   	ret    
+    1145:	8b 45 dc             	mov    -0x24(%ebp),%eax
+    1148:	bf 01 00 00 00       	mov    $0x1,%edi
+    114d:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    1150:	e9 50 ff ff ff       	jmp    10a5 <fourfiles+0x85>
+          printf(1, "wrong char\n");
+    1155:	83 ec 08             	sub    $0x8,%esp
+    1158:	68 35 42 00 00       	push   $0x4235
+    115d:	6a 01                	push   $0x1
+    115f:	e8 dc 28 00 00       	call   3a40 <printf>
+          exit();
+    1164:	e8 68 27 00 00       	call   38d1 <exit>
+      fd = open(fname, O_CREATE | O_RDWR);
+    1169:	83 ec 08             	sub    $0x8,%esp
+    116c:	68 02 02 00 00       	push   $0x202
+    1171:	56                   	push   %esi
+    1172:	e8 9a 27 00 00       	call   3911 <open>
+      if(fd < 0){
+    1177:	83 c4 10             	add    $0x10,%esp
+      fd = open(fname, O_CREATE | O_RDWR);
+    117a:	89 c6                	mov    %eax,%esi
+      if(fd < 0){
+    117c:	85 c0                	test   %eax,%eax
+    117e:	78 45                	js     11c5 <fourfiles+0x1a5>
+      memset(buf, '0'+pi, 512);
+    1180:	83 ec 04             	sub    $0x4,%esp
+    1183:	83 c3 30             	add    $0x30,%ebx
+    1186:	68 00 02 00 00       	push   $0x200
+    118b:	53                   	push   %ebx
+    118c:	bb 0c 00 00 00       	mov    $0xc,%ebx
+    1191:	68 20 86 00 00       	push   $0x8620
+    1196:	e8 95 25 00 00       	call   3730 <memset>
+    119b:	83 c4 10             	add    $0x10,%esp
+        if((n = write(fd, buf, 500)) != 500){
+    119e:	83 ec 04             	sub    $0x4,%esp
+    11a1:	68 f4 01 00 00       	push   $0x1f4
+    11a6:	68 20 86 00 00       	push   $0x8620
+    11ab:	56                   	push   %esi
+    11ac:	e8 40 27 00 00       	call   38f1 <write>
+    11b1:	83 c4 10             	add    $0x10,%esp
+    11b4:	3d f4 01 00 00       	cmp    $0x1f4,%eax
+    11b9:	75 4c                	jne    1207 <fourfiles+0x1e7>
+      for(i = 0; i < 12; i++){
+    11bb:	83 eb 01             	sub    $0x1,%ebx
+    11be:	75 de                	jne    119e <fourfiles+0x17e>
+      exit();
+    11c0:	e8 0c 27 00 00       	call   38d1 <exit>
+        printf(1, "create failed\n");
+    11c5:	51                   	push   %ecx
+    11c6:	51                   	push   %ecx
+    11c7:	68 af 44 00 00       	push   $0x44af
+    11cc:	6a 01                	push   $0x1
+    11ce:	e8 6d 28 00 00       	call   3a40 <printf>
+        exit();
+    11d3:	e8 f9 26 00 00       	call   38d1 <exit>
+    11d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    11df:	90                   	nop
+      printf(1, "fork failed\n");
+    11e0:	83 ec 08             	sub    $0x8,%esp
+    11e3:	68 e9 4c 00 00       	push   $0x4ce9
+    11e8:	6a 01                	push   $0x1
+    11ea:	e8 51 28 00 00       	call   3a40 <printf>
+      exit();
+    11ef:	e8 dd 26 00 00       	call   38d1 <exit>
+      printf(1, "wrong length %d\n", total);
+    11f4:	50                   	push   %eax
+    11f5:	53                   	push   %ebx
+    11f6:	68 41 42 00 00       	push   $0x4241
+    11fb:	6a 01                	push   $0x1
+    11fd:	e8 3e 28 00 00       	call   3a40 <printf>
+      exit();
+    1202:	e8 ca 26 00 00       	call   38d1 <exit>
+          printf(1, "write failed %d\n", n);
+    1207:	52                   	push   %edx
+    1208:	50                   	push   %eax
+    1209:	68 24 42 00 00       	push   $0x4224
+    120e:	6a 01                	push   $0x1
+    1210:	e8 2b 28 00 00       	call   3a40 <printf>
+          exit();
+    1215:	e8 b7 26 00 00       	call   38d1 <exit>
+    121a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00001220 <createdelete>:
+{
+    1220:	55                   	push   %ebp
+    1221:	89 e5                	mov    %esp,%ebp
+    1223:	57                   	push   %edi
+    1224:	56                   	push   %esi
+    1225:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    1226:	31 db                	xor    %ebx,%ebx
+{
+    1228:	83 ec 44             	sub    $0x44,%esp
+  printf(1, "createdelete test\n");
+    122b:	68 60 42 00 00       	push   $0x4260
+    1230:	6a 01                	push   $0x1
+    1232:	e8 09 28 00 00       	call   3a40 <printf>
+    1237:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+    123a:	e8 8a 26 00 00       	call   38c9 <fork>
+    if(pid < 0){
+    123f:	85 c0                	test   %eax,%eax
+    1241:	0f 88 bf 01 00 00    	js     1406 <createdelete+0x1e6>
+    if(pid == 0){
+    1247:	0f 84 0b 01 00 00    	je     1358 <createdelete+0x138>
+  for(pi = 0; pi < 4; pi++){
+    124d:	83 c3 01             	add    $0x1,%ebx
+    1250:	83 fb 04             	cmp    $0x4,%ebx
+    1253:	75 e5                	jne    123a <createdelete+0x1a>
+    wait();
+    1255:	e8 7f 26 00 00       	call   38d9 <wait>
+  name[0] = name[1] = name[2] = 0;
+    125a:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    125f:	8d 7d c8             	lea    -0x38(%ebp),%edi
+    wait();
+    1262:	e8 72 26 00 00       	call   38d9 <wait>
+    1267:	e8 6d 26 00 00       	call   38d9 <wait>
+    126c:	e8 68 26 00 00       	call   38d9 <wait>
+  name[0] = name[1] = name[2] = 0;
+    1271:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+  for(i = 0; i < N; i++){
+    1275:	8d 76 00             	lea    0x0(%esi),%esi
+    1278:	8d 46 31             	lea    0x31(%esi),%eax
+    127b:	88 45 c7             	mov    %al,-0x39(%ebp)
+    127e:	8d 46 01             	lea    0x1(%esi),%eax
+    1281:	83 f8 09             	cmp    $0x9,%eax
+    1284:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    1287:	0f 9f c3             	setg   %bl
+    128a:	85 c0                	test   %eax,%eax
+    128c:	0f 94 c0             	sete   %al
+    128f:	09 c3                	or     %eax,%ebx
+    1291:	88 5d c6             	mov    %bl,-0x3a(%ebp)
+      name[2] = '\0';
+    1294:	bb 70 00 00 00       	mov    $0x70,%ebx
+      fd = open(name, 0);
+    1299:	83 ec 08             	sub    $0x8,%esp
+      name[1] = '0' + i;
+    129c:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+      name[0] = 'p' + pi;
+    12a0:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      fd = open(name, 0);
+    12a3:	6a 00                	push   $0x0
+    12a5:	57                   	push   %edi
+      name[1] = '0' + i;
+    12a6:	88 45 c9             	mov    %al,-0x37(%ebp)
+      fd = open(name, 0);
+    12a9:	e8 63 26 00 00       	call   3911 <open>
+      if((i == 0 || i >= N/2) && fd < 0){
+    12ae:	83 c4 10             	add    $0x10,%esp
+    12b1:	80 7d c6 00          	cmpb   $0x0,-0x3a(%ebp)
+    12b5:	0f 84 85 00 00 00    	je     1340 <createdelete+0x120>
+    12bb:	85 c0                	test   %eax,%eax
+    12bd:	0f 88 1a 01 00 00    	js     13dd <createdelete+0x1bd>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    12c3:	83 fe 08             	cmp    $0x8,%esi
+    12c6:	0f 86 56 01 00 00    	jbe    1422 <createdelete+0x202>
+        close(fd);
+    12cc:	83 ec 0c             	sub    $0xc,%esp
+    12cf:	50                   	push   %eax
+    12d0:	e8 24 26 00 00       	call   38f9 <close>
+    12d5:	83 c4 10             	add    $0x10,%esp
+    12d8:	83 c3 01             	add    $0x1,%ebx
+    for(pi = 0; pi < 4; pi++){
+    12db:	80 fb 74             	cmp    $0x74,%bl
+    12de:	75 b9                	jne    1299 <createdelete+0x79>
+    12e0:	8b 75 c0             	mov    -0x40(%ebp),%esi
+  for(i = 0; i < N; i++){
+    12e3:	83 fe 13             	cmp    $0x13,%esi
+    12e6:	75 90                	jne    1278 <createdelete+0x58>
+    12e8:	be 70 00 00 00       	mov    $0x70,%esi
+    12ed:	8d 76 00             	lea    0x0(%esi),%esi
+    12f0:	8d 46 c0             	lea    -0x40(%esi),%eax
+  name[0] = name[1] = name[2] = 0;
+    12f3:	bb 04 00 00 00       	mov    $0x4,%ebx
+    12f8:	88 45 c7             	mov    %al,-0x39(%ebp)
+      unlink(name);
+    12fb:	83 ec 0c             	sub    $0xc,%esp
+      name[0] = 'p' + i;
+    12fe:	89 f0                	mov    %esi,%eax
+      unlink(name);
+    1300:	57                   	push   %edi
+      name[0] = 'p' + i;
+    1301:	88 45 c8             	mov    %al,-0x38(%ebp)
+      name[1] = '0' + i;
+    1304:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+    1308:	88 45 c9             	mov    %al,-0x37(%ebp)
+      unlink(name);
+    130b:	e8 11 26 00 00       	call   3921 <unlink>
+    for(pi = 0; pi < 4; pi++){
+    1310:	83 c4 10             	add    $0x10,%esp
+    1313:	83 eb 01             	sub    $0x1,%ebx
+    1316:	75 e3                	jne    12fb <createdelete+0xdb>
+    1318:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; i < N; i++){
+    131b:	89 f0                	mov    %esi,%eax
+    131d:	3c 84                	cmp    $0x84,%al
+    131f:	75 cf                	jne    12f0 <createdelete+0xd0>
+  printf(1, "createdelete ok\n");
+    1321:	83 ec 08             	sub    $0x8,%esp
+    1324:	68 73 42 00 00       	push   $0x4273
+    1329:	6a 01                	push   $0x1
+    132b:	e8 10 27 00 00       	call   3a40 <printf>
+}
+    1330:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1333:	5b                   	pop    %ebx
+    1334:	5e                   	pop    %esi
+    1335:	5f                   	pop    %edi
+    1336:	5d                   	pop    %ebp
+    1337:	c3                   	ret    
+    1338:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    133f:	90                   	nop
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1340:	83 fe 08             	cmp    $0x8,%esi
+    1343:	0f 86 d1 00 00 00    	jbe    141a <createdelete+0x1fa>
+      if(fd >= 0)
+    1349:	85 c0                	test   %eax,%eax
+    134b:	78 8b                	js     12d8 <createdelete+0xb8>
+    134d:	e9 7a ff ff ff       	jmp    12cc <createdelete+0xac>
+    1352:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      name[0] = 'p' + pi;
+    1358:	83 c3 70             	add    $0x70,%ebx
+      name[2] = '\0';
+    135b:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    135f:	8d 7d c8             	lea    -0x38(%ebp),%edi
+      name[0] = 'p' + pi;
+    1362:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      name[2] = '\0';
+    1365:	31 db                	xor    %ebx,%ebx
+    1367:	eb 0f                	jmp    1378 <createdelete+0x158>
+    1369:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      for(i = 0; i < N; i++){
+    1370:	83 fb 13             	cmp    $0x13,%ebx
+    1373:	74 63                	je     13d8 <createdelete+0x1b8>
+    1375:	83 c3 01             	add    $0x1,%ebx
+        fd = open(name, O_CREATE | O_RDWR);
+    1378:	83 ec 08             	sub    $0x8,%esp
+        name[1] = '0' + i;
+    137b:	8d 43 30             	lea    0x30(%ebx),%eax
+        fd = open(name, O_CREATE | O_RDWR);
+    137e:	68 02 02 00 00       	push   $0x202
+    1383:	57                   	push   %edi
+        name[1] = '0' + i;
+    1384:	88 45 c9             	mov    %al,-0x37(%ebp)
+        fd = open(name, O_CREATE | O_RDWR);
+    1387:	e8 85 25 00 00       	call   3911 <open>
+        if(fd < 0){
+    138c:	83 c4 10             	add    $0x10,%esp
+    138f:	85 c0                	test   %eax,%eax
+    1391:	78 5f                	js     13f2 <createdelete+0x1d2>
+        close(fd);
+    1393:	83 ec 0c             	sub    $0xc,%esp
+    1396:	50                   	push   %eax
+    1397:	e8 5d 25 00 00       	call   38f9 <close>
+        if(i > 0 && (i % 2 ) == 0){
+    139c:	83 c4 10             	add    $0x10,%esp
+    139f:	85 db                	test   %ebx,%ebx
+    13a1:	74 d2                	je     1375 <createdelete+0x155>
+    13a3:	f6 c3 01             	test   $0x1,%bl
+    13a6:	75 c8                	jne    1370 <createdelete+0x150>
+          if(unlink(name) < 0){
+    13a8:	83 ec 0c             	sub    $0xc,%esp
+          name[1] = '0' + (i / 2);
+    13ab:	89 d8                	mov    %ebx,%eax
+          if(unlink(name) < 0){
+    13ad:	57                   	push   %edi
+          name[1] = '0' + (i / 2);
+    13ae:	d1 f8                	sar    %eax
+    13b0:	83 c0 30             	add    $0x30,%eax
+    13b3:	88 45 c9             	mov    %al,-0x37(%ebp)
+          if(unlink(name) < 0){
+    13b6:	e8 66 25 00 00       	call   3921 <unlink>
+    13bb:	83 c4 10             	add    $0x10,%esp
+    13be:	85 c0                	test   %eax,%eax
+    13c0:	79 ae                	jns    1370 <createdelete+0x150>
+            printf(1, "unlink failed\n");
+    13c2:	52                   	push   %edx
+    13c3:	52                   	push   %edx
+    13c4:	68 61 3e 00 00       	push   $0x3e61
+    13c9:	6a 01                	push   $0x1
+    13cb:	e8 70 26 00 00       	call   3a40 <printf>
+            exit();
+    13d0:	e8 fc 24 00 00       	call   38d1 <exit>
+    13d5:	8d 76 00             	lea    0x0(%esi),%esi
+      exit();
+    13d8:	e8 f4 24 00 00       	call   38d1 <exit>
+        printf(1, "oops createdelete %s didn't exist\n", name);
+    13dd:	83 ec 04             	sub    $0x4,%esp
+    13e0:	57                   	push   %edi
+    13e1:	68 20 4f 00 00       	push   $0x4f20
+    13e6:	6a 01                	push   $0x1
+    13e8:	e8 53 26 00 00       	call   3a40 <printf>
+        exit();
+    13ed:	e8 df 24 00 00       	call   38d1 <exit>
+          printf(1, "create failed\n");
+    13f2:	83 ec 08             	sub    $0x8,%esp
+    13f5:	68 af 44 00 00       	push   $0x44af
+    13fa:	6a 01                	push   $0x1
+    13fc:	e8 3f 26 00 00       	call   3a40 <printf>
+          exit();
+    1401:	e8 cb 24 00 00       	call   38d1 <exit>
+      printf(1, "fork failed\n");
+    1406:	83 ec 08             	sub    $0x8,%esp
+    1409:	68 e9 4c 00 00       	push   $0x4ce9
+    140e:	6a 01                	push   $0x1
+    1410:	e8 2b 26 00 00       	call   3a40 <printf>
+      exit();
+    1415:	e8 b7 24 00 00       	call   38d1 <exit>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    141a:	85 c0                	test   %eax,%eax
+    141c:	0f 88 b6 fe ff ff    	js     12d8 <createdelete+0xb8>
+        printf(1, "oops createdelete %s did exist\n", name);
+    1422:	50                   	push   %eax
+    1423:	57                   	push   %edi
+    1424:	68 44 4f 00 00       	push   $0x4f44
+    1429:	6a 01                	push   $0x1
+    142b:	e8 10 26 00 00       	call   3a40 <printf>
+        exit();
+    1430:	e8 9c 24 00 00       	call   38d1 <exit>
+    1435:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    143c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001440 <unlinkread>:
+{
+    1440:	55                   	push   %ebp
+    1441:	89 e5                	mov    %esp,%ebp
+    1443:	56                   	push   %esi
+    1444:	53                   	push   %ebx
+  printf(1, "unlinkread test\n");
+    1445:	83 ec 08             	sub    $0x8,%esp
+    1448:	68 84 42 00 00       	push   $0x4284
+    144d:	6a 01                	push   $0x1
+    144f:	e8 ec 25 00 00       	call   3a40 <printf>
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+    1454:	5b                   	pop    %ebx
+    1455:	5e                   	pop    %esi
+    1456:	68 02 02 00 00       	push   $0x202
+    145b:	68 95 42 00 00       	push   $0x4295
+    1460:	e8 ac 24 00 00       	call   3911 <open>
+  if(fd < 0){
+    1465:	83 c4 10             	add    $0x10,%esp
+    1468:	85 c0                	test   %eax,%eax
+    146a:	0f 88 e6 00 00 00    	js     1556 <unlinkread+0x116>
+  write(fd, "hello", 5);
+    1470:	83 ec 04             	sub    $0x4,%esp
+    1473:	89 c3                	mov    %eax,%ebx
+    1475:	6a 05                	push   $0x5
+    1477:	68 ba 42 00 00       	push   $0x42ba
+    147c:	50                   	push   %eax
+    147d:	e8 6f 24 00 00       	call   38f1 <write>
+  close(fd);
+    1482:	89 1c 24             	mov    %ebx,(%esp)
+    1485:	e8 6f 24 00 00       	call   38f9 <close>
+  fd = open("unlinkread", O_RDWR);
+    148a:	58                   	pop    %eax
+    148b:	5a                   	pop    %edx
+    148c:	6a 02                	push   $0x2
+    148e:	68 95 42 00 00       	push   $0x4295
+    1493:	e8 79 24 00 00       	call   3911 <open>
+  if(fd < 0){
+    1498:	83 c4 10             	add    $0x10,%esp
+  fd = open("unlinkread", O_RDWR);
+    149b:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    149d:	85 c0                	test   %eax,%eax
+    149f:	0f 88 10 01 00 00    	js     15b5 <unlinkread+0x175>
+  if(unlink("unlinkread") != 0){
+    14a5:	83 ec 0c             	sub    $0xc,%esp
+    14a8:	68 95 42 00 00       	push   $0x4295
+    14ad:	e8 6f 24 00 00       	call   3921 <unlink>
+    14b2:	83 c4 10             	add    $0x10,%esp
+    14b5:	85 c0                	test   %eax,%eax
+    14b7:	0f 85 e5 00 00 00    	jne    15a2 <unlinkread+0x162>
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    14bd:	83 ec 08             	sub    $0x8,%esp
+    14c0:	68 02 02 00 00       	push   $0x202
+    14c5:	68 95 42 00 00       	push   $0x4295
+    14ca:	e8 42 24 00 00       	call   3911 <open>
+  write(fd1, "yyy", 3);
+    14cf:	83 c4 0c             	add    $0xc,%esp
+    14d2:	6a 03                	push   $0x3
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    14d4:	89 c6                	mov    %eax,%esi
+  write(fd1, "yyy", 3);
+    14d6:	68 f2 42 00 00       	push   $0x42f2
+    14db:	50                   	push   %eax
+    14dc:	e8 10 24 00 00       	call   38f1 <write>
+  close(fd1);
+    14e1:	89 34 24             	mov    %esi,(%esp)
+    14e4:	e8 10 24 00 00       	call   38f9 <close>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    14e9:	83 c4 0c             	add    $0xc,%esp
+    14ec:	68 00 20 00 00       	push   $0x2000
+    14f1:	68 20 86 00 00       	push   $0x8620
+    14f6:	53                   	push   %ebx
+    14f7:	e8 ed 23 00 00       	call   38e9 <read>
+    14fc:	83 c4 10             	add    $0x10,%esp
+    14ff:	83 f8 05             	cmp    $0x5,%eax
+    1502:	0f 85 87 00 00 00    	jne    158f <unlinkread+0x14f>
+  if(buf[0] != 'h'){
+    1508:	80 3d 20 86 00 00 68 	cmpb   $0x68,0x8620
+    150f:	75 6b                	jne    157c <unlinkread+0x13c>
+  if(write(fd, buf, 10) != 10){
+    1511:	83 ec 04             	sub    $0x4,%esp
+    1514:	6a 0a                	push   $0xa
+    1516:	68 20 86 00 00       	push   $0x8620
+    151b:	53                   	push   %ebx
+    151c:	e8 d0 23 00 00       	call   38f1 <write>
+    1521:	83 c4 10             	add    $0x10,%esp
+    1524:	83 f8 0a             	cmp    $0xa,%eax
+    1527:	75 40                	jne    1569 <unlinkread+0x129>
+  close(fd);
+    1529:	83 ec 0c             	sub    $0xc,%esp
+    152c:	53                   	push   %ebx
+    152d:	e8 c7 23 00 00       	call   38f9 <close>
+  unlink("unlinkread");
+    1532:	c7 04 24 95 42 00 00 	movl   $0x4295,(%esp)
+    1539:	e8 e3 23 00 00       	call   3921 <unlink>
+  printf(1, "unlinkread ok\n");
+    153e:	58                   	pop    %eax
+    153f:	5a                   	pop    %edx
+    1540:	68 3d 43 00 00       	push   $0x433d
+    1545:	6a 01                	push   $0x1
+    1547:	e8 f4 24 00 00       	call   3a40 <printf>
+}
+    154c:	83 c4 10             	add    $0x10,%esp
+    154f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    1552:	5b                   	pop    %ebx
+    1553:	5e                   	pop    %esi
+    1554:	5d                   	pop    %ebp
+    1555:	c3                   	ret    
+    printf(1, "create unlinkread failed\n");
+    1556:	51                   	push   %ecx
+    1557:	51                   	push   %ecx
+    1558:	68 a0 42 00 00       	push   $0x42a0
+    155d:	6a 01                	push   $0x1
+    155f:	e8 dc 24 00 00       	call   3a40 <printf>
+    exit();
+    1564:	e8 68 23 00 00       	call   38d1 <exit>
+    printf(1, "unlinkread write failed\n");
+    1569:	51                   	push   %ecx
+    156a:	51                   	push   %ecx
+    156b:	68 24 43 00 00       	push   $0x4324
+    1570:	6a 01                	push   $0x1
+    1572:	e8 c9 24 00 00       	call   3a40 <printf>
+    exit();
+    1577:	e8 55 23 00 00       	call   38d1 <exit>
+    printf(1, "unlinkread wrong data\n");
+    157c:	53                   	push   %ebx
+    157d:	53                   	push   %ebx
+    157e:	68 0d 43 00 00       	push   $0x430d
+    1583:	6a 01                	push   $0x1
+    1585:	e8 b6 24 00 00       	call   3a40 <printf>
+    exit();
+    158a:	e8 42 23 00 00       	call   38d1 <exit>
+    printf(1, "unlinkread read failed");
+    158f:	56                   	push   %esi
+    1590:	56                   	push   %esi
+    1591:	68 f6 42 00 00       	push   $0x42f6
+    1596:	6a 01                	push   $0x1
+    1598:	e8 a3 24 00 00       	call   3a40 <printf>
+    exit();
+    159d:	e8 2f 23 00 00       	call   38d1 <exit>
+    printf(1, "unlink unlinkread failed\n");
+    15a2:	50                   	push   %eax
+    15a3:	50                   	push   %eax
+    15a4:	68 d8 42 00 00       	push   $0x42d8
+    15a9:	6a 01                	push   $0x1
+    15ab:	e8 90 24 00 00       	call   3a40 <printf>
+    exit();
+    15b0:	e8 1c 23 00 00       	call   38d1 <exit>
+    printf(1, "open unlinkread failed\n");
+    15b5:	50                   	push   %eax
+    15b6:	50                   	push   %eax
+    15b7:	68 c0 42 00 00       	push   $0x42c0
+    15bc:	6a 01                	push   $0x1
+    15be:	e8 7d 24 00 00       	call   3a40 <printf>
+    exit();
+    15c3:	e8 09 23 00 00       	call   38d1 <exit>
+    15c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    15cf:	90                   	nop
+
+000015d0 <linktest>:
+{
+    15d0:	55                   	push   %ebp
+    15d1:	89 e5                	mov    %esp,%ebp
+    15d3:	53                   	push   %ebx
+    15d4:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "linktest\n");
+    15d7:	68 4c 43 00 00       	push   $0x434c
+    15dc:	6a 01                	push   $0x1
+    15de:	e8 5d 24 00 00       	call   3a40 <printf>
+  unlink("lf1");
+    15e3:	c7 04 24 56 43 00 00 	movl   $0x4356,(%esp)
+    15ea:	e8 32 23 00 00       	call   3921 <unlink>
+  unlink("lf2");
+    15ef:	c7 04 24 5a 43 00 00 	movl   $0x435a,(%esp)
+    15f6:	e8 26 23 00 00       	call   3921 <unlink>
+  fd = open("lf1", O_CREATE|O_RDWR);
+    15fb:	58                   	pop    %eax
+    15fc:	5a                   	pop    %edx
+    15fd:	68 02 02 00 00       	push   $0x202
+    1602:	68 56 43 00 00       	push   $0x4356
+    1607:	e8 05 23 00 00       	call   3911 <open>
+  if(fd < 0){
+    160c:	83 c4 10             	add    $0x10,%esp
+    160f:	85 c0                	test   %eax,%eax
+    1611:	0f 88 1e 01 00 00    	js     1735 <linktest+0x165>
+  if(write(fd, "hello", 5) != 5){
+    1617:	83 ec 04             	sub    $0x4,%esp
+    161a:	89 c3                	mov    %eax,%ebx
+    161c:	6a 05                	push   $0x5
+    161e:	68 ba 42 00 00       	push   $0x42ba
+    1623:	50                   	push   %eax
+    1624:	e8 c8 22 00 00       	call   38f1 <write>
+    1629:	83 c4 10             	add    $0x10,%esp
+    162c:	83 f8 05             	cmp    $0x5,%eax
+    162f:	0f 85 98 01 00 00    	jne    17cd <linktest+0x1fd>
+  close(fd);
+    1635:	83 ec 0c             	sub    $0xc,%esp
+    1638:	53                   	push   %ebx
+    1639:	e8 bb 22 00 00       	call   38f9 <close>
+  if(link("lf1", "lf2") < 0){
+    163e:	5b                   	pop    %ebx
+    163f:	58                   	pop    %eax
+    1640:	68 5a 43 00 00       	push   $0x435a
+    1645:	68 56 43 00 00       	push   $0x4356
+    164a:	e8 e2 22 00 00       	call   3931 <link>
+    164f:	83 c4 10             	add    $0x10,%esp
+    1652:	85 c0                	test   %eax,%eax
+    1654:	0f 88 60 01 00 00    	js     17ba <linktest+0x1ea>
+  unlink("lf1");
+    165a:	83 ec 0c             	sub    $0xc,%esp
+    165d:	68 56 43 00 00       	push   $0x4356
+    1662:	e8 ba 22 00 00       	call   3921 <unlink>
+  if(open("lf1", 0) >= 0){
+    1667:	58                   	pop    %eax
+    1668:	5a                   	pop    %edx
+    1669:	6a 00                	push   $0x0
+    166b:	68 56 43 00 00       	push   $0x4356
+    1670:	e8 9c 22 00 00       	call   3911 <open>
+    1675:	83 c4 10             	add    $0x10,%esp
+    1678:	85 c0                	test   %eax,%eax
+    167a:	0f 89 27 01 00 00    	jns    17a7 <linktest+0x1d7>
+  fd = open("lf2", 0);
+    1680:	83 ec 08             	sub    $0x8,%esp
+    1683:	6a 00                	push   $0x0
+    1685:	68 5a 43 00 00       	push   $0x435a
+    168a:	e8 82 22 00 00       	call   3911 <open>
+  if(fd < 0){
+    168f:	83 c4 10             	add    $0x10,%esp
+  fd = open("lf2", 0);
+    1692:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1694:	85 c0                	test   %eax,%eax
+    1696:	0f 88 f8 00 00 00    	js     1794 <linktest+0x1c4>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    169c:	83 ec 04             	sub    $0x4,%esp
+    169f:	68 00 20 00 00       	push   $0x2000
+    16a4:	68 20 86 00 00       	push   $0x8620
+    16a9:	50                   	push   %eax
+    16aa:	e8 3a 22 00 00       	call   38e9 <read>
+    16af:	83 c4 10             	add    $0x10,%esp
+    16b2:	83 f8 05             	cmp    $0x5,%eax
+    16b5:	0f 85 c6 00 00 00    	jne    1781 <linktest+0x1b1>
+  close(fd);
+    16bb:	83 ec 0c             	sub    $0xc,%esp
+    16be:	53                   	push   %ebx
+    16bf:	e8 35 22 00 00       	call   38f9 <close>
+  if(link("lf2", "lf2") >= 0){
+    16c4:	58                   	pop    %eax
+    16c5:	5a                   	pop    %edx
+    16c6:	68 5a 43 00 00       	push   $0x435a
+    16cb:	68 5a 43 00 00       	push   $0x435a
+    16d0:	e8 5c 22 00 00       	call   3931 <link>
+    16d5:	83 c4 10             	add    $0x10,%esp
+    16d8:	85 c0                	test   %eax,%eax
+    16da:	0f 89 8e 00 00 00    	jns    176e <linktest+0x19e>
+  unlink("lf2");
+    16e0:	83 ec 0c             	sub    $0xc,%esp
+    16e3:	68 5a 43 00 00       	push   $0x435a
+    16e8:	e8 34 22 00 00       	call   3921 <unlink>
+  if(link("lf2", "lf1") >= 0){
+    16ed:	59                   	pop    %ecx
+    16ee:	5b                   	pop    %ebx
+    16ef:	68 56 43 00 00       	push   $0x4356
+    16f4:	68 5a 43 00 00       	push   $0x435a
+    16f9:	e8 33 22 00 00       	call   3931 <link>
+    16fe:	83 c4 10             	add    $0x10,%esp
+    1701:	85 c0                	test   %eax,%eax
+    1703:	79 56                	jns    175b <linktest+0x18b>
+  if(link(".", "lf1") >= 0){
+    1705:	83 ec 08             	sub    $0x8,%esp
+    1708:	68 56 43 00 00       	push   $0x4356
+    170d:	68 1e 46 00 00       	push   $0x461e
+    1712:	e8 1a 22 00 00       	call   3931 <link>
+    1717:	83 c4 10             	add    $0x10,%esp
+    171a:	85 c0                	test   %eax,%eax
+    171c:	79 2a                	jns    1748 <linktest+0x178>
+  printf(1, "linktest ok\n");
+    171e:	83 ec 08             	sub    $0x8,%esp
+    1721:	68 f4 43 00 00       	push   $0x43f4
+    1726:	6a 01                	push   $0x1
+    1728:	e8 13 23 00 00       	call   3a40 <printf>
+}
+    172d:	83 c4 10             	add    $0x10,%esp
+    1730:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    1733:	c9                   	leave  
+    1734:	c3                   	ret    
+    printf(1, "create lf1 failed\n");
+    1735:	50                   	push   %eax
+    1736:	50                   	push   %eax
+    1737:	68 5e 43 00 00       	push   $0x435e
+    173c:	6a 01                	push   $0x1
+    173e:	e8 fd 22 00 00       	call   3a40 <printf>
+    exit();
+    1743:	e8 89 21 00 00       	call   38d1 <exit>
+    printf(1, "link . lf1 succeeded! oops\n");
+    1748:	50                   	push   %eax
+    1749:	50                   	push   %eax
+    174a:	68 d8 43 00 00       	push   $0x43d8
+    174f:	6a 01                	push   $0x1
+    1751:	e8 ea 22 00 00       	call   3a40 <printf>
+    exit();
+    1756:	e8 76 21 00 00       	call   38d1 <exit>
+    printf(1, "link non-existant succeeded! oops\n");
+    175b:	52                   	push   %edx
+    175c:	52                   	push   %edx
+    175d:	68 8c 4f 00 00       	push   $0x4f8c
+    1762:	6a 01                	push   $0x1
+    1764:	e8 d7 22 00 00       	call   3a40 <printf>
+    exit();
+    1769:	e8 63 21 00 00       	call   38d1 <exit>
+    printf(1, "link lf2 lf2 succeeded! oops\n");
+    176e:	50                   	push   %eax
+    176f:	50                   	push   %eax
+    1770:	68 ba 43 00 00       	push   $0x43ba
+    1775:	6a 01                	push   $0x1
+    1777:	e8 c4 22 00 00       	call   3a40 <printf>
+    exit();
+    177c:	e8 50 21 00 00       	call   38d1 <exit>
+    printf(1, "read lf2 failed\n");
+    1781:	51                   	push   %ecx
+    1782:	51                   	push   %ecx
+    1783:	68 a9 43 00 00       	push   $0x43a9
+    1788:	6a 01                	push   $0x1
+    178a:	e8 b1 22 00 00       	call   3a40 <printf>
+    exit();
+    178f:	e8 3d 21 00 00       	call   38d1 <exit>
+    printf(1, "open lf2 failed\n");
+    1794:	53                   	push   %ebx
+    1795:	53                   	push   %ebx
+    1796:	68 98 43 00 00       	push   $0x4398
+    179b:	6a 01                	push   $0x1
+    179d:	e8 9e 22 00 00       	call   3a40 <printf>
+    exit();
+    17a2:	e8 2a 21 00 00       	call   38d1 <exit>
+    printf(1, "unlinked lf1 but it is still there!\n");
+    17a7:	50                   	push   %eax
+    17a8:	50                   	push   %eax
+    17a9:	68 64 4f 00 00       	push   $0x4f64
+    17ae:	6a 01                	push   $0x1
+    17b0:	e8 8b 22 00 00       	call   3a40 <printf>
+    exit();
+    17b5:	e8 17 21 00 00       	call   38d1 <exit>
+    printf(1, "link lf1 lf2 failed\n");
+    17ba:	51                   	push   %ecx
+    17bb:	51                   	push   %ecx
+    17bc:	68 83 43 00 00       	push   $0x4383
+    17c1:	6a 01                	push   $0x1
+    17c3:	e8 78 22 00 00       	call   3a40 <printf>
+    exit();
+    17c8:	e8 04 21 00 00       	call   38d1 <exit>
+    printf(1, "write lf1 failed\n");
+    17cd:	50                   	push   %eax
+    17ce:	50                   	push   %eax
+    17cf:	68 71 43 00 00       	push   $0x4371
+    17d4:	6a 01                	push   $0x1
+    17d6:	e8 65 22 00 00       	call   3a40 <printf>
+    exit();
+    17db:	e8 f1 20 00 00       	call   38d1 <exit>
+
+000017e0 <concreate>:
+{
+    17e0:	55                   	push   %ebp
+    17e1:	89 e5                	mov    %esp,%ebp
+    17e3:	57                   	push   %edi
+    if(pid && (i % 3) == 1){
+    17e4:	bf ab aa aa aa       	mov    $0xaaaaaaab,%edi
+{
+    17e9:	56                   	push   %esi
+  for(i = 0; i < 40; i++){
+    17ea:	31 f6                	xor    %esi,%esi
+{
+    17ec:	53                   	push   %ebx
+    17ed:	8d 5d ad             	lea    -0x53(%ebp),%ebx
+    17f0:	83 ec 64             	sub    $0x64,%esp
+  printf(1, "concreate test\n");
+    17f3:	68 01 44 00 00       	push   $0x4401
+    17f8:	6a 01                	push   $0x1
+    17fa:	e8 41 22 00 00       	call   3a40 <printf>
+  file[0] = 'C';
+    17ff:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
+  file[2] = '\0';
+    1803:	83 c4 10             	add    $0x10,%esp
+    1806:	c6 45 af 00          	movb   $0x0,-0x51(%ebp)
+  for(i = 0; i < 40; i++){
+    180a:	eb 4c                	jmp    1858 <concreate+0x78>
+    180c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(pid && (i % 3) == 1){
+    1810:	89 f0                	mov    %esi,%eax
+    1812:	89 f1                	mov    %esi,%ecx
+    1814:	f7 e7                	mul    %edi
+    1816:	d1 ea                	shr    %edx
+    1818:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    181b:	29 c1                	sub    %eax,%ecx
+    181d:	83 f9 01             	cmp    $0x1,%ecx
+    1820:	0f 84 ba 00 00 00    	je     18e0 <concreate+0x100>
+      fd = open(file, O_CREATE | O_RDWR);
+    1826:	83 ec 08             	sub    $0x8,%esp
+    1829:	68 02 02 00 00       	push   $0x202
+    182e:	53                   	push   %ebx
+    182f:	e8 dd 20 00 00       	call   3911 <open>
+      if(fd < 0){
+    1834:	83 c4 10             	add    $0x10,%esp
+    1837:	85 c0                	test   %eax,%eax
+    1839:	78 67                	js     18a2 <concreate+0xc2>
+      close(fd);
+    183b:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 40; i++){
+    183e:	83 c6 01             	add    $0x1,%esi
+      close(fd);
+    1841:	50                   	push   %eax
+    1842:	e8 b2 20 00 00       	call   38f9 <close>
+    1847:	83 c4 10             	add    $0x10,%esp
+      wait();
+    184a:	e8 8a 20 00 00       	call   38d9 <wait>
+  for(i = 0; i < 40; i++){
+    184f:	83 fe 28             	cmp    $0x28,%esi
+    1852:	0f 84 aa 00 00 00    	je     1902 <concreate+0x122>
+    unlink(file);
+    1858:	83 ec 0c             	sub    $0xc,%esp
+    file[1] = '0' + i;
+    185b:	8d 46 30             	lea    0x30(%esi),%eax
+    unlink(file);
+    185e:	53                   	push   %ebx
+    file[1] = '0' + i;
+    185f:	88 45 ae             	mov    %al,-0x52(%ebp)
+    unlink(file);
+    1862:	e8 ba 20 00 00       	call   3921 <unlink>
+    pid = fork();
+    1867:	e8 5d 20 00 00       	call   38c9 <fork>
+    if(pid && (i % 3) == 1){
+    186c:	83 c4 10             	add    $0x10,%esp
+    186f:	85 c0                	test   %eax,%eax
+    1871:	75 9d                	jne    1810 <concreate+0x30>
+    } else if(pid == 0 && (i % 5) == 1){
+    1873:	89 f0                	mov    %esi,%eax
+    1875:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
+    187a:	f7 e2                	mul    %edx
+    187c:	c1 ea 02             	shr    $0x2,%edx
+    187f:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    1882:	29 c6                	sub    %eax,%esi
+    1884:	83 fe 01             	cmp    $0x1,%esi
+    1887:	74 37                	je     18c0 <concreate+0xe0>
+      fd = open(file, O_CREATE | O_RDWR);
+    1889:	83 ec 08             	sub    $0x8,%esp
+    188c:	68 02 02 00 00       	push   $0x202
+    1891:	53                   	push   %ebx
+    1892:	e8 7a 20 00 00       	call   3911 <open>
+      if(fd < 0){
+    1897:	83 c4 10             	add    $0x10,%esp
+    189a:	85 c0                	test   %eax,%eax
+    189c:	0f 89 2c 02 00 00    	jns    1ace <concreate+0x2ee>
+        printf(1, "concreate create %s failed\n", file);
+    18a2:	83 ec 04             	sub    $0x4,%esp
+    18a5:	53                   	push   %ebx
+    18a6:	68 14 44 00 00       	push   $0x4414
+    18ab:	6a 01                	push   $0x1
+    18ad:	e8 8e 21 00 00       	call   3a40 <printf>
+        exit();
+    18b2:	e8 1a 20 00 00       	call   38d1 <exit>
+    18b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    18be:	66 90                	xchg   %ax,%ax
+      link("C0", file);
+    18c0:	83 ec 08             	sub    $0x8,%esp
+    18c3:	53                   	push   %ebx
+    18c4:	68 11 44 00 00       	push   $0x4411
+    18c9:	e8 63 20 00 00       	call   3931 <link>
+    18ce:	83 c4 10             	add    $0x10,%esp
+      exit();
+    18d1:	e8 fb 1f 00 00       	call   38d1 <exit>
+    18d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    18dd:	8d 76 00             	lea    0x0(%esi),%esi
+      link("C0", file);
+    18e0:	83 ec 08             	sub    $0x8,%esp
+  for(i = 0; i < 40; i++){
+    18e3:	83 c6 01             	add    $0x1,%esi
+      link("C0", file);
+    18e6:	53                   	push   %ebx
+    18e7:	68 11 44 00 00       	push   $0x4411
+    18ec:	e8 40 20 00 00       	call   3931 <link>
+    18f1:	83 c4 10             	add    $0x10,%esp
+      wait();
+    18f4:	e8 e0 1f 00 00       	call   38d9 <wait>
+  for(i = 0; i < 40; i++){
+    18f9:	83 fe 28             	cmp    $0x28,%esi
+    18fc:	0f 85 56 ff ff ff    	jne    1858 <concreate+0x78>
+  memset(fa, 0, sizeof(fa));
+    1902:	83 ec 04             	sub    $0x4,%esp
+    1905:	8d 45 c0             	lea    -0x40(%ebp),%eax
+    1908:	6a 28                	push   $0x28
+    190a:	6a 00                	push   $0x0
+    190c:	50                   	push   %eax
+    190d:	e8 1e 1e 00 00       	call   3730 <memset>
+  fd = open(".", 0);
+    1912:	5e                   	pop    %esi
+    1913:	5f                   	pop    %edi
+    1914:	6a 00                	push   $0x0
+    1916:	68 1e 46 00 00       	push   $0x461e
+    191b:	8d 7d b0             	lea    -0x50(%ebp),%edi
+    191e:	e8 ee 1f 00 00       	call   3911 <open>
+  n = 0;
+    1923:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
+  while(read(fd, &de, sizeof(de)) > 0){
+    192a:	83 c4 10             	add    $0x10,%esp
+  fd = open(".", 0);
+    192d:	89 c6                	mov    %eax,%esi
+  while(read(fd, &de, sizeof(de)) > 0){
+    192f:	90                   	nop
+    1930:	83 ec 04             	sub    $0x4,%esp
+    1933:	6a 10                	push   $0x10
+    1935:	57                   	push   %edi
+    1936:	56                   	push   %esi
+    1937:	e8 ad 1f 00 00       	call   38e9 <read>
+    193c:	83 c4 10             	add    $0x10,%esp
+    193f:	85 c0                	test   %eax,%eax
+    1941:	7e 3d                	jle    1980 <concreate+0x1a0>
+    if(de.inum == 0)
+    1943:	66 83 7d b0 00       	cmpw   $0x0,-0x50(%ebp)
+    1948:	74 e6                	je     1930 <concreate+0x150>
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    194a:	80 7d b2 43          	cmpb   $0x43,-0x4e(%ebp)
+    194e:	75 e0                	jne    1930 <concreate+0x150>
+    1950:	80 7d b4 00          	cmpb   $0x0,-0x4c(%ebp)
+    1954:	75 da                	jne    1930 <concreate+0x150>
+      i = de.name[1] - '0';
+    1956:	0f be 45 b3          	movsbl -0x4d(%ebp),%eax
+    195a:	83 e8 30             	sub    $0x30,%eax
+      if(i < 0 || i >= sizeof(fa)){
+    195d:	83 f8 27             	cmp    $0x27,%eax
+    1960:	0f 87 50 01 00 00    	ja     1ab6 <concreate+0x2d6>
+      if(fa[i]){
+    1966:	80 7c 05 c0 00       	cmpb   $0x0,-0x40(%ebp,%eax,1)
+    196b:	0f 85 2d 01 00 00    	jne    1a9e <concreate+0x2be>
+      fa[i] = 1;
+    1971:	c6 44 05 c0 01       	movb   $0x1,-0x40(%ebp,%eax,1)
+      n++;
+    1976:	83 45 a4 01          	addl   $0x1,-0x5c(%ebp)
+    197a:	eb b4                	jmp    1930 <concreate+0x150>
+    197c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  close(fd);
+    1980:	83 ec 0c             	sub    $0xc,%esp
+    1983:	56                   	push   %esi
+    1984:	e8 70 1f 00 00       	call   38f9 <close>
+  if(n != 40){
+    1989:	83 c4 10             	add    $0x10,%esp
+    198c:	83 7d a4 28          	cmpl   $0x28,-0x5c(%ebp)
+    1990:	0f 85 f5 00 00 00    	jne    1a8b <concreate+0x2ab>
+  for(i = 0; i < 40; i++){
+    1996:	31 f6                	xor    %esi,%esi
+    1998:	eb 48                	jmp    19e2 <concreate+0x202>
+    199a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+       ((i % 3) == 1 && pid != 0)){
+    19a0:	85 ff                	test   %edi,%edi
+    19a2:	74 05                	je     19a9 <concreate+0x1c9>
+    19a4:	83 fa 01             	cmp    $0x1,%edx
+    19a7:	74 64                	je     1a0d <concreate+0x22d>
+      unlink(file);
+    19a9:	83 ec 0c             	sub    $0xc,%esp
+    19ac:	53                   	push   %ebx
+    19ad:	e8 6f 1f 00 00       	call   3921 <unlink>
+      unlink(file);
+    19b2:	89 1c 24             	mov    %ebx,(%esp)
+    19b5:	e8 67 1f 00 00       	call   3921 <unlink>
+      unlink(file);
+    19ba:	89 1c 24             	mov    %ebx,(%esp)
+    19bd:	e8 5f 1f 00 00       	call   3921 <unlink>
+      unlink(file);
+    19c2:	89 1c 24             	mov    %ebx,(%esp)
+    19c5:	e8 57 1f 00 00       	call   3921 <unlink>
+    19ca:	83 c4 10             	add    $0x10,%esp
+    if(pid == 0)
+    19cd:	85 ff                	test   %edi,%edi
+    19cf:	0f 84 fc fe ff ff    	je     18d1 <concreate+0xf1>
+      wait();
+    19d5:	e8 ff 1e 00 00       	call   38d9 <wait>
+  for(i = 0; i < 40; i++){
+    19da:	83 c6 01             	add    $0x1,%esi
+    19dd:	83 fe 28             	cmp    $0x28,%esi
+    19e0:	74 7e                	je     1a60 <concreate+0x280>
+    file[1] = '0' + i;
+    19e2:	8d 46 30             	lea    0x30(%esi),%eax
+    19e5:	88 45 ae             	mov    %al,-0x52(%ebp)
+    pid = fork();
+    19e8:	e8 dc 1e 00 00       	call   38c9 <fork>
+    19ed:	89 c7                	mov    %eax,%edi
+    if(pid < 0){
+    19ef:	85 c0                	test   %eax,%eax
+    19f1:	0f 88 80 00 00 00    	js     1a77 <concreate+0x297>
+    if(((i % 3) == 0 && pid == 0) ||
+    19f7:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
+    19fc:	f7 e6                	mul    %esi
+    19fe:	d1 ea                	shr    %edx
+    1a00:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    1a03:	89 f2                	mov    %esi,%edx
+    1a05:	29 c2                	sub    %eax,%edx
+    1a07:	89 d0                	mov    %edx,%eax
+    1a09:	09 f8                	or     %edi,%eax
+    1a0b:	75 93                	jne    19a0 <concreate+0x1c0>
+      close(open(file, 0));
+    1a0d:	83 ec 08             	sub    $0x8,%esp
+    1a10:	6a 00                	push   $0x0
+    1a12:	53                   	push   %ebx
+    1a13:	e8 f9 1e 00 00       	call   3911 <open>
+    1a18:	89 04 24             	mov    %eax,(%esp)
+    1a1b:	e8 d9 1e 00 00       	call   38f9 <close>
+      close(open(file, 0));
+    1a20:	58                   	pop    %eax
+    1a21:	5a                   	pop    %edx
+    1a22:	6a 00                	push   $0x0
+    1a24:	53                   	push   %ebx
+    1a25:	e8 e7 1e 00 00       	call   3911 <open>
+    1a2a:	89 04 24             	mov    %eax,(%esp)
+    1a2d:	e8 c7 1e 00 00       	call   38f9 <close>
+      close(open(file, 0));
+    1a32:	59                   	pop    %ecx
+    1a33:	58                   	pop    %eax
+    1a34:	6a 00                	push   $0x0
+    1a36:	53                   	push   %ebx
+    1a37:	e8 d5 1e 00 00       	call   3911 <open>
+    1a3c:	89 04 24             	mov    %eax,(%esp)
+    1a3f:	e8 b5 1e 00 00       	call   38f9 <close>
+      close(open(file, 0));
+    1a44:	58                   	pop    %eax
+    1a45:	5a                   	pop    %edx
+    1a46:	6a 00                	push   $0x0
+    1a48:	53                   	push   %ebx
+    1a49:	e8 c3 1e 00 00       	call   3911 <open>
+    1a4e:	89 04 24             	mov    %eax,(%esp)
+    1a51:	e8 a3 1e 00 00       	call   38f9 <close>
+    1a56:	83 c4 10             	add    $0x10,%esp
+    1a59:	e9 6f ff ff ff       	jmp    19cd <concreate+0x1ed>
+    1a5e:	66 90                	xchg   %ax,%ax
+  printf(1, "concreate ok\n");
+    1a60:	83 ec 08             	sub    $0x8,%esp
+    1a63:	68 66 44 00 00       	push   $0x4466
+    1a68:	6a 01                	push   $0x1
+    1a6a:	e8 d1 1f 00 00       	call   3a40 <printf>
+}
+    1a6f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1a72:	5b                   	pop    %ebx
+    1a73:	5e                   	pop    %esi
+    1a74:	5f                   	pop    %edi
+    1a75:	5d                   	pop    %ebp
+    1a76:	c3                   	ret    
+      printf(1, "fork failed\n");
+    1a77:	83 ec 08             	sub    $0x8,%esp
+    1a7a:	68 e9 4c 00 00       	push   $0x4ce9
+    1a7f:	6a 01                	push   $0x1
+    1a81:	e8 ba 1f 00 00       	call   3a40 <printf>
+      exit();
+    1a86:	e8 46 1e 00 00       	call   38d1 <exit>
+    printf(1, "concreate not enough files in directory listing\n");
+    1a8b:	51                   	push   %ecx
+    1a8c:	51                   	push   %ecx
+    1a8d:	68 b0 4f 00 00       	push   $0x4fb0
+    1a92:	6a 01                	push   $0x1
+    1a94:	e8 a7 1f 00 00       	call   3a40 <printf>
+    exit();
+    1a99:	e8 33 1e 00 00       	call   38d1 <exit>
+        printf(1, "concreate duplicate file %s\n", de.name);
+    1a9e:	83 ec 04             	sub    $0x4,%esp
+    1aa1:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1aa4:	50                   	push   %eax
+    1aa5:	68 49 44 00 00       	push   $0x4449
+    1aaa:	6a 01                	push   $0x1
+    1aac:	e8 8f 1f 00 00       	call   3a40 <printf>
+        exit();
+    1ab1:	e8 1b 1e 00 00       	call   38d1 <exit>
+        printf(1, "concreate weird file %s\n", de.name);
+    1ab6:	83 ec 04             	sub    $0x4,%esp
+    1ab9:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1abc:	50                   	push   %eax
+    1abd:	68 30 44 00 00       	push   $0x4430
+    1ac2:	6a 01                	push   $0x1
+    1ac4:	e8 77 1f 00 00       	call   3a40 <printf>
+        exit();
+    1ac9:	e8 03 1e 00 00       	call   38d1 <exit>
+      close(fd);
+    1ace:	83 ec 0c             	sub    $0xc,%esp
+    1ad1:	50                   	push   %eax
+    1ad2:	e8 22 1e 00 00       	call   38f9 <close>
+    1ad7:	83 c4 10             	add    $0x10,%esp
+    1ada:	e9 f2 fd ff ff       	jmp    18d1 <concreate+0xf1>
+    1adf:	90                   	nop
+
+00001ae0 <linkunlink>:
+{
+    1ae0:	55                   	push   %ebp
+    1ae1:	89 e5                	mov    %esp,%ebp
+    1ae3:	57                   	push   %edi
+    1ae4:	56                   	push   %esi
+    1ae5:	53                   	push   %ebx
+    1ae6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "linkunlink test\n");
+    1ae9:	68 74 44 00 00       	push   $0x4474
+    1aee:	6a 01                	push   $0x1
+    1af0:	e8 4b 1f 00 00       	call   3a40 <printf>
+  unlink("x");
+    1af5:	c7 04 24 01 47 00 00 	movl   $0x4701,(%esp)
+    1afc:	e8 20 1e 00 00       	call   3921 <unlink>
+  pid = fork();
+    1b01:	e8 c3 1d 00 00       	call   38c9 <fork>
+  if(pid < 0){
+    1b06:	83 c4 10             	add    $0x10,%esp
+  pid = fork();
+    1b09:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(pid < 0){
+    1b0c:	85 c0                	test   %eax,%eax
+    1b0e:	0f 88 b6 00 00 00    	js     1bca <linkunlink+0xea>
+  unsigned int x = (pid ? 1 : 97);
+    1b14:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
+    1b18:	bb 64 00 00 00       	mov    $0x64,%ebx
+    if((x % 3) == 0){
+    1b1d:	be ab aa aa aa       	mov    $0xaaaaaaab,%esi
+  unsigned int x = (pid ? 1 : 97);
+    1b22:	19 ff                	sbb    %edi,%edi
+    1b24:	83 e7 60             	and    $0x60,%edi
+    1b27:	83 c7 01             	add    $0x1,%edi
+    1b2a:	eb 1e                	jmp    1b4a <linkunlink+0x6a>
+    1b2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if((x % 3) == 1){
+    1b30:	83 fa 01             	cmp    $0x1,%edx
+    1b33:	74 7b                	je     1bb0 <linkunlink+0xd0>
+      unlink("x");
+    1b35:	83 ec 0c             	sub    $0xc,%esp
+    1b38:	68 01 47 00 00       	push   $0x4701
+    1b3d:	e8 df 1d 00 00       	call   3921 <unlink>
+    1b42:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1b45:	83 eb 01             	sub    $0x1,%ebx
+    1b48:	74 3d                	je     1b87 <linkunlink+0xa7>
+    x = x * 1103515245 + 12345;
+    1b4a:	69 cf 6d 4e c6 41    	imul   $0x41c64e6d,%edi,%ecx
+    1b50:	8d b9 39 30 00 00    	lea    0x3039(%ecx),%edi
+    if((x % 3) == 0){
+    1b56:	89 f8                	mov    %edi,%eax
+    1b58:	f7 e6                	mul    %esi
+    1b5a:	d1 ea                	shr    %edx
+    1b5c:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    1b5f:	89 fa                	mov    %edi,%edx
+    1b61:	29 c2                	sub    %eax,%edx
+    1b63:	75 cb                	jne    1b30 <linkunlink+0x50>
+      close(open("x", O_RDWR | O_CREATE));
+    1b65:	83 ec 08             	sub    $0x8,%esp
+    1b68:	68 02 02 00 00       	push   $0x202
+    1b6d:	68 01 47 00 00       	push   $0x4701
+    1b72:	e8 9a 1d 00 00       	call   3911 <open>
+    1b77:	89 04 24             	mov    %eax,(%esp)
+    1b7a:	e8 7a 1d 00 00       	call   38f9 <close>
+    1b7f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1b82:	83 eb 01             	sub    $0x1,%ebx
+    1b85:	75 c3                	jne    1b4a <linkunlink+0x6a>
+  if(pid)
+    1b87:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    1b8a:	85 c0                	test   %eax,%eax
+    1b8c:	74 4f                	je     1bdd <linkunlink+0xfd>
+    wait();
+    1b8e:	e8 46 1d 00 00       	call   38d9 <wait>
+  printf(1, "linkunlink ok\n");
+    1b93:	83 ec 08             	sub    $0x8,%esp
+    1b96:	68 89 44 00 00       	push   $0x4489
+    1b9b:	6a 01                	push   $0x1
+    1b9d:	e8 9e 1e 00 00       	call   3a40 <printf>
+}
+    1ba2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1ba5:	5b                   	pop    %ebx
+    1ba6:	5e                   	pop    %esi
+    1ba7:	5f                   	pop    %edi
+    1ba8:	5d                   	pop    %ebp
+    1ba9:	c3                   	ret    
+    1baa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      link("cat", "x");
+    1bb0:	83 ec 08             	sub    $0x8,%esp
+    1bb3:	68 01 47 00 00       	push   $0x4701
+    1bb8:	68 85 44 00 00       	push   $0x4485
+    1bbd:	e8 6f 1d 00 00       	call   3931 <link>
+    1bc2:	83 c4 10             	add    $0x10,%esp
+    1bc5:	e9 7b ff ff ff       	jmp    1b45 <linkunlink+0x65>
+    printf(1, "fork failed\n");
+    1bca:	52                   	push   %edx
+    1bcb:	52                   	push   %edx
+    1bcc:	68 e9 4c 00 00       	push   $0x4ce9
+    1bd1:	6a 01                	push   $0x1
+    1bd3:	e8 68 1e 00 00       	call   3a40 <printf>
+    exit();
+    1bd8:	e8 f4 1c 00 00       	call   38d1 <exit>
+    exit();
+    1bdd:	e8 ef 1c 00 00       	call   38d1 <exit>
+    1be2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1be9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00001bf0 <bigdir>:
+{
+    1bf0:	55                   	push   %ebp
+    1bf1:	89 e5                	mov    %esp,%ebp
+    1bf3:	57                   	push   %edi
+    1bf4:	56                   	push   %esi
+    1bf5:	53                   	push   %ebx
+    1bf6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "bigdir test\n");
+    1bf9:	68 98 44 00 00       	push   $0x4498
+    1bfe:	6a 01                	push   $0x1
+    1c00:	e8 3b 1e 00 00       	call   3a40 <printf>
+  unlink("bd");
+    1c05:	c7 04 24 a5 44 00 00 	movl   $0x44a5,(%esp)
+    1c0c:	e8 10 1d 00 00       	call   3921 <unlink>
+  fd = open("bd", O_CREATE);
+    1c11:	5a                   	pop    %edx
+    1c12:	59                   	pop    %ecx
+    1c13:	68 00 02 00 00       	push   $0x200
+    1c18:	68 a5 44 00 00       	push   $0x44a5
+    1c1d:	e8 ef 1c 00 00       	call   3911 <open>
+  if(fd < 0){
+    1c22:	83 c4 10             	add    $0x10,%esp
+    1c25:	85 c0                	test   %eax,%eax
+    1c27:	0f 88 de 00 00 00    	js     1d0b <bigdir+0x11b>
+  close(fd);
+    1c2d:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 500; i++){
+    1c30:	31 f6                	xor    %esi,%esi
+    1c32:	8d 7d de             	lea    -0x22(%ebp),%edi
+  close(fd);
+    1c35:	50                   	push   %eax
+    1c36:	e8 be 1c 00 00       	call   38f9 <close>
+    1c3b:	83 c4 10             	add    $0x10,%esp
+    1c3e:	66 90                	xchg   %ax,%ax
+    name[1] = '0' + (i / 64);
+    1c40:	89 f0                	mov    %esi,%eax
+    if(link("bd", name) != 0){
+    1c42:	83 ec 08             	sub    $0x8,%esp
+    name[0] = 'x';
+    1c45:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1c49:	c1 f8 06             	sar    $0x6,%eax
+    if(link("bd", name) != 0){
+    1c4c:	57                   	push   %edi
+    name[1] = '0' + (i / 64);
+    1c4d:	83 c0 30             	add    $0x30,%eax
+    if(link("bd", name) != 0){
+    1c50:	68 a5 44 00 00       	push   $0x44a5
+    name[1] = '0' + (i / 64);
+    1c55:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1c58:	89 f0                	mov    %esi,%eax
+    1c5a:	83 e0 3f             	and    $0x3f,%eax
+    name[3] = '\0';
+    1c5d:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[2] = '0' + (i % 64);
+    1c61:	83 c0 30             	add    $0x30,%eax
+    1c64:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(link("bd", name) != 0){
+    1c67:	e8 c5 1c 00 00       	call   3931 <link>
+    1c6c:	83 c4 10             	add    $0x10,%esp
+    1c6f:	89 c3                	mov    %eax,%ebx
+    1c71:	85 c0                	test   %eax,%eax
+    1c73:	75 6e                	jne    1ce3 <bigdir+0xf3>
+  for(i = 0; i < 500; i++){
+    1c75:	83 c6 01             	add    $0x1,%esi
+    1c78:	81 fe f4 01 00 00    	cmp    $0x1f4,%esi
+    1c7e:	75 c0                	jne    1c40 <bigdir+0x50>
+  unlink("bd");
+    1c80:	83 ec 0c             	sub    $0xc,%esp
+    1c83:	68 a5 44 00 00       	push   $0x44a5
+    1c88:	e8 94 1c 00 00       	call   3921 <unlink>
+    1c8d:	83 c4 10             	add    $0x10,%esp
+    name[1] = '0' + (i / 64);
+    1c90:	89 d8                	mov    %ebx,%eax
+    if(unlink(name) != 0){
+    1c92:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'x';
+    1c95:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1c99:	c1 f8 06             	sar    $0x6,%eax
+    if(unlink(name) != 0){
+    1c9c:	57                   	push   %edi
+    name[1] = '0' + (i / 64);
+    1c9d:	83 c0 30             	add    $0x30,%eax
+    name[3] = '\0';
+    1ca0:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[1] = '0' + (i / 64);
+    1ca4:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1ca7:	89 d8                	mov    %ebx,%eax
+    1ca9:	83 e0 3f             	and    $0x3f,%eax
+    1cac:	83 c0 30             	add    $0x30,%eax
+    1caf:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(unlink(name) != 0){
+    1cb2:	e8 6a 1c 00 00       	call   3921 <unlink>
+    1cb7:	83 c4 10             	add    $0x10,%esp
+    1cba:	85 c0                	test   %eax,%eax
+    1cbc:	75 39                	jne    1cf7 <bigdir+0x107>
+  for(i = 0; i < 500; i++){
+    1cbe:	83 c3 01             	add    $0x1,%ebx
+    1cc1:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
+    1cc7:	75 c7                	jne    1c90 <bigdir+0xa0>
+  printf(1, "bigdir ok\n");
+    1cc9:	83 ec 08             	sub    $0x8,%esp
+    1ccc:	68 e7 44 00 00       	push   $0x44e7
+    1cd1:	6a 01                	push   $0x1
+    1cd3:	e8 68 1d 00 00       	call   3a40 <printf>
+    1cd8:	83 c4 10             	add    $0x10,%esp
+}
+    1cdb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1cde:	5b                   	pop    %ebx
+    1cdf:	5e                   	pop    %esi
+    1ce0:	5f                   	pop    %edi
+    1ce1:	5d                   	pop    %ebp
+    1ce2:	c3                   	ret    
+      printf(1, "bigdir link failed\n");
+    1ce3:	83 ec 08             	sub    $0x8,%esp
+    1ce6:	68 be 44 00 00       	push   $0x44be
+    1ceb:	6a 01                	push   $0x1
+    1ced:	e8 4e 1d 00 00       	call   3a40 <printf>
+      exit();
+    1cf2:	e8 da 1b 00 00       	call   38d1 <exit>
+      printf(1, "bigdir unlink failed");
+    1cf7:	83 ec 08             	sub    $0x8,%esp
+    1cfa:	68 d2 44 00 00       	push   $0x44d2
+    1cff:	6a 01                	push   $0x1
+    1d01:	e8 3a 1d 00 00       	call   3a40 <printf>
+      exit();
+    1d06:	e8 c6 1b 00 00       	call   38d1 <exit>
+    printf(1, "bigdir create failed\n");
+    1d0b:	50                   	push   %eax
+    1d0c:	50                   	push   %eax
+    1d0d:	68 a8 44 00 00       	push   $0x44a8
+    1d12:	6a 01                	push   $0x1
+    1d14:	e8 27 1d 00 00       	call   3a40 <printf>
+    exit();
+    1d19:	e8 b3 1b 00 00       	call   38d1 <exit>
+    1d1e:	66 90                	xchg   %ax,%ax
+
+00001d20 <subdir>:
+{
+    1d20:	55                   	push   %ebp
+    1d21:	89 e5                	mov    %esp,%ebp
+    1d23:	53                   	push   %ebx
+    1d24:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "subdir test\n");
+    1d27:	68 f2 44 00 00       	push   $0x44f2
+    1d2c:	6a 01                	push   $0x1
+    1d2e:	e8 0d 1d 00 00       	call   3a40 <printf>
+  unlink("ff");
+    1d33:	c7 04 24 7b 45 00 00 	movl   $0x457b,(%esp)
+    1d3a:	e8 e2 1b 00 00       	call   3921 <unlink>
+  if(mkdir("dd") != 0){
+    1d3f:	c7 04 24 18 46 00 00 	movl   $0x4618,(%esp)
+    1d46:	e8 ee 1b 00 00       	call   3939 <mkdir>
+    1d4b:	83 c4 10             	add    $0x10,%esp
+    1d4e:	85 c0                	test   %eax,%eax
+    1d50:	0f 85 b3 05 00 00    	jne    2309 <subdir+0x5e9>
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1d56:	83 ec 08             	sub    $0x8,%esp
+    1d59:	68 02 02 00 00       	push   $0x202
+    1d5e:	68 51 45 00 00       	push   $0x4551
+    1d63:	e8 a9 1b 00 00       	call   3911 <open>
+  if(fd < 0){
+    1d68:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1d6b:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1d6d:	85 c0                	test   %eax,%eax
+    1d6f:	0f 88 81 05 00 00    	js     22f6 <subdir+0x5d6>
+  write(fd, "ff", 2);
+    1d75:	83 ec 04             	sub    $0x4,%esp
+    1d78:	6a 02                	push   $0x2
+    1d7a:	68 7b 45 00 00       	push   $0x457b
+    1d7f:	50                   	push   %eax
+    1d80:	e8 6c 1b 00 00       	call   38f1 <write>
+  close(fd);
+    1d85:	89 1c 24             	mov    %ebx,(%esp)
+    1d88:	e8 6c 1b 00 00       	call   38f9 <close>
+  if(unlink("dd") >= 0){
+    1d8d:	c7 04 24 18 46 00 00 	movl   $0x4618,(%esp)
+    1d94:	e8 88 1b 00 00       	call   3921 <unlink>
+    1d99:	83 c4 10             	add    $0x10,%esp
+    1d9c:	85 c0                	test   %eax,%eax
+    1d9e:	0f 89 3f 05 00 00    	jns    22e3 <subdir+0x5c3>
+  if(mkdir("/dd/dd") != 0){
+    1da4:	83 ec 0c             	sub    $0xc,%esp
+    1da7:	68 2c 45 00 00       	push   $0x452c
+    1dac:	e8 88 1b 00 00       	call   3939 <mkdir>
+    1db1:	83 c4 10             	add    $0x10,%esp
+    1db4:	85 c0                	test   %eax,%eax
+    1db6:	0f 85 14 05 00 00    	jne    22d0 <subdir+0x5b0>
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1dbc:	83 ec 08             	sub    $0x8,%esp
+    1dbf:	68 02 02 00 00       	push   $0x202
+    1dc4:	68 4e 45 00 00       	push   $0x454e
+    1dc9:	e8 43 1b 00 00       	call   3911 <open>
+  if(fd < 0){
+    1dce:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1dd1:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1dd3:	85 c0                	test   %eax,%eax
+    1dd5:	0f 88 24 04 00 00    	js     21ff <subdir+0x4df>
+  write(fd, "FF", 2);
+    1ddb:	83 ec 04             	sub    $0x4,%esp
+    1dde:	6a 02                	push   $0x2
+    1de0:	68 6f 45 00 00       	push   $0x456f
+    1de5:	50                   	push   %eax
+    1de6:	e8 06 1b 00 00       	call   38f1 <write>
+  close(fd);
+    1deb:	89 1c 24             	mov    %ebx,(%esp)
+    1dee:	e8 06 1b 00 00       	call   38f9 <close>
+  fd = open("dd/dd/../ff", 0);
+    1df3:	58                   	pop    %eax
+    1df4:	5a                   	pop    %edx
+    1df5:	6a 00                	push   $0x0
+    1df7:	68 72 45 00 00       	push   $0x4572
+    1dfc:	e8 10 1b 00 00       	call   3911 <open>
+  if(fd < 0){
+    1e01:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/../ff", 0);
+    1e04:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1e06:	85 c0                	test   %eax,%eax
+    1e08:	0f 88 de 03 00 00    	js     21ec <subdir+0x4cc>
+  cc = read(fd, buf, sizeof(buf));
+    1e0e:	83 ec 04             	sub    $0x4,%esp
+    1e11:	68 00 20 00 00       	push   $0x2000
+    1e16:	68 20 86 00 00       	push   $0x8620
+    1e1b:	50                   	push   %eax
+    1e1c:	e8 c8 1a 00 00       	call   38e9 <read>
+  if(cc != 2 || buf[0] != 'f'){
+    1e21:	83 c4 10             	add    $0x10,%esp
+    1e24:	83 f8 02             	cmp    $0x2,%eax
+    1e27:	0f 85 3a 03 00 00    	jne    2167 <subdir+0x447>
+    1e2d:	80 3d 20 86 00 00 66 	cmpb   $0x66,0x8620
+    1e34:	0f 85 2d 03 00 00    	jne    2167 <subdir+0x447>
+  close(fd);
+    1e3a:	83 ec 0c             	sub    $0xc,%esp
+    1e3d:	53                   	push   %ebx
+    1e3e:	e8 b6 1a 00 00       	call   38f9 <close>
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    1e43:	5b                   	pop    %ebx
+    1e44:	58                   	pop    %eax
+    1e45:	68 b2 45 00 00       	push   $0x45b2
+    1e4a:	68 4e 45 00 00       	push   $0x454e
+    1e4f:	e8 dd 1a 00 00       	call   3931 <link>
+    1e54:	83 c4 10             	add    $0x10,%esp
+    1e57:	85 c0                	test   %eax,%eax
+    1e59:	0f 85 c6 03 00 00    	jne    2225 <subdir+0x505>
+  if(unlink("dd/dd/ff") != 0){
+    1e5f:	83 ec 0c             	sub    $0xc,%esp
+    1e62:	68 4e 45 00 00       	push   $0x454e
+    1e67:	e8 b5 1a 00 00       	call   3921 <unlink>
+    1e6c:	83 c4 10             	add    $0x10,%esp
+    1e6f:	85 c0                	test   %eax,%eax
+    1e71:	0f 85 16 03 00 00    	jne    218d <subdir+0x46d>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1e77:	83 ec 08             	sub    $0x8,%esp
+    1e7a:	6a 00                	push   $0x0
+    1e7c:	68 4e 45 00 00       	push   $0x454e
+    1e81:	e8 8b 1a 00 00       	call   3911 <open>
+    1e86:	83 c4 10             	add    $0x10,%esp
+    1e89:	85 c0                	test   %eax,%eax
+    1e8b:	0f 89 2c 04 00 00    	jns    22bd <subdir+0x59d>
+  if(chdir("dd") != 0){
+    1e91:	83 ec 0c             	sub    $0xc,%esp
+    1e94:	68 18 46 00 00       	push   $0x4618
+    1e99:	e8 a3 1a 00 00       	call   3941 <chdir>
+    1e9e:	83 c4 10             	add    $0x10,%esp
+    1ea1:	85 c0                	test   %eax,%eax
+    1ea3:	0f 85 01 04 00 00    	jne    22aa <subdir+0x58a>
+  if(chdir("dd/../../dd") != 0){
+    1ea9:	83 ec 0c             	sub    $0xc,%esp
+    1eac:	68 e6 45 00 00       	push   $0x45e6
+    1eb1:	e8 8b 1a 00 00       	call   3941 <chdir>
+    1eb6:	83 c4 10             	add    $0x10,%esp
+    1eb9:	85 c0                	test   %eax,%eax
+    1ebb:	0f 85 b9 02 00 00    	jne    217a <subdir+0x45a>
+  if(chdir("dd/../../../dd") != 0){
+    1ec1:	83 ec 0c             	sub    $0xc,%esp
+    1ec4:	68 0c 46 00 00       	push   $0x460c
+    1ec9:	e8 73 1a 00 00       	call   3941 <chdir>
+    1ece:	83 c4 10             	add    $0x10,%esp
+    1ed1:	85 c0                	test   %eax,%eax
+    1ed3:	0f 85 a1 02 00 00    	jne    217a <subdir+0x45a>
+  if(chdir("./..") != 0){
+    1ed9:	83 ec 0c             	sub    $0xc,%esp
+    1edc:	68 1b 46 00 00       	push   $0x461b
+    1ee1:	e8 5b 1a 00 00       	call   3941 <chdir>
+    1ee6:	83 c4 10             	add    $0x10,%esp
+    1ee9:	85 c0                	test   %eax,%eax
+    1eeb:	0f 85 21 03 00 00    	jne    2212 <subdir+0x4f2>
+  fd = open("dd/dd/ffff", 0);
+    1ef1:	83 ec 08             	sub    $0x8,%esp
+    1ef4:	6a 00                	push   $0x0
+    1ef6:	68 b2 45 00 00       	push   $0x45b2
+    1efb:	e8 11 1a 00 00       	call   3911 <open>
+  if(fd < 0){
+    1f00:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/ffff", 0);
+    1f03:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1f05:	85 c0                	test   %eax,%eax
+    1f07:	0f 88 e0 04 00 00    	js     23ed <subdir+0x6cd>
+  if(read(fd, buf, sizeof(buf)) != 2){
+    1f0d:	83 ec 04             	sub    $0x4,%esp
+    1f10:	68 00 20 00 00       	push   $0x2000
+    1f15:	68 20 86 00 00       	push   $0x8620
+    1f1a:	50                   	push   %eax
+    1f1b:	e8 c9 19 00 00       	call   38e9 <read>
+    1f20:	83 c4 10             	add    $0x10,%esp
+    1f23:	83 f8 02             	cmp    $0x2,%eax
+    1f26:	0f 85 ae 04 00 00    	jne    23da <subdir+0x6ba>
+  close(fd);
+    1f2c:	83 ec 0c             	sub    $0xc,%esp
+    1f2f:	53                   	push   %ebx
+    1f30:	e8 c4 19 00 00       	call   38f9 <close>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1f35:	59                   	pop    %ecx
+    1f36:	5b                   	pop    %ebx
+    1f37:	6a 00                	push   $0x0
+    1f39:	68 4e 45 00 00       	push   $0x454e
+    1f3e:	e8 ce 19 00 00       	call   3911 <open>
+    1f43:	83 c4 10             	add    $0x10,%esp
+    1f46:	85 c0                	test   %eax,%eax
+    1f48:	0f 89 65 02 00 00    	jns    21b3 <subdir+0x493>
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    1f4e:	83 ec 08             	sub    $0x8,%esp
+    1f51:	68 02 02 00 00       	push   $0x202
+    1f56:	68 66 46 00 00       	push   $0x4666
+    1f5b:	e8 b1 19 00 00       	call   3911 <open>
+    1f60:	83 c4 10             	add    $0x10,%esp
+    1f63:	85 c0                	test   %eax,%eax
+    1f65:	0f 89 35 02 00 00    	jns    21a0 <subdir+0x480>
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    1f6b:	83 ec 08             	sub    $0x8,%esp
+    1f6e:	68 02 02 00 00       	push   $0x202
+    1f73:	68 8b 46 00 00       	push   $0x468b
+    1f78:	e8 94 19 00 00       	call   3911 <open>
+    1f7d:	83 c4 10             	add    $0x10,%esp
+    1f80:	85 c0                	test   %eax,%eax
+    1f82:	0f 89 0f 03 00 00    	jns    2297 <subdir+0x577>
+  if(open("dd", O_CREATE) >= 0){
+    1f88:	83 ec 08             	sub    $0x8,%esp
+    1f8b:	68 00 02 00 00       	push   $0x200
+    1f90:	68 18 46 00 00       	push   $0x4618
+    1f95:	e8 77 19 00 00       	call   3911 <open>
+    1f9a:	83 c4 10             	add    $0x10,%esp
+    1f9d:	85 c0                	test   %eax,%eax
+    1f9f:	0f 89 df 02 00 00    	jns    2284 <subdir+0x564>
+  if(open("dd", O_RDWR) >= 0){
+    1fa5:	83 ec 08             	sub    $0x8,%esp
+    1fa8:	6a 02                	push   $0x2
+    1faa:	68 18 46 00 00       	push   $0x4618
+    1faf:	e8 5d 19 00 00       	call   3911 <open>
+    1fb4:	83 c4 10             	add    $0x10,%esp
+    1fb7:	85 c0                	test   %eax,%eax
+    1fb9:	0f 89 b2 02 00 00    	jns    2271 <subdir+0x551>
+  if(open("dd", O_WRONLY) >= 0){
+    1fbf:	83 ec 08             	sub    $0x8,%esp
+    1fc2:	6a 01                	push   $0x1
+    1fc4:	68 18 46 00 00       	push   $0x4618
+    1fc9:	e8 43 19 00 00       	call   3911 <open>
+    1fce:	83 c4 10             	add    $0x10,%esp
+    1fd1:	85 c0                	test   %eax,%eax
+    1fd3:	0f 89 85 02 00 00    	jns    225e <subdir+0x53e>
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    1fd9:	83 ec 08             	sub    $0x8,%esp
+    1fdc:	68 fa 46 00 00       	push   $0x46fa
+    1fe1:	68 66 46 00 00       	push   $0x4666
+    1fe6:	e8 46 19 00 00       	call   3931 <link>
+    1feb:	83 c4 10             	add    $0x10,%esp
+    1fee:	85 c0                	test   %eax,%eax
+    1ff0:	0f 84 55 02 00 00    	je     224b <subdir+0x52b>
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    1ff6:	83 ec 08             	sub    $0x8,%esp
+    1ff9:	68 fa 46 00 00       	push   $0x46fa
+    1ffe:	68 8b 46 00 00       	push   $0x468b
+    2003:	e8 29 19 00 00       	call   3931 <link>
+    2008:	83 c4 10             	add    $0x10,%esp
+    200b:	85 c0                	test   %eax,%eax
+    200d:	0f 84 25 02 00 00    	je     2238 <subdir+0x518>
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    2013:	83 ec 08             	sub    $0x8,%esp
+    2016:	68 b2 45 00 00       	push   $0x45b2
+    201b:	68 51 45 00 00       	push   $0x4551
+    2020:	e8 0c 19 00 00       	call   3931 <link>
+    2025:	83 c4 10             	add    $0x10,%esp
+    2028:	85 c0                	test   %eax,%eax
+    202a:	0f 84 a9 01 00 00    	je     21d9 <subdir+0x4b9>
+  if(mkdir("dd/ff/ff") == 0){
+    2030:	83 ec 0c             	sub    $0xc,%esp
+    2033:	68 66 46 00 00       	push   $0x4666
+    2038:	e8 fc 18 00 00       	call   3939 <mkdir>
+    203d:	83 c4 10             	add    $0x10,%esp
+    2040:	85 c0                	test   %eax,%eax
+    2042:	0f 84 7e 01 00 00    	je     21c6 <subdir+0x4a6>
+  if(mkdir("dd/xx/ff") == 0){
+    2048:	83 ec 0c             	sub    $0xc,%esp
+    204b:	68 8b 46 00 00       	push   $0x468b
+    2050:	e8 e4 18 00 00       	call   3939 <mkdir>
+    2055:	83 c4 10             	add    $0x10,%esp
+    2058:	85 c0                	test   %eax,%eax
+    205a:	0f 84 67 03 00 00    	je     23c7 <subdir+0x6a7>
+  if(mkdir("dd/dd/ffff") == 0){
+    2060:	83 ec 0c             	sub    $0xc,%esp
+    2063:	68 b2 45 00 00       	push   $0x45b2
+    2068:	e8 cc 18 00 00       	call   3939 <mkdir>
+    206d:	83 c4 10             	add    $0x10,%esp
+    2070:	85 c0                	test   %eax,%eax
+    2072:	0f 84 3c 03 00 00    	je     23b4 <subdir+0x694>
+  if(unlink("dd/xx/ff") == 0){
+    2078:	83 ec 0c             	sub    $0xc,%esp
+    207b:	68 8b 46 00 00       	push   $0x468b
+    2080:	e8 9c 18 00 00       	call   3921 <unlink>
+    2085:	83 c4 10             	add    $0x10,%esp
+    2088:	85 c0                	test   %eax,%eax
+    208a:	0f 84 11 03 00 00    	je     23a1 <subdir+0x681>
+  if(unlink("dd/ff/ff") == 0){
+    2090:	83 ec 0c             	sub    $0xc,%esp
+    2093:	68 66 46 00 00       	push   $0x4666
+    2098:	e8 84 18 00 00       	call   3921 <unlink>
+    209d:	83 c4 10             	add    $0x10,%esp
+    20a0:	85 c0                	test   %eax,%eax
+    20a2:	0f 84 e6 02 00 00    	je     238e <subdir+0x66e>
+  if(chdir("dd/ff") == 0){
+    20a8:	83 ec 0c             	sub    $0xc,%esp
+    20ab:	68 51 45 00 00       	push   $0x4551
+    20b0:	e8 8c 18 00 00       	call   3941 <chdir>
+    20b5:	83 c4 10             	add    $0x10,%esp
+    20b8:	85 c0                	test   %eax,%eax
+    20ba:	0f 84 bb 02 00 00    	je     237b <subdir+0x65b>
+  if(chdir("dd/xx") == 0){
+    20c0:	83 ec 0c             	sub    $0xc,%esp
+    20c3:	68 fd 46 00 00       	push   $0x46fd
+    20c8:	e8 74 18 00 00       	call   3941 <chdir>
+    20cd:	83 c4 10             	add    $0x10,%esp
+    20d0:	85 c0                	test   %eax,%eax
+    20d2:	0f 84 90 02 00 00    	je     2368 <subdir+0x648>
+  if(unlink("dd/dd/ffff") != 0){
+    20d8:	83 ec 0c             	sub    $0xc,%esp
+    20db:	68 b2 45 00 00       	push   $0x45b2
+    20e0:	e8 3c 18 00 00       	call   3921 <unlink>
+    20e5:	83 c4 10             	add    $0x10,%esp
+    20e8:	85 c0                	test   %eax,%eax
+    20ea:	0f 85 9d 00 00 00    	jne    218d <subdir+0x46d>
+  if(unlink("dd/ff") != 0){
+    20f0:	83 ec 0c             	sub    $0xc,%esp
+    20f3:	68 51 45 00 00       	push   $0x4551
+    20f8:	e8 24 18 00 00       	call   3921 <unlink>
+    20fd:	83 c4 10             	add    $0x10,%esp
+    2100:	85 c0                	test   %eax,%eax
+    2102:	0f 85 4d 02 00 00    	jne    2355 <subdir+0x635>
+  if(unlink("dd") == 0){
+    2108:	83 ec 0c             	sub    $0xc,%esp
+    210b:	68 18 46 00 00       	push   $0x4618
+    2110:	e8 0c 18 00 00       	call   3921 <unlink>
+    2115:	83 c4 10             	add    $0x10,%esp
+    2118:	85 c0                	test   %eax,%eax
+    211a:	0f 84 22 02 00 00    	je     2342 <subdir+0x622>
+  if(unlink("dd/dd") < 0){
+    2120:	83 ec 0c             	sub    $0xc,%esp
+    2123:	68 2d 45 00 00       	push   $0x452d
+    2128:	e8 f4 17 00 00       	call   3921 <unlink>
+    212d:	83 c4 10             	add    $0x10,%esp
+    2130:	85 c0                	test   %eax,%eax
+    2132:	0f 88 f7 01 00 00    	js     232f <subdir+0x60f>
+  if(unlink("dd") < 0){
+    2138:	83 ec 0c             	sub    $0xc,%esp
+    213b:	68 18 46 00 00       	push   $0x4618
+    2140:	e8 dc 17 00 00       	call   3921 <unlink>
+    2145:	83 c4 10             	add    $0x10,%esp
+    2148:	85 c0                	test   %eax,%eax
+    214a:	0f 88 cc 01 00 00    	js     231c <subdir+0x5fc>
+  printf(1, "subdir ok\n");
+    2150:	83 ec 08             	sub    $0x8,%esp
+    2153:	68 fa 47 00 00       	push   $0x47fa
+    2158:	6a 01                	push   $0x1
+    215a:	e8 e1 18 00 00       	call   3a40 <printf>
+}
+    215f:	83 c4 10             	add    $0x10,%esp
+    2162:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2165:	c9                   	leave  
+    2166:	c3                   	ret    
+    printf(1, "dd/dd/../ff wrong content\n");
+    2167:	50                   	push   %eax
+    2168:	50                   	push   %eax
+    2169:	68 97 45 00 00       	push   $0x4597
+    216e:	6a 01                	push   $0x1
+    2170:	e8 cb 18 00 00       	call   3a40 <printf>
+    exit();
+    2175:	e8 57 17 00 00       	call   38d1 <exit>
+    printf(1, "chdir dd/../../dd failed\n");
+    217a:	50                   	push   %eax
+    217b:	50                   	push   %eax
+    217c:	68 f2 45 00 00       	push   $0x45f2
+    2181:	6a 01                	push   $0x1
+    2183:	e8 b8 18 00 00       	call   3a40 <printf>
+    exit();
+    2188:	e8 44 17 00 00       	call   38d1 <exit>
+    printf(1, "unlink dd/dd/ff failed\n");
+    218d:	52                   	push   %edx
+    218e:	52                   	push   %edx
+    218f:	68 bd 45 00 00       	push   $0x45bd
+    2194:	6a 01                	push   $0x1
+    2196:	e8 a5 18 00 00       	call   3a40 <printf>
+    exit();
+    219b:	e8 31 17 00 00       	call   38d1 <exit>
+    printf(1, "create dd/ff/ff succeeded!\n");
+    21a0:	50                   	push   %eax
+    21a1:	50                   	push   %eax
+    21a2:	68 6f 46 00 00       	push   $0x466f
+    21a7:	6a 01                	push   $0x1
+    21a9:	e8 92 18 00 00       	call   3a40 <printf>
+    exit();
+    21ae:	e8 1e 17 00 00       	call   38d1 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
+    21b3:	52                   	push   %edx
+    21b4:	52                   	push   %edx
+    21b5:	68 54 50 00 00       	push   $0x5054
+    21ba:	6a 01                	push   $0x1
+    21bc:	e8 7f 18 00 00       	call   3a40 <printf>
+    exit();
+    21c1:	e8 0b 17 00 00       	call   38d1 <exit>
+    printf(1, "mkdir dd/ff/ff succeeded!\n");
+    21c6:	52                   	push   %edx
+    21c7:	52                   	push   %edx
+    21c8:	68 03 47 00 00       	push   $0x4703
+    21cd:	6a 01                	push   $0x1
+    21cf:	e8 6c 18 00 00       	call   3a40 <printf>
+    exit();
+    21d4:	e8 f8 16 00 00       	call   38d1 <exit>
+    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
+    21d9:	51                   	push   %ecx
+    21da:	51                   	push   %ecx
+    21db:	68 c4 50 00 00       	push   $0x50c4
+    21e0:	6a 01                	push   $0x1
+    21e2:	e8 59 18 00 00       	call   3a40 <printf>
+    exit();
+    21e7:	e8 e5 16 00 00       	call   38d1 <exit>
+    printf(1, "open dd/dd/../ff failed\n");
+    21ec:	50                   	push   %eax
+    21ed:	50                   	push   %eax
+    21ee:	68 7e 45 00 00       	push   $0x457e
+    21f3:	6a 01                	push   $0x1
+    21f5:	e8 46 18 00 00       	call   3a40 <printf>
+    exit();
+    21fa:	e8 d2 16 00 00       	call   38d1 <exit>
+    printf(1, "create dd/dd/ff failed\n");
+    21ff:	51                   	push   %ecx
+    2200:	51                   	push   %ecx
+    2201:	68 57 45 00 00       	push   $0x4557
+    2206:	6a 01                	push   $0x1
+    2208:	e8 33 18 00 00       	call   3a40 <printf>
+    exit();
+    220d:	e8 bf 16 00 00       	call   38d1 <exit>
+    printf(1, "chdir ./.. failed\n");
+    2212:	50                   	push   %eax
+    2213:	50                   	push   %eax
+    2214:	68 20 46 00 00       	push   $0x4620
+    2219:	6a 01                	push   $0x1
+    221b:	e8 20 18 00 00       	call   3a40 <printf>
+    exit();
+    2220:	e8 ac 16 00 00       	call   38d1 <exit>
+    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
+    2225:	51                   	push   %ecx
+    2226:	51                   	push   %ecx
+    2227:	68 0c 50 00 00       	push   $0x500c
+    222c:	6a 01                	push   $0x1
+    222e:	e8 0d 18 00 00       	call   3a40 <printf>
+    exit();
+    2233:	e8 99 16 00 00       	call   38d1 <exit>
+    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
+    2238:	53                   	push   %ebx
+    2239:	53                   	push   %ebx
+    223a:	68 a0 50 00 00       	push   $0x50a0
+    223f:	6a 01                	push   $0x1
+    2241:	e8 fa 17 00 00       	call   3a40 <printf>
+    exit();
+    2246:	e8 86 16 00 00       	call   38d1 <exit>
+    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
+    224b:	50                   	push   %eax
+    224c:	50                   	push   %eax
+    224d:	68 7c 50 00 00       	push   $0x507c
+    2252:	6a 01                	push   $0x1
+    2254:	e8 e7 17 00 00       	call   3a40 <printf>
+    exit();
+    2259:	e8 73 16 00 00       	call   38d1 <exit>
+    printf(1, "open dd wronly succeeded!\n");
+    225e:	50                   	push   %eax
+    225f:	50                   	push   %eax
+    2260:	68 df 46 00 00       	push   $0x46df
+    2265:	6a 01                	push   $0x1
+    2267:	e8 d4 17 00 00       	call   3a40 <printf>
+    exit();
+    226c:	e8 60 16 00 00       	call   38d1 <exit>
+    printf(1, "open dd rdwr succeeded!\n");
+    2271:	50                   	push   %eax
+    2272:	50                   	push   %eax
+    2273:	68 c6 46 00 00       	push   $0x46c6
+    2278:	6a 01                	push   $0x1
+    227a:	e8 c1 17 00 00       	call   3a40 <printf>
+    exit();
+    227f:	e8 4d 16 00 00       	call   38d1 <exit>
+    printf(1, "create dd succeeded!\n");
+    2284:	50                   	push   %eax
+    2285:	50                   	push   %eax
+    2286:	68 b0 46 00 00       	push   $0x46b0
+    228b:	6a 01                	push   $0x1
+    228d:	e8 ae 17 00 00       	call   3a40 <printf>
+    exit();
+    2292:	e8 3a 16 00 00       	call   38d1 <exit>
+    printf(1, "create dd/xx/ff succeeded!\n");
+    2297:	50                   	push   %eax
+    2298:	50                   	push   %eax
+    2299:	68 94 46 00 00       	push   $0x4694
+    229e:	6a 01                	push   $0x1
+    22a0:	e8 9b 17 00 00       	call   3a40 <printf>
+    exit();
+    22a5:	e8 27 16 00 00       	call   38d1 <exit>
+    printf(1, "chdir dd failed\n");
+    22aa:	50                   	push   %eax
+    22ab:	50                   	push   %eax
+    22ac:	68 d5 45 00 00       	push   $0x45d5
+    22b1:	6a 01                	push   $0x1
+    22b3:	e8 88 17 00 00       	call   3a40 <printf>
+    exit();
+    22b8:	e8 14 16 00 00       	call   38d1 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
+    22bd:	50                   	push   %eax
+    22be:	50                   	push   %eax
+    22bf:	68 30 50 00 00       	push   $0x5030
+    22c4:	6a 01                	push   $0x1
+    22c6:	e8 75 17 00 00       	call   3a40 <printf>
+    exit();
+    22cb:	e8 01 16 00 00       	call   38d1 <exit>
+    printf(1, "subdir mkdir dd/dd failed\n");
+    22d0:	53                   	push   %ebx
+    22d1:	53                   	push   %ebx
+    22d2:	68 33 45 00 00       	push   $0x4533
+    22d7:	6a 01                	push   $0x1
+    22d9:	e8 62 17 00 00       	call   3a40 <printf>
+    exit();
+    22de:	e8 ee 15 00 00       	call   38d1 <exit>
+    printf(1, "unlink dd (non-empty dir) succeeded!\n");
+    22e3:	50                   	push   %eax
+    22e4:	50                   	push   %eax
+    22e5:	68 e4 4f 00 00       	push   $0x4fe4
+    22ea:	6a 01                	push   $0x1
+    22ec:	e8 4f 17 00 00       	call   3a40 <printf>
+    exit();
+    22f1:	e8 db 15 00 00       	call   38d1 <exit>
+    printf(1, "create dd/ff failed\n");
+    22f6:	50                   	push   %eax
+    22f7:	50                   	push   %eax
+    22f8:	68 17 45 00 00       	push   $0x4517
+    22fd:	6a 01                	push   $0x1
+    22ff:	e8 3c 17 00 00       	call   3a40 <printf>
+    exit();
+    2304:	e8 c8 15 00 00       	call   38d1 <exit>
+    printf(1, "subdir mkdir dd failed\n");
+    2309:	50                   	push   %eax
+    230a:	50                   	push   %eax
+    230b:	68 ff 44 00 00       	push   $0x44ff
+    2310:	6a 01                	push   $0x1
+    2312:	e8 29 17 00 00       	call   3a40 <printf>
+    exit();
+    2317:	e8 b5 15 00 00       	call   38d1 <exit>
+    printf(1, "unlink dd failed\n");
+    231c:	50                   	push   %eax
+    231d:	50                   	push   %eax
+    231e:	68 e8 47 00 00       	push   $0x47e8
+    2323:	6a 01                	push   $0x1
+    2325:	e8 16 17 00 00       	call   3a40 <printf>
+    exit();
+    232a:	e8 a2 15 00 00       	call   38d1 <exit>
+    printf(1, "unlink dd/dd failed\n");
+    232f:	52                   	push   %edx
+    2330:	52                   	push   %edx
+    2331:	68 d3 47 00 00       	push   $0x47d3
+    2336:	6a 01                	push   $0x1
+    2338:	e8 03 17 00 00       	call   3a40 <printf>
+    exit();
+    233d:	e8 8f 15 00 00       	call   38d1 <exit>
+    printf(1, "unlink non-empty dd succeeded!\n");
+    2342:	51                   	push   %ecx
+    2343:	51                   	push   %ecx
+    2344:	68 e8 50 00 00       	push   $0x50e8
+    2349:	6a 01                	push   $0x1
+    234b:	e8 f0 16 00 00       	call   3a40 <printf>
+    exit();
+    2350:	e8 7c 15 00 00       	call   38d1 <exit>
+    printf(1, "unlink dd/ff failed\n");
+    2355:	53                   	push   %ebx
+    2356:	53                   	push   %ebx
+    2357:	68 be 47 00 00       	push   $0x47be
+    235c:	6a 01                	push   $0x1
+    235e:	e8 dd 16 00 00       	call   3a40 <printf>
+    exit();
+    2363:	e8 69 15 00 00       	call   38d1 <exit>
+    printf(1, "chdir dd/xx succeeded!\n");
+    2368:	50                   	push   %eax
+    2369:	50                   	push   %eax
+    236a:	68 a6 47 00 00       	push   $0x47a6
+    236f:	6a 01                	push   $0x1
+    2371:	e8 ca 16 00 00       	call   3a40 <printf>
+    exit();
+    2376:	e8 56 15 00 00       	call   38d1 <exit>
+    printf(1, "chdir dd/ff succeeded!\n");
+    237b:	50                   	push   %eax
+    237c:	50                   	push   %eax
+    237d:	68 8e 47 00 00       	push   $0x478e
+    2382:	6a 01                	push   $0x1
+    2384:	e8 b7 16 00 00       	call   3a40 <printf>
+    exit();
+    2389:	e8 43 15 00 00       	call   38d1 <exit>
+    printf(1, "unlink dd/ff/ff succeeded!\n");
+    238e:	50                   	push   %eax
+    238f:	50                   	push   %eax
+    2390:	68 72 47 00 00       	push   $0x4772
+    2395:	6a 01                	push   $0x1
+    2397:	e8 a4 16 00 00       	call   3a40 <printf>
+    exit();
+    239c:	e8 30 15 00 00       	call   38d1 <exit>
+    printf(1, "unlink dd/xx/ff succeeded!\n");
+    23a1:	50                   	push   %eax
+    23a2:	50                   	push   %eax
+    23a3:	68 56 47 00 00       	push   $0x4756
+    23a8:	6a 01                	push   $0x1
+    23aa:	e8 91 16 00 00       	call   3a40 <printf>
+    exit();
+    23af:	e8 1d 15 00 00       	call   38d1 <exit>
+    printf(1, "mkdir dd/dd/ffff succeeded!\n");
+    23b4:	50                   	push   %eax
+    23b5:	50                   	push   %eax
+    23b6:	68 39 47 00 00       	push   $0x4739
+    23bb:	6a 01                	push   $0x1
+    23bd:	e8 7e 16 00 00       	call   3a40 <printf>
+    exit();
+    23c2:	e8 0a 15 00 00       	call   38d1 <exit>
+    printf(1, "mkdir dd/xx/ff succeeded!\n");
+    23c7:	50                   	push   %eax
+    23c8:	50                   	push   %eax
+    23c9:	68 1e 47 00 00       	push   $0x471e
+    23ce:	6a 01                	push   $0x1
+    23d0:	e8 6b 16 00 00       	call   3a40 <printf>
+    exit();
+    23d5:	e8 f7 14 00 00       	call   38d1 <exit>
+    printf(1, "read dd/dd/ffff wrong len\n");
+    23da:	50                   	push   %eax
+    23db:	50                   	push   %eax
+    23dc:	68 4b 46 00 00       	push   $0x464b
+    23e1:	6a 01                	push   $0x1
+    23e3:	e8 58 16 00 00       	call   3a40 <printf>
+    exit();
+    23e8:	e8 e4 14 00 00       	call   38d1 <exit>
+    printf(1, "open dd/dd/ffff failed\n");
+    23ed:	50                   	push   %eax
+    23ee:	50                   	push   %eax
+    23ef:	68 33 46 00 00       	push   $0x4633
+    23f4:	6a 01                	push   $0x1
+    23f6:	e8 45 16 00 00       	call   3a40 <printf>
+    exit();
+    23fb:	e8 d1 14 00 00       	call   38d1 <exit>
+
+00002400 <bigwrite>:
+{
+    2400:	55                   	push   %ebp
+    2401:	89 e5                	mov    %esp,%ebp
+    2403:	56                   	push   %esi
+    2404:	53                   	push   %ebx
+  for(sz = 499; sz < 12*512; sz += 471){
+    2405:	bb f3 01 00 00       	mov    $0x1f3,%ebx
+  printf(1, "bigwrite test\n");
+    240a:	83 ec 08             	sub    $0x8,%esp
+    240d:	68 05 48 00 00       	push   $0x4805
+    2412:	6a 01                	push   $0x1
+    2414:	e8 27 16 00 00       	call   3a40 <printf>
+  unlink("bigwrite");
+    2419:	c7 04 24 14 48 00 00 	movl   $0x4814,(%esp)
+    2420:	e8 fc 14 00 00       	call   3921 <unlink>
+    2425:	83 c4 10             	add    $0x10,%esp
+    2428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    242f:	90                   	nop
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    2430:	83 ec 08             	sub    $0x8,%esp
+    2433:	68 02 02 00 00       	push   $0x202
+    2438:	68 14 48 00 00       	push   $0x4814
+    243d:	e8 cf 14 00 00       	call   3911 <open>
+    if(fd < 0){
+    2442:	83 c4 10             	add    $0x10,%esp
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    2445:	89 c6                	mov    %eax,%esi
+    if(fd < 0){
+    2447:	85 c0                	test   %eax,%eax
+    2449:	78 7e                	js     24c9 <bigwrite+0xc9>
+      int cc = write(fd, buf, sz);
+    244b:	83 ec 04             	sub    $0x4,%esp
+    244e:	53                   	push   %ebx
+    244f:	68 20 86 00 00       	push   $0x8620
+    2454:	50                   	push   %eax
+    2455:	e8 97 14 00 00       	call   38f1 <write>
+      if(cc != sz){
+    245a:	83 c4 10             	add    $0x10,%esp
+    245d:	39 d8                	cmp    %ebx,%eax
+    245f:	75 55                	jne    24b6 <bigwrite+0xb6>
+      int cc = write(fd, buf, sz);
+    2461:	83 ec 04             	sub    $0x4,%esp
+    2464:	53                   	push   %ebx
+    2465:	68 20 86 00 00       	push   $0x8620
+    246a:	56                   	push   %esi
+    246b:	e8 81 14 00 00       	call   38f1 <write>
+      if(cc != sz){
+    2470:	83 c4 10             	add    $0x10,%esp
+    2473:	39 d8                	cmp    %ebx,%eax
+    2475:	75 3f                	jne    24b6 <bigwrite+0xb6>
+    close(fd);
+    2477:	83 ec 0c             	sub    $0xc,%esp
+  for(sz = 499; sz < 12*512; sz += 471){
+    247a:	81 c3 d7 01 00 00    	add    $0x1d7,%ebx
+    close(fd);
+    2480:	56                   	push   %esi
+    2481:	e8 73 14 00 00       	call   38f9 <close>
+    unlink("bigwrite");
+    2486:	c7 04 24 14 48 00 00 	movl   $0x4814,(%esp)
+    248d:	e8 8f 14 00 00       	call   3921 <unlink>
+  for(sz = 499; sz < 12*512; sz += 471){
+    2492:	83 c4 10             	add    $0x10,%esp
+    2495:	81 fb 07 18 00 00    	cmp    $0x1807,%ebx
+    249b:	75 93                	jne    2430 <bigwrite+0x30>
+  printf(1, "bigwrite ok\n");
+    249d:	83 ec 08             	sub    $0x8,%esp
+    24a0:	68 47 48 00 00       	push   $0x4847
+    24a5:	6a 01                	push   $0x1
+    24a7:	e8 94 15 00 00       	call   3a40 <printf>
+}
+    24ac:	83 c4 10             	add    $0x10,%esp
+    24af:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    24b2:	5b                   	pop    %ebx
+    24b3:	5e                   	pop    %esi
+    24b4:	5d                   	pop    %ebp
+    24b5:	c3                   	ret    
+        printf(1, "write(%d) ret %d\n", sz, cc);
+    24b6:	50                   	push   %eax
+    24b7:	53                   	push   %ebx
+    24b8:	68 35 48 00 00       	push   $0x4835
+    24bd:	6a 01                	push   $0x1
+    24bf:	e8 7c 15 00 00       	call   3a40 <printf>
+        exit();
+    24c4:	e8 08 14 00 00       	call   38d1 <exit>
+      printf(1, "cannot create bigwrite\n");
+    24c9:	83 ec 08             	sub    $0x8,%esp
+    24cc:	68 1d 48 00 00       	push   $0x481d
+    24d1:	6a 01                	push   $0x1
+    24d3:	e8 68 15 00 00       	call   3a40 <printf>
+      exit();
+    24d8:	e8 f4 13 00 00       	call   38d1 <exit>
+    24dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000024e0 <bigfile>:
+{
+    24e0:	55                   	push   %ebp
+    24e1:	89 e5                	mov    %esp,%ebp
+    24e3:	57                   	push   %edi
+    24e4:	56                   	push   %esi
+    24e5:	53                   	push   %ebx
+    24e6:	83 ec 14             	sub    $0x14,%esp
+  printf(1, "bigfile test\n");
+    24e9:	68 54 48 00 00       	push   $0x4854
+    24ee:	6a 01                	push   $0x1
+    24f0:	e8 4b 15 00 00       	call   3a40 <printf>
+  unlink("bigfile");
+    24f5:	c7 04 24 70 48 00 00 	movl   $0x4870,(%esp)
+    24fc:	e8 20 14 00 00       	call   3921 <unlink>
+  fd = open("bigfile", O_CREATE | O_RDWR);
+    2501:	58                   	pop    %eax
+    2502:	5a                   	pop    %edx
+    2503:	68 02 02 00 00       	push   $0x202
+    2508:	68 70 48 00 00       	push   $0x4870
+    250d:	e8 ff 13 00 00       	call   3911 <open>
+  if(fd < 0){
+    2512:	83 c4 10             	add    $0x10,%esp
+    2515:	85 c0                	test   %eax,%eax
+    2517:	0f 88 5e 01 00 00    	js     267b <bigfile+0x19b>
+    251d:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 20; i++){
+    251f:	31 db                	xor    %ebx,%ebx
+    2521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    memset(buf, i, 600);
+    2528:	83 ec 04             	sub    $0x4,%esp
+    252b:	68 58 02 00 00       	push   $0x258
+    2530:	53                   	push   %ebx
+    2531:	68 20 86 00 00       	push   $0x8620
+    2536:	e8 f5 11 00 00       	call   3730 <memset>
+    if(write(fd, buf, 600) != 600){
+    253b:	83 c4 0c             	add    $0xc,%esp
+    253e:	68 58 02 00 00       	push   $0x258
+    2543:	68 20 86 00 00       	push   $0x8620
+    2548:	56                   	push   %esi
+    2549:	e8 a3 13 00 00       	call   38f1 <write>
+    254e:	83 c4 10             	add    $0x10,%esp
+    2551:	3d 58 02 00 00       	cmp    $0x258,%eax
+    2556:	0f 85 f8 00 00 00    	jne    2654 <bigfile+0x174>
+  for(i = 0; i < 20; i++){
+    255c:	83 c3 01             	add    $0x1,%ebx
+    255f:	83 fb 14             	cmp    $0x14,%ebx
+    2562:	75 c4                	jne    2528 <bigfile+0x48>
+  close(fd);
+    2564:	83 ec 0c             	sub    $0xc,%esp
+    2567:	56                   	push   %esi
+    2568:	e8 8c 13 00 00       	call   38f9 <close>
+  fd = open("bigfile", 0);
+    256d:	5e                   	pop    %esi
+    256e:	5f                   	pop    %edi
+    256f:	6a 00                	push   $0x0
+    2571:	68 70 48 00 00       	push   $0x4870
+    2576:	e8 96 13 00 00       	call   3911 <open>
+  if(fd < 0){
+    257b:	83 c4 10             	add    $0x10,%esp
+  fd = open("bigfile", 0);
+    257e:	89 c6                	mov    %eax,%esi
+  if(fd < 0){
+    2580:	85 c0                	test   %eax,%eax
+    2582:	0f 88 e0 00 00 00    	js     2668 <bigfile+0x188>
+  total = 0;
+    2588:	31 db                	xor    %ebx,%ebx
+  for(i = 0; ; i++){
+    258a:	31 ff                	xor    %edi,%edi
+    258c:	eb 30                	jmp    25be <bigfile+0xde>
+    258e:	66 90                	xchg   %ax,%ax
+    if(cc != 300){
+    2590:	3d 2c 01 00 00       	cmp    $0x12c,%eax
+    2595:	0f 85 91 00 00 00    	jne    262c <bigfile+0x14c>
+    if(buf[0] != i/2 || buf[299] != i/2){
+    259b:	89 fa                	mov    %edi,%edx
+    259d:	0f be 05 20 86 00 00 	movsbl 0x8620,%eax
+    25a4:	d1 fa                	sar    %edx
+    25a6:	39 d0                	cmp    %edx,%eax
+    25a8:	75 6e                	jne    2618 <bigfile+0x138>
+    25aa:	0f be 15 4b 87 00 00 	movsbl 0x874b,%edx
+    25b1:	39 d0                	cmp    %edx,%eax
+    25b3:	75 63                	jne    2618 <bigfile+0x138>
+    total += cc;
+    25b5:	81 c3 2c 01 00 00    	add    $0x12c,%ebx
+  for(i = 0; ; i++){
+    25bb:	83 c7 01             	add    $0x1,%edi
+    cc = read(fd, buf, 300);
+    25be:	83 ec 04             	sub    $0x4,%esp
+    25c1:	68 2c 01 00 00       	push   $0x12c
+    25c6:	68 20 86 00 00       	push   $0x8620
+    25cb:	56                   	push   %esi
+    25cc:	e8 18 13 00 00       	call   38e9 <read>
+    if(cc < 0){
+    25d1:	83 c4 10             	add    $0x10,%esp
+    25d4:	85 c0                	test   %eax,%eax
+    25d6:	78 68                	js     2640 <bigfile+0x160>
+    if(cc == 0)
+    25d8:	75 b6                	jne    2590 <bigfile+0xb0>
+  close(fd);
+    25da:	83 ec 0c             	sub    $0xc,%esp
+    25dd:	56                   	push   %esi
+    25de:	e8 16 13 00 00       	call   38f9 <close>
+  if(total != 20*600){
+    25e3:	83 c4 10             	add    $0x10,%esp
+    25e6:	81 fb e0 2e 00 00    	cmp    $0x2ee0,%ebx
+    25ec:	0f 85 9c 00 00 00    	jne    268e <bigfile+0x1ae>
+  unlink("bigfile");
+    25f2:	83 ec 0c             	sub    $0xc,%esp
+    25f5:	68 70 48 00 00       	push   $0x4870
+    25fa:	e8 22 13 00 00       	call   3921 <unlink>
+  printf(1, "bigfile test ok\n");
+    25ff:	58                   	pop    %eax
+    2600:	5a                   	pop    %edx
+    2601:	68 ff 48 00 00       	push   $0x48ff
+    2606:	6a 01                	push   $0x1
+    2608:	e8 33 14 00 00       	call   3a40 <printf>
+}
+    260d:	83 c4 10             	add    $0x10,%esp
+    2610:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    2613:	5b                   	pop    %ebx
+    2614:	5e                   	pop    %esi
+    2615:	5f                   	pop    %edi
+    2616:	5d                   	pop    %ebp
+    2617:	c3                   	ret    
+      printf(1, "read bigfile wrong data\n");
+    2618:	83 ec 08             	sub    $0x8,%esp
+    261b:	68 cc 48 00 00       	push   $0x48cc
+    2620:	6a 01                	push   $0x1
+    2622:	e8 19 14 00 00       	call   3a40 <printf>
+      exit();
+    2627:	e8 a5 12 00 00       	call   38d1 <exit>
+      printf(1, "short read bigfile\n");
+    262c:	83 ec 08             	sub    $0x8,%esp
+    262f:	68 b8 48 00 00       	push   $0x48b8
+    2634:	6a 01                	push   $0x1
+    2636:	e8 05 14 00 00       	call   3a40 <printf>
+      exit();
+    263b:	e8 91 12 00 00       	call   38d1 <exit>
+      printf(1, "read bigfile failed\n");
+    2640:	83 ec 08             	sub    $0x8,%esp
+    2643:	68 a3 48 00 00       	push   $0x48a3
+    2648:	6a 01                	push   $0x1
+    264a:	e8 f1 13 00 00       	call   3a40 <printf>
+      exit();
+    264f:	e8 7d 12 00 00       	call   38d1 <exit>
+      printf(1, "write bigfile failed\n");
+    2654:	83 ec 08             	sub    $0x8,%esp
+    2657:	68 78 48 00 00       	push   $0x4878
+    265c:	6a 01                	push   $0x1
+    265e:	e8 dd 13 00 00       	call   3a40 <printf>
+      exit();
+    2663:	e8 69 12 00 00       	call   38d1 <exit>
+    printf(1, "cannot open bigfile\n");
+    2668:	53                   	push   %ebx
+    2669:	53                   	push   %ebx
+    266a:	68 8e 48 00 00       	push   $0x488e
+    266f:	6a 01                	push   $0x1
+    2671:	e8 ca 13 00 00       	call   3a40 <printf>
+    exit();
+    2676:	e8 56 12 00 00       	call   38d1 <exit>
+    printf(1, "cannot create bigfile");
+    267b:	50                   	push   %eax
+    267c:	50                   	push   %eax
+    267d:	68 62 48 00 00       	push   $0x4862
+    2682:	6a 01                	push   $0x1
+    2684:	e8 b7 13 00 00       	call   3a40 <printf>
+    exit();
+    2689:	e8 43 12 00 00       	call   38d1 <exit>
+    printf(1, "read bigfile wrong total\n");
+    268e:	51                   	push   %ecx
+    268f:	51                   	push   %ecx
+    2690:	68 e5 48 00 00       	push   $0x48e5
+    2695:	6a 01                	push   $0x1
+    2697:	e8 a4 13 00 00       	call   3a40 <printf>
+    exit();
+    269c:	e8 30 12 00 00       	call   38d1 <exit>
+    26a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    26a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    26af:	90                   	nop
+
+000026b0 <fourteen>:
+{
+    26b0:	55                   	push   %ebp
+    26b1:	89 e5                	mov    %esp,%ebp
+    26b3:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "fourteen test\n");
+    26b6:	68 10 49 00 00       	push   $0x4910
+    26bb:	6a 01                	push   $0x1
+    26bd:	e8 7e 13 00 00       	call   3a40 <printf>
+  if(mkdir("12345678901234") != 0){
+    26c2:	c7 04 24 4b 49 00 00 	movl   $0x494b,(%esp)
+    26c9:	e8 6b 12 00 00       	call   3939 <mkdir>
+    26ce:	83 c4 10             	add    $0x10,%esp
+    26d1:	85 c0                	test   %eax,%eax
+    26d3:	0f 85 97 00 00 00    	jne    2770 <fourteen+0xc0>
+  if(mkdir("12345678901234/123456789012345") != 0){
+    26d9:	83 ec 0c             	sub    $0xc,%esp
+    26dc:	68 08 51 00 00       	push   $0x5108
+    26e1:	e8 53 12 00 00       	call   3939 <mkdir>
+    26e6:	83 c4 10             	add    $0x10,%esp
+    26e9:	85 c0                	test   %eax,%eax
+    26eb:	0f 85 de 00 00 00    	jne    27cf <fourteen+0x11f>
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+    26f1:	83 ec 08             	sub    $0x8,%esp
+    26f4:	68 00 02 00 00       	push   $0x200
+    26f9:	68 58 51 00 00       	push   $0x5158
+    26fe:	e8 0e 12 00 00       	call   3911 <open>
+  if(fd < 0){
+    2703:	83 c4 10             	add    $0x10,%esp
+    2706:	85 c0                	test   %eax,%eax
+    2708:	0f 88 ae 00 00 00    	js     27bc <fourteen+0x10c>
+  close(fd);
+    270e:	83 ec 0c             	sub    $0xc,%esp
+    2711:	50                   	push   %eax
+    2712:	e8 e2 11 00 00       	call   38f9 <close>
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+    2717:	58                   	pop    %eax
+    2718:	5a                   	pop    %edx
+    2719:	6a 00                	push   $0x0
+    271b:	68 c8 51 00 00       	push   $0x51c8
+    2720:	e8 ec 11 00 00       	call   3911 <open>
+  if(fd < 0){
+    2725:	83 c4 10             	add    $0x10,%esp
+    2728:	85 c0                	test   %eax,%eax
+    272a:	78 7d                	js     27a9 <fourteen+0xf9>
+  close(fd);
+    272c:	83 ec 0c             	sub    $0xc,%esp
+    272f:	50                   	push   %eax
+    2730:	e8 c4 11 00 00       	call   38f9 <close>
+  if(mkdir("12345678901234/12345678901234") == 0){
+    2735:	c7 04 24 3c 49 00 00 	movl   $0x493c,(%esp)
+    273c:	e8 f8 11 00 00       	call   3939 <mkdir>
+    2741:	83 c4 10             	add    $0x10,%esp
+    2744:	85 c0                	test   %eax,%eax
+    2746:	74 4e                	je     2796 <fourteen+0xe6>
+  if(mkdir("123456789012345/12345678901234") == 0){
+    2748:	83 ec 0c             	sub    $0xc,%esp
+    274b:	68 64 52 00 00       	push   $0x5264
+    2750:	e8 e4 11 00 00       	call   3939 <mkdir>
+    2755:	83 c4 10             	add    $0x10,%esp
+    2758:	85 c0                	test   %eax,%eax
+    275a:	74 27                	je     2783 <fourteen+0xd3>
+  printf(1, "fourteen ok\n");
+    275c:	83 ec 08             	sub    $0x8,%esp
+    275f:	68 5a 49 00 00       	push   $0x495a
+    2764:	6a 01                	push   $0x1
+    2766:	e8 d5 12 00 00       	call   3a40 <printf>
+}
+    276b:	83 c4 10             	add    $0x10,%esp
+    276e:	c9                   	leave  
+    276f:	c3                   	ret    
+    printf(1, "mkdir 12345678901234 failed\n");
+    2770:	50                   	push   %eax
+    2771:	50                   	push   %eax
+    2772:	68 1f 49 00 00       	push   $0x491f
+    2777:	6a 01                	push   $0x1
+    2779:	e8 c2 12 00 00       	call   3a40 <printf>
+    exit();
+    277e:	e8 4e 11 00 00       	call   38d1 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
+    2783:	50                   	push   %eax
+    2784:	50                   	push   %eax
+    2785:	68 84 52 00 00       	push   $0x5284
+    278a:	6a 01                	push   $0x1
+    278c:	e8 af 12 00 00       	call   3a40 <printf>
+    exit();
+    2791:	e8 3b 11 00 00       	call   38d1 <exit>
+    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
+    2796:	52                   	push   %edx
+    2797:	52                   	push   %edx
+    2798:	68 34 52 00 00       	push   $0x5234
+    279d:	6a 01                	push   $0x1
+    279f:	e8 9c 12 00 00       	call   3a40 <printf>
+    exit();
+    27a4:	e8 28 11 00 00       	call   38d1 <exit>
+    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
+    27a9:	51                   	push   %ecx
+    27aa:	51                   	push   %ecx
+    27ab:	68 f8 51 00 00       	push   $0x51f8
+    27b0:	6a 01                	push   $0x1
+    27b2:	e8 89 12 00 00       	call   3a40 <printf>
+    exit();
+    27b7:	e8 15 11 00 00       	call   38d1 <exit>
+    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
+    27bc:	51                   	push   %ecx
+    27bd:	51                   	push   %ecx
+    27be:	68 88 51 00 00       	push   $0x5188
+    27c3:	6a 01                	push   $0x1
+    27c5:	e8 76 12 00 00       	call   3a40 <printf>
+    exit();
+    27ca:	e8 02 11 00 00       	call   38d1 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
+    27cf:	50                   	push   %eax
+    27d0:	50                   	push   %eax
+    27d1:	68 28 51 00 00       	push   $0x5128
+    27d6:	6a 01                	push   $0x1
+    27d8:	e8 63 12 00 00       	call   3a40 <printf>
+    exit();
+    27dd:	e8 ef 10 00 00       	call   38d1 <exit>
+    27e2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    27e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000027f0 <rmdot>:
+{
+    27f0:	55                   	push   %ebp
+    27f1:	89 e5                	mov    %esp,%ebp
+    27f3:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "rmdot test\n");
+    27f6:	68 67 49 00 00       	push   $0x4967
+    27fb:	6a 01                	push   $0x1
+    27fd:	e8 3e 12 00 00       	call   3a40 <printf>
+  if(mkdir("dots") != 0){
+    2802:	c7 04 24 73 49 00 00 	movl   $0x4973,(%esp)
+    2809:	e8 2b 11 00 00       	call   3939 <mkdir>
+    280e:	83 c4 10             	add    $0x10,%esp
+    2811:	85 c0                	test   %eax,%eax
+    2813:	0f 85 b0 00 00 00    	jne    28c9 <rmdot+0xd9>
+  if(chdir("dots") != 0){
+    2819:	83 ec 0c             	sub    $0xc,%esp
+    281c:	68 73 49 00 00       	push   $0x4973
+    2821:	e8 1b 11 00 00       	call   3941 <chdir>
+    2826:	83 c4 10             	add    $0x10,%esp
+    2829:	85 c0                	test   %eax,%eax
+    282b:	0f 85 1d 01 00 00    	jne    294e <rmdot+0x15e>
+  if(unlink(".") == 0){
+    2831:	83 ec 0c             	sub    $0xc,%esp
+    2834:	68 1e 46 00 00       	push   $0x461e
+    2839:	e8 e3 10 00 00       	call   3921 <unlink>
+    283e:	83 c4 10             	add    $0x10,%esp
+    2841:	85 c0                	test   %eax,%eax
+    2843:	0f 84 f2 00 00 00    	je     293b <rmdot+0x14b>
+  if(unlink("..") == 0){
+    2849:	83 ec 0c             	sub    $0xc,%esp
+    284c:	68 1d 46 00 00       	push   $0x461d
+    2851:	e8 cb 10 00 00       	call   3921 <unlink>
+    2856:	83 c4 10             	add    $0x10,%esp
+    2859:	85 c0                	test   %eax,%eax
+    285b:	0f 84 c7 00 00 00    	je     2928 <rmdot+0x138>
+  if(chdir("/") != 0){
+    2861:	83 ec 0c             	sub    $0xc,%esp
+    2864:	68 f1 3d 00 00       	push   $0x3df1
+    2869:	e8 d3 10 00 00       	call   3941 <chdir>
+    286e:	83 c4 10             	add    $0x10,%esp
+    2871:	85 c0                	test   %eax,%eax
+    2873:	0f 85 9c 00 00 00    	jne    2915 <rmdot+0x125>
+  if(unlink("dots/.") == 0){
+    2879:	83 ec 0c             	sub    $0xc,%esp
+    287c:	68 bb 49 00 00       	push   $0x49bb
+    2881:	e8 9b 10 00 00       	call   3921 <unlink>
+    2886:	83 c4 10             	add    $0x10,%esp
+    2889:	85 c0                	test   %eax,%eax
+    288b:	74 75                	je     2902 <rmdot+0x112>
+  if(unlink("dots/..") == 0){
+    288d:	83 ec 0c             	sub    $0xc,%esp
+    2890:	68 d9 49 00 00       	push   $0x49d9
+    2895:	e8 87 10 00 00       	call   3921 <unlink>
+    289a:	83 c4 10             	add    $0x10,%esp
+    289d:	85 c0                	test   %eax,%eax
+    289f:	74 4e                	je     28ef <rmdot+0xff>
+  if(unlink("dots") != 0){
+    28a1:	83 ec 0c             	sub    $0xc,%esp
+    28a4:	68 73 49 00 00       	push   $0x4973
+    28a9:	e8 73 10 00 00       	call   3921 <unlink>
+    28ae:	83 c4 10             	add    $0x10,%esp
+    28b1:	85 c0                	test   %eax,%eax
+    28b3:	75 27                	jne    28dc <rmdot+0xec>
+  printf(1, "rmdot ok\n");
+    28b5:	83 ec 08             	sub    $0x8,%esp
+    28b8:	68 0e 4a 00 00       	push   $0x4a0e
+    28bd:	6a 01                	push   $0x1
+    28bf:	e8 7c 11 00 00       	call   3a40 <printf>
+}
+    28c4:	83 c4 10             	add    $0x10,%esp
+    28c7:	c9                   	leave  
+    28c8:	c3                   	ret    
+    printf(1, "mkdir dots failed\n");
+    28c9:	50                   	push   %eax
+    28ca:	50                   	push   %eax
+    28cb:	68 78 49 00 00       	push   $0x4978
+    28d0:	6a 01                	push   $0x1
+    28d2:	e8 69 11 00 00       	call   3a40 <printf>
+    exit();
+    28d7:	e8 f5 0f 00 00       	call   38d1 <exit>
+    printf(1, "unlink dots failed!\n");
+    28dc:	50                   	push   %eax
+    28dd:	50                   	push   %eax
+    28de:	68 f9 49 00 00       	push   $0x49f9
+    28e3:	6a 01                	push   $0x1
+    28e5:	e8 56 11 00 00       	call   3a40 <printf>
+    exit();
+    28ea:	e8 e2 0f 00 00       	call   38d1 <exit>
+    printf(1, "unlink dots/.. worked!\n");
+    28ef:	52                   	push   %edx
+    28f0:	52                   	push   %edx
+    28f1:	68 e1 49 00 00       	push   $0x49e1
+    28f6:	6a 01                	push   $0x1
+    28f8:	e8 43 11 00 00       	call   3a40 <printf>
+    exit();
+    28fd:	e8 cf 0f 00 00       	call   38d1 <exit>
+    printf(1, "unlink dots/. worked!\n");
+    2902:	51                   	push   %ecx
+    2903:	51                   	push   %ecx
+    2904:	68 c2 49 00 00       	push   $0x49c2
+    2909:	6a 01                	push   $0x1
+    290b:	e8 30 11 00 00       	call   3a40 <printf>
+    exit();
+    2910:	e8 bc 0f 00 00       	call   38d1 <exit>
+    printf(1, "chdir / failed\n");
+    2915:	50                   	push   %eax
+    2916:	50                   	push   %eax
+    2917:	68 f3 3d 00 00       	push   $0x3df3
+    291c:	6a 01                	push   $0x1
+    291e:	e8 1d 11 00 00       	call   3a40 <printf>
+    exit();
+    2923:	e8 a9 0f 00 00       	call   38d1 <exit>
+    printf(1, "rm .. worked!\n");
+    2928:	50                   	push   %eax
+    2929:	50                   	push   %eax
+    292a:	68 ac 49 00 00       	push   $0x49ac
+    292f:	6a 01                	push   $0x1
+    2931:	e8 0a 11 00 00       	call   3a40 <printf>
+    exit();
+    2936:	e8 96 0f 00 00       	call   38d1 <exit>
+    printf(1, "rm . worked!\n");
+    293b:	50                   	push   %eax
+    293c:	50                   	push   %eax
+    293d:	68 9e 49 00 00       	push   $0x499e
+    2942:	6a 01                	push   $0x1
+    2944:	e8 f7 10 00 00       	call   3a40 <printf>
+    exit();
+    2949:	e8 83 0f 00 00       	call   38d1 <exit>
+    printf(1, "chdir dots failed\n");
+    294e:	50                   	push   %eax
+    294f:	50                   	push   %eax
+    2950:	68 8b 49 00 00       	push   $0x498b
+    2955:	6a 01                	push   $0x1
+    2957:	e8 e4 10 00 00       	call   3a40 <printf>
+    exit();
+    295c:	e8 70 0f 00 00       	call   38d1 <exit>
+    2961:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    2968:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    296f:	90                   	nop
+
+00002970 <dirfile>:
+{
+    2970:	55                   	push   %ebp
+    2971:	89 e5                	mov    %esp,%ebp
+    2973:	53                   	push   %ebx
+    2974:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "dir vs file\n");
+    2977:	68 18 4a 00 00       	push   $0x4a18
+    297c:	6a 01                	push   $0x1
+    297e:	e8 bd 10 00 00       	call   3a40 <printf>
+  fd = open("dirfile", O_CREATE);
+    2983:	59                   	pop    %ecx
+    2984:	5b                   	pop    %ebx
+    2985:	68 00 02 00 00       	push   $0x200
+    298a:	68 25 4a 00 00       	push   $0x4a25
+    298f:	e8 7d 0f 00 00       	call   3911 <open>
+  if(fd < 0){
+    2994:	83 c4 10             	add    $0x10,%esp
+    2997:	85 c0                	test   %eax,%eax
+    2999:	0f 88 43 01 00 00    	js     2ae2 <dirfile+0x172>
+  close(fd);
+    299f:	83 ec 0c             	sub    $0xc,%esp
+    29a2:	50                   	push   %eax
+    29a3:	e8 51 0f 00 00       	call   38f9 <close>
+  if(chdir("dirfile") == 0){
+    29a8:	c7 04 24 25 4a 00 00 	movl   $0x4a25,(%esp)
+    29af:	e8 8d 0f 00 00       	call   3941 <chdir>
+    29b4:	83 c4 10             	add    $0x10,%esp
+    29b7:	85 c0                	test   %eax,%eax
+    29b9:	0f 84 10 01 00 00    	je     2acf <dirfile+0x15f>
+  fd = open("dirfile/xx", 0);
+    29bf:	83 ec 08             	sub    $0x8,%esp
+    29c2:	6a 00                	push   $0x0
+    29c4:	68 5e 4a 00 00       	push   $0x4a5e
+    29c9:	e8 43 0f 00 00       	call   3911 <open>
+  if(fd >= 0){
+    29ce:	83 c4 10             	add    $0x10,%esp
+    29d1:	85 c0                	test   %eax,%eax
+    29d3:	0f 89 e3 00 00 00    	jns    2abc <dirfile+0x14c>
+  fd = open("dirfile/xx", O_CREATE);
+    29d9:	83 ec 08             	sub    $0x8,%esp
+    29dc:	68 00 02 00 00       	push   $0x200
+    29e1:	68 5e 4a 00 00       	push   $0x4a5e
+    29e6:	e8 26 0f 00 00       	call   3911 <open>
+  if(fd >= 0){
+    29eb:	83 c4 10             	add    $0x10,%esp
+    29ee:	85 c0                	test   %eax,%eax
+    29f0:	0f 89 c6 00 00 00    	jns    2abc <dirfile+0x14c>
+  if(mkdir("dirfile/xx") == 0){
+    29f6:	83 ec 0c             	sub    $0xc,%esp
+    29f9:	68 5e 4a 00 00       	push   $0x4a5e
+    29fe:	e8 36 0f 00 00       	call   3939 <mkdir>
+    2a03:	83 c4 10             	add    $0x10,%esp
+    2a06:	85 c0                	test   %eax,%eax
+    2a08:	0f 84 46 01 00 00    	je     2b54 <dirfile+0x1e4>
+  if(unlink("dirfile/xx") == 0){
+    2a0e:	83 ec 0c             	sub    $0xc,%esp
+    2a11:	68 5e 4a 00 00       	push   $0x4a5e
+    2a16:	e8 06 0f 00 00       	call   3921 <unlink>
+    2a1b:	83 c4 10             	add    $0x10,%esp
+    2a1e:	85 c0                	test   %eax,%eax
+    2a20:	0f 84 1b 01 00 00    	je     2b41 <dirfile+0x1d1>
+  if(link("README", "dirfile/xx") == 0){
+    2a26:	83 ec 08             	sub    $0x8,%esp
+    2a29:	68 5e 4a 00 00       	push   $0x4a5e
+    2a2e:	68 c2 4a 00 00       	push   $0x4ac2
+    2a33:	e8 f9 0e 00 00       	call   3931 <link>
+    2a38:	83 c4 10             	add    $0x10,%esp
+    2a3b:	85 c0                	test   %eax,%eax
+    2a3d:	0f 84 eb 00 00 00    	je     2b2e <dirfile+0x1be>
+  if(unlink("dirfile") != 0){
+    2a43:	83 ec 0c             	sub    $0xc,%esp
+    2a46:	68 25 4a 00 00       	push   $0x4a25
+    2a4b:	e8 d1 0e 00 00       	call   3921 <unlink>
+    2a50:	83 c4 10             	add    $0x10,%esp
+    2a53:	85 c0                	test   %eax,%eax
+    2a55:	0f 85 c0 00 00 00    	jne    2b1b <dirfile+0x1ab>
+  fd = open(".", O_RDWR);
+    2a5b:	83 ec 08             	sub    $0x8,%esp
+    2a5e:	6a 02                	push   $0x2
+    2a60:	68 1e 46 00 00       	push   $0x461e
+    2a65:	e8 a7 0e 00 00       	call   3911 <open>
+  if(fd >= 0){
+    2a6a:	83 c4 10             	add    $0x10,%esp
+    2a6d:	85 c0                	test   %eax,%eax
+    2a6f:	0f 89 93 00 00 00    	jns    2b08 <dirfile+0x198>
+  fd = open(".", 0);
+    2a75:	83 ec 08             	sub    $0x8,%esp
+    2a78:	6a 00                	push   $0x0
+    2a7a:	68 1e 46 00 00       	push   $0x461e
+    2a7f:	e8 8d 0e 00 00       	call   3911 <open>
+  if(write(fd, "x", 1) > 0){
+    2a84:	83 c4 0c             	add    $0xc,%esp
+    2a87:	6a 01                	push   $0x1
+  fd = open(".", 0);
+    2a89:	89 c3                	mov    %eax,%ebx
+  if(write(fd, "x", 1) > 0){
+    2a8b:	68 01 47 00 00       	push   $0x4701
+    2a90:	50                   	push   %eax
+    2a91:	e8 5b 0e 00 00       	call   38f1 <write>
+    2a96:	83 c4 10             	add    $0x10,%esp
+    2a99:	85 c0                	test   %eax,%eax
+    2a9b:	7f 58                	jg     2af5 <dirfile+0x185>
+  close(fd);
+    2a9d:	83 ec 0c             	sub    $0xc,%esp
+    2aa0:	53                   	push   %ebx
+    2aa1:	e8 53 0e 00 00       	call   38f9 <close>
+  printf(1, "dir vs file OK\n");
+    2aa6:	58                   	pop    %eax
+    2aa7:	5a                   	pop    %edx
+    2aa8:	68 f5 4a 00 00       	push   $0x4af5
+    2aad:	6a 01                	push   $0x1
+    2aaf:	e8 8c 0f 00 00       	call   3a40 <printf>
+}
+    2ab4:	83 c4 10             	add    $0x10,%esp
+    2ab7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2aba:	c9                   	leave  
+    2abb:	c3                   	ret    
+    printf(1, "create dirfile/xx succeeded!\n");
+    2abc:	50                   	push   %eax
+    2abd:	50                   	push   %eax
+    2abe:	68 69 4a 00 00       	push   $0x4a69
+    2ac3:	6a 01                	push   $0x1
+    2ac5:	e8 76 0f 00 00       	call   3a40 <printf>
+    exit();
+    2aca:	e8 02 0e 00 00       	call   38d1 <exit>
+    printf(1, "chdir dirfile succeeded!\n");
+    2acf:	50                   	push   %eax
+    2ad0:	50                   	push   %eax
+    2ad1:	68 44 4a 00 00       	push   $0x4a44
+    2ad6:	6a 01                	push   $0x1
+    2ad8:	e8 63 0f 00 00       	call   3a40 <printf>
+    exit();
+    2add:	e8 ef 0d 00 00       	call   38d1 <exit>
+    printf(1, "create dirfile failed\n");
+    2ae2:	52                   	push   %edx
+    2ae3:	52                   	push   %edx
+    2ae4:	68 2d 4a 00 00       	push   $0x4a2d
+    2ae9:	6a 01                	push   $0x1
+    2aeb:	e8 50 0f 00 00       	call   3a40 <printf>
+    exit();
+    2af0:	e8 dc 0d 00 00       	call   38d1 <exit>
+    printf(1, "write . succeeded!\n");
+    2af5:	51                   	push   %ecx
+    2af6:	51                   	push   %ecx
+    2af7:	68 e1 4a 00 00       	push   $0x4ae1
+    2afc:	6a 01                	push   $0x1
+    2afe:	e8 3d 0f 00 00       	call   3a40 <printf>
+    exit();
+    2b03:	e8 c9 0d 00 00       	call   38d1 <exit>
+    printf(1, "open . for writing succeeded!\n");
+    2b08:	53                   	push   %ebx
+    2b09:	53                   	push   %ebx
+    2b0a:	68 d8 52 00 00       	push   $0x52d8
+    2b0f:	6a 01                	push   $0x1
+    2b11:	e8 2a 0f 00 00       	call   3a40 <printf>
+    exit();
+    2b16:	e8 b6 0d 00 00       	call   38d1 <exit>
+    printf(1, "unlink dirfile failed!\n");
+    2b1b:	50                   	push   %eax
+    2b1c:	50                   	push   %eax
+    2b1d:	68 c9 4a 00 00       	push   $0x4ac9
+    2b22:	6a 01                	push   $0x1
+    2b24:	e8 17 0f 00 00       	call   3a40 <printf>
+    exit();
+    2b29:	e8 a3 0d 00 00       	call   38d1 <exit>
+    printf(1, "link to dirfile/xx succeeded!\n");
+    2b2e:	50                   	push   %eax
+    2b2f:	50                   	push   %eax
+    2b30:	68 b8 52 00 00       	push   $0x52b8
+    2b35:	6a 01                	push   $0x1
+    2b37:	e8 04 0f 00 00       	call   3a40 <printf>
+    exit();
+    2b3c:	e8 90 0d 00 00       	call   38d1 <exit>
+    printf(1, "unlink dirfile/xx succeeded!\n");
+    2b41:	50                   	push   %eax
+    2b42:	50                   	push   %eax
+    2b43:	68 a4 4a 00 00       	push   $0x4aa4
+    2b48:	6a 01                	push   $0x1
+    2b4a:	e8 f1 0e 00 00       	call   3a40 <printf>
+    exit();
+    2b4f:	e8 7d 0d 00 00       	call   38d1 <exit>
+    printf(1, "mkdir dirfile/xx succeeded!\n");
+    2b54:	50                   	push   %eax
+    2b55:	50                   	push   %eax
+    2b56:	68 87 4a 00 00       	push   $0x4a87
+    2b5b:	6a 01                	push   $0x1
+    2b5d:	e8 de 0e 00 00       	call   3a40 <printf>
+    exit();
+    2b62:	e8 6a 0d 00 00       	call   38d1 <exit>
+    2b67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    2b6e:	66 90                	xchg   %ax,%ax
+
+00002b70 <iref>:
+{
+    2b70:	55                   	push   %ebp
+    2b71:	89 e5                	mov    %esp,%ebp
+    2b73:	53                   	push   %ebx
+  printf(1, "empty file name\n");
+    2b74:	bb 33 00 00 00       	mov    $0x33,%ebx
+{
+    2b79:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "empty file name\n");
+    2b7c:	68 05 4b 00 00       	push   $0x4b05
+    2b81:	6a 01                	push   $0x1
+    2b83:	e8 b8 0e 00 00       	call   3a40 <printf>
+    2b88:	83 c4 10             	add    $0x10,%esp
+    2b8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2b8f:	90                   	nop
+    if(mkdir("irefd") != 0){
+    2b90:	83 ec 0c             	sub    $0xc,%esp
+    2b93:	68 16 4b 00 00       	push   $0x4b16
+    2b98:	e8 9c 0d 00 00       	call   3939 <mkdir>
+    2b9d:	83 c4 10             	add    $0x10,%esp
+    2ba0:	85 c0                	test   %eax,%eax
+    2ba2:	0f 85 bb 00 00 00    	jne    2c63 <iref+0xf3>
+    if(chdir("irefd") != 0){
+    2ba8:	83 ec 0c             	sub    $0xc,%esp
+    2bab:	68 16 4b 00 00       	push   $0x4b16
+    2bb0:	e8 8c 0d 00 00       	call   3941 <chdir>
+    2bb5:	83 c4 10             	add    $0x10,%esp
+    2bb8:	85 c0                	test   %eax,%eax
+    2bba:	0f 85 b7 00 00 00    	jne    2c77 <iref+0x107>
+    mkdir("");
+    2bc0:	83 ec 0c             	sub    $0xc,%esp
+    2bc3:	68 cb 41 00 00       	push   $0x41cb
+    2bc8:	e8 6c 0d 00 00       	call   3939 <mkdir>
+    link("README", "");
+    2bcd:	59                   	pop    %ecx
+    2bce:	58                   	pop    %eax
+    2bcf:	68 cb 41 00 00       	push   $0x41cb
+    2bd4:	68 c2 4a 00 00       	push   $0x4ac2
+    2bd9:	e8 53 0d 00 00       	call   3931 <link>
+    fd = open("", O_CREATE);
+    2bde:	58                   	pop    %eax
+    2bdf:	5a                   	pop    %edx
+    2be0:	68 00 02 00 00       	push   $0x200
+    2be5:	68 cb 41 00 00       	push   $0x41cb
+    2bea:	e8 22 0d 00 00       	call   3911 <open>
+    if(fd >= 0)
+    2bef:	83 c4 10             	add    $0x10,%esp
+    2bf2:	85 c0                	test   %eax,%eax
+    2bf4:	78 0c                	js     2c02 <iref+0x92>
+      close(fd);
+    2bf6:	83 ec 0c             	sub    $0xc,%esp
+    2bf9:	50                   	push   %eax
+    2bfa:	e8 fa 0c 00 00       	call   38f9 <close>
+    2bff:	83 c4 10             	add    $0x10,%esp
+    fd = open("xx", O_CREATE);
+    2c02:	83 ec 08             	sub    $0x8,%esp
+    2c05:	68 00 02 00 00       	push   $0x200
+    2c0a:	68 00 47 00 00       	push   $0x4700
+    2c0f:	e8 fd 0c 00 00       	call   3911 <open>
+    if(fd >= 0)
+    2c14:	83 c4 10             	add    $0x10,%esp
+    2c17:	85 c0                	test   %eax,%eax
+    2c19:	78 0c                	js     2c27 <iref+0xb7>
+      close(fd);
+    2c1b:	83 ec 0c             	sub    $0xc,%esp
+    2c1e:	50                   	push   %eax
+    2c1f:	e8 d5 0c 00 00       	call   38f9 <close>
+    2c24:	83 c4 10             	add    $0x10,%esp
+    unlink("xx");
+    2c27:	83 ec 0c             	sub    $0xc,%esp
+    2c2a:	68 00 47 00 00       	push   $0x4700
+    2c2f:	e8 ed 0c 00 00       	call   3921 <unlink>
+  for(i = 0; i < 50 + 1; i++){
+    2c34:	83 c4 10             	add    $0x10,%esp
+    2c37:	83 eb 01             	sub    $0x1,%ebx
+    2c3a:	0f 85 50 ff ff ff    	jne    2b90 <iref+0x20>
+  chdir("/");
+    2c40:	83 ec 0c             	sub    $0xc,%esp
+    2c43:	68 f1 3d 00 00       	push   $0x3df1
+    2c48:	e8 f4 0c 00 00       	call   3941 <chdir>
+  printf(1, "empty file name OK\n");
+    2c4d:	58                   	pop    %eax
+    2c4e:	5a                   	pop    %edx
+    2c4f:	68 44 4b 00 00       	push   $0x4b44
+    2c54:	6a 01                	push   $0x1
+    2c56:	e8 e5 0d 00 00       	call   3a40 <printf>
+}
+    2c5b:	83 c4 10             	add    $0x10,%esp
+    2c5e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2c61:	c9                   	leave  
+    2c62:	c3                   	ret    
+      printf(1, "mkdir irefd failed\n");
+    2c63:	83 ec 08             	sub    $0x8,%esp
+    2c66:	68 1c 4b 00 00       	push   $0x4b1c
+    2c6b:	6a 01                	push   $0x1
+    2c6d:	e8 ce 0d 00 00       	call   3a40 <printf>
+      exit();
+    2c72:	e8 5a 0c 00 00       	call   38d1 <exit>
+      printf(1, "chdir irefd failed\n");
+    2c77:	83 ec 08             	sub    $0x8,%esp
+    2c7a:	68 30 4b 00 00       	push   $0x4b30
+    2c7f:	6a 01                	push   $0x1
+    2c81:	e8 ba 0d 00 00       	call   3a40 <printf>
+      exit();
+    2c86:	e8 46 0c 00 00       	call   38d1 <exit>
+    2c8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2c8f:	90                   	nop
+
+00002c90 <forktest>:
+{
+    2c90:	55                   	push   %ebp
+    2c91:	89 e5                	mov    %esp,%ebp
+    2c93:	53                   	push   %ebx
+  for(n=0; n<1000; n++){
+    2c94:	31 db                	xor    %ebx,%ebx
+{
+    2c96:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "fork test\n");
+    2c99:	68 58 4b 00 00       	push   $0x4b58
+    2c9e:	6a 01                	push   $0x1
+    2ca0:	e8 9b 0d 00 00       	call   3a40 <printf>
+    2ca5:	83 c4 10             	add    $0x10,%esp
+    2ca8:	eb 13                	jmp    2cbd <forktest+0x2d>
+    2caa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(pid == 0)
+    2cb0:	74 4a                	je     2cfc <forktest+0x6c>
+  for(n=0; n<1000; n++){
+    2cb2:	83 c3 01             	add    $0x1,%ebx
+    2cb5:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+    2cbb:	74 6b                	je     2d28 <forktest+0x98>
+    pid = fork();
+    2cbd:	e8 07 0c 00 00       	call   38c9 <fork>
+    if(pid < 0)
+    2cc2:	85 c0                	test   %eax,%eax
+    2cc4:	79 ea                	jns    2cb0 <forktest+0x20>
+  for(; n > 0; n--){
+    2cc6:	85 db                	test   %ebx,%ebx
+    2cc8:	74 14                	je     2cde <forktest+0x4e>
+    2cca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(wait() < 0){
+    2cd0:	e8 04 0c 00 00       	call   38d9 <wait>
+    2cd5:	85 c0                	test   %eax,%eax
+    2cd7:	78 28                	js     2d01 <forktest+0x71>
+  for(; n > 0; n--){
+    2cd9:	83 eb 01             	sub    $0x1,%ebx
+    2cdc:	75 f2                	jne    2cd0 <forktest+0x40>
+  if(wait() != -1){
+    2cde:	e8 f6 0b 00 00       	call   38d9 <wait>
+    2ce3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2ce6:	75 2d                	jne    2d15 <forktest+0x85>
+  printf(1, "fork test OK\n");
+    2ce8:	83 ec 08             	sub    $0x8,%esp
+    2ceb:	68 8a 4b 00 00       	push   $0x4b8a
+    2cf0:	6a 01                	push   $0x1
+    2cf2:	e8 49 0d 00 00       	call   3a40 <printf>
+}
+    2cf7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2cfa:	c9                   	leave  
+    2cfb:	c3                   	ret    
+      exit();
+    2cfc:	e8 d0 0b 00 00       	call   38d1 <exit>
+      printf(1, "wait stopped early\n");
+    2d01:	83 ec 08             	sub    $0x8,%esp
+    2d04:	68 63 4b 00 00       	push   $0x4b63
+    2d09:	6a 01                	push   $0x1
+    2d0b:	e8 30 0d 00 00       	call   3a40 <printf>
+      exit();
+    2d10:	e8 bc 0b 00 00       	call   38d1 <exit>
+    printf(1, "wait got too many\n");
+    2d15:	52                   	push   %edx
+    2d16:	52                   	push   %edx
+    2d17:	68 77 4b 00 00       	push   $0x4b77
+    2d1c:	6a 01                	push   $0x1
+    2d1e:	e8 1d 0d 00 00       	call   3a40 <printf>
+    exit();
+    2d23:	e8 a9 0b 00 00       	call   38d1 <exit>
+    printf(1, "fork claimed to work 1000 times!\n");
+    2d28:	50                   	push   %eax
+    2d29:	50                   	push   %eax
+    2d2a:	68 f8 52 00 00       	push   $0x52f8
+    2d2f:	6a 01                	push   $0x1
+    2d31:	e8 0a 0d 00 00       	call   3a40 <printf>
+    exit();
+    2d36:	e8 96 0b 00 00       	call   38d1 <exit>
+    2d3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2d3f:	90                   	nop
+
+00002d40 <sbrktest>:
+{
+    2d40:	55                   	push   %ebp
+    2d41:	89 e5                	mov    %esp,%ebp
+    2d43:	57                   	push   %edi
+  for(i = 0; i < 5000; i++){
+    2d44:	31 ff                	xor    %edi,%edi
+{
+    2d46:	56                   	push   %esi
+    2d47:	53                   	push   %ebx
+    2d48:	83 ec 54             	sub    $0x54,%esp
+  printf(stdout, "sbrk test\n");
+    2d4b:	68 98 4b 00 00       	push   $0x4b98
+    2d50:	ff 35 40 5e 00 00    	pushl  0x5e40
+    2d56:	e8 e5 0c 00 00       	call   3a40 <printf>
+  oldbrk = sbrk(0);
+    2d5b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2d62:	e8 f2 0b 00 00       	call   3959 <sbrk>
+  a = sbrk(0);
+    2d67:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  oldbrk = sbrk(0);
+    2d6e:	89 c3                	mov    %eax,%ebx
+  a = sbrk(0);
+    2d70:	e8 e4 0b 00 00       	call   3959 <sbrk>
+    2d75:	83 c4 10             	add    $0x10,%esp
+    2d78:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 5000; i++){
+    2d7a:	eb 06                	jmp    2d82 <sbrktest+0x42>
+    2d7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    a = b + 1;
+    2d80:	89 c6                	mov    %eax,%esi
+    b = sbrk(1);
+    2d82:	83 ec 0c             	sub    $0xc,%esp
+    2d85:	6a 01                	push   $0x1
+    2d87:	e8 cd 0b 00 00       	call   3959 <sbrk>
+    if(b != a){
+    2d8c:	83 c4 10             	add    $0x10,%esp
+    2d8f:	39 f0                	cmp    %esi,%eax
+    2d91:	0f 85 84 02 00 00    	jne    301b <sbrktest+0x2db>
+  for(i = 0; i < 5000; i++){
+    2d97:	83 c7 01             	add    $0x1,%edi
+    *b = 1;
+    2d9a:	c6 06 01             	movb   $0x1,(%esi)
+    a = b + 1;
+    2d9d:	8d 46 01             	lea    0x1(%esi),%eax
+  for(i = 0; i < 5000; i++){
+    2da0:	81 ff 88 13 00 00    	cmp    $0x1388,%edi
+    2da6:	75 d8                	jne    2d80 <sbrktest+0x40>
+  pid = fork();
+    2da8:	e8 1c 0b 00 00       	call   38c9 <fork>
+    2dad:	89 c7                	mov    %eax,%edi
+  if(pid < 0){
+    2daf:	85 c0                	test   %eax,%eax
+    2db1:	0f 88 91 03 00 00    	js     3148 <sbrktest+0x408>
+  c = sbrk(1);
+    2db7:	83 ec 0c             	sub    $0xc,%esp
+  if(c != a + 1){
+    2dba:	83 c6 02             	add    $0x2,%esi
+  c = sbrk(1);
+    2dbd:	6a 01                	push   $0x1
+    2dbf:	e8 95 0b 00 00       	call   3959 <sbrk>
+  c = sbrk(1);
+    2dc4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2dcb:	e8 89 0b 00 00       	call   3959 <sbrk>
+  if(c != a + 1){
+    2dd0:	83 c4 10             	add    $0x10,%esp
+    2dd3:	39 f0                	cmp    %esi,%eax
+    2dd5:	0f 85 56 03 00 00    	jne    3131 <sbrktest+0x3f1>
+  if(pid == 0)
+    2ddb:	85 ff                	test   %edi,%edi
+    2ddd:	0f 84 49 03 00 00    	je     312c <sbrktest+0x3ec>
+  wait();
+    2de3:	e8 f1 0a 00 00       	call   38d9 <wait>
+  a = sbrk(0);
+    2de8:	83 ec 0c             	sub    $0xc,%esp
+    2deb:	6a 00                	push   $0x0
+    2ded:	e8 67 0b 00 00       	call   3959 <sbrk>
+    2df2:	89 c6                	mov    %eax,%esi
+  amt = (BIG) - (uint)a;
+    2df4:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    2df9:	29 f0                	sub    %esi,%eax
+  p = sbrk(amt);
+    2dfb:	89 04 24             	mov    %eax,(%esp)
+    2dfe:	e8 56 0b 00 00       	call   3959 <sbrk>
+  if (p != a) {
+    2e03:	83 c4 10             	add    $0x10,%esp
+    2e06:	39 c6                	cmp    %eax,%esi
+    2e08:	0f 85 07 03 00 00    	jne    3115 <sbrktest+0x3d5>
+  a = sbrk(0);
+    2e0e:	83 ec 0c             	sub    $0xc,%esp
+  *lastaddr = 99;
+    2e11:	c6 05 ff ff 3f 06 63 	movb   $0x63,0x63fffff
+  a = sbrk(0);
+    2e18:	6a 00                	push   $0x0
+    2e1a:	e8 3a 0b 00 00       	call   3959 <sbrk>
+  c = sbrk(-4096);
+    2e1f:	c7 04 24 00 f0 ff ff 	movl   $0xfffff000,(%esp)
+  a = sbrk(0);
+    2e26:	89 c6                	mov    %eax,%esi
+  c = sbrk(-4096);
+    2e28:	e8 2c 0b 00 00       	call   3959 <sbrk>
+  if(c == (char*)0xffffffff){
+    2e2d:	83 c4 10             	add    $0x10,%esp
+    2e30:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2e33:	0f 84 c5 02 00 00    	je     30fe <sbrktest+0x3be>
+  c = sbrk(0);
+    2e39:	83 ec 0c             	sub    $0xc,%esp
+    2e3c:	6a 00                	push   $0x0
+    2e3e:	e8 16 0b 00 00       	call   3959 <sbrk>
+  if(c != a - 4096){
+    2e43:	8d 96 00 f0 ff ff    	lea    -0x1000(%esi),%edx
+    2e49:	83 c4 10             	add    $0x10,%esp
+    2e4c:	39 d0                	cmp    %edx,%eax
+    2e4e:	0f 85 93 02 00 00    	jne    30e7 <sbrktest+0x3a7>
+  a = sbrk(0);
+    2e54:	83 ec 0c             	sub    $0xc,%esp
+    2e57:	6a 00                	push   $0x0
+    2e59:	e8 fb 0a 00 00       	call   3959 <sbrk>
+  c = sbrk(4096);
+    2e5e:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+  a = sbrk(0);
+    2e65:	89 c6                	mov    %eax,%esi
+  c = sbrk(4096);
+    2e67:	e8 ed 0a 00 00       	call   3959 <sbrk>
+  if(c != a || sbrk(0) != a + 4096){
+    2e6c:	83 c4 10             	add    $0x10,%esp
+  c = sbrk(4096);
+    2e6f:	89 c7                	mov    %eax,%edi
+  if(c != a || sbrk(0) != a + 4096){
+    2e71:	39 c6                	cmp    %eax,%esi
+    2e73:	0f 85 57 02 00 00    	jne    30d0 <sbrktest+0x390>
+    2e79:	83 ec 0c             	sub    $0xc,%esp
+    2e7c:	6a 00                	push   $0x0
+    2e7e:	e8 d6 0a 00 00       	call   3959 <sbrk>
+    2e83:	8d 96 00 10 00 00    	lea    0x1000(%esi),%edx
+    2e89:	83 c4 10             	add    $0x10,%esp
+    2e8c:	39 d0                	cmp    %edx,%eax
+    2e8e:	0f 85 3c 02 00 00    	jne    30d0 <sbrktest+0x390>
+  if(*lastaddr == 99){
+    2e94:	80 3d ff ff 3f 06 63 	cmpb   $0x63,0x63fffff
+    2e9b:	0f 84 18 02 00 00    	je     30b9 <sbrktest+0x379>
+  a = sbrk(0);
+    2ea1:	83 ec 0c             	sub    $0xc,%esp
+    2ea4:	6a 00                	push   $0x0
+    2ea6:	e8 ae 0a 00 00       	call   3959 <sbrk>
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2eab:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  a = sbrk(0);
+    2eb2:	89 c6                	mov    %eax,%esi
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2eb4:	e8 a0 0a 00 00       	call   3959 <sbrk>
+    2eb9:	89 d9                	mov    %ebx,%ecx
+    2ebb:	29 c1                	sub    %eax,%ecx
+    2ebd:	89 0c 24             	mov    %ecx,(%esp)
+    2ec0:	e8 94 0a 00 00       	call   3959 <sbrk>
+  if(c != a){
+    2ec5:	83 c4 10             	add    $0x10,%esp
+    2ec8:	39 c6                	cmp    %eax,%esi
+    2eca:	0f 85 d2 01 00 00    	jne    30a2 <sbrktest+0x362>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2ed0:	be 00 00 00 80       	mov    $0x80000000,%esi
+    2ed5:	8d 76 00             	lea    0x0(%esi),%esi
+    ppid = getpid();
+    2ed8:	e8 74 0a 00 00       	call   3951 <getpid>
+    2edd:	89 c7                	mov    %eax,%edi
+    pid = fork();
+    2edf:	e8 e5 09 00 00       	call   38c9 <fork>
+    if(pid < 0){
+    2ee4:	85 c0                	test   %eax,%eax
+    2ee6:	0f 88 9e 01 00 00    	js     308a <sbrktest+0x34a>
+    if(pid == 0){
+    2eec:	0f 84 76 01 00 00    	je     3068 <sbrktest+0x328>
+    wait();
+    2ef2:	e8 e2 09 00 00       	call   38d9 <wait>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2ef7:	81 c6 50 c3 00 00    	add    $0xc350,%esi
+    2efd:	81 fe 80 84 1e 80    	cmp    $0x801e8480,%esi
+    2f03:	75 d3                	jne    2ed8 <sbrktest+0x198>
+  if(pipe(fds) != 0){
+    2f05:	83 ec 0c             	sub    $0xc,%esp
+    2f08:	8d 45 b8             	lea    -0x48(%ebp),%eax
+    2f0b:	50                   	push   %eax
+    2f0c:	e8 d0 09 00 00       	call   38e1 <pipe>
+    2f11:	83 c4 10             	add    $0x10,%esp
+    2f14:	85 c0                	test   %eax,%eax
+    2f16:	0f 85 34 01 00 00    	jne    3050 <sbrktest+0x310>
+    2f1c:	8d 75 c0             	lea    -0x40(%ebp),%esi
+    2f1f:	89 f7                	mov    %esi,%edi
+    if((pids[i] = fork()) == 0){
+    2f21:	e8 a3 09 00 00       	call   38c9 <fork>
+    2f26:	89 07                	mov    %eax,(%edi)
+    2f28:	85 c0                	test   %eax,%eax
+    2f2a:	0f 84 8f 00 00 00    	je     2fbf <sbrktest+0x27f>
+    if(pids[i] != -1)
+    2f30:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2f33:	74 14                	je     2f49 <sbrktest+0x209>
+      read(fds[0], &scratch, 1);
+    2f35:	83 ec 04             	sub    $0x4,%esp
+    2f38:	8d 45 b7             	lea    -0x49(%ebp),%eax
+    2f3b:	6a 01                	push   $0x1
+    2f3d:	50                   	push   %eax
+    2f3e:	ff 75 b8             	pushl  -0x48(%ebp)
+    2f41:	e8 a3 09 00 00       	call   38e9 <read>
+    2f46:	83 c4 10             	add    $0x10,%esp
+    2f49:	83 c7 04             	add    $0x4,%edi
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2f4c:	8d 45 e8             	lea    -0x18(%ebp),%eax
+    2f4f:	39 c7                	cmp    %eax,%edi
+    2f51:	75 ce                	jne    2f21 <sbrktest+0x1e1>
+  c = sbrk(4096);
+    2f53:	83 ec 0c             	sub    $0xc,%esp
+    2f56:	68 00 10 00 00       	push   $0x1000
+    2f5b:	e8 f9 09 00 00       	call   3959 <sbrk>
+    2f60:	83 c4 10             	add    $0x10,%esp
+    2f63:	89 c7                	mov    %eax,%edi
+    if(pids[i] == -1)
+    2f65:	8b 06                	mov    (%esi),%eax
+    2f67:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2f6a:	74 11                	je     2f7d <sbrktest+0x23d>
+    kill(pids[i]);
+    2f6c:	83 ec 0c             	sub    $0xc,%esp
+    2f6f:	50                   	push   %eax
+    2f70:	e8 8c 09 00 00       	call   3901 <kill>
+    wait();
+    2f75:	e8 5f 09 00 00       	call   38d9 <wait>
+    2f7a:	83 c4 10             	add    $0x10,%esp
+    2f7d:	83 c6 04             	add    $0x4,%esi
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2f80:	8d 45 e8             	lea    -0x18(%ebp),%eax
+    2f83:	39 f0                	cmp    %esi,%eax
+    2f85:	75 de                	jne    2f65 <sbrktest+0x225>
+  if(c == (char*)0xffffffff){
+    2f87:	83 ff ff             	cmp    $0xffffffff,%edi
+    2f8a:	0f 84 a9 00 00 00    	je     3039 <sbrktest+0x2f9>
+  if(sbrk(0) > oldbrk)
+    2f90:	83 ec 0c             	sub    $0xc,%esp
+    2f93:	6a 00                	push   $0x0
+    2f95:	e8 bf 09 00 00       	call   3959 <sbrk>
+    2f9a:	83 c4 10             	add    $0x10,%esp
+    2f9d:	39 d8                	cmp    %ebx,%eax
+    2f9f:	77 61                	ja     3002 <sbrktest+0x2c2>
+  printf(stdout, "sbrk test OK\n");
+    2fa1:	83 ec 08             	sub    $0x8,%esp
+    2fa4:	68 40 4c 00 00       	push   $0x4c40
+    2fa9:	ff 35 40 5e 00 00    	pushl  0x5e40
+    2faf:	e8 8c 0a 00 00       	call   3a40 <printf>
+}
+    2fb4:	83 c4 10             	add    $0x10,%esp
+    2fb7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    2fba:	5b                   	pop    %ebx
+    2fbb:	5e                   	pop    %esi
+    2fbc:	5f                   	pop    %edi
+    2fbd:	5d                   	pop    %ebp
+    2fbe:	c3                   	ret    
+      sbrk(BIG - (uint)sbrk(0));
+    2fbf:	83 ec 0c             	sub    $0xc,%esp
+    2fc2:	6a 00                	push   $0x0
+    2fc4:	e8 90 09 00 00       	call   3959 <sbrk>
+    2fc9:	ba 00 00 40 06       	mov    $0x6400000,%edx
+    2fce:	29 c2                	sub    %eax,%edx
+    2fd0:	89 14 24             	mov    %edx,(%esp)
+    2fd3:	e8 81 09 00 00       	call   3959 <sbrk>
+      write(fds[1], "x", 1);
+    2fd8:	83 c4 0c             	add    $0xc,%esp
+    2fdb:	6a 01                	push   $0x1
+    2fdd:	68 01 47 00 00       	push   $0x4701
+    2fe2:	ff 75 bc             	pushl  -0x44(%ebp)
+    2fe5:	e8 07 09 00 00       	call   38f1 <write>
+    2fea:	83 c4 10             	add    $0x10,%esp
+    2fed:	8d 76 00             	lea    0x0(%esi),%esi
+      for(;;) sleep(1000);
+    2ff0:	83 ec 0c             	sub    $0xc,%esp
+    2ff3:	68 e8 03 00 00       	push   $0x3e8
+    2ff8:	e8 64 09 00 00       	call   3961 <sleep>
+    2ffd:	83 c4 10             	add    $0x10,%esp
+    3000:	eb ee                	jmp    2ff0 <sbrktest+0x2b0>
+    sbrk(-(sbrk(0) - oldbrk));
+    3002:	83 ec 0c             	sub    $0xc,%esp
+    3005:	6a 00                	push   $0x0
+    3007:	e8 4d 09 00 00       	call   3959 <sbrk>
+    300c:	29 c3                	sub    %eax,%ebx
+    300e:	89 1c 24             	mov    %ebx,(%esp)
+    3011:	e8 43 09 00 00       	call   3959 <sbrk>
+    3016:	83 c4 10             	add    $0x10,%esp
+    3019:	eb 86                	jmp    2fa1 <sbrktest+0x261>
+      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
+    301b:	83 ec 0c             	sub    $0xc,%esp
+    301e:	50                   	push   %eax
+    301f:	56                   	push   %esi
+    3020:	57                   	push   %edi
+    3021:	68 a3 4b 00 00       	push   $0x4ba3
+    3026:	ff 35 40 5e 00 00    	pushl  0x5e40
+    302c:	e8 0f 0a 00 00       	call   3a40 <printf>
+      exit();
+    3031:	83 c4 20             	add    $0x20,%esp
+    3034:	e8 98 08 00 00       	call   38d1 <exit>
+    printf(stdout, "failed sbrk leaked memory\n");
+    3039:	50                   	push   %eax
+    303a:	50                   	push   %eax
+    303b:	68 25 4c 00 00       	push   $0x4c25
+    3040:	ff 35 40 5e 00 00    	pushl  0x5e40
+    3046:	e8 f5 09 00 00       	call   3a40 <printf>
+    exit();
+    304b:	e8 81 08 00 00       	call   38d1 <exit>
+    printf(1, "pipe() failed\n");
+    3050:	52                   	push   %edx
+    3051:	52                   	push   %edx
+    3052:	68 e1 40 00 00       	push   $0x40e1
+    3057:	6a 01                	push   $0x1
+    3059:	e8 e2 09 00 00       	call   3a40 <printf>
+    exit();
+    305e:	e8 6e 08 00 00       	call   38d1 <exit>
+    3063:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3067:	90                   	nop
+      printf(stdout, "oops could read %x = %x\n", a, *a);
+    3068:	0f be 06             	movsbl (%esi),%eax
+    306b:	50                   	push   %eax
+    306c:	56                   	push   %esi
+    306d:	68 0c 4c 00 00       	push   $0x4c0c
+    3072:	ff 35 40 5e 00 00    	pushl  0x5e40
+    3078:	e8 c3 09 00 00       	call   3a40 <printf>
+      kill(ppid);
+    307d:	89 3c 24             	mov    %edi,(%esp)
+    3080:	e8 7c 08 00 00       	call   3901 <kill>
+      exit();
+    3085:	e8 47 08 00 00       	call   38d1 <exit>
+      printf(stdout, "fork failed\n");
+    308a:	83 ec 08             	sub    $0x8,%esp
+    308d:	68 e9 4c 00 00       	push   $0x4ce9
+    3092:	ff 35 40 5e 00 00    	pushl  0x5e40
+    3098:	e8 a3 09 00 00       	call   3a40 <printf>
+      exit();
+    309d:	e8 2f 08 00 00       	call   38d1 <exit>
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    30a2:	50                   	push   %eax
+    30a3:	56                   	push   %esi
+    30a4:	68 ec 53 00 00       	push   $0x53ec
+    30a9:	ff 35 40 5e 00 00    	pushl  0x5e40
+    30af:	e8 8c 09 00 00       	call   3a40 <printf>
+    exit();
+    30b4:	e8 18 08 00 00       	call   38d1 <exit>
+    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
+    30b9:	51                   	push   %ecx
+    30ba:	51                   	push   %ecx
+    30bb:	68 bc 53 00 00       	push   $0x53bc
+    30c0:	ff 35 40 5e 00 00    	pushl  0x5e40
+    30c6:	e8 75 09 00 00       	call   3a40 <printf>
+    exit();
+    30cb:	e8 01 08 00 00       	call   38d1 <exit>
+    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
+    30d0:	57                   	push   %edi
+    30d1:	56                   	push   %esi
+    30d2:	68 94 53 00 00       	push   $0x5394
+    30d7:	ff 35 40 5e 00 00    	pushl  0x5e40
+    30dd:	e8 5e 09 00 00       	call   3a40 <printf>
+    exit();
+    30e2:	e8 ea 07 00 00       	call   38d1 <exit>
+    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
+    30e7:	50                   	push   %eax
+    30e8:	56                   	push   %esi
+    30e9:	68 5c 53 00 00       	push   $0x535c
+    30ee:	ff 35 40 5e 00 00    	pushl  0x5e40
+    30f4:	e8 47 09 00 00       	call   3a40 <printf>
+    exit();
+    30f9:	e8 d3 07 00 00       	call   38d1 <exit>
+    printf(stdout, "sbrk could not deallocate\n");
+    30fe:	53                   	push   %ebx
+    30ff:	53                   	push   %ebx
+    3100:	68 f1 4b 00 00       	push   $0x4bf1
+    3105:	ff 35 40 5e 00 00    	pushl  0x5e40
+    310b:	e8 30 09 00 00       	call   3a40 <printf>
+    exit();
+    3110:	e8 bc 07 00 00       	call   38d1 <exit>
+    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
+    3115:	56                   	push   %esi
+    3116:	56                   	push   %esi
+    3117:	68 1c 53 00 00       	push   $0x531c
+    311c:	ff 35 40 5e 00 00    	pushl  0x5e40
+    3122:	e8 19 09 00 00       	call   3a40 <printf>
+    exit();
+    3127:	e8 a5 07 00 00       	call   38d1 <exit>
+    exit();
+    312c:	e8 a0 07 00 00       	call   38d1 <exit>
+    printf(stdout, "sbrk test failed post-fork\n");
+    3131:	57                   	push   %edi
+    3132:	57                   	push   %edi
+    3133:	68 d5 4b 00 00       	push   $0x4bd5
+    3138:	ff 35 40 5e 00 00    	pushl  0x5e40
+    313e:	e8 fd 08 00 00       	call   3a40 <printf>
+    exit();
+    3143:	e8 89 07 00 00       	call   38d1 <exit>
+    printf(stdout, "sbrk test fork failed\n");
+    3148:	50                   	push   %eax
+    3149:	50                   	push   %eax
+    314a:	68 be 4b 00 00       	push   $0x4bbe
+    314f:	ff 35 40 5e 00 00    	pushl  0x5e40
+    3155:	e8 e6 08 00 00       	call   3a40 <printf>
+    exit();
+    315a:	e8 72 07 00 00       	call   38d1 <exit>
+    315f:	90                   	nop
+
+00003160 <validateint>:
+}
+    3160:	c3                   	ret    
+    3161:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3168:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    316f:	90                   	nop
+
+00003170 <validatetest>:
+{
+    3170:	55                   	push   %ebp
+    3171:	89 e5                	mov    %esp,%ebp
+    3173:	56                   	push   %esi
+    3174:	53                   	push   %ebx
+  for(p = 0; p <= (uint)hi; p += 4096){
+    3175:	31 db                	xor    %ebx,%ebx
+  printf(stdout, "validate test\n");
+    3177:	83 ec 08             	sub    $0x8,%esp
+    317a:	68 4e 4c 00 00       	push   $0x4c4e
+    317f:	ff 35 40 5e 00 00    	pushl  0x5e40
+    3185:	e8 b6 08 00 00       	call   3a40 <printf>
+    318a:	83 c4 10             	add    $0x10,%esp
+    318d:	8d 76 00             	lea    0x0(%esi),%esi
+    if((pid = fork()) == 0){
+    3190:	e8 34 07 00 00       	call   38c9 <fork>
+    3195:	89 c6                	mov    %eax,%esi
+    3197:	85 c0                	test   %eax,%eax
+    3199:	74 63                	je     31fe <validatetest+0x8e>
+    sleep(0);
+    319b:	83 ec 0c             	sub    $0xc,%esp
+    319e:	6a 00                	push   $0x0
+    31a0:	e8 bc 07 00 00       	call   3961 <sleep>
+    sleep(0);
+    31a5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    31ac:	e8 b0 07 00 00       	call   3961 <sleep>
+    kill(pid);
+    31b1:	89 34 24             	mov    %esi,(%esp)
+    31b4:	e8 48 07 00 00       	call   3901 <kill>
+    wait();
+    31b9:	e8 1b 07 00 00       	call   38d9 <wait>
+    if(link("nosuchfile", (char*)p) != -1){
+    31be:	58                   	pop    %eax
+    31bf:	5a                   	pop    %edx
+    31c0:	53                   	push   %ebx
+    31c1:	68 5d 4c 00 00       	push   $0x4c5d
+    31c6:	e8 66 07 00 00       	call   3931 <link>
+    31cb:	83 c4 10             	add    $0x10,%esp
+    31ce:	83 f8 ff             	cmp    $0xffffffff,%eax
+    31d1:	75 30                	jne    3203 <validatetest+0x93>
+  for(p = 0; p <= (uint)hi; p += 4096){
+    31d3:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    31d9:	81 fb 00 40 11 00    	cmp    $0x114000,%ebx
+    31df:	75 af                	jne    3190 <validatetest+0x20>
+  printf(stdout, "validate ok\n");
+    31e1:	83 ec 08             	sub    $0x8,%esp
+    31e4:	68 81 4c 00 00       	push   $0x4c81
+    31e9:	ff 35 40 5e 00 00    	pushl  0x5e40
+    31ef:	e8 4c 08 00 00       	call   3a40 <printf>
+}
+    31f4:	83 c4 10             	add    $0x10,%esp
+    31f7:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    31fa:	5b                   	pop    %ebx
+    31fb:	5e                   	pop    %esi
+    31fc:	5d                   	pop    %ebp
+    31fd:	c3                   	ret    
+      exit();
+    31fe:	e8 ce 06 00 00       	call   38d1 <exit>
+      printf(stdout, "link should not succeed\n");
+    3203:	83 ec 08             	sub    $0x8,%esp
+    3206:	68 68 4c 00 00       	push   $0x4c68
+    320b:	ff 35 40 5e 00 00    	pushl  0x5e40
+    3211:	e8 2a 08 00 00       	call   3a40 <printf>
+      exit();
+    3216:	e8 b6 06 00 00       	call   38d1 <exit>
+    321b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    321f:	90                   	nop
+
+00003220 <bsstest>:
+{
+    3220:	55                   	push   %ebp
+    3221:	89 e5                	mov    %esp,%ebp
+    3223:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "bss test\n");
+    3226:	68 8e 4c 00 00       	push   $0x4c8e
+    322b:	ff 35 40 5e 00 00    	pushl  0x5e40
+    3231:	e8 0a 08 00 00       	call   3a40 <printf>
+    if(uninit[i] != '\0'){
+    3236:	83 c4 10             	add    $0x10,%esp
+    3239:	80 3d 00 5f 00 00 00 	cmpb   $0x0,0x5f00
+    3240:	75 39                	jne    327b <bsstest+0x5b>
+  for(i = 0; i < sizeof(uninit); i++){
+    3242:	b8 01 00 00 00       	mov    $0x1,%eax
+    3247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    324e:	66 90                	xchg   %ax,%ax
+    if(uninit[i] != '\0'){
+    3250:	80 b8 00 5f 00 00 00 	cmpb   $0x0,0x5f00(%eax)
+    3257:	75 22                	jne    327b <bsstest+0x5b>
+  for(i = 0; i < sizeof(uninit); i++){
+    3259:	83 c0 01             	add    $0x1,%eax
+    325c:	3d 10 27 00 00       	cmp    $0x2710,%eax
+    3261:	75 ed                	jne    3250 <bsstest+0x30>
+  printf(stdout, "bss test ok\n");
+    3263:	83 ec 08             	sub    $0x8,%esp
+    3266:	68 a9 4c 00 00       	push   $0x4ca9
+    326b:	ff 35 40 5e 00 00    	pushl  0x5e40
+    3271:	e8 ca 07 00 00       	call   3a40 <printf>
+}
+    3276:	83 c4 10             	add    $0x10,%esp
+    3279:	c9                   	leave  
+    327a:	c3                   	ret    
+      printf(stdout, "bss test failed\n");
+    327b:	83 ec 08             	sub    $0x8,%esp
+    327e:	68 98 4c 00 00       	push   $0x4c98
+    3283:	ff 35 40 5e 00 00    	pushl  0x5e40
+    3289:	e8 b2 07 00 00       	call   3a40 <printf>
+      exit();
+    328e:	e8 3e 06 00 00       	call   38d1 <exit>
+    3293:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    329a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000032a0 <bigargtest>:
+{
+    32a0:	55                   	push   %ebp
+    32a1:	89 e5                	mov    %esp,%ebp
+    32a3:	83 ec 14             	sub    $0x14,%esp
+  unlink("bigarg-ok");
+    32a6:	68 b6 4c 00 00       	push   $0x4cb6
+    32ab:	e8 71 06 00 00       	call   3921 <unlink>
+  pid = fork();
+    32b0:	e8 14 06 00 00       	call   38c9 <fork>
+  if(pid == 0){
+    32b5:	83 c4 10             	add    $0x10,%esp
+    32b8:	85 c0                	test   %eax,%eax
+    32ba:	74 44                	je     3300 <bigargtest+0x60>
+  } else if(pid < 0){
+    32bc:	0f 88 c5 00 00 00    	js     3387 <bigargtest+0xe7>
+  wait();
+    32c2:	e8 12 06 00 00       	call   38d9 <wait>
+  fd = open("bigarg-ok", 0);
+    32c7:	83 ec 08             	sub    $0x8,%esp
+    32ca:	6a 00                	push   $0x0
+    32cc:	68 b6 4c 00 00       	push   $0x4cb6
+    32d1:	e8 3b 06 00 00       	call   3911 <open>
+  if(fd < 0){
+    32d6:	83 c4 10             	add    $0x10,%esp
+    32d9:	85 c0                	test   %eax,%eax
+    32db:	0f 88 8f 00 00 00    	js     3370 <bigargtest+0xd0>
+  close(fd);
+    32e1:	83 ec 0c             	sub    $0xc,%esp
+    32e4:	50                   	push   %eax
+    32e5:	e8 0f 06 00 00       	call   38f9 <close>
+  unlink("bigarg-ok");
+    32ea:	c7 04 24 b6 4c 00 00 	movl   $0x4cb6,(%esp)
+    32f1:	e8 2b 06 00 00       	call   3921 <unlink>
+}
+    32f6:	83 c4 10             	add    $0x10,%esp
+    32f9:	c9                   	leave  
+    32fa:	c3                   	ret    
+    32fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    32ff:	90                   	nop
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    3300:	c7 04 85 60 5e 00 00 	movl   $0x5410,0x5e60(,%eax,4)
+    3307:	10 54 00 00 
+    for(i = 0; i < MAXARG-1; i++)
+    330b:	83 c0 01             	add    $0x1,%eax
+    330e:	83 f8 1f             	cmp    $0x1f,%eax
+    3311:	75 ed                	jne    3300 <bigargtest+0x60>
+    printf(stdout, "bigarg test\n");
+    3313:	51                   	push   %ecx
+    3314:	51                   	push   %ecx
+    3315:	68 c0 4c 00 00       	push   $0x4cc0
+    331a:	ff 35 40 5e 00 00    	pushl  0x5e40
+    args[MAXARG-1] = 0;
+    3320:	c7 05 dc 5e 00 00 00 	movl   $0x0,0x5edc
+    3327:	00 00 00 
+    printf(stdout, "bigarg test\n");
+    332a:	e8 11 07 00 00       	call   3a40 <printf>
+    exec("echo", args);
+    332f:	58                   	pop    %eax
+    3330:	5a                   	pop    %edx
+    3331:	68 60 5e 00 00       	push   $0x5e60
+    3336:	68 8d 3e 00 00       	push   $0x3e8d
+    333b:	e8 c9 05 00 00       	call   3909 <exec>
+    printf(stdout, "bigarg test ok\n");
+    3340:	59                   	pop    %ecx
+    3341:	58                   	pop    %eax
+    3342:	68 cd 4c 00 00       	push   $0x4ccd
+    3347:	ff 35 40 5e 00 00    	pushl  0x5e40
+    334d:	e8 ee 06 00 00       	call   3a40 <printf>
+    fd = open("bigarg-ok", O_CREATE);
+    3352:	58                   	pop    %eax
+    3353:	5a                   	pop    %edx
+    3354:	68 00 02 00 00       	push   $0x200
+    3359:	68 b6 4c 00 00       	push   $0x4cb6
+    335e:	e8 ae 05 00 00       	call   3911 <open>
+    close(fd);
+    3363:	89 04 24             	mov    %eax,(%esp)
+    3366:	e8 8e 05 00 00       	call   38f9 <close>
+    exit();
+    336b:	e8 61 05 00 00       	call   38d1 <exit>
+    printf(stdout, "bigarg test failed!\n");
+    3370:	50                   	push   %eax
+    3371:	50                   	push   %eax
+    3372:	68 f6 4c 00 00       	push   $0x4cf6
+    3377:	ff 35 40 5e 00 00    	pushl  0x5e40
+    337d:	e8 be 06 00 00       	call   3a40 <printf>
+    exit();
+    3382:	e8 4a 05 00 00       	call   38d1 <exit>
+    printf(stdout, "bigargtest: fork failed\n");
+    3387:	52                   	push   %edx
+    3388:	52                   	push   %edx
+    3389:	68 dd 4c 00 00       	push   $0x4cdd
+    338e:	ff 35 40 5e 00 00    	pushl  0x5e40
+    3394:	e8 a7 06 00 00       	call   3a40 <printf>
+    exit();
+    3399:	e8 33 05 00 00       	call   38d1 <exit>
+    339e:	66 90                	xchg   %ax,%ax
+
+000033a0 <fsfull>:
+{
+    33a0:	55                   	push   %ebp
+    33a1:	89 e5                	mov    %esp,%ebp
+    33a3:	57                   	push   %edi
+    33a4:	56                   	push   %esi
+  for(nfiles = 0; ; nfiles++){
+    33a5:	31 f6                	xor    %esi,%esi
+{
+    33a7:	53                   	push   %ebx
+    33a8:	83 ec 54             	sub    $0x54,%esp
+  printf(1, "fsfull test\n");
+    33ab:	68 0b 4d 00 00       	push   $0x4d0b
+    33b0:	6a 01                	push   $0x1
+    33b2:	e8 89 06 00 00       	call   3a40 <printf>
+    33b7:	83 c4 10             	add    $0x10,%esp
+    33ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    name[1] = '0' + nfiles / 1000;
+    33c0:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    33c5:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
+    printf(1, "writing %s\n", name);
+    33ca:	83 ec 04             	sub    $0x4,%esp
+    name[0] = 'f';
+    33cd:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    33d1:	f7 e6                	mul    %esi
+    name[5] = '\0';
+    33d3:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    33d7:	c1 ea 06             	shr    $0x6,%edx
+    33da:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33dd:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    name[1] = '0' + nfiles / 1000;
+    33e3:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33e6:	89 f0                	mov    %esi,%eax
+    33e8:	29 d0                	sub    %edx,%eax
+    33ea:	89 c2                	mov    %eax,%edx
+    33ec:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    33f1:	f7 e2                	mul    %edx
+    name[3] = '0' + (nfiles % 100) / 10;
+    33f3:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33f8:	c1 ea 05             	shr    $0x5,%edx
+    33fb:	83 c2 30             	add    $0x30,%edx
+    33fe:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    3401:	f7 e6                	mul    %esi
+    3403:	89 f0                	mov    %esi,%eax
+    3405:	c1 ea 05             	shr    $0x5,%edx
+    3408:	6b d2 64             	imul   $0x64,%edx,%edx
+    340b:	29 d0                	sub    %edx,%eax
+    340d:	f7 e1                	mul    %ecx
+    name[4] = '0' + (nfiles % 10);
+    340f:	89 f0                	mov    %esi,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    3411:	c1 ea 03             	shr    $0x3,%edx
+    3414:	83 c2 30             	add    $0x30,%edx
+    3417:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    341a:	f7 e1                	mul    %ecx
+    341c:	89 f1                	mov    %esi,%ecx
+    341e:	c1 ea 03             	shr    $0x3,%edx
+    3421:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    3424:	01 c0                	add    %eax,%eax
+    3426:	29 c1                	sub    %eax,%ecx
+    3428:	89 c8                	mov    %ecx,%eax
+    342a:	83 c0 30             	add    $0x30,%eax
+    342d:	88 45 ac             	mov    %al,-0x54(%ebp)
+    printf(1, "writing %s\n", name);
+    3430:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3433:	50                   	push   %eax
+    3434:	68 18 4d 00 00       	push   $0x4d18
+    3439:	6a 01                	push   $0x1
+    343b:	e8 00 06 00 00       	call   3a40 <printf>
+    int fd = open(name, O_CREATE|O_RDWR);
+    3440:	58                   	pop    %eax
+    3441:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3444:	5a                   	pop    %edx
+    3445:	68 02 02 00 00       	push   $0x202
+    344a:	50                   	push   %eax
+    344b:	e8 c1 04 00 00       	call   3911 <open>
+    if(fd < 0){
+    3450:	83 c4 10             	add    $0x10,%esp
+    int fd = open(name, O_CREATE|O_RDWR);
+    3453:	89 c7                	mov    %eax,%edi
+    if(fd < 0){
+    3455:	85 c0                	test   %eax,%eax
+    3457:	78 4d                	js     34a6 <fsfull+0x106>
+    int total = 0;
+    3459:	31 db                	xor    %ebx,%ebx
+    345b:	eb 05                	jmp    3462 <fsfull+0xc2>
+    345d:	8d 76 00             	lea    0x0(%esi),%esi
+      total += cc;
+    3460:	01 c3                	add    %eax,%ebx
+      int cc = write(fd, buf, 512);
+    3462:	83 ec 04             	sub    $0x4,%esp
+    3465:	68 00 02 00 00       	push   $0x200
+    346a:	68 20 86 00 00       	push   $0x8620
+    346f:	57                   	push   %edi
+    3470:	e8 7c 04 00 00       	call   38f1 <write>
+      if(cc < 512)
+    3475:	83 c4 10             	add    $0x10,%esp
+    3478:	3d ff 01 00 00       	cmp    $0x1ff,%eax
+    347d:	7f e1                	jg     3460 <fsfull+0xc0>
+    printf(1, "wrote %d bytes\n", total);
+    347f:	83 ec 04             	sub    $0x4,%esp
+    3482:	53                   	push   %ebx
+    3483:	68 34 4d 00 00       	push   $0x4d34
+    3488:	6a 01                	push   $0x1
+    348a:	e8 b1 05 00 00       	call   3a40 <printf>
+    close(fd);
+    348f:	89 3c 24             	mov    %edi,(%esp)
+    3492:	e8 62 04 00 00       	call   38f9 <close>
+    if(total == 0)
+    3497:	83 c4 10             	add    $0x10,%esp
+    349a:	85 db                	test   %ebx,%ebx
+    349c:	74 1e                	je     34bc <fsfull+0x11c>
+  for(nfiles = 0; ; nfiles++){
+    349e:	83 c6 01             	add    $0x1,%esi
+    34a1:	e9 1a ff ff ff       	jmp    33c0 <fsfull+0x20>
+      printf(1, "open %s failed\n", name);
+    34a6:	83 ec 04             	sub    $0x4,%esp
+    34a9:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    34ac:	50                   	push   %eax
+    34ad:	68 24 4d 00 00       	push   $0x4d24
+    34b2:	6a 01                	push   $0x1
+    34b4:	e8 87 05 00 00       	call   3a40 <printf>
+      break;
+    34b9:	83 c4 10             	add    $0x10,%esp
+    name[1] = '0' + nfiles / 1000;
+    34bc:	bf d3 4d 62 10       	mov    $0x10624dd3,%edi
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34c1:	bb 1f 85 eb 51       	mov    $0x51eb851f,%ebx
+    34c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    34cd:	8d 76 00             	lea    0x0(%esi),%esi
+    name[1] = '0' + nfiles / 1000;
+    34d0:	89 f0                	mov    %esi,%eax
+    34d2:	89 f1                	mov    %esi,%ecx
+    unlink(name);
+    34d4:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'f';
+    34d7:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    34db:	f7 ef                	imul   %edi
+    34dd:	c1 f9 1f             	sar    $0x1f,%ecx
+    name[5] = '\0';
+    34e0:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    34e4:	c1 fa 06             	sar    $0x6,%edx
+    34e7:	29 ca                	sub    %ecx,%edx
+    34e9:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34ec:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    name[1] = '0' + nfiles / 1000;
+    34f2:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34f5:	89 f0                	mov    %esi,%eax
+    34f7:	29 d0                	sub    %edx,%eax
+    34f9:	f7 e3                	mul    %ebx
+    name[3] = '0' + (nfiles % 100) / 10;
+    34fb:	89 f0                	mov    %esi,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34fd:	c1 ea 05             	shr    $0x5,%edx
+    3500:	83 c2 30             	add    $0x30,%edx
+    3503:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    3506:	f7 eb                	imul   %ebx
+    3508:	89 f0                	mov    %esi,%eax
+    350a:	c1 fa 05             	sar    $0x5,%edx
+    350d:	29 ca                	sub    %ecx,%edx
+    350f:	6b d2 64             	imul   $0x64,%edx,%edx
+    3512:	29 d0                	sub    %edx,%eax
+    3514:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
+    3519:	f7 e2                	mul    %edx
+    name[4] = '0' + (nfiles % 10);
+    351b:	89 f0                	mov    %esi,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    351d:	c1 ea 03             	shr    $0x3,%edx
+    3520:	83 c2 30             	add    $0x30,%edx
+    3523:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    3526:	ba 67 66 66 66       	mov    $0x66666667,%edx
+    352b:	f7 ea                	imul   %edx
+    352d:	c1 fa 02             	sar    $0x2,%edx
+    3530:	29 ca                	sub    %ecx,%edx
+    3532:	89 f1                	mov    %esi,%ecx
+    nfiles--;
+    3534:	83 ee 01             	sub    $0x1,%esi
+    name[4] = '0' + (nfiles % 10);
+    3537:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    353a:	01 c0                	add    %eax,%eax
+    353c:	29 c1                	sub    %eax,%ecx
+    353e:	89 c8                	mov    %ecx,%eax
+    3540:	83 c0 30             	add    $0x30,%eax
+    3543:	88 45 ac             	mov    %al,-0x54(%ebp)
+    unlink(name);
+    3546:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3549:	50                   	push   %eax
+    354a:	e8 d2 03 00 00       	call   3921 <unlink>
+  while(nfiles >= 0){
+    354f:	83 c4 10             	add    $0x10,%esp
+    3552:	83 fe ff             	cmp    $0xffffffff,%esi
+    3555:	0f 85 75 ff ff ff    	jne    34d0 <fsfull+0x130>
+  printf(1, "fsfull test finished\n");
+    355b:	83 ec 08             	sub    $0x8,%esp
+    355e:	68 44 4d 00 00       	push   $0x4d44
+    3563:	6a 01                	push   $0x1
+    3565:	e8 d6 04 00 00       	call   3a40 <printf>
+}
+    356a:	83 c4 10             	add    $0x10,%esp
+    356d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3570:	5b                   	pop    %ebx
+    3571:	5e                   	pop    %esi
+    3572:	5f                   	pop    %edi
+    3573:	5d                   	pop    %ebp
+    3574:	c3                   	ret    
+    3575:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    357c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003580 <uio>:
+{
+    3580:	55                   	push   %ebp
+    3581:	89 e5                	mov    %esp,%ebp
+    3583:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "uio test\n");
+    3586:	68 5a 4d 00 00       	push   $0x4d5a
+    358b:	6a 01                	push   $0x1
+    358d:	e8 ae 04 00 00       	call   3a40 <printf>
+  pid = fork();
+    3592:	e8 32 03 00 00       	call   38c9 <fork>
+  if(pid == 0){
+    3597:	83 c4 10             	add    $0x10,%esp
+    359a:	85 c0                	test   %eax,%eax
+    359c:	74 1b                	je     35b9 <uio+0x39>
+  } else if(pid < 0){
+    359e:	78 3d                	js     35dd <uio+0x5d>
+  wait();
+    35a0:	e8 34 03 00 00       	call   38d9 <wait>
+  printf(1, "uio test done\n");
+    35a5:	83 ec 08             	sub    $0x8,%esp
+    35a8:	68 64 4d 00 00       	push   $0x4d64
+    35ad:	6a 01                	push   $0x1
+    35af:	e8 8c 04 00 00       	call   3a40 <printf>
+}
+    35b4:	83 c4 10             	add    $0x10,%esp
+    35b7:	c9                   	leave  
+    35b8:	c3                   	ret    
+    asm volatile("outb %0,%1"::"a"(val), "d" (port));
+    35b9:	b8 09 00 00 00       	mov    $0x9,%eax
+    35be:	ba 70 00 00 00       	mov    $0x70,%edx
+    35c3:	ee                   	out    %al,(%dx)
+    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
+    35c4:	ba 71 00 00 00       	mov    $0x71,%edx
+    35c9:	ec                   	in     (%dx),%al
+    printf(1, "uio: uio succeeded; test FAILED\n");
+    35ca:	52                   	push   %edx
+    35cb:	52                   	push   %edx
+    35cc:	68 f0 54 00 00       	push   $0x54f0
+    35d1:	6a 01                	push   $0x1
+    35d3:	e8 68 04 00 00       	call   3a40 <printf>
+    exit();
+    35d8:	e8 f4 02 00 00       	call   38d1 <exit>
+    printf (1, "fork failed\n");
+    35dd:	50                   	push   %eax
+    35de:	50                   	push   %eax
+    35df:	68 e9 4c 00 00       	push   $0x4ce9
+    35e4:	6a 01                	push   $0x1
+    35e6:	e8 55 04 00 00       	call   3a40 <printf>
+    exit();
+    35eb:	e8 e1 02 00 00       	call   38d1 <exit>
+
+000035f0 <argptest>:
+{
+    35f0:	55                   	push   %ebp
+    35f1:	89 e5                	mov    %esp,%ebp
+    35f3:	53                   	push   %ebx
+    35f4:	83 ec 0c             	sub    $0xc,%esp
+  fd = open("init", O_RDONLY);
+    35f7:	6a 00                	push   $0x0
+    35f9:	68 73 4d 00 00       	push   $0x4d73
+    35fe:	e8 0e 03 00 00       	call   3911 <open>
+  if (fd < 0) {
+    3603:	83 c4 10             	add    $0x10,%esp
+    3606:	85 c0                	test   %eax,%eax
+    3608:	78 39                	js     3643 <argptest+0x53>
+  read(fd, sbrk(0) - 1, -1);
+    360a:	83 ec 0c             	sub    $0xc,%esp
+    360d:	89 c3                	mov    %eax,%ebx
+    360f:	6a 00                	push   $0x0
+    3611:	e8 43 03 00 00       	call   3959 <sbrk>
+    3616:	83 c4 0c             	add    $0xc,%esp
+    3619:	83 e8 01             	sub    $0x1,%eax
+    361c:	6a ff                	push   $0xffffffff
+    361e:	50                   	push   %eax
+    361f:	53                   	push   %ebx
+    3620:	e8 c4 02 00 00       	call   38e9 <read>
+  close(fd);
+    3625:	89 1c 24             	mov    %ebx,(%esp)
+    3628:	e8 cc 02 00 00       	call   38f9 <close>
+  printf(1, "arg test passed\n");
+    362d:	58                   	pop    %eax
+    362e:	5a                   	pop    %edx
+    362f:	68 85 4d 00 00       	push   $0x4d85
+    3634:	6a 01                	push   $0x1
+    3636:	e8 05 04 00 00       	call   3a40 <printf>
+}
+    363b:	83 c4 10             	add    $0x10,%esp
+    363e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    3641:	c9                   	leave  
+    3642:	c3                   	ret    
+    printf(2, "open failed\n");
+    3643:	51                   	push   %ecx
+    3644:	51                   	push   %ecx
+    3645:	68 78 4d 00 00       	push   $0x4d78
+    364a:	6a 02                	push   $0x2
+    364c:	e8 ef 03 00 00       	call   3a40 <printf>
+    exit();
+    3651:	e8 7b 02 00 00       	call   38d1 <exit>
+    3656:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    365d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00003660 <rand>:
+  randstate = randstate * 1664525 + 1013904223;
+    3660:	69 05 3c 5e 00 00 0d 	imul   $0x19660d,0x5e3c,%eax
+    3667:	66 19 00 
+    366a:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
+    366f:	a3 3c 5e 00 00       	mov    %eax,0x5e3c
+}
+    3674:	c3                   	ret    
+    3675:	66 90                	xchg   %ax,%ax
+    3677:	66 90                	xchg   %ax,%ax
+    3679:	66 90                	xchg   %ax,%ax
+    367b:	66 90                	xchg   %ax,%ax
+    367d:	66 90                	xchg   %ax,%ax
+    367f:	90                   	nop
+
+00003680 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+    3680:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+    3681:	31 d2                	xor    %edx,%edx
+{
+    3683:	89 e5                	mov    %esp,%ebp
+    3685:	53                   	push   %ebx
+    3686:	8b 45 08             	mov    0x8(%ebp),%eax
+    3689:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+    368c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+    3690:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+    3694:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+    3697:	83 c2 01             	add    $0x1,%edx
+    369a:	84 c9                	test   %cl,%cl
+    369c:	75 f2                	jne    3690 <strcpy+0x10>
+    ;
+  return os;
+}
+    369e:	5b                   	pop    %ebx
+    369f:	5d                   	pop    %ebp
+    36a0:	c3                   	ret    
+    36a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    36a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    36af:	90                   	nop
+
+000036b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+    36b0:	55                   	push   %ebp
+    36b1:	89 e5                	mov    %esp,%ebp
+    36b3:	56                   	push   %esi
+    36b4:	53                   	push   %ebx
+    36b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    36b8:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+    36bb:	0f b6 13             	movzbl (%ebx),%edx
+    36be:	0f b6 0e             	movzbl (%esi),%ecx
+    36c1:	84 d2                	test   %dl,%dl
+    36c3:	74 1e                	je     36e3 <strcmp+0x33>
+    36c5:	b8 01 00 00 00       	mov    $0x1,%eax
+    36ca:	38 ca                	cmp    %cl,%dl
+    36cc:	74 09                	je     36d7 <strcmp+0x27>
+    36ce:	eb 20                	jmp    36f0 <strcmp+0x40>
+    36d0:	83 c0 01             	add    $0x1,%eax
+    36d3:	38 ca                	cmp    %cl,%dl
+    36d5:	75 19                	jne    36f0 <strcmp+0x40>
+    36d7:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+    36db:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+    36df:	84 d2                	test   %dl,%dl
+    36e1:	75 ed                	jne    36d0 <strcmp+0x20>
+    36e3:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+    36e5:	5b                   	pop    %ebx
+    36e6:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+    36e7:	29 c8                	sub    %ecx,%eax
+}
+    36e9:	5d                   	pop    %ebp
+    36ea:	c3                   	ret    
+    36eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    36ef:	90                   	nop
+    36f0:	0f b6 c2             	movzbl %dl,%eax
+    36f3:	5b                   	pop    %ebx
+    36f4:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+    36f5:	29 c8                	sub    %ecx,%eax
+}
+    36f7:	5d                   	pop    %ebp
+    36f8:	c3                   	ret    
+    36f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00003700 <strlen>:
+
+uint
+strlen(const char *s)
+{
+    3700:	55                   	push   %ebp
+    3701:	89 e5                	mov    %esp,%ebp
+    3703:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+    3706:	80 39 00             	cmpb   $0x0,(%ecx)
+    3709:	74 15                	je     3720 <strlen+0x20>
+    370b:	31 d2                	xor    %edx,%edx
+    370d:	8d 76 00             	lea    0x0(%esi),%esi
+    3710:	83 c2 01             	add    $0x1,%edx
+    3713:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+    3717:	89 d0                	mov    %edx,%eax
+    3719:	75 f5                	jne    3710 <strlen+0x10>
+    ;
+  return n;
+}
+    371b:	5d                   	pop    %ebp
+    371c:	c3                   	ret    
+    371d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+    3720:	31 c0                	xor    %eax,%eax
+}
+    3722:	5d                   	pop    %ebp
+    3723:	c3                   	ret    
+    3724:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    372b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    372f:	90                   	nop
+
+00003730 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+    3730:	55                   	push   %ebp
+    3731:	89 e5                	mov    %esp,%ebp
+    3733:	57                   	push   %edi
+    3734:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    3737:	8b 4d 10             	mov    0x10(%ebp),%ecx
+    373a:	8b 45 0c             	mov    0xc(%ebp),%eax
+    373d:	89 d7                	mov    %edx,%edi
+    373f:	fc                   	cld    
+    3740:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+    3742:	89 d0                	mov    %edx,%eax
+    3744:	5f                   	pop    %edi
+    3745:	5d                   	pop    %ebp
+    3746:	c3                   	ret    
+    3747:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    374e:	66 90                	xchg   %ax,%ax
+
+00003750 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+    3750:	55                   	push   %ebp
+    3751:	89 e5                	mov    %esp,%ebp
+    3753:	53                   	push   %ebx
+    3754:	8b 45 08             	mov    0x8(%ebp),%eax
+    3757:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+    375a:	0f b6 18             	movzbl (%eax),%ebx
+    375d:	84 db                	test   %bl,%bl
+    375f:	74 1d                	je     377e <strchr+0x2e>
+    3761:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+    3763:	38 d3                	cmp    %dl,%bl
+    3765:	75 0d                	jne    3774 <strchr+0x24>
+    3767:	eb 17                	jmp    3780 <strchr+0x30>
+    3769:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3770:	38 ca                	cmp    %cl,%dl
+    3772:	74 0c                	je     3780 <strchr+0x30>
+  for(; *s; s++)
+    3774:	83 c0 01             	add    $0x1,%eax
+    3777:	0f b6 10             	movzbl (%eax),%edx
+    377a:	84 d2                	test   %dl,%dl
+    377c:	75 f2                	jne    3770 <strchr+0x20>
+      return (char*)s;
+  return 0;
+    377e:	31 c0                	xor    %eax,%eax
+}
+    3780:	5b                   	pop    %ebx
+    3781:	5d                   	pop    %ebp
+    3782:	c3                   	ret    
+    3783:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    378a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003790 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+    3790:	55                   	push   %ebp
+    3791:	89 e5                	mov    %esp,%ebp
+    3793:	57                   	push   %edi
+    3794:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    3795:	31 f6                	xor    %esi,%esi
+{
+    3797:	53                   	push   %ebx
+    3798:	89 f3                	mov    %esi,%ebx
+    379a:	83 ec 1c             	sub    $0x1c,%esp
+    379d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+    37a0:	eb 2f                	jmp    37d1 <gets+0x41>
+    37a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+    37a8:	83 ec 04             	sub    $0x4,%esp
+    37ab:	8d 45 e7             	lea    -0x19(%ebp),%eax
+    37ae:	6a 01                	push   $0x1
+    37b0:	50                   	push   %eax
+    37b1:	6a 00                	push   $0x0
+    37b3:	e8 31 01 00 00       	call   38e9 <read>
+    if(cc < 1)
+    37b8:	83 c4 10             	add    $0x10,%esp
+    37bb:	85 c0                	test   %eax,%eax
+    37bd:	7e 1c                	jle    37db <gets+0x4b>
+      break;
+    buf[i++] = c;
+    37bf:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+    37c3:	83 c7 01             	add    $0x1,%edi
+    37c6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+    37c9:	3c 0a                	cmp    $0xa,%al
+    37cb:	74 23                	je     37f0 <gets+0x60>
+    37cd:	3c 0d                	cmp    $0xd,%al
+    37cf:	74 1f                	je     37f0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+    37d1:	83 c3 01             	add    $0x1,%ebx
+    37d4:	89 fe                	mov    %edi,%esi
+    37d6:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+    37d9:	7c cd                	jl     37a8 <gets+0x18>
+    37db:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+    37dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+    37e0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+    37e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    37e6:	5b                   	pop    %ebx
+    37e7:	5e                   	pop    %esi
+    37e8:	5f                   	pop    %edi
+    37e9:	5d                   	pop    %ebp
+    37ea:	c3                   	ret    
+    37eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    37ef:	90                   	nop
+    37f0:	8b 75 08             	mov    0x8(%ebp),%esi
+    37f3:	8b 45 08             	mov    0x8(%ebp),%eax
+    37f6:	01 de                	add    %ebx,%esi
+    37f8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+    37fa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+    37fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3800:	5b                   	pop    %ebx
+    3801:	5e                   	pop    %esi
+    3802:	5f                   	pop    %edi
+    3803:	5d                   	pop    %ebp
+    3804:	c3                   	ret    
+    3805:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    380c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003810 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+    3810:	55                   	push   %ebp
+    3811:	89 e5                	mov    %esp,%ebp
+    3813:	56                   	push   %esi
+    3814:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+    3815:	83 ec 08             	sub    $0x8,%esp
+    3818:	6a 00                	push   $0x0
+    381a:	ff 75 08             	pushl  0x8(%ebp)
+    381d:	e8 ef 00 00 00       	call   3911 <open>
+  if(fd < 0)
+    3822:	83 c4 10             	add    $0x10,%esp
+    3825:	85 c0                	test   %eax,%eax
+    3827:	78 27                	js     3850 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+    3829:	83 ec 08             	sub    $0x8,%esp
+    382c:	ff 75 0c             	pushl  0xc(%ebp)
+    382f:	89 c3                	mov    %eax,%ebx
+    3831:	50                   	push   %eax
+    3832:	e8 f2 00 00 00       	call   3929 <fstat>
+  close(fd);
+    3837:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+    383a:	89 c6                	mov    %eax,%esi
+  close(fd);
+    383c:	e8 b8 00 00 00       	call   38f9 <close>
+  return r;
+    3841:	83 c4 10             	add    $0x10,%esp
+}
+    3844:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    3847:	89 f0                	mov    %esi,%eax
+    3849:	5b                   	pop    %ebx
+    384a:	5e                   	pop    %esi
+    384b:	5d                   	pop    %ebp
+    384c:	c3                   	ret    
+    384d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+    3850:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    3855:	eb ed                	jmp    3844 <stat+0x34>
+    3857:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    385e:	66 90                	xchg   %ax,%ax
+
+00003860 <atoi>:
+
+int
+atoi(const char *s)
+{
+    3860:	55                   	push   %ebp
+    3861:	89 e5                	mov    %esp,%ebp
+    3863:	53                   	push   %ebx
+    3864:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    3867:	0f be 11             	movsbl (%ecx),%edx
+    386a:	8d 42 d0             	lea    -0x30(%edx),%eax
+    386d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+    386f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+    3874:	77 1f                	ja     3895 <atoi+0x35>
+    3876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    387d:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+    3880:	83 c1 01             	add    $0x1,%ecx
+    3883:	8d 04 80             	lea    (%eax,%eax,4),%eax
+    3886:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+    388a:	0f be 11             	movsbl (%ecx),%edx
+    388d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+    3890:	80 fb 09             	cmp    $0x9,%bl
+    3893:	76 eb                	jbe    3880 <atoi+0x20>
+  return n;
+}
+    3895:	5b                   	pop    %ebx
+    3896:	5d                   	pop    %ebp
+    3897:	c3                   	ret    
+    3898:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    389f:	90                   	nop
+
+000038a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+    38a0:	55                   	push   %ebp
+    38a1:	89 e5                	mov    %esp,%ebp
+    38a3:	57                   	push   %edi
+    38a4:	8b 55 10             	mov    0x10(%ebp),%edx
+    38a7:	8b 45 08             	mov    0x8(%ebp),%eax
+    38aa:	56                   	push   %esi
+    38ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+    38ae:	85 d2                	test   %edx,%edx
+    38b0:	7e 13                	jle    38c5 <memmove+0x25>
+    38b2:	01 c2                	add    %eax,%edx
+  dst = vdst;
+    38b4:	89 c7                	mov    %eax,%edi
+    38b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    38bd:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+    38c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+    38c1:	39 fa                	cmp    %edi,%edx
+    38c3:	75 fb                	jne    38c0 <memmove+0x20>
+  return vdst;
+}
+    38c5:	5e                   	pop    %esi
+    38c6:	5f                   	pop    %edi
+    38c7:	5d                   	pop    %ebp
+    38c8:	c3                   	ret    
+
+000038c9 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+    38c9:	b8 01 00 00 00       	mov    $0x1,%eax
+    38ce:	cd 40                	int    $0x40
+    38d0:	c3                   	ret    
+
+000038d1 <exit>:
+SYSCALL(exit)
+    38d1:	b8 02 00 00 00       	mov    $0x2,%eax
+    38d6:	cd 40                	int    $0x40
+    38d8:	c3                   	ret    
+
+000038d9 <wait>:
+SYSCALL(wait)
+    38d9:	b8 03 00 00 00       	mov    $0x3,%eax
+    38de:	cd 40                	int    $0x40
+    38e0:	c3                   	ret    
+
+000038e1 <pipe>:
+SYSCALL(pipe)
+    38e1:	b8 04 00 00 00       	mov    $0x4,%eax
+    38e6:	cd 40                	int    $0x40
+    38e8:	c3                   	ret    
+
+000038e9 <read>:
+SYSCALL(read)
+    38e9:	b8 05 00 00 00       	mov    $0x5,%eax
+    38ee:	cd 40                	int    $0x40
+    38f0:	c3                   	ret    
+
+000038f1 <write>:
+SYSCALL(write)
+    38f1:	b8 10 00 00 00       	mov    $0x10,%eax
+    38f6:	cd 40                	int    $0x40
+    38f8:	c3                   	ret    
+
+000038f9 <close>:
+SYSCALL(close)
+    38f9:	b8 15 00 00 00       	mov    $0x15,%eax
+    38fe:	cd 40                	int    $0x40
+    3900:	c3                   	ret    
+
+00003901 <kill>:
+SYSCALL(kill)
+    3901:	b8 06 00 00 00       	mov    $0x6,%eax
+    3906:	cd 40                	int    $0x40
+    3908:	c3                   	ret    
+
+00003909 <exec>:
+SYSCALL(exec)
+    3909:	b8 07 00 00 00       	mov    $0x7,%eax
+    390e:	cd 40                	int    $0x40
+    3910:	c3                   	ret    
+
+00003911 <open>:
+SYSCALL(open)
+    3911:	b8 0f 00 00 00       	mov    $0xf,%eax
+    3916:	cd 40                	int    $0x40
+    3918:	c3                   	ret    
+
+00003919 <mknod>:
+SYSCALL(mknod)
+    3919:	b8 11 00 00 00       	mov    $0x11,%eax
+    391e:	cd 40                	int    $0x40
+    3920:	c3                   	ret    
+
+00003921 <unlink>:
+SYSCALL(unlink)
+    3921:	b8 12 00 00 00       	mov    $0x12,%eax
+    3926:	cd 40                	int    $0x40
+    3928:	c3                   	ret    
+
+00003929 <fstat>:
+SYSCALL(fstat)
+    3929:	b8 08 00 00 00       	mov    $0x8,%eax
+    392e:	cd 40                	int    $0x40
+    3930:	c3                   	ret    
+
+00003931 <link>:
+SYSCALL(link)
+    3931:	b8 13 00 00 00       	mov    $0x13,%eax
+    3936:	cd 40                	int    $0x40
+    3938:	c3                   	ret    
+
+00003939 <mkdir>:
+SYSCALL(mkdir)
+    3939:	b8 14 00 00 00       	mov    $0x14,%eax
+    393e:	cd 40                	int    $0x40
+    3940:	c3                   	ret    
+
+00003941 <chdir>:
+SYSCALL(chdir)
+    3941:	b8 09 00 00 00       	mov    $0x9,%eax
+    3946:	cd 40                	int    $0x40
+    3948:	c3                   	ret    
+
+00003949 <dup>:
+SYSCALL(dup)
+    3949:	b8 0a 00 00 00       	mov    $0xa,%eax
+    394e:	cd 40                	int    $0x40
+    3950:	c3                   	ret    
+
+00003951 <getpid>:
+SYSCALL(getpid)
+    3951:	b8 0b 00 00 00       	mov    $0xb,%eax
+    3956:	cd 40                	int    $0x40
+    3958:	c3                   	ret    
+
+00003959 <sbrk>:
+SYSCALL(sbrk)
+    3959:	b8 0c 00 00 00       	mov    $0xc,%eax
+    395e:	cd 40                	int    $0x40
+    3960:	c3                   	ret    
+
+00003961 <sleep>:
+SYSCALL(sleep)
+    3961:	b8 0d 00 00 00       	mov    $0xd,%eax
+    3966:	cd 40                	int    $0x40
+    3968:	c3                   	ret    
+
+00003969 <uptime>:
+SYSCALL(uptime)
+    3969:	b8 0e 00 00 00       	mov    $0xe,%eax
+    396e:	cd 40                	int    $0x40
+    3970:	c3                   	ret    
+    3971:	66 90                	xchg   %ax,%ax
+    3973:	66 90                	xchg   %ax,%ax
+    3975:	66 90                	xchg   %ax,%ax
+    3977:	66 90                	xchg   %ax,%ax
+    3979:	66 90                	xchg   %ax,%ax
+    397b:	66 90                	xchg   %ax,%ax
+    397d:	66 90                	xchg   %ax,%ax
+    397f:	90                   	nop
+
+00003980 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+    3980:	55                   	push   %ebp
+    3981:	89 e5                	mov    %esp,%ebp
+    3983:	57                   	push   %edi
+    3984:	56                   	push   %esi
+    3985:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+    3986:	89 d3                	mov    %edx,%ebx
+{
+    3988:	83 ec 3c             	sub    $0x3c,%esp
+    398b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+    398e:	85 d2                	test   %edx,%edx
+    3990:	0f 89 92 00 00 00    	jns    3a28 <printint+0xa8>
+    3996:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+    399a:	0f 84 88 00 00 00    	je     3a28 <printint+0xa8>
+    neg = 1;
+    39a0:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+    39a7:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+    39a9:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+    39b0:	8d 75 d7             	lea    -0x29(%ebp),%esi
+    39b3:	eb 08                	jmp    39bd <printint+0x3d>
+    39b5:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+    39b8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+    39bb:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+    39bd:	89 d8                	mov    %ebx,%eax
+    39bf:	31 d2                	xor    %edx,%edx
+    39c1:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+    39c4:	f7 f1                	div    %ecx
+    39c6:	83 c7 01             	add    $0x1,%edi
+    39c9:	0f b6 92 48 55 00 00 	movzbl 0x5548(%edx),%edx
+    39d0:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+    39d3:	39 d9                	cmp    %ebx,%ecx
+    39d5:	76 e1                	jbe    39b8 <printint+0x38>
+  if(neg)
+    39d7:	8b 45 c0             	mov    -0x40(%ebp),%eax
+    39da:	85 c0                	test   %eax,%eax
+    39dc:	74 0d                	je     39eb <printint+0x6b>
+    buf[i++] = '-';
+    39de:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+    39e3:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+    39e8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+    39eb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+    39ee:	8b 7d bc             	mov    -0x44(%ebp),%edi
+    39f1:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+    39f5:	eb 0f                	jmp    3a06 <printint+0x86>
+    39f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    39fe:	66 90                	xchg   %ax,%ax
+    3a00:	0f b6 13             	movzbl (%ebx),%edx
+    3a03:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+    3a06:	83 ec 04             	sub    $0x4,%esp
+    3a09:	88 55 d7             	mov    %dl,-0x29(%ebp)
+    3a0c:	6a 01                	push   $0x1
+    3a0e:	56                   	push   %esi
+    3a0f:	57                   	push   %edi
+    3a10:	e8 dc fe ff ff       	call   38f1 <write>
+
+  while(--i >= 0)
+    3a15:	83 c4 10             	add    $0x10,%esp
+    3a18:	39 de                	cmp    %ebx,%esi
+    3a1a:	75 e4                	jne    3a00 <printint+0x80>
+    putc(fd, buf[i]);
+}
+    3a1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3a1f:	5b                   	pop    %ebx
+    3a20:	5e                   	pop    %esi
+    3a21:	5f                   	pop    %edi
+    3a22:	5d                   	pop    %ebp
+    3a23:	c3                   	ret    
+    3a24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+    3a28:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+    3a2f:	e9 75 ff ff ff       	jmp    39a9 <printint+0x29>
+    3a34:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3a3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3a3f:	90                   	nop
+
+00003a40 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+    3a40:	55                   	push   %ebp
+    3a41:	89 e5                	mov    %esp,%ebp
+    3a43:	57                   	push   %edi
+    3a44:	56                   	push   %esi
+    3a45:	53                   	push   %ebx
+    3a46:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    3a49:	8b 75 0c             	mov    0xc(%ebp),%esi
+    3a4c:	0f b6 1e             	movzbl (%esi),%ebx
+    3a4f:	84 db                	test   %bl,%bl
+    3a51:	0f 84 b9 00 00 00    	je     3b10 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+    3a57:	8d 45 10             	lea    0x10(%ebp),%eax
+    3a5a:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+    3a5d:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+    3a60:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+    3a62:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3a65:	eb 38                	jmp    3a9f <printf+0x5f>
+    3a67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3a6e:	66 90                	xchg   %ax,%ax
+    3a70:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+    3a73:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+    3a78:	83 f8 25             	cmp    $0x25,%eax
+    3a7b:	74 17                	je     3a94 <printf+0x54>
+  write(fd, &c, 1);
+    3a7d:	83 ec 04             	sub    $0x4,%esp
+    3a80:	88 5d e7             	mov    %bl,-0x19(%ebp)
+    3a83:	6a 01                	push   $0x1
+    3a85:	57                   	push   %edi
+    3a86:	ff 75 08             	pushl  0x8(%ebp)
+    3a89:	e8 63 fe ff ff       	call   38f1 <write>
+    3a8e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+    3a91:	83 c4 10             	add    $0x10,%esp
+    3a94:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+    3a97:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+    3a9b:	84 db                	test   %bl,%bl
+    3a9d:	74 71                	je     3b10 <printf+0xd0>
+    c = fmt[i] & 0xff;
+    3a9f:	0f be cb             	movsbl %bl,%ecx
+    3aa2:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+    3aa5:	85 d2                	test   %edx,%edx
+    3aa7:	74 c7                	je     3a70 <printf+0x30>
+      }
+    } else if(state == '%'){
+    3aa9:	83 fa 25             	cmp    $0x25,%edx
+    3aac:	75 e6                	jne    3a94 <printf+0x54>
+      if(c == 'd'){
+    3aae:	83 f8 64             	cmp    $0x64,%eax
+    3ab1:	0f 84 99 00 00 00    	je     3b50 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+    3ab7:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+    3abd:	83 f9 70             	cmp    $0x70,%ecx
+    3ac0:	74 5e                	je     3b20 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+    3ac2:	83 f8 73             	cmp    $0x73,%eax
+    3ac5:	0f 84 d5 00 00 00    	je     3ba0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+    3acb:	83 f8 63             	cmp    $0x63,%eax
+    3ace:	0f 84 8c 00 00 00    	je     3b60 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+    3ad4:	83 f8 25             	cmp    $0x25,%eax
+    3ad7:	0f 84 b3 00 00 00    	je     3b90 <printf+0x150>
+  write(fd, &c, 1);
+    3add:	83 ec 04             	sub    $0x4,%esp
+    3ae0:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    3ae4:	6a 01                	push   $0x1
+    3ae6:	57                   	push   %edi
+    3ae7:	ff 75 08             	pushl  0x8(%ebp)
+    3aea:	e8 02 fe ff ff       	call   38f1 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+    3aef:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+    3af2:	83 c4 0c             	add    $0xc,%esp
+    3af5:	6a 01                	push   $0x1
+    3af7:	83 c6 01             	add    $0x1,%esi
+    3afa:	57                   	push   %edi
+    3afb:	ff 75 08             	pushl  0x8(%ebp)
+    3afe:	e8 ee fd ff ff       	call   38f1 <write>
+  for(i = 0; fmt[i]; i++){
+    3b03:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+    3b07:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+    3b0a:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+    3b0c:	84 db                	test   %bl,%bl
+    3b0e:	75 8f                	jne    3a9f <printf+0x5f>
+    }
+  }
+}
+    3b10:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3b13:	5b                   	pop    %ebx
+    3b14:	5e                   	pop    %esi
+    3b15:	5f                   	pop    %edi
+    3b16:	5d                   	pop    %ebp
+    3b17:	c3                   	ret    
+    3b18:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3b1f:	90                   	nop
+        printint(fd, *ap, 16, 0);
+    3b20:	83 ec 0c             	sub    $0xc,%esp
+    3b23:	b9 10 00 00 00       	mov    $0x10,%ecx
+    3b28:	6a 00                	push   $0x0
+    3b2a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    3b2d:	8b 45 08             	mov    0x8(%ebp),%eax
+    3b30:	8b 13                	mov    (%ebx),%edx
+    3b32:	e8 49 fe ff ff       	call   3980 <printint>
+        ap++;
+    3b37:	89 d8                	mov    %ebx,%eax
+    3b39:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3b3c:	31 d2                	xor    %edx,%edx
+        ap++;
+    3b3e:	83 c0 04             	add    $0x4,%eax
+    3b41:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3b44:	e9 4b ff ff ff       	jmp    3a94 <printf+0x54>
+    3b49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+    3b50:	83 ec 0c             	sub    $0xc,%esp
+    3b53:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    3b58:	6a 01                	push   $0x1
+    3b5a:	eb ce                	jmp    3b2a <printf+0xea>
+    3b5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+    3b60:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+    3b63:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    3b66:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+    3b68:	6a 01                	push   $0x1
+        ap++;
+    3b6a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+    3b6d:	57                   	push   %edi
+    3b6e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+    3b71:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    3b74:	e8 78 fd ff ff       	call   38f1 <write>
+        ap++;
+    3b79:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+    3b7c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3b7f:	31 d2                	xor    %edx,%edx
+    3b81:	e9 0e ff ff ff       	jmp    3a94 <printf+0x54>
+    3b86:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3b8d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+    3b90:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+    3b93:	83 ec 04             	sub    $0x4,%esp
+    3b96:	e9 5a ff ff ff       	jmp    3af5 <printf+0xb5>
+    3b9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3b9f:	90                   	nop
+        s = (char*)*ap;
+    3ba0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    3ba3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+    3ba5:	83 c0 04             	add    $0x4,%eax
+    3ba8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+    3bab:	85 db                	test   %ebx,%ebx
+    3bad:	74 17                	je     3bc6 <printf+0x186>
+        while(*s != 0){
+    3baf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+    3bb2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+    3bb4:	84 c0                	test   %al,%al
+    3bb6:	0f 84 d8 fe ff ff    	je     3a94 <printf+0x54>
+    3bbc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    3bbf:	89 de                	mov    %ebx,%esi
+    3bc1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3bc4:	eb 1a                	jmp    3be0 <printf+0x1a0>
+          s = "(null)";
+    3bc6:	bb 40 55 00 00       	mov    $0x5540,%ebx
+        while(*s != 0){
+    3bcb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    3bce:	b8 28 00 00 00       	mov    $0x28,%eax
+    3bd3:	89 de                	mov    %ebx,%esi
+    3bd5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3bd8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3bdf:	90                   	nop
+  write(fd, &c, 1);
+    3be0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    3be3:	83 c6 01             	add    $0x1,%esi
+    3be6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    3be9:	6a 01                	push   $0x1
+    3beb:	57                   	push   %edi
+    3bec:	53                   	push   %ebx
+    3bed:	e8 ff fc ff ff       	call   38f1 <write>
+        while(*s != 0){
+    3bf2:	0f b6 06             	movzbl (%esi),%eax
+    3bf5:	83 c4 10             	add    $0x10,%esp
+    3bf8:	84 c0                	test   %al,%al
+    3bfa:	75 e4                	jne    3be0 <printf+0x1a0>
+    3bfc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+    3bff:	31 d2                	xor    %edx,%edx
+    3c01:	e9 8e fe ff ff       	jmp    3a94 <printf+0x54>
+    3c06:	66 90                	xchg   %ax,%ax
+    3c08:	66 90                	xchg   %ax,%ax
+    3c0a:	66 90                	xchg   %ax,%ax
+    3c0c:	66 90                	xchg   %ax,%ax
+    3c0e:	66 90                	xchg   %ax,%ax
+
+00003c10 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    3c10:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3c11:	a1 e0 5e 00 00       	mov    0x5ee0,%eax
+{
+    3c16:	89 e5                	mov    %esp,%ebp
+    3c18:	57                   	push   %edi
+    3c19:	56                   	push   %esi
+    3c1a:	53                   	push   %ebx
+    3c1b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3c1e:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+    3c20:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3c23:	39 c8                	cmp    %ecx,%eax
+    3c25:	73 19                	jae    3c40 <free+0x30>
+    3c27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3c2e:	66 90                	xchg   %ax,%ax
+    3c30:	39 d1                	cmp    %edx,%ecx
+    3c32:	72 14                	jb     3c48 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3c34:	39 d0                	cmp    %edx,%eax
+    3c36:	73 10                	jae    3c48 <free+0x38>
+{
+    3c38:	89 d0                	mov    %edx,%eax
+    3c3a:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3c3c:	39 c8                	cmp    %ecx,%eax
+    3c3e:	72 f0                	jb     3c30 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3c40:	39 d0                	cmp    %edx,%eax
+    3c42:	72 f4                	jb     3c38 <free+0x28>
+    3c44:	39 d1                	cmp    %edx,%ecx
+    3c46:	73 f0                	jae    3c38 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    3c48:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    3c4b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    3c4e:	39 fa                	cmp    %edi,%edx
+    3c50:	74 1e                	je     3c70 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    3c52:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3c55:	8b 50 04             	mov    0x4(%eax),%edx
+    3c58:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3c5b:	39 f1                	cmp    %esi,%ecx
+    3c5d:	74 28                	je     3c87 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    3c5f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+    3c61:	5b                   	pop    %ebx
+  freep = p;
+    3c62:	a3 e0 5e 00 00       	mov    %eax,0x5ee0
+}
+    3c67:	5e                   	pop    %esi
+    3c68:	5f                   	pop    %edi
+    3c69:	5d                   	pop    %ebp
+    3c6a:	c3                   	ret    
+    3c6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3c6f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+    3c70:	03 72 04             	add    0x4(%edx),%esi
+    3c73:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    3c76:	8b 10                	mov    (%eax),%edx
+    3c78:	8b 12                	mov    (%edx),%edx
+    3c7a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3c7d:	8b 50 04             	mov    0x4(%eax),%edx
+    3c80:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3c83:	39 f1                	cmp    %esi,%ecx
+    3c85:	75 d8                	jne    3c5f <free+0x4f>
+    p->s.size += bp->s.size;
+    3c87:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+    3c8a:	a3 e0 5e 00 00       	mov    %eax,0x5ee0
+    p->s.size += bp->s.size;
+    3c8f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    3c92:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    3c95:	89 10                	mov    %edx,(%eax)
+}
+    3c97:	5b                   	pop    %ebx
+    3c98:	5e                   	pop    %esi
+    3c99:	5f                   	pop    %edi
+    3c9a:	5d                   	pop    %ebp
+    3c9b:	c3                   	ret    
+    3c9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003ca0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    3ca0:	55                   	push   %ebp
+    3ca1:	89 e5                	mov    %esp,%ebp
+    3ca3:	57                   	push   %edi
+    3ca4:	56                   	push   %esi
+    3ca5:	53                   	push   %ebx
+    3ca6:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3ca9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    3cac:	8b 3d e0 5e 00 00    	mov    0x5ee0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3cb2:	8d 70 07             	lea    0x7(%eax),%esi
+    3cb5:	c1 ee 03             	shr    $0x3,%esi
+    3cb8:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+    3cbb:	85 ff                	test   %edi,%edi
+    3cbd:	0f 84 ad 00 00 00    	je     3d70 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3cc3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+    3cc5:	8b 4a 04             	mov    0x4(%edx),%ecx
+    3cc8:	39 f1                	cmp    %esi,%ecx
+    3cca:	73 72                	jae    3d3e <malloc+0x9e>
+    3ccc:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    3cd2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    3cd7:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    3cda:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+    3ce1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    3ce4:	eb 1b                	jmp    3d01 <malloc+0x61>
+    3ce6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3ced:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3cf0:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+    3cf2:	8b 48 04             	mov    0x4(%eax),%ecx
+    3cf5:	39 f1                	cmp    %esi,%ecx
+    3cf7:	73 4f                	jae    3d48 <malloc+0xa8>
+    3cf9:	8b 3d e0 5e 00 00    	mov    0x5ee0,%edi
+    3cff:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    3d01:	39 d7                	cmp    %edx,%edi
+    3d03:	75 eb                	jne    3cf0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+    3d05:	83 ec 0c             	sub    $0xc,%esp
+    3d08:	ff 75 e4             	pushl  -0x1c(%ebp)
+    3d0b:	e8 49 fc ff ff       	call   3959 <sbrk>
+  if(p == (char*)-1)
+    3d10:	83 c4 10             	add    $0x10,%esp
+    3d13:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3d16:	74 1c                	je     3d34 <malloc+0x94>
+  hp->s.size = nu;
+    3d18:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    3d1b:	83 ec 0c             	sub    $0xc,%esp
+    3d1e:	83 c0 08             	add    $0x8,%eax
+    3d21:	50                   	push   %eax
+    3d22:	e8 e9 fe ff ff       	call   3c10 <free>
+  return freep;
+    3d27:	8b 15 e0 5e 00 00    	mov    0x5ee0,%edx
+      if((p = morecore(nunits)) == 0)
+    3d2d:	83 c4 10             	add    $0x10,%esp
+    3d30:	85 d2                	test   %edx,%edx
+    3d32:	75 bc                	jne    3cf0 <malloc+0x50>
+        return 0;
+  }
+}
+    3d34:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    3d37:	31 c0                	xor    %eax,%eax
+}
+    3d39:	5b                   	pop    %ebx
+    3d3a:	5e                   	pop    %esi
+    3d3b:	5f                   	pop    %edi
+    3d3c:	5d                   	pop    %ebp
+    3d3d:	c3                   	ret    
+    if(p->s.size >= nunits){
+    3d3e:	89 d0                	mov    %edx,%eax
+    3d40:	89 fa                	mov    %edi,%edx
+    3d42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+    3d48:	39 ce                	cmp    %ecx,%esi
+    3d4a:	74 54                	je     3da0 <malloc+0x100>
+        p->s.size -= nunits;
+    3d4c:	29 f1                	sub    %esi,%ecx
+    3d4e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+    3d51:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+    3d54:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+    3d57:	89 15 e0 5e 00 00    	mov    %edx,0x5ee0
+}
+    3d5d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    3d60:	83 c0 08             	add    $0x8,%eax
+}
+    3d63:	5b                   	pop    %ebx
+    3d64:	5e                   	pop    %esi
+    3d65:	5f                   	pop    %edi
+    3d66:	5d                   	pop    %ebp
+    3d67:	c3                   	ret    
+    3d68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3d6f:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+    3d70:	c7 05 e0 5e 00 00 e4 	movl   $0x5ee4,0x5ee0
+    3d77:	5e 00 00 
+    base.s.size = 0;
+    3d7a:	bf e4 5e 00 00       	mov    $0x5ee4,%edi
+    base.s.ptr = freep = prevp = &base;
+    3d7f:	c7 05 e4 5e 00 00 e4 	movl   $0x5ee4,0x5ee4
+    3d86:	5e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3d89:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+    3d8b:	c7 05 e8 5e 00 00 00 	movl   $0x0,0x5ee8
+    3d92:	00 00 00 
+    if(p->s.size >= nunits){
+    3d95:	e9 32 ff ff ff       	jmp    3ccc <malloc+0x2c>
+    3d9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+    3da0:	8b 08                	mov    (%eax),%ecx
+    3da2:	89 0a                	mov    %ecx,(%edx)
+    3da4:	eb b1                	jmp    3d57 <malloc+0xb7>
diff -urN xv6-public/usertests.d xv6-public-new/usertests.d
--- xv6-public/usertests.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/usertests.d	2019-10-04 10:45:49.280028910 +0530
@@ -0,0 +1,2 @@
+usertests.o: usertests.c /usr/include/stdc-predef.h param.h types.h \
+ stat.h user.h fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files xv6-public/usertests.o and xv6-public-new/usertests.o differ
diff -urN xv6-public/usertests.sym xv6-public-new/usertests.sym
--- xv6-public/usertests.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/usertests.sym	2019-10-04 10:45:49.316028912 +0530
@@ -0,0 +1,103 @@
+00000000 .text
+00003da8 .rodata
+0000555c .eh_frame
+00005e3c .data
+00005e60 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 usertests.c
+00005e60 args.1465
+00000000 ulib.c
+00000000 printf.c
+00003980 printint
+00005548 digits.1101
+00000000 umalloc.c
+00005ee0 freep
+00005ee4 base
+00003680 strcpy
+00000d10 exitwait
+00003a40 printf
+00005e40 stdout
+000032a0 bigargtest
+000038a0 memmove
+00000300 openiputtest
+00003919 mknod
+00003790 gets
+00003951 getpid
+00000a20 pipe1
+00002b70 iref
+00003ca0 malloc
+00003961 sleep
+00000200 exitiputtest
+000033a0 fsfull
+00001bf0 bigdir
+00002c90 forktest
+00000670 writetest1
+00002400 bigwrite
+00000e60 sharedfd
+00005e3c randstate
+000038e1 pipe
+00005f00 uninit
+00002970 dirfile
+000038f1 write
+00003220 bsstest
+00005e44 echoargv
+00003929 fstat
+00003901 kill
+00003170 validatetest
+000027f0 rmdot
+00003941 chdir
+000009d0 exectest
+00003909 exec
+000038d9 wait
+00003660 rand
+000038e9 read
+00000bb0 preempt
+00003921 unlink
+000035f0 argptest
+00000d90 mem
+000038c9 fork
+00003959 sbrk
+00003969 uptime
+00005e58 __bss_start
+00003730 memset
+00000840 createtest
+00000000 main
+00001220 createdelete
+000036b0 strcmp
+00000490 writetest
+00003949 dup
+00002d40 sbrktest
+00000400 opentest
+00001d20 subdir
+00003580 uio
+000015d0 linktest
+00008620 buf
+000008f0 dirtest
+00000120 iputtest
+00003810 stat
+000024e0 bigfile
+00005e58 _edata
+0000a624 _end
+00001440 unlinkread
+00003931 link
+000038d1 exit
+00003860 atoi
+00001ae0 linkunlink
+0000a620 name
+00003700 strlen
+00003911 open
+00003750 strchr
+000017e0 concreate
+000026b0 fourteen
+00003160 validateint
+00001020 fourfiles
+00003939 mkdir
+000038f9 close
+00003c10 free
Binary files xv6-public/usys.o and xv6-public-new/usys.o differ
Binary files xv6-public/vectors.o and xv6-public-new/vectors.o differ
diff -urN xv6-public/vectors.S xv6-public-new/vectors.S
--- xv6-public/vectors.S	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/vectors.S	2019-10-04 10:45:50.720028979 +0530
@@ -0,0 +1,1537 @@
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+  pushl $0
+  jmp alltraps
+.globl vector1
+vector1:
+  pushl $0
+  pushl $1
+  jmp alltraps
+.globl vector2
+vector2:
+  pushl $0
+  pushl $2
+  jmp alltraps
+.globl vector3
+vector3:
+  pushl $0
+  pushl $3
+  jmp alltraps
+.globl vector4
+vector4:
+  pushl $0
+  pushl $4
+  jmp alltraps
+.globl vector5
+vector5:
+  pushl $0
+  pushl $5
+  jmp alltraps
+.globl vector6
+vector6:
+  pushl $0
+  pushl $6
+  jmp alltraps
+.globl vector7
+vector7:
+  pushl $0
+  pushl $7
+  jmp alltraps
+.globl vector8
+vector8:
+  pushl $8
+  jmp alltraps
+.globl vector9
+vector9:
+  pushl $0
+  pushl $9
+  jmp alltraps
+.globl vector10
+vector10:
+  pushl $10
+  jmp alltraps
+.globl vector11
+vector11:
+  pushl $11
+  jmp alltraps
+.globl vector12
+vector12:
+  pushl $12
+  jmp alltraps
+.globl vector13
+vector13:
+  pushl $13
+  jmp alltraps
+.globl vector14
+vector14:
+  pushl $14
+  jmp alltraps
+.globl vector15
+vector15:
+  pushl $0
+  pushl $15
+  jmp alltraps
+.globl vector16
+vector16:
+  pushl $0
+  pushl $16
+  jmp alltraps
+.globl vector17
+vector17:
+  pushl $17
+  jmp alltraps
+.globl vector18
+vector18:
+  pushl $0
+  pushl $18
+  jmp alltraps
+.globl vector19
+vector19:
+  pushl $0
+  pushl $19
+  jmp alltraps
+.globl vector20
+vector20:
+  pushl $0
+  pushl $20
+  jmp alltraps
+.globl vector21
+vector21:
+  pushl $0
+  pushl $21
+  jmp alltraps
+.globl vector22
+vector22:
+  pushl $0
+  pushl $22
+  jmp alltraps
+.globl vector23
+vector23:
+  pushl $0
+  pushl $23
+  jmp alltraps
+.globl vector24
+vector24:
+  pushl $0
+  pushl $24
+  jmp alltraps
+.globl vector25
+vector25:
+  pushl $0
+  pushl $25
+  jmp alltraps
+.globl vector26
+vector26:
+  pushl $0
+  pushl $26
+  jmp alltraps
+.globl vector27
+vector27:
+  pushl $0
+  pushl $27
+  jmp alltraps
+.globl vector28
+vector28:
+  pushl $0
+  pushl $28
+  jmp alltraps
+.globl vector29
+vector29:
+  pushl $0
+  pushl $29
+  jmp alltraps
+.globl vector30
+vector30:
+  pushl $0
+  pushl $30
+  jmp alltraps
+.globl vector31
+vector31:
+  pushl $0
+  pushl $31
+  jmp alltraps
+.globl vector32
+vector32:
+  pushl $0
+  pushl $32
+  jmp alltraps
+.globl vector33
+vector33:
+  pushl $0
+  pushl $33
+  jmp alltraps
+.globl vector34
+vector34:
+  pushl $0
+  pushl $34
+  jmp alltraps
+.globl vector35
+vector35:
+  pushl $0
+  pushl $35
+  jmp alltraps
+.globl vector36
+vector36:
+  pushl $0
+  pushl $36
+  jmp alltraps
+.globl vector37
+vector37:
+  pushl $0
+  pushl $37
+  jmp alltraps
+.globl vector38
+vector38:
+  pushl $0
+  pushl $38
+  jmp alltraps
+.globl vector39
+vector39:
+  pushl $0
+  pushl $39
+  jmp alltraps
+.globl vector40
+vector40:
+  pushl $0
+  pushl $40
+  jmp alltraps
+.globl vector41
+vector41:
+  pushl $0
+  pushl $41
+  jmp alltraps
+.globl vector42
+vector42:
+  pushl $0
+  pushl $42
+  jmp alltraps
+.globl vector43
+vector43:
+  pushl $0
+  pushl $43
+  jmp alltraps
+.globl vector44
+vector44:
+  pushl $0
+  pushl $44
+  jmp alltraps
+.globl vector45
+vector45:
+  pushl $0
+  pushl $45
+  jmp alltraps
+.globl vector46
+vector46:
+  pushl $0
+  pushl $46
+  jmp alltraps
+.globl vector47
+vector47:
+  pushl $0
+  pushl $47
+  jmp alltraps
+.globl vector48
+vector48:
+  pushl $0
+  pushl $48
+  jmp alltraps
+.globl vector49
+vector49:
+  pushl $0
+  pushl $49
+  jmp alltraps
+.globl vector50
+vector50:
+  pushl $0
+  pushl $50
+  jmp alltraps
+.globl vector51
+vector51:
+  pushl $0
+  pushl $51
+  jmp alltraps
+.globl vector52
+vector52:
+  pushl $0
+  pushl $52
+  jmp alltraps
+.globl vector53
+vector53:
+  pushl $0
+  pushl $53
+  jmp alltraps
+.globl vector54
+vector54:
+  pushl $0
+  pushl $54
+  jmp alltraps
+.globl vector55
+vector55:
+  pushl $0
+  pushl $55
+  jmp alltraps
+.globl vector56
+vector56:
+  pushl $0
+  pushl $56
+  jmp alltraps
+.globl vector57
+vector57:
+  pushl $0
+  pushl $57
+  jmp alltraps
+.globl vector58
+vector58:
+  pushl $0
+  pushl $58
+  jmp alltraps
+.globl vector59
+vector59:
+  pushl $0
+  pushl $59
+  jmp alltraps
+.globl vector60
+vector60:
+  pushl $0
+  pushl $60
+  jmp alltraps
+.globl vector61
+vector61:
+  pushl $0
+  pushl $61
+  jmp alltraps
+.globl vector62
+vector62:
+  pushl $0
+  pushl $62
+  jmp alltraps
+.globl vector63
+vector63:
+  pushl $0
+  pushl $63
+  jmp alltraps
+.globl vector64
+vector64:
+  pushl $0
+  pushl $64
+  jmp alltraps
+.globl vector65
+vector65:
+  pushl $0
+  pushl $65
+  jmp alltraps
+.globl vector66
+vector66:
+  pushl $0
+  pushl $66
+  jmp alltraps
+.globl vector67
+vector67:
+  pushl $0
+  pushl $67
+  jmp alltraps
+.globl vector68
+vector68:
+  pushl $0
+  pushl $68
+  jmp alltraps
+.globl vector69
+vector69:
+  pushl $0
+  pushl $69
+  jmp alltraps
+.globl vector70
+vector70:
+  pushl $0
+  pushl $70
+  jmp alltraps
+.globl vector71
+vector71:
+  pushl $0
+  pushl $71
+  jmp alltraps
+.globl vector72
+vector72:
+  pushl $0
+  pushl $72
+  jmp alltraps
+.globl vector73
+vector73:
+  pushl $0
+  pushl $73
+  jmp alltraps
+.globl vector74
+vector74:
+  pushl $0
+  pushl $74
+  jmp alltraps
+.globl vector75
+vector75:
+  pushl $0
+  pushl $75
+  jmp alltraps
+.globl vector76
+vector76:
+  pushl $0
+  pushl $76
+  jmp alltraps
+.globl vector77
+vector77:
+  pushl $0
+  pushl $77
+  jmp alltraps
+.globl vector78
+vector78:
+  pushl $0
+  pushl $78
+  jmp alltraps
+.globl vector79
+vector79:
+  pushl $0
+  pushl $79
+  jmp alltraps
+.globl vector80
+vector80:
+  pushl $0
+  pushl $80
+  jmp alltraps
+.globl vector81
+vector81:
+  pushl $0
+  pushl $81
+  jmp alltraps
+.globl vector82
+vector82:
+  pushl $0
+  pushl $82
+  jmp alltraps
+.globl vector83
+vector83:
+  pushl $0
+  pushl $83
+  jmp alltraps
+.globl vector84
+vector84:
+  pushl $0
+  pushl $84
+  jmp alltraps
+.globl vector85
+vector85:
+  pushl $0
+  pushl $85
+  jmp alltraps
+.globl vector86
+vector86:
+  pushl $0
+  pushl $86
+  jmp alltraps
+.globl vector87
+vector87:
+  pushl $0
+  pushl $87
+  jmp alltraps
+.globl vector88
+vector88:
+  pushl $0
+  pushl $88
+  jmp alltraps
+.globl vector89
+vector89:
+  pushl $0
+  pushl $89
+  jmp alltraps
+.globl vector90
+vector90:
+  pushl $0
+  pushl $90
+  jmp alltraps
+.globl vector91
+vector91:
+  pushl $0
+  pushl $91
+  jmp alltraps
+.globl vector92
+vector92:
+  pushl $0
+  pushl $92
+  jmp alltraps
+.globl vector93
+vector93:
+  pushl $0
+  pushl $93
+  jmp alltraps
+.globl vector94
+vector94:
+  pushl $0
+  pushl $94
+  jmp alltraps
+.globl vector95
+vector95:
+  pushl $0
+  pushl $95
+  jmp alltraps
+.globl vector96
+vector96:
+  pushl $0
+  pushl $96
+  jmp alltraps
+.globl vector97
+vector97:
+  pushl $0
+  pushl $97
+  jmp alltraps
+.globl vector98
+vector98:
+  pushl $0
+  pushl $98
+  jmp alltraps
+.globl vector99
+vector99:
+  pushl $0
+  pushl $99
+  jmp alltraps
+.globl vector100
+vector100:
+  pushl $0
+  pushl $100
+  jmp alltraps
+.globl vector101
+vector101:
+  pushl $0
+  pushl $101
+  jmp alltraps
+.globl vector102
+vector102:
+  pushl $0
+  pushl $102
+  jmp alltraps
+.globl vector103
+vector103:
+  pushl $0
+  pushl $103
+  jmp alltraps
+.globl vector104
+vector104:
+  pushl $0
+  pushl $104
+  jmp alltraps
+.globl vector105
+vector105:
+  pushl $0
+  pushl $105
+  jmp alltraps
+.globl vector106
+vector106:
+  pushl $0
+  pushl $106
+  jmp alltraps
+.globl vector107
+vector107:
+  pushl $0
+  pushl $107
+  jmp alltraps
+.globl vector108
+vector108:
+  pushl $0
+  pushl $108
+  jmp alltraps
+.globl vector109
+vector109:
+  pushl $0
+  pushl $109
+  jmp alltraps
+.globl vector110
+vector110:
+  pushl $0
+  pushl $110
+  jmp alltraps
+.globl vector111
+vector111:
+  pushl $0
+  pushl $111
+  jmp alltraps
+.globl vector112
+vector112:
+  pushl $0
+  pushl $112
+  jmp alltraps
+.globl vector113
+vector113:
+  pushl $0
+  pushl $113
+  jmp alltraps
+.globl vector114
+vector114:
+  pushl $0
+  pushl $114
+  jmp alltraps
+.globl vector115
+vector115:
+  pushl $0
+  pushl $115
+  jmp alltraps
+.globl vector116
+vector116:
+  pushl $0
+  pushl $116
+  jmp alltraps
+.globl vector117
+vector117:
+  pushl $0
+  pushl $117
+  jmp alltraps
+.globl vector118
+vector118:
+  pushl $0
+  pushl $118
+  jmp alltraps
+.globl vector119
+vector119:
+  pushl $0
+  pushl $119
+  jmp alltraps
+.globl vector120
+vector120:
+  pushl $0
+  pushl $120
+  jmp alltraps
+.globl vector121
+vector121:
+  pushl $0
+  pushl $121
+  jmp alltraps
+.globl vector122
+vector122:
+  pushl $0
+  pushl $122
+  jmp alltraps
+.globl vector123
+vector123:
+  pushl $0
+  pushl $123
+  jmp alltraps
+.globl vector124
+vector124:
+  pushl $0
+  pushl $124
+  jmp alltraps
+.globl vector125
+vector125:
+  pushl $0
+  pushl $125
+  jmp alltraps
+.globl vector126
+vector126:
+  pushl $0
+  pushl $126
+  jmp alltraps
+.globl vector127
+vector127:
+  pushl $0
+  pushl $127
+  jmp alltraps
+.globl vector128
+vector128:
+  pushl $0
+  pushl $128
+  jmp alltraps
+.globl vector129
+vector129:
+  pushl $0
+  pushl $129
+  jmp alltraps
+.globl vector130
+vector130:
+  pushl $0
+  pushl $130
+  jmp alltraps
+.globl vector131
+vector131:
+  pushl $0
+  pushl $131
+  jmp alltraps
+.globl vector132
+vector132:
+  pushl $0
+  pushl $132
+  jmp alltraps
+.globl vector133
+vector133:
+  pushl $0
+  pushl $133
+  jmp alltraps
+.globl vector134
+vector134:
+  pushl $0
+  pushl $134
+  jmp alltraps
+.globl vector135
+vector135:
+  pushl $0
+  pushl $135
+  jmp alltraps
+.globl vector136
+vector136:
+  pushl $0
+  pushl $136
+  jmp alltraps
+.globl vector137
+vector137:
+  pushl $0
+  pushl $137
+  jmp alltraps
+.globl vector138
+vector138:
+  pushl $0
+  pushl $138
+  jmp alltraps
+.globl vector139
+vector139:
+  pushl $0
+  pushl $139
+  jmp alltraps
+.globl vector140
+vector140:
+  pushl $0
+  pushl $140
+  jmp alltraps
+.globl vector141
+vector141:
+  pushl $0
+  pushl $141
+  jmp alltraps
+.globl vector142
+vector142:
+  pushl $0
+  pushl $142
+  jmp alltraps
+.globl vector143
+vector143:
+  pushl $0
+  pushl $143
+  jmp alltraps
+.globl vector144
+vector144:
+  pushl $0
+  pushl $144
+  jmp alltraps
+.globl vector145
+vector145:
+  pushl $0
+  pushl $145
+  jmp alltraps
+.globl vector146
+vector146:
+  pushl $0
+  pushl $146
+  jmp alltraps
+.globl vector147
+vector147:
+  pushl $0
+  pushl $147
+  jmp alltraps
+.globl vector148
+vector148:
+  pushl $0
+  pushl $148
+  jmp alltraps
+.globl vector149
+vector149:
+  pushl $0
+  pushl $149
+  jmp alltraps
+.globl vector150
+vector150:
+  pushl $0
+  pushl $150
+  jmp alltraps
+.globl vector151
+vector151:
+  pushl $0
+  pushl $151
+  jmp alltraps
+.globl vector152
+vector152:
+  pushl $0
+  pushl $152
+  jmp alltraps
+.globl vector153
+vector153:
+  pushl $0
+  pushl $153
+  jmp alltraps
+.globl vector154
+vector154:
+  pushl $0
+  pushl $154
+  jmp alltraps
+.globl vector155
+vector155:
+  pushl $0
+  pushl $155
+  jmp alltraps
+.globl vector156
+vector156:
+  pushl $0
+  pushl $156
+  jmp alltraps
+.globl vector157
+vector157:
+  pushl $0
+  pushl $157
+  jmp alltraps
+.globl vector158
+vector158:
+  pushl $0
+  pushl $158
+  jmp alltraps
+.globl vector159
+vector159:
+  pushl $0
+  pushl $159
+  jmp alltraps
+.globl vector160
+vector160:
+  pushl $0
+  pushl $160
+  jmp alltraps
+.globl vector161
+vector161:
+  pushl $0
+  pushl $161
+  jmp alltraps
+.globl vector162
+vector162:
+  pushl $0
+  pushl $162
+  jmp alltraps
+.globl vector163
+vector163:
+  pushl $0
+  pushl $163
+  jmp alltraps
+.globl vector164
+vector164:
+  pushl $0
+  pushl $164
+  jmp alltraps
+.globl vector165
+vector165:
+  pushl $0
+  pushl $165
+  jmp alltraps
+.globl vector166
+vector166:
+  pushl $0
+  pushl $166
+  jmp alltraps
+.globl vector167
+vector167:
+  pushl $0
+  pushl $167
+  jmp alltraps
+.globl vector168
+vector168:
+  pushl $0
+  pushl $168
+  jmp alltraps
+.globl vector169
+vector169:
+  pushl $0
+  pushl $169
+  jmp alltraps
+.globl vector170
+vector170:
+  pushl $0
+  pushl $170
+  jmp alltraps
+.globl vector171
+vector171:
+  pushl $0
+  pushl $171
+  jmp alltraps
+.globl vector172
+vector172:
+  pushl $0
+  pushl $172
+  jmp alltraps
+.globl vector173
+vector173:
+  pushl $0
+  pushl $173
+  jmp alltraps
+.globl vector174
+vector174:
+  pushl $0
+  pushl $174
+  jmp alltraps
+.globl vector175
+vector175:
+  pushl $0
+  pushl $175
+  jmp alltraps
+.globl vector176
+vector176:
+  pushl $0
+  pushl $176
+  jmp alltraps
+.globl vector177
+vector177:
+  pushl $0
+  pushl $177
+  jmp alltraps
+.globl vector178
+vector178:
+  pushl $0
+  pushl $178
+  jmp alltraps
+.globl vector179
+vector179:
+  pushl $0
+  pushl $179
+  jmp alltraps
+.globl vector180
+vector180:
+  pushl $0
+  pushl $180
+  jmp alltraps
+.globl vector181
+vector181:
+  pushl $0
+  pushl $181
+  jmp alltraps
+.globl vector182
+vector182:
+  pushl $0
+  pushl $182
+  jmp alltraps
+.globl vector183
+vector183:
+  pushl $0
+  pushl $183
+  jmp alltraps
+.globl vector184
+vector184:
+  pushl $0
+  pushl $184
+  jmp alltraps
+.globl vector185
+vector185:
+  pushl $0
+  pushl $185
+  jmp alltraps
+.globl vector186
+vector186:
+  pushl $0
+  pushl $186
+  jmp alltraps
+.globl vector187
+vector187:
+  pushl $0
+  pushl $187
+  jmp alltraps
+.globl vector188
+vector188:
+  pushl $0
+  pushl $188
+  jmp alltraps
+.globl vector189
+vector189:
+  pushl $0
+  pushl $189
+  jmp alltraps
+.globl vector190
+vector190:
+  pushl $0
+  pushl $190
+  jmp alltraps
+.globl vector191
+vector191:
+  pushl $0
+  pushl $191
+  jmp alltraps
+.globl vector192
+vector192:
+  pushl $0
+  pushl $192
+  jmp alltraps
+.globl vector193
+vector193:
+  pushl $0
+  pushl $193
+  jmp alltraps
+.globl vector194
+vector194:
+  pushl $0
+  pushl $194
+  jmp alltraps
+.globl vector195
+vector195:
+  pushl $0
+  pushl $195
+  jmp alltraps
+.globl vector196
+vector196:
+  pushl $0
+  pushl $196
+  jmp alltraps
+.globl vector197
+vector197:
+  pushl $0
+  pushl $197
+  jmp alltraps
+.globl vector198
+vector198:
+  pushl $0
+  pushl $198
+  jmp alltraps
+.globl vector199
+vector199:
+  pushl $0
+  pushl $199
+  jmp alltraps
+.globl vector200
+vector200:
+  pushl $0
+  pushl $200
+  jmp alltraps
+.globl vector201
+vector201:
+  pushl $0
+  pushl $201
+  jmp alltraps
+.globl vector202
+vector202:
+  pushl $0
+  pushl $202
+  jmp alltraps
+.globl vector203
+vector203:
+  pushl $0
+  pushl $203
+  jmp alltraps
+.globl vector204
+vector204:
+  pushl $0
+  pushl $204
+  jmp alltraps
+.globl vector205
+vector205:
+  pushl $0
+  pushl $205
+  jmp alltraps
+.globl vector206
+vector206:
+  pushl $0
+  pushl $206
+  jmp alltraps
+.globl vector207
+vector207:
+  pushl $0
+  pushl $207
+  jmp alltraps
+.globl vector208
+vector208:
+  pushl $0
+  pushl $208
+  jmp alltraps
+.globl vector209
+vector209:
+  pushl $0
+  pushl $209
+  jmp alltraps
+.globl vector210
+vector210:
+  pushl $0
+  pushl $210
+  jmp alltraps
+.globl vector211
+vector211:
+  pushl $0
+  pushl $211
+  jmp alltraps
+.globl vector212
+vector212:
+  pushl $0
+  pushl $212
+  jmp alltraps
+.globl vector213
+vector213:
+  pushl $0
+  pushl $213
+  jmp alltraps
+.globl vector214
+vector214:
+  pushl $0
+  pushl $214
+  jmp alltraps
+.globl vector215
+vector215:
+  pushl $0
+  pushl $215
+  jmp alltraps
+.globl vector216
+vector216:
+  pushl $0
+  pushl $216
+  jmp alltraps
+.globl vector217
+vector217:
+  pushl $0
+  pushl $217
+  jmp alltraps
+.globl vector218
+vector218:
+  pushl $0
+  pushl $218
+  jmp alltraps
+.globl vector219
+vector219:
+  pushl $0
+  pushl $219
+  jmp alltraps
+.globl vector220
+vector220:
+  pushl $0
+  pushl $220
+  jmp alltraps
+.globl vector221
+vector221:
+  pushl $0
+  pushl $221
+  jmp alltraps
+.globl vector222
+vector222:
+  pushl $0
+  pushl $222
+  jmp alltraps
+.globl vector223
+vector223:
+  pushl $0
+  pushl $223
+  jmp alltraps
+.globl vector224
+vector224:
+  pushl $0
+  pushl $224
+  jmp alltraps
+.globl vector225
+vector225:
+  pushl $0
+  pushl $225
+  jmp alltraps
+.globl vector226
+vector226:
+  pushl $0
+  pushl $226
+  jmp alltraps
+.globl vector227
+vector227:
+  pushl $0
+  pushl $227
+  jmp alltraps
+.globl vector228
+vector228:
+  pushl $0
+  pushl $228
+  jmp alltraps
+.globl vector229
+vector229:
+  pushl $0
+  pushl $229
+  jmp alltraps
+.globl vector230
+vector230:
+  pushl $0
+  pushl $230
+  jmp alltraps
+.globl vector231
+vector231:
+  pushl $0
+  pushl $231
+  jmp alltraps
+.globl vector232
+vector232:
+  pushl $0
+  pushl $232
+  jmp alltraps
+.globl vector233
+vector233:
+  pushl $0
+  pushl $233
+  jmp alltraps
+.globl vector234
+vector234:
+  pushl $0
+  pushl $234
+  jmp alltraps
+.globl vector235
+vector235:
+  pushl $0
+  pushl $235
+  jmp alltraps
+.globl vector236
+vector236:
+  pushl $0
+  pushl $236
+  jmp alltraps
+.globl vector237
+vector237:
+  pushl $0
+  pushl $237
+  jmp alltraps
+.globl vector238
+vector238:
+  pushl $0
+  pushl $238
+  jmp alltraps
+.globl vector239
+vector239:
+  pushl $0
+  pushl $239
+  jmp alltraps
+.globl vector240
+vector240:
+  pushl $0
+  pushl $240
+  jmp alltraps
+.globl vector241
+vector241:
+  pushl $0
+  pushl $241
+  jmp alltraps
+.globl vector242
+vector242:
+  pushl $0
+  pushl $242
+  jmp alltraps
+.globl vector243
+vector243:
+  pushl $0
+  pushl $243
+  jmp alltraps
+.globl vector244
+vector244:
+  pushl $0
+  pushl $244
+  jmp alltraps
+.globl vector245
+vector245:
+  pushl $0
+  pushl $245
+  jmp alltraps
+.globl vector246
+vector246:
+  pushl $0
+  pushl $246
+  jmp alltraps
+.globl vector247
+vector247:
+  pushl $0
+  pushl $247
+  jmp alltraps
+.globl vector248
+vector248:
+  pushl $0
+  pushl $248
+  jmp alltraps
+.globl vector249
+vector249:
+  pushl $0
+  pushl $249
+  jmp alltraps
+.globl vector250
+vector250:
+  pushl $0
+  pushl $250
+  jmp alltraps
+.globl vector251
+vector251:
+  pushl $0
+  pushl $251
+  jmp alltraps
+.globl vector252
+vector252:
+  pushl $0
+  pushl $252
+  jmp alltraps
+.globl vector253
+vector253:
+  pushl $0
+  pushl $253
+  jmp alltraps
+.globl vector254
+vector254:
+  pushl $0
+  pushl $254
+  jmp alltraps
+.globl vector255
+vector255:
+  pushl $0
+  pushl $255
+  jmp alltraps
+
+# vector table
+.data
+.globl vectors
+vectors:
+  .long vector0
+  .long vector1
+  .long vector2
+  .long vector3
+  .long vector4
+  .long vector5
+  .long vector6
+  .long vector7
+  .long vector8
+  .long vector9
+  .long vector10
+  .long vector11
+  .long vector12
+  .long vector13
+  .long vector14
+  .long vector15
+  .long vector16
+  .long vector17
+  .long vector18
+  .long vector19
+  .long vector20
+  .long vector21
+  .long vector22
+  .long vector23
+  .long vector24
+  .long vector25
+  .long vector26
+  .long vector27
+  .long vector28
+  .long vector29
+  .long vector30
+  .long vector31
+  .long vector32
+  .long vector33
+  .long vector34
+  .long vector35
+  .long vector36
+  .long vector37
+  .long vector38
+  .long vector39
+  .long vector40
+  .long vector41
+  .long vector42
+  .long vector43
+  .long vector44
+  .long vector45
+  .long vector46
+  .long vector47
+  .long vector48
+  .long vector49
+  .long vector50
+  .long vector51
+  .long vector52
+  .long vector53
+  .long vector54
+  .long vector55
+  .long vector56
+  .long vector57
+  .long vector58
+  .long vector59
+  .long vector60
+  .long vector61
+  .long vector62
+  .long vector63
+  .long vector64
+  .long vector65
+  .long vector66
+  .long vector67
+  .long vector68
+  .long vector69
+  .long vector70
+  .long vector71
+  .long vector72
+  .long vector73
+  .long vector74
+  .long vector75
+  .long vector76
+  .long vector77
+  .long vector78
+  .long vector79
+  .long vector80
+  .long vector81
+  .long vector82
+  .long vector83
+  .long vector84
+  .long vector85
+  .long vector86
+  .long vector87
+  .long vector88
+  .long vector89
+  .long vector90
+  .long vector91
+  .long vector92
+  .long vector93
+  .long vector94
+  .long vector95
+  .long vector96
+  .long vector97
+  .long vector98
+  .long vector99
+  .long vector100
+  .long vector101
+  .long vector102
+  .long vector103
+  .long vector104
+  .long vector105
+  .long vector106
+  .long vector107
+  .long vector108
+  .long vector109
+  .long vector110
+  .long vector111
+  .long vector112
+  .long vector113
+  .long vector114
+  .long vector115
+  .long vector116
+  .long vector117
+  .long vector118
+  .long vector119
+  .long vector120
+  .long vector121
+  .long vector122
+  .long vector123
+  .long vector124
+  .long vector125
+  .long vector126
+  .long vector127
+  .long vector128
+  .long vector129
+  .long vector130
+  .long vector131
+  .long vector132
+  .long vector133
+  .long vector134
+  .long vector135
+  .long vector136
+  .long vector137
+  .long vector138
+  .long vector139
+  .long vector140
+  .long vector141
+  .long vector142
+  .long vector143
+  .long vector144
+  .long vector145
+  .long vector146
+  .long vector147
+  .long vector148
+  .long vector149
+  .long vector150
+  .long vector151
+  .long vector152
+  .long vector153
+  .long vector154
+  .long vector155
+  .long vector156
+  .long vector157
+  .long vector158
+  .long vector159
+  .long vector160
+  .long vector161
+  .long vector162
+  .long vector163
+  .long vector164
+  .long vector165
+  .long vector166
+  .long vector167
+  .long vector168
+  .long vector169
+  .long vector170
+  .long vector171
+  .long vector172
+  .long vector173
+  .long vector174
+  .long vector175
+  .long vector176
+  .long vector177
+  .long vector178
+  .long vector179
+  .long vector180
+  .long vector181
+  .long vector182
+  .long vector183
+  .long vector184
+  .long vector185
+  .long vector186
+  .long vector187
+  .long vector188
+  .long vector189
+  .long vector190
+  .long vector191
+  .long vector192
+  .long vector193
+  .long vector194
+  .long vector195
+  .long vector196
+  .long vector197
+  .long vector198
+  .long vector199
+  .long vector200
+  .long vector201
+  .long vector202
+  .long vector203
+  .long vector204
+  .long vector205
+  .long vector206
+  .long vector207
+  .long vector208
+  .long vector209
+  .long vector210
+  .long vector211
+  .long vector212
+  .long vector213
+  .long vector214
+  .long vector215
+  .long vector216
+  .long vector217
+  .long vector218
+  .long vector219
+  .long vector220
+  .long vector221
+  .long vector222
+  .long vector223
+  .long vector224
+  .long vector225
+  .long vector226
+  .long vector227
+  .long vector228
+  .long vector229
+  .long vector230
+  .long vector231
+  .long vector232
+  .long vector233
+  .long vector234
+  .long vector235
+  .long vector236
+  .long vector237
+  .long vector238
+  .long vector239
+  .long vector240
+  .long vector241
+  .long vector242
+  .long vector243
+  .long vector244
+  .long vector245
+  .long vector246
+  .long vector247
+  .long vector248
+  .long vector249
+  .long vector250
+  .long vector251
+  .long vector252
+  .long vector253
+  .long vector254
+  .long vector255
diff -urN xv6-public/vm.d xv6-public-new/vm.d
--- xv6-public/vm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/vm.d	2019-10-04 10:45:50.820028983 +0530
@@ -0,0 +1,2 @@
+vm.o: vm.c /usr/include/stdc-predef.h param.h types.h defs.h x86.h \
+ memlayout.h mmu.h proc.h elf.h
Binary files xv6-public/vm.o and xv6-public-new/vm.o differ
Binary files xv6-public/_wc and xv6-public-new/_wc differ
diff -urN xv6-public/wc.asm xv6-public-new/wc.asm
--- xv6-public/wc.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/wc.asm	2019-10-04 10:45:49.360028914 +0530
@@ -0,0 +1,1324 @@
+
+_wc:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	be 01 00 00 00       	mov    $0x1,%esi
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 18             	sub    $0x18,%esp
+  19:	8b 01                	mov    (%ecx),%eax
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  21:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  24:	83 f8 01             	cmp    $0x1,%eax
+  27:	7e 56                	jle    7f <main+0x7f>
+  29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    wc(0, "");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	pushl  (%ebx)
+  37:	e8 d5 03 00 00       	call   411 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	89 c7                	mov    %eax,%edi
+  41:	85 c0                	test   %eax,%eax
+  43:	78 26                	js     6b <main+0x6b>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+      exit();
+    }
+    wc(fd, argv[i]);
+  45:	83 ec 08             	sub    $0x8,%esp
+  48:	ff 33                	pushl  (%ebx)
+  for(i = 1; i < argc; i++){
+  4a:	83 c6 01             	add    $0x1,%esi
+  4d:	83 c3 04             	add    $0x4,%ebx
+    wc(fd, argv[i]);
+  50:	50                   	push   %eax
+  51:	e8 4a 00 00 00       	call   a0 <wc>
+    close(fd);
+  56:	89 3c 24             	mov    %edi,(%esp)
+  59:	e8 9b 03 00 00       	call   3f9 <close>
+  for(i = 1; i < argc; i++){
+  5e:	83 c4 10             	add    $0x10,%esp
+  61:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  64:	75 ca                	jne    30 <main+0x30>
+  }
+  exit();
+  66:	e8 66 03 00 00       	call   3d1 <exit>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+  6b:	50                   	push   %eax
+  6c:	ff 33                	pushl  (%ebx)
+  6e:	68 cb 08 00 00       	push   $0x8cb
+  73:	6a 01                	push   $0x1
+  75:	e8 c6 04 00 00       	call   540 <printf>
+      exit();
+  7a:	e8 52 03 00 00       	call   3d1 <exit>
+    wc(0, "");
+  7f:	52                   	push   %edx
+  80:	52                   	push   %edx
+  81:	68 bd 08 00 00       	push   $0x8bd
+  86:	6a 00                	push   $0x0
+  88:	e8 13 00 00 00       	call   a0 <wc>
+    exit();
+  8d:	e8 3f 03 00 00       	call   3d1 <exit>
+  92:	66 90                	xchg   %ax,%ax
+  94:	66 90                	xchg   %ax,%ax
+  96:	66 90                	xchg   %ax,%ax
+  98:	66 90                	xchg   %ax,%ax
+  9a:	66 90                	xchg   %ax,%ax
+  9c:	66 90                	xchg   %ax,%ax
+  9e:	66 90                	xchg   %ax,%ax
+
+000000a0 <wc>:
+{
+  a0:	55                   	push   %ebp
+  a1:	89 e5                	mov    %esp,%ebp
+  a3:	57                   	push   %edi
+  a4:	56                   	push   %esi
+  a5:	53                   	push   %ebx
+  l = w = c = 0;
+  a6:	31 db                	xor    %ebx,%ebx
+{
+  a8:	83 ec 1c             	sub    $0x1c,%esp
+  inword = 0;
+  ab:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  l = w = c = 0;
+  b2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  b9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  c0:	83 ec 04             	sub    $0x4,%esp
+  c3:	68 00 02 00 00       	push   $0x200
+  c8:	68 00 0c 00 00       	push   $0xc00
+  cd:	ff 75 08             	pushl  0x8(%ebp)
+  d0:	e8 14 03 00 00       	call   3e9 <read>
+  d5:	83 c4 10             	add    $0x10,%esp
+  d8:	89 c6                	mov    %eax,%esi
+  da:	85 c0                	test   %eax,%eax
+  dc:	7e 62                	jle    140 <wc+0xa0>
+    for(i=0; i<n; i++){
+  de:	31 ff                	xor    %edi,%edi
+  e0:	eb 14                	jmp    f6 <wc+0x56>
+  e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        inword = 0;
+  e8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+  ef:	83 c7 01             	add    $0x1,%edi
+  f2:	39 fe                	cmp    %edi,%esi
+  f4:	74 42                	je     138 <wc+0x98>
+      if(buf[i] == '\n')
+  f6:	0f be 87 00 0c 00 00 	movsbl 0xc00(%edi),%eax
+        l++;
+  fd:	31 c9                	xor    %ecx,%ecx
+  ff:	3c 0a                	cmp    $0xa,%al
+ 101:	0f 94 c1             	sete   %cl
+      if(strchr(" \r\t\n\v", buf[i]))
+ 104:	83 ec 08             	sub    $0x8,%esp
+ 107:	50                   	push   %eax
+        l++;
+ 108:	01 cb                	add    %ecx,%ebx
+      if(strchr(" \r\t\n\v", buf[i]))
+ 10a:	68 a8 08 00 00       	push   $0x8a8
+ 10f:	e8 3c 01 00 00       	call   250 <strchr>
+ 114:	83 c4 10             	add    $0x10,%esp
+ 117:	85 c0                	test   %eax,%eax
+ 119:	75 cd                	jne    e8 <wc+0x48>
+      else if(!inword){
+ 11b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+ 11e:	85 d2                	test   %edx,%edx
+ 120:	75 cd                	jne    ef <wc+0x4f>
+    for(i=0; i<n; i++){
+ 122:	83 c7 01             	add    $0x1,%edi
+        w++;
+ 125:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+        inword = 1;
+ 129:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+ 130:	39 fe                	cmp    %edi,%esi
+ 132:	75 c2                	jne    f6 <wc+0x56>
+ 134:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 138:	01 75 dc             	add    %esi,-0x24(%ebp)
+ 13b:	eb 83                	jmp    c0 <wc+0x20>
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+  if(n < 0){
+ 140:	75 24                	jne    166 <wc+0xc6>
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+ 142:	83 ec 08             	sub    $0x8,%esp
+ 145:	ff 75 0c             	pushl  0xc(%ebp)
+ 148:	ff 75 dc             	pushl  -0x24(%ebp)
+ 14b:	ff 75 e0             	pushl  -0x20(%ebp)
+ 14e:	53                   	push   %ebx
+ 14f:	68 be 08 00 00       	push   $0x8be
+ 154:	6a 01                	push   $0x1
+ 156:	e8 e5 03 00 00       	call   540 <printf>
+}
+ 15b:	83 c4 20             	add    $0x20,%esp
+ 15e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 161:	5b                   	pop    %ebx
+ 162:	5e                   	pop    %esi
+ 163:	5f                   	pop    %edi
+ 164:	5d                   	pop    %ebp
+ 165:	c3                   	ret    
+    printf(1, "wc: read error\n");
+ 166:	50                   	push   %eax
+ 167:	50                   	push   %eax
+ 168:	68 ae 08 00 00       	push   $0x8ae
+ 16d:	6a 01                	push   $0x1
+ 16f:	e8 cc 03 00 00       	call   540 <printf>
+    exit();
+ 174:	e8 58 02 00 00       	call   3d1 <exit>
+ 179:	66 90                	xchg   %ax,%ax
+ 17b:	66 90                	xchg   %ax,%ax
+ 17d:	66 90                	xchg   %ax,%ax
+ 17f:	90                   	nop
+
+00000180 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 180:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 181:	31 d2                	xor    %edx,%edx
+{
+ 183:	89 e5                	mov    %esp,%ebp
+ 185:	53                   	push   %ebx
+ 186:	8b 45 08             	mov    0x8(%ebp),%eax
+ 189:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 190:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+ 194:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 197:	83 c2 01             	add    $0x1,%edx
+ 19a:	84 c9                	test   %cl,%cl
+ 19c:	75 f2                	jne    190 <strcpy+0x10>
+    ;
+  return os;
+}
+ 19e:	5b                   	pop    %ebx
+ 19f:	5d                   	pop    %ebp
+ 1a0:	c3                   	ret    
+ 1a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1af:	90                   	nop
+
+000001b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 1b0:	55                   	push   %ebp
+ 1b1:	89 e5                	mov    %esp,%ebp
+ 1b3:	56                   	push   %esi
+ 1b4:	53                   	push   %ebx
+ 1b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 1b8:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+ 1bb:	0f b6 13             	movzbl (%ebx),%edx
+ 1be:	0f b6 0e             	movzbl (%esi),%ecx
+ 1c1:	84 d2                	test   %dl,%dl
+ 1c3:	74 1e                	je     1e3 <strcmp+0x33>
+ 1c5:	b8 01 00 00 00       	mov    $0x1,%eax
+ 1ca:	38 ca                	cmp    %cl,%dl
+ 1cc:	74 09                	je     1d7 <strcmp+0x27>
+ 1ce:	eb 20                	jmp    1f0 <strcmp+0x40>
+ 1d0:	83 c0 01             	add    $0x1,%eax
+ 1d3:	38 ca                	cmp    %cl,%dl
+ 1d5:	75 19                	jne    1f0 <strcmp+0x40>
+ 1d7:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 1db:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+ 1df:	84 d2                	test   %dl,%dl
+ 1e1:	75 ed                	jne    1d0 <strcmp+0x20>
+ 1e3:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+ 1e5:	5b                   	pop    %ebx
+ 1e6:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 1e7:	29 c8                	sub    %ecx,%eax
+}
+ 1e9:	5d                   	pop    %ebp
+ 1ea:	c3                   	ret    
+ 1eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1ef:	90                   	nop
+ 1f0:	0f b6 c2             	movzbl %dl,%eax
+ 1f3:	5b                   	pop    %ebx
+ 1f4:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+ 1f5:	29 c8                	sub    %ecx,%eax
+}
+ 1f7:	5d                   	pop    %ebp
+ 1f8:	c3                   	ret    
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000200 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 206:	80 39 00             	cmpb   $0x0,(%ecx)
+ 209:	74 15                	je     220 <strlen+0x20>
+ 20b:	31 d2                	xor    %edx,%edx
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+ 210:	83 c2 01             	add    $0x1,%edx
+ 213:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 217:	89 d0                	mov    %edx,%eax
+ 219:	75 f5                	jne    210 <strlen+0x10>
+    ;
+  return n;
+}
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+ 220:	31 c0                	xor    %eax,%eax
+}
+ 222:	5d                   	pop    %ebp
+ 223:	c3                   	ret    
+ 224:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 22f:	90                   	nop
+
+00000230 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	57                   	push   %edi
+ 234:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 237:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 23a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 23d:	89 d7                	mov    %edx,%edi
+ 23f:	fc                   	cld    
+ 240:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 242:	89 d0                	mov    %edx,%eax
+ 244:	5f                   	pop    %edi
+ 245:	5d                   	pop    %ebp
+ 246:	c3                   	ret    
+ 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24e:	66 90                	xchg   %ax,%ax
+
+00000250 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	53                   	push   %ebx
+ 254:	8b 45 08             	mov    0x8(%ebp),%eax
+ 257:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 25a:	0f b6 18             	movzbl (%eax),%ebx
+ 25d:	84 db                	test   %bl,%bl
+ 25f:	74 1d                	je     27e <strchr+0x2e>
+ 261:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 263:	38 d3                	cmp    %dl,%bl
+ 265:	75 0d                	jne    274 <strchr+0x24>
+ 267:	eb 17                	jmp    280 <strchr+0x30>
+ 269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 270:	38 ca                	cmp    %cl,%dl
+ 272:	74 0c                	je     280 <strchr+0x30>
+  for(; *s; s++)
+ 274:	83 c0 01             	add    $0x1,%eax
+ 277:	0f b6 10             	movzbl (%eax),%edx
+ 27a:	84 d2                	test   %dl,%dl
+ 27c:	75 f2                	jne    270 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 27e:	31 c0                	xor    %eax,%eax
+}
+ 280:	5b                   	pop    %ebx
+ 281:	5d                   	pop    %ebp
+ 282:	c3                   	ret    
+ 283:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 28a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000290 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	57                   	push   %edi
+ 294:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 295:	31 f6                	xor    %esi,%esi
+{
+ 297:	53                   	push   %ebx
+ 298:	89 f3                	mov    %esi,%ebx
+ 29a:	83 ec 1c             	sub    $0x1c,%esp
+ 29d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 2a0:	eb 2f                	jmp    2d1 <gets+0x41>
+ 2a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 2a8:	83 ec 04             	sub    $0x4,%esp
+ 2ab:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 2ae:	6a 01                	push   $0x1
+ 2b0:	50                   	push   %eax
+ 2b1:	6a 00                	push   $0x0
+ 2b3:	e8 31 01 00 00       	call   3e9 <read>
+    if(cc < 1)
+ 2b8:	83 c4 10             	add    $0x10,%esp
+ 2bb:	85 c0                	test   %eax,%eax
+ 2bd:	7e 1c                	jle    2db <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 2bf:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2c3:	83 c7 01             	add    $0x1,%edi
+ 2c6:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2c9:	3c 0a                	cmp    $0xa,%al
+ 2cb:	74 23                	je     2f0 <gets+0x60>
+ 2cd:	3c 0d                	cmp    $0xd,%al
+ 2cf:	74 1f                	je     2f0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 2d1:	83 c3 01             	add    $0x1,%ebx
+ 2d4:	89 fe                	mov    %edi,%esi
+ 2d6:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2d9:	7c cd                	jl     2a8 <gets+0x18>
+ 2db:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2e0:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2e6:	5b                   	pop    %ebx
+ 2e7:	5e                   	pop    %esi
+ 2e8:	5f                   	pop    %edi
+ 2e9:	5d                   	pop    %ebp
+ 2ea:	c3                   	ret    
+ 2eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2ef:	90                   	nop
+ 2f0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2f3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2f6:	01 de                	add    %ebx,%esi
+ 2f8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2fa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 300:	5b                   	pop    %ebx
+ 301:	5e                   	pop    %esi
+ 302:	5f                   	pop    %edi
+ 303:	5d                   	pop    %ebp
+ 304:	c3                   	ret    
+ 305:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 30c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000310 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	56                   	push   %esi
+ 314:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 315:	83 ec 08             	sub    $0x8,%esp
+ 318:	6a 00                	push   $0x0
+ 31a:	ff 75 08             	pushl  0x8(%ebp)
+ 31d:	e8 ef 00 00 00       	call   411 <open>
+  if(fd < 0)
+ 322:	83 c4 10             	add    $0x10,%esp
+ 325:	85 c0                	test   %eax,%eax
+ 327:	78 27                	js     350 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 329:	83 ec 08             	sub    $0x8,%esp
+ 32c:	ff 75 0c             	pushl  0xc(%ebp)
+ 32f:	89 c3                	mov    %eax,%ebx
+ 331:	50                   	push   %eax
+ 332:	e8 f2 00 00 00       	call   429 <fstat>
+  close(fd);
+ 337:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 33a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 33c:	e8 b8 00 00 00       	call   3f9 <close>
+  return r;
+ 341:	83 c4 10             	add    $0x10,%esp
+}
+ 344:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 347:	89 f0                	mov    %esi,%eax
+ 349:	5b                   	pop    %ebx
+ 34a:	5e                   	pop    %esi
+ 34b:	5d                   	pop    %ebp
+ 34c:	c3                   	ret    
+ 34d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 350:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 355:	eb ed                	jmp    344 <stat+0x34>
+ 357:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 35e:	66 90                	xchg   %ax,%ax
+
+00000360 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	53                   	push   %ebx
+ 364:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 367:	0f be 11             	movsbl (%ecx),%edx
+ 36a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 36d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 36f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 374:	77 1f                	ja     395 <atoi+0x35>
+ 376:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 37d:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 380:	83 c1 01             	add    $0x1,%ecx
+ 383:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 386:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 38a:	0f be 11             	movsbl (%ecx),%edx
+ 38d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 390:	80 fb 09             	cmp    $0x9,%bl
+ 393:	76 eb                	jbe    380 <atoi+0x20>
+  return n;
+}
+ 395:	5b                   	pop    %ebx
+ 396:	5d                   	pop    %ebp
+ 397:	c3                   	ret    
+ 398:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 39f:	90                   	nop
+
+000003a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	8b 55 10             	mov    0x10(%ebp),%edx
+ 3a7:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3aa:	56                   	push   %esi
+ 3ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 3ae:	85 d2                	test   %edx,%edx
+ 3b0:	7e 13                	jle    3c5 <memmove+0x25>
+ 3b2:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 3b4:	89 c7                	mov    %eax,%edi
+ 3b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 3c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 3c1:	39 fa                	cmp    %edi,%edx
+ 3c3:	75 fb                	jne    3c0 <memmove+0x20>
+  return vdst;
+}
+ 3c5:	5e                   	pop    %esi
+ 3c6:	5f                   	pop    %edi
+ 3c7:	5d                   	pop    %ebp
+ 3c8:	c3                   	ret    
+
+000003c9 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3c9:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3ce:	cd 40                	int    $0x40
+ 3d0:	c3                   	ret    
+
+000003d1 <exit>:
+SYSCALL(exit)
+ 3d1:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3d6:	cd 40                	int    $0x40
+ 3d8:	c3                   	ret    
+
+000003d9 <wait>:
+SYSCALL(wait)
+ 3d9:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3de:	cd 40                	int    $0x40
+ 3e0:	c3                   	ret    
+
+000003e1 <pipe>:
+SYSCALL(pipe)
+ 3e1:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3e6:	cd 40                	int    $0x40
+ 3e8:	c3                   	ret    
+
+000003e9 <read>:
+SYSCALL(read)
+ 3e9:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3ee:	cd 40                	int    $0x40
+ 3f0:	c3                   	ret    
+
+000003f1 <write>:
+SYSCALL(write)
+ 3f1:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3f6:	cd 40                	int    $0x40
+ 3f8:	c3                   	ret    
+
+000003f9 <close>:
+SYSCALL(close)
+ 3f9:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3fe:	cd 40                	int    $0x40
+ 400:	c3                   	ret    
+
+00000401 <kill>:
+SYSCALL(kill)
+ 401:	b8 06 00 00 00       	mov    $0x6,%eax
+ 406:	cd 40                	int    $0x40
+ 408:	c3                   	ret    
+
+00000409 <exec>:
+SYSCALL(exec)
+ 409:	b8 07 00 00 00       	mov    $0x7,%eax
+ 40e:	cd 40                	int    $0x40
+ 410:	c3                   	ret    
+
+00000411 <open>:
+SYSCALL(open)
+ 411:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 416:	cd 40                	int    $0x40
+ 418:	c3                   	ret    
+
+00000419 <mknod>:
+SYSCALL(mknod)
+ 419:	b8 11 00 00 00       	mov    $0x11,%eax
+ 41e:	cd 40                	int    $0x40
+ 420:	c3                   	ret    
+
+00000421 <unlink>:
+SYSCALL(unlink)
+ 421:	b8 12 00 00 00       	mov    $0x12,%eax
+ 426:	cd 40                	int    $0x40
+ 428:	c3                   	ret    
+
+00000429 <fstat>:
+SYSCALL(fstat)
+ 429:	b8 08 00 00 00       	mov    $0x8,%eax
+ 42e:	cd 40                	int    $0x40
+ 430:	c3                   	ret    
+
+00000431 <link>:
+SYSCALL(link)
+ 431:	b8 13 00 00 00       	mov    $0x13,%eax
+ 436:	cd 40                	int    $0x40
+ 438:	c3                   	ret    
+
+00000439 <mkdir>:
+SYSCALL(mkdir)
+ 439:	b8 14 00 00 00       	mov    $0x14,%eax
+ 43e:	cd 40                	int    $0x40
+ 440:	c3                   	ret    
+
+00000441 <chdir>:
+SYSCALL(chdir)
+ 441:	b8 09 00 00 00       	mov    $0x9,%eax
+ 446:	cd 40                	int    $0x40
+ 448:	c3                   	ret    
+
+00000449 <dup>:
+SYSCALL(dup)
+ 449:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 44e:	cd 40                	int    $0x40
+ 450:	c3                   	ret    
+
+00000451 <getpid>:
+SYSCALL(getpid)
+ 451:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 456:	cd 40                	int    $0x40
+ 458:	c3                   	ret    
+
+00000459 <sbrk>:
+SYSCALL(sbrk)
+ 459:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 45e:	cd 40                	int    $0x40
+ 460:	c3                   	ret    
+
+00000461 <sleep>:
+SYSCALL(sleep)
+ 461:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 466:	cd 40                	int    $0x40
+ 468:	c3                   	ret    
+
+00000469 <uptime>:
+SYSCALL(uptime)
+ 469:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 46e:	cd 40                	int    $0x40
+ 470:	c3                   	ret    
+ 471:	66 90                	xchg   %ax,%ax
+ 473:	66 90                	xchg   %ax,%ax
+ 475:	66 90                	xchg   %ax,%ax
+ 477:	66 90                	xchg   %ax,%ax
+ 479:	66 90                	xchg   %ax,%ax
+ 47b:	66 90                	xchg   %ax,%ax
+ 47d:	66 90                	xchg   %ax,%ax
+ 47f:	90                   	nop
+
+00000480 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 480:	55                   	push   %ebp
+ 481:	89 e5                	mov    %esp,%ebp
+ 483:	57                   	push   %edi
+ 484:	56                   	push   %esi
+ 485:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 486:	89 d3                	mov    %edx,%ebx
+{
+ 488:	83 ec 3c             	sub    $0x3c,%esp
+ 48b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+ 48e:	85 d2                	test   %edx,%edx
+ 490:	0f 89 92 00 00 00    	jns    528 <printint+0xa8>
+ 496:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 49a:	0f 84 88 00 00 00    	je     528 <printint+0xa8>
+    neg = 1;
+ 4a0:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+ 4a7:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 4a9:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 4b0:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 4b3:	eb 08                	jmp    4bd <printint+0x3d>
+ 4b5:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 4b8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+ 4bb:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+ 4bd:	89 d8                	mov    %ebx,%eax
+ 4bf:	31 d2                	xor    %edx,%edx
+ 4c1:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 4c4:	f7 f1                	div    %ecx
+ 4c6:	83 c7 01             	add    $0x1,%edi
+ 4c9:	0f b6 92 e8 08 00 00 	movzbl 0x8e8(%edx),%edx
+ 4d0:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+ 4d3:	39 d9                	cmp    %ebx,%ecx
+ 4d5:	76 e1                	jbe    4b8 <printint+0x38>
+  if(neg)
+ 4d7:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 4da:	85 c0                	test   %eax,%eax
+ 4dc:	74 0d                	je     4eb <printint+0x6b>
+    buf[i++] = '-';
+ 4de:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 4e3:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+ 4e8:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 4eb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 4ee:	8b 7d bc             	mov    -0x44(%ebp),%edi
+ 4f1:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4f5:	eb 0f                	jmp    506 <printint+0x86>
+ 4f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4fe:	66 90                	xchg   %ax,%ax
+ 500:	0f b6 13             	movzbl (%ebx),%edx
+ 503:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 506:	83 ec 04             	sub    $0x4,%esp
+ 509:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 50c:	6a 01                	push   $0x1
+ 50e:	56                   	push   %esi
+ 50f:	57                   	push   %edi
+ 510:	e8 dc fe ff ff       	call   3f1 <write>
+
+  while(--i >= 0)
+ 515:	83 c4 10             	add    $0x10,%esp
+ 518:	39 de                	cmp    %ebx,%esi
+ 51a:	75 e4                	jne    500 <printint+0x80>
+    putc(fd, buf[i]);
+}
+ 51c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 51f:	5b                   	pop    %ebx
+ 520:	5e                   	pop    %esi
+ 521:	5f                   	pop    %edi
+ 522:	5d                   	pop    %ebp
+ 523:	c3                   	ret    
+ 524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 528:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+ 52f:	e9 75 ff ff ff       	jmp    4a9 <printint+0x29>
+ 534:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 53f:	90                   	nop
+
+00000540 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 540:	55                   	push   %ebp
+ 541:	89 e5                	mov    %esp,%ebp
+ 543:	57                   	push   %edi
+ 544:	56                   	push   %esi
+ 545:	53                   	push   %ebx
+ 546:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 549:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 54c:	0f b6 1e             	movzbl (%esi),%ebx
+ 54f:	84 db                	test   %bl,%bl
+ 551:	0f 84 b9 00 00 00    	je     610 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+ 557:	8d 45 10             	lea    0x10(%ebp),%eax
+ 55a:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 55d:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 560:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 562:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 565:	eb 38                	jmp    59f <printf+0x5f>
+ 567:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56e:	66 90                	xchg   %ax,%ax
+ 570:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 573:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 578:	83 f8 25             	cmp    $0x25,%eax
+ 57b:	74 17                	je     594 <printf+0x54>
+  write(fd, &c, 1);
+ 57d:	83 ec 04             	sub    $0x4,%esp
+ 580:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 583:	6a 01                	push   $0x1
+ 585:	57                   	push   %edi
+ 586:	ff 75 08             	pushl  0x8(%ebp)
+ 589:	e8 63 fe ff ff       	call   3f1 <write>
+ 58e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 591:	83 c4 10             	add    $0x10,%esp
+ 594:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 597:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 59b:	84 db                	test   %bl,%bl
+ 59d:	74 71                	je     610 <printf+0xd0>
+    c = fmt[i] & 0xff;
+ 59f:	0f be cb             	movsbl %bl,%ecx
+ 5a2:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 5a5:	85 d2                	test   %edx,%edx
+ 5a7:	74 c7                	je     570 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 5a9:	83 fa 25             	cmp    $0x25,%edx
+ 5ac:	75 e6                	jne    594 <printf+0x54>
+      if(c == 'd'){
+ 5ae:	83 f8 64             	cmp    $0x64,%eax
+ 5b1:	0f 84 99 00 00 00    	je     650 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 5b7:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 5bd:	83 f9 70             	cmp    $0x70,%ecx
+ 5c0:	74 5e                	je     620 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 5c2:	83 f8 73             	cmp    $0x73,%eax
+ 5c5:	0f 84 d5 00 00 00    	je     6a0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 5cb:	83 f8 63             	cmp    $0x63,%eax
+ 5ce:	0f 84 8c 00 00 00    	je     660 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 5d4:	83 f8 25             	cmp    $0x25,%eax
+ 5d7:	0f 84 b3 00 00 00    	je     690 <printf+0x150>
+  write(fd, &c, 1);
+ 5dd:	83 ec 04             	sub    $0x4,%esp
+ 5e0:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5e4:	6a 01                	push   $0x1
+ 5e6:	57                   	push   %edi
+ 5e7:	ff 75 08             	pushl  0x8(%ebp)
+ 5ea:	e8 02 fe ff ff       	call   3f1 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 5ef:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5f2:	83 c4 0c             	add    $0xc,%esp
+ 5f5:	6a 01                	push   $0x1
+ 5f7:	83 c6 01             	add    $0x1,%esi
+ 5fa:	57                   	push   %edi
+ 5fb:	ff 75 08             	pushl  0x8(%ebp)
+ 5fe:	e8 ee fd ff ff       	call   3f1 <write>
+  for(i = 0; fmt[i]; i++){
+ 603:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 607:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 60a:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 60c:	84 db                	test   %bl,%bl
+ 60e:	75 8f                	jne    59f <printf+0x5f>
+    }
+  }
+}
+ 610:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 613:	5b                   	pop    %ebx
+ 614:	5e                   	pop    %esi
+ 615:	5f                   	pop    %edi
+ 616:	5d                   	pop    %ebp
+ 617:	c3                   	ret    
+ 618:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 61f:	90                   	nop
+        printint(fd, *ap, 16, 0);
+ 620:	83 ec 0c             	sub    $0xc,%esp
+ 623:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 628:	6a 00                	push   $0x0
+ 62a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 62d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 630:	8b 13                	mov    (%ebx),%edx
+ 632:	e8 49 fe ff ff       	call   480 <printint>
+        ap++;
+ 637:	89 d8                	mov    %ebx,%eax
+ 639:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 63c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 63e:	83 c0 04             	add    $0x4,%eax
+ 641:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 644:	e9 4b ff ff ff       	jmp    594 <printf+0x54>
+ 649:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 650:	83 ec 0c             	sub    $0xc,%esp
+ 653:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 658:	6a 01                	push   $0x1
+ 65a:	eb ce                	jmp    62a <printf+0xea>
+ 65c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 660:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 663:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 666:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 668:	6a 01                	push   $0x1
+        ap++;
+ 66a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 66d:	57                   	push   %edi
+ 66e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 671:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 674:	e8 78 fd ff ff       	call   3f1 <write>
+        ap++;
+ 679:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 67c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 67f:	31 d2                	xor    %edx,%edx
+ 681:	e9 0e ff ff ff       	jmp    594 <printf+0x54>
+ 686:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 68d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 690:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 693:	83 ec 04             	sub    $0x4,%esp
+ 696:	e9 5a ff ff ff       	jmp    5f5 <printf+0xb5>
+ 69b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 69f:	90                   	nop
+        s = (char*)*ap;
+ 6a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 6a3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 6a5:	83 c0 04             	add    $0x4,%eax
+ 6a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 6ab:	85 db                	test   %ebx,%ebx
+ 6ad:	74 17                	je     6c6 <printf+0x186>
+        while(*s != 0){
+ 6af:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 6b2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 6b4:	84 c0                	test   %al,%al
+ 6b6:	0f 84 d8 fe ff ff    	je     594 <printf+0x54>
+ 6bc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6bf:	89 de                	mov    %ebx,%esi
+ 6c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6c4:	eb 1a                	jmp    6e0 <printf+0x1a0>
+          s = "(null)";
+ 6c6:	bb df 08 00 00       	mov    $0x8df,%ebx
+        while(*s != 0){
+ 6cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6d3:	89 de                	mov    %ebx,%esi
+ 6d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6df:	90                   	nop
+  write(fd, &c, 1);
+ 6e0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 6e3:	83 c6 01             	add    $0x1,%esi
+ 6e6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6e9:	6a 01                	push   $0x1
+ 6eb:	57                   	push   %edi
+ 6ec:	53                   	push   %ebx
+ 6ed:	e8 ff fc ff ff       	call   3f1 <write>
+        while(*s != 0){
+ 6f2:	0f b6 06             	movzbl (%esi),%eax
+ 6f5:	83 c4 10             	add    $0x10,%esp
+ 6f8:	84 c0                	test   %al,%al
+ 6fa:	75 e4                	jne    6e0 <printf+0x1a0>
+ 6fc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 6ff:	31 d2                	xor    %edx,%edx
+ 701:	e9 8e fe ff ff       	jmp    594 <printf+0x54>
+ 706:	66 90                	xchg   %ax,%ax
+ 708:	66 90                	xchg   %ax,%ax
+ 70a:	66 90                	xchg   %ax,%ax
+ 70c:	66 90                	xchg   %ax,%ax
+ 70e:	66 90                	xchg   %ax,%ax
+
+00000710 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 710:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 711:	a1 e0 0b 00 00       	mov    0xbe0,%eax
+{
+ 716:	89 e5                	mov    %esp,%ebp
+ 718:	57                   	push   %edi
+ 719:	56                   	push   %esi
+ 71a:	53                   	push   %ebx
+ 71b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 71e:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 720:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 723:	39 c8                	cmp    %ecx,%eax
+ 725:	73 19                	jae    740 <free+0x30>
+ 727:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 72e:	66 90                	xchg   %ax,%ax
+ 730:	39 d1                	cmp    %edx,%ecx
+ 732:	72 14                	jb     748 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 734:	39 d0                	cmp    %edx,%eax
+ 736:	73 10                	jae    748 <free+0x38>
+{
+ 738:	89 d0                	mov    %edx,%eax
+ 73a:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 73c:	39 c8                	cmp    %ecx,%eax
+ 73e:	72 f0                	jb     730 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 740:	39 d0                	cmp    %edx,%eax
+ 742:	72 f4                	jb     738 <free+0x28>
+ 744:	39 d1                	cmp    %edx,%ecx
+ 746:	73 f0                	jae    738 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 748:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 74b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 74e:	39 fa                	cmp    %edi,%edx
+ 750:	74 1e                	je     770 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 752:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 755:	8b 50 04             	mov    0x4(%eax),%edx
+ 758:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 75b:	39 f1                	cmp    %esi,%ecx
+ 75d:	74 28                	je     787 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 75f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 761:	5b                   	pop    %ebx
+  freep = p;
+ 762:	a3 e0 0b 00 00       	mov    %eax,0xbe0
+}
+ 767:	5e                   	pop    %esi
+ 768:	5f                   	pop    %edi
+ 769:	5d                   	pop    %ebp
+ 76a:	c3                   	ret    
+ 76b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 76f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 770:	03 72 04             	add    0x4(%edx),%esi
+ 773:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 776:	8b 10                	mov    (%eax),%edx
+ 778:	8b 12                	mov    (%edx),%edx
+ 77a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 77d:	8b 50 04             	mov    0x4(%eax),%edx
+ 780:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 783:	39 f1                	cmp    %esi,%ecx
+ 785:	75 d8                	jne    75f <free+0x4f>
+    p->s.size += bp->s.size;
+ 787:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 78a:	a3 e0 0b 00 00       	mov    %eax,0xbe0
+    p->s.size += bp->s.size;
+ 78f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 792:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 795:	89 10                	mov    %edx,(%eax)
+}
+ 797:	5b                   	pop    %ebx
+ 798:	5e                   	pop    %esi
+ 799:	5f                   	pop    %edi
+ 79a:	5d                   	pop    %ebp
+ 79b:	c3                   	ret    
+ 79c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000007a0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 7a0:	55                   	push   %ebp
+ 7a1:	89 e5                	mov    %esp,%ebp
+ 7a3:	57                   	push   %edi
+ 7a4:	56                   	push   %esi
+ 7a5:	53                   	push   %ebx
+ 7a6:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 7ac:	8b 3d e0 0b 00 00    	mov    0xbe0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7b2:	8d 70 07             	lea    0x7(%eax),%esi
+ 7b5:	c1 ee 03             	shr    $0x3,%esi
+ 7b8:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 7bb:	85 ff                	test   %edi,%edi
+ 7bd:	0f 84 ad 00 00 00    	je     870 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7c3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 7c5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 7c8:	39 f1                	cmp    %esi,%ecx
+ 7ca:	73 72                	jae    83e <malloc+0x9e>
+ 7cc:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 7d2:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7d7:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 7da:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 7e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 7e4:	eb 1b                	jmp    801 <malloc+0x61>
+ 7e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ed:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7f0:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 7f2:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7f5:	39 f1                	cmp    %esi,%ecx
+ 7f7:	73 4f                	jae    848 <malloc+0xa8>
+ 7f9:	8b 3d e0 0b 00 00    	mov    0xbe0,%edi
+ 7ff:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 801:	39 d7                	cmp    %edx,%edi
+ 803:	75 eb                	jne    7f0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 805:	83 ec 0c             	sub    $0xc,%esp
+ 808:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 80b:	e8 49 fc ff ff       	call   459 <sbrk>
+  if(p == (char*)-1)
+ 810:	83 c4 10             	add    $0x10,%esp
+ 813:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 816:	74 1c                	je     834 <malloc+0x94>
+  hp->s.size = nu;
+ 818:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 81b:	83 ec 0c             	sub    $0xc,%esp
+ 81e:	83 c0 08             	add    $0x8,%eax
+ 821:	50                   	push   %eax
+ 822:	e8 e9 fe ff ff       	call   710 <free>
+  return freep;
+ 827:	8b 15 e0 0b 00 00    	mov    0xbe0,%edx
+      if((p = morecore(nunits)) == 0)
+ 82d:	83 c4 10             	add    $0x10,%esp
+ 830:	85 d2                	test   %edx,%edx
+ 832:	75 bc                	jne    7f0 <malloc+0x50>
+        return 0;
+  }
+}
+ 834:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 837:	31 c0                	xor    %eax,%eax
+}
+ 839:	5b                   	pop    %ebx
+ 83a:	5e                   	pop    %esi
+ 83b:	5f                   	pop    %edi
+ 83c:	5d                   	pop    %ebp
+ 83d:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 83e:	89 d0                	mov    %edx,%eax
+ 840:	89 fa                	mov    %edi,%edx
+ 842:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 848:	39 ce                	cmp    %ecx,%esi
+ 84a:	74 54                	je     8a0 <malloc+0x100>
+        p->s.size -= nunits;
+ 84c:	29 f1                	sub    %esi,%ecx
+ 84e:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 851:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 854:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 857:	89 15 e0 0b 00 00    	mov    %edx,0xbe0
+}
+ 85d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 860:	83 c0 08             	add    $0x8,%eax
+}
+ 863:	5b                   	pop    %ebx
+ 864:	5e                   	pop    %esi
+ 865:	5f                   	pop    %edi
+ 866:	5d                   	pop    %ebp
+ 867:	c3                   	ret    
+ 868:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 86f:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+ 870:	c7 05 e0 0b 00 00 e4 	movl   $0xbe4,0xbe0
+ 877:	0b 00 00 
+    base.s.size = 0;
+ 87a:	bf e4 0b 00 00       	mov    $0xbe4,%edi
+    base.s.ptr = freep = prevp = &base;
+ 87f:	c7 05 e4 0b 00 00 e4 	movl   $0xbe4,0xbe4
+ 886:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 889:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 88b:	c7 05 e8 0b 00 00 00 	movl   $0x0,0xbe8
+ 892:	00 00 00 
+    if(p->s.size >= nunits){
+ 895:	e9 32 ff ff ff       	jmp    7cc <malloc+0x2c>
+ 89a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 8a0:	8b 08                	mov    (%eax),%ecx
+ 8a2:	89 0a                	mov    %ecx,(%edx)
+ 8a4:	eb b1                	jmp    857 <malloc+0xb7>
diff -urN xv6-public/wc.d xv6-public-new/wc.d
--- xv6-public/wc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/wc.d	2019-10-04 10:45:49.344028913 +0530
@@ -0,0 +1 @@
+wc.o: wc.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/wc.o and xv6-public-new/wc.o differ
diff -urN xv6-public/wc.sym xv6-public-new/wc.sym
--- xv6-public/wc.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/wc.sym	2019-10-04 10:45:49.364028914 +0530
@@ -0,0 +1,59 @@
+00000000 .text
+000008a8 .rodata
+000008fc .eh_frame
+00000be0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 wc.c
+00000000 ulib.c
+00000000 printf.c
+00000480 printint
+000008e8 digits.1101
+00000000 umalloc.c
+00000be0 freep
+00000be4 base
+00000180 strcpy
+00000540 printf
+000003a0 memmove
+00000419 mknod
+00000290 gets
+00000451 getpid
+000007a0 malloc
+00000461 sleep
+000003e1 pipe
+000003f1 write
+00000429 fstat
+00000401 kill
+00000441 chdir
+00000409 exec
+000003d9 wait
+000003e9 read
+00000421 unlink
+000000a0 wc
+000003c9 fork
+00000459 sbrk
+00000469 uptime
+00000bd0 __bss_start
+00000230 memset
+00000000 main
+000001b0 strcmp
+00000449 dup
+00000c00 buf
+00000310 stat
+00000bd0 _edata
+00000e00 _end
+00000431 link
+000003d1 exit
+00000360 atoi
+00000200 strlen
+00000411 open
+00000250 strchr
+00000439 mkdir
+000003f9 close
+00000710 free
Binary files xv6-public/xv6.img and xv6-public-new/xv6.img differ
Binary files xv6-public/_zombie and xv6-public-new/_zombie differ
diff -urN xv6-public/zombie.asm xv6-public-new/zombie.asm
--- xv6-public/zombie.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/zombie.asm	2019-10-04 10:45:49.392028915 +0530
@@ -0,0 +1,1162 @@
+
+_zombie:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  if(fork() > 0)
+  11:	e8 63 02 00 00       	call   279 <fork>
+  16:	85 c0                	test   %eax,%eax
+  18:	7e 0d                	jle    27 <main+0x27>
+    sleep(5);  // Let child exit before parent.
+  1a:	83 ec 0c             	sub    $0xc,%esp
+  1d:	6a 05                	push   $0x5
+  1f:	e8 ed 02 00 00       	call   311 <sleep>
+  24:	83 c4 10             	add    $0x10,%esp
+  exit();
+  27:	e8 55 02 00 00       	call   281 <exit>
+  2c:	66 90                	xchg   %ax,%ax
+  2e:	66 90                	xchg   %ax,%ax
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  31:	31 d2                	xor    %edx,%edx
+{
+  33:	89 e5                	mov    %esp,%ebp
+  35:	53                   	push   %ebx
+  36:	8b 45 08             	mov    0x8(%ebp),%eax
+  39:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  40:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+  44:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+  47:	83 c2 01             	add    $0x1,%edx
+  4a:	84 c9                	test   %cl,%cl
+  4c:	75 f2                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  4e:	5b                   	pop    %ebx
+  4f:	5d                   	pop    %ebp
+  50:	c3                   	ret    
+  51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  58:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  5f:	90                   	nop
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	56                   	push   %esi
+  64:	53                   	push   %ebx
+  65:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  68:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(*p && *p == *q)
+  6b:	0f b6 13             	movzbl (%ebx),%edx
+  6e:	0f b6 0e             	movzbl (%esi),%ecx
+  71:	84 d2                	test   %dl,%dl
+  73:	74 1e                	je     93 <strcmp+0x33>
+  75:	b8 01 00 00 00       	mov    $0x1,%eax
+  7a:	38 ca                	cmp    %cl,%dl
+  7c:	74 09                	je     87 <strcmp+0x27>
+  7e:	eb 20                	jmp    a0 <strcmp+0x40>
+  80:	83 c0 01             	add    $0x1,%eax
+  83:	38 ca                	cmp    %cl,%dl
+  85:	75 19                	jne    a0 <strcmp+0x40>
+  87:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  8b:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+  8f:	84 d2                	test   %dl,%dl
+  91:	75 ed                	jne    80 <strcmp+0x20>
+  93:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+  95:	5b                   	pop    %ebx
+  96:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+  97:	29 c8                	sub    %ecx,%eax
+}
+  99:	5d                   	pop    %ebp
+  9a:	c3                   	ret    
+  9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  9f:	90                   	nop
+  a0:	0f b6 c2             	movzbl %dl,%eax
+  a3:	5b                   	pop    %ebx
+  a4:	5e                   	pop    %esi
+  return (uchar)*p - (uchar)*q;
+  a5:	29 c8                	sub    %ecx,%eax
+}
+  a7:	5d                   	pop    %ebp
+  a8:	c3                   	ret    
+  a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000000b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  b6:	80 39 00             	cmpb   $0x0,(%ecx)
+  b9:	74 15                	je     d0 <strlen+0x20>
+  bb:	31 d2                	xor    %edx,%edx
+  bd:	8d 76 00             	lea    0x0(%esi),%esi
+  c0:	83 c2 01             	add    $0x1,%edx
+  c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  c7:	89 d0                	mov    %edx,%eax
+  c9:	75 f5                	jne    c0 <strlen+0x10>
+    ;
+  return n;
+}
+  cb:	5d                   	pop    %ebp
+  cc:	c3                   	ret    
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(n = 0; s[n]; n++)
+  d0:	31 c0                	xor    %eax,%eax
+}
+  d2:	5d                   	pop    %ebp
+  d3:	c3                   	ret    
+  d4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  df:	90                   	nop
+
+000000e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	57                   	push   %edi
+  e4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  ed:	89 d7                	mov    %edx,%edi
+  ef:	fc                   	cld    
+  f0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+  f2:	89 d0                	mov    %edx,%eax
+  f4:	5f                   	pop    %edi
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fe:	66 90                	xchg   %ax,%ax
+
+00000100 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	53                   	push   %ebx
+ 104:	8b 45 08             	mov    0x8(%ebp),%eax
+ 107:	8b 55 0c             	mov    0xc(%ebp),%edx
+  for(; *s; s++)
+ 10a:	0f b6 18             	movzbl (%eax),%ebx
+ 10d:	84 db                	test   %bl,%bl
+ 10f:	74 1d                	je     12e <strchr+0x2e>
+ 111:	89 d1                	mov    %edx,%ecx
+    if(*s == c)
+ 113:	38 d3                	cmp    %dl,%bl
+ 115:	75 0d                	jne    124 <strchr+0x24>
+ 117:	eb 17                	jmp    130 <strchr+0x30>
+ 119:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 120:	38 ca                	cmp    %cl,%dl
+ 122:	74 0c                	je     130 <strchr+0x30>
+  for(; *s; s++)
+ 124:	83 c0 01             	add    $0x1,%eax
+ 127:	0f b6 10             	movzbl (%eax),%edx
+ 12a:	84 d2                	test   %dl,%dl
+ 12c:	75 f2                	jne    120 <strchr+0x20>
+      return (char*)s;
+  return 0;
+ 12e:	31 c0                	xor    %eax,%eax
+}
+ 130:	5b                   	pop    %ebx
+ 131:	5d                   	pop    %ebp
+ 132:	c3                   	ret    
+ 133:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000140 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	57                   	push   %edi
+ 144:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 145:	31 f6                	xor    %esi,%esi
+{
+ 147:	53                   	push   %ebx
+ 148:	89 f3                	mov    %esi,%ebx
+ 14a:	83 ec 1c             	sub    $0x1c,%esp
+ 14d:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 150:	eb 2f                	jmp    181 <gets+0x41>
+ 152:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 158:	83 ec 04             	sub    $0x4,%esp
+ 15b:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 15e:	6a 01                	push   $0x1
+ 160:	50                   	push   %eax
+ 161:	6a 00                	push   $0x0
+ 163:	e8 31 01 00 00       	call   299 <read>
+    if(cc < 1)
+ 168:	83 c4 10             	add    $0x10,%esp
+ 16b:	85 c0                	test   %eax,%eax
+ 16d:	7e 1c                	jle    18b <gets+0x4b>
+      break;
+    buf[i++] = c;
+ 16f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 173:	83 c7 01             	add    $0x1,%edi
+ 176:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 179:	3c 0a                	cmp    $0xa,%al
+ 17b:	74 23                	je     1a0 <gets+0x60>
+ 17d:	3c 0d                	cmp    $0xd,%al
+ 17f:	74 1f                	je     1a0 <gets+0x60>
+  for(i=0; i+1 < max; ){
+ 181:	83 c3 01             	add    $0x1,%ebx
+ 184:	89 fe                	mov    %edi,%esi
+ 186:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 189:	7c cd                	jl     158 <gets+0x18>
+ 18b:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 18d:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 190:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 193:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 196:	5b                   	pop    %ebx
+ 197:	5e                   	pop    %esi
+ 198:	5f                   	pop    %edi
+ 199:	5d                   	pop    %ebp
+ 19a:	c3                   	ret    
+ 19b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 19f:	90                   	nop
+ 1a0:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1a3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1a6:	01 de                	add    %ebx,%esi
+ 1a8:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1aa:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1b0:	5b                   	pop    %ebx
+ 1b1:	5e                   	pop    %esi
+ 1b2:	5f                   	pop    %edi
+ 1b3:	5d                   	pop    %ebp
+ 1b4:	c3                   	ret    
+ 1b5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	56                   	push   %esi
+ 1c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1c5:	83 ec 08             	sub    $0x8,%esp
+ 1c8:	6a 00                	push   $0x0
+ 1ca:	ff 75 08             	pushl  0x8(%ebp)
+ 1cd:	e8 ef 00 00 00       	call   2c1 <open>
+  if(fd < 0)
+ 1d2:	83 c4 10             	add    $0x10,%esp
+ 1d5:	85 c0                	test   %eax,%eax
+ 1d7:	78 27                	js     200 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	ff 75 0c             	pushl  0xc(%ebp)
+ 1df:	89 c3                	mov    %eax,%ebx
+ 1e1:	50                   	push   %eax
+ 1e2:	e8 f2 00 00 00       	call   2d9 <fstat>
+  close(fd);
+ 1e7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1ea:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 1ec:	e8 b8 00 00 00       	call   2a9 <close>
+  return r;
+ 1f1:	83 c4 10             	add    $0x10,%esp
+}
+ 1f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1f7:	89 f0                	mov    %esi,%eax
+ 1f9:	5b                   	pop    %ebx
+ 1fa:	5e                   	pop    %esi
+ 1fb:	5d                   	pop    %ebp
+ 1fc:	c3                   	ret    
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 200:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 205:	eb ed                	jmp    1f4 <stat+0x34>
+ 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20e:	66 90                	xchg   %ax,%ax
+
+00000210 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 217:	0f be 11             	movsbl (%ecx),%edx
+ 21a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 21d:	3c 09                	cmp    $0x9,%al
+  n = 0;
+ 21f:	b8 00 00 00 00       	mov    $0x0,%eax
+  while('0' <= *s && *s <= '9')
+ 224:	77 1f                	ja     245 <atoi+0x35>
+ 226:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    n = n*10 + *s++ - '0';
+ 230:	83 c1 01             	add    $0x1,%ecx
+ 233:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 236:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+  while('0' <= *s && *s <= '9')
+ 23a:	0f be 11             	movsbl (%ecx),%edx
+ 23d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 240:	80 fb 09             	cmp    $0x9,%bl
+ 243:	76 eb                	jbe    230 <atoi+0x20>
+  return n;
+}
+ 245:	5b                   	pop    %ebx
+ 246:	5d                   	pop    %ebp
+ 247:	c3                   	ret    
+ 248:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24f:	90                   	nop
+
+00000250 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	57                   	push   %edi
+ 254:	8b 55 10             	mov    0x10(%ebp),%edx
+ 257:	8b 45 08             	mov    0x8(%ebp),%eax
+ 25a:	56                   	push   %esi
+ 25b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 25e:	85 d2                	test   %edx,%edx
+ 260:	7e 13                	jle    275 <memmove+0x25>
+ 262:	01 c2                	add    %eax,%edx
+  dst = vdst;
+ 264:	89 c7                	mov    %eax,%edi
+ 266:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 26d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 270:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 271:	39 fa                	cmp    %edi,%edx
+ 273:	75 fb                	jne    270 <memmove+0x20>
+  return vdst;
+}
+ 275:	5e                   	pop    %esi
+ 276:	5f                   	pop    %edi
+ 277:	5d                   	pop    %ebp
+ 278:	c3                   	ret    
+
+00000279 <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 279:	b8 01 00 00 00       	mov    $0x1,%eax
+ 27e:	cd 40                	int    $0x40
+ 280:	c3                   	ret    
+
+00000281 <exit>:
+SYSCALL(exit)
+ 281:	b8 02 00 00 00       	mov    $0x2,%eax
+ 286:	cd 40                	int    $0x40
+ 288:	c3                   	ret    
+
+00000289 <wait>:
+SYSCALL(wait)
+ 289:	b8 03 00 00 00       	mov    $0x3,%eax
+ 28e:	cd 40                	int    $0x40
+ 290:	c3                   	ret    
+
+00000291 <pipe>:
+SYSCALL(pipe)
+ 291:	b8 04 00 00 00       	mov    $0x4,%eax
+ 296:	cd 40                	int    $0x40
+ 298:	c3                   	ret    
+
+00000299 <read>:
+SYSCALL(read)
+ 299:	b8 05 00 00 00       	mov    $0x5,%eax
+ 29e:	cd 40                	int    $0x40
+ 2a0:	c3                   	ret    
+
+000002a1 <write>:
+SYSCALL(write)
+ 2a1:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2a6:	cd 40                	int    $0x40
+ 2a8:	c3                   	ret    
+
+000002a9 <close>:
+SYSCALL(close)
+ 2a9:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2ae:	cd 40                	int    $0x40
+ 2b0:	c3                   	ret    
+
+000002b1 <kill>:
+SYSCALL(kill)
+ 2b1:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2b6:	cd 40                	int    $0x40
+ 2b8:	c3                   	ret    
+
+000002b9 <exec>:
+SYSCALL(exec)
+ 2b9:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2be:	cd 40                	int    $0x40
+ 2c0:	c3                   	ret    
+
+000002c1 <open>:
+SYSCALL(open)
+ 2c1:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2c6:	cd 40                	int    $0x40
+ 2c8:	c3                   	ret    
+
+000002c9 <mknod>:
+SYSCALL(mknod)
+ 2c9:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2ce:	cd 40                	int    $0x40
+ 2d0:	c3                   	ret    
+
+000002d1 <unlink>:
+SYSCALL(unlink)
+ 2d1:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2d6:	cd 40                	int    $0x40
+ 2d8:	c3                   	ret    
+
+000002d9 <fstat>:
+SYSCALL(fstat)
+ 2d9:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2de:	cd 40                	int    $0x40
+ 2e0:	c3                   	ret    
+
+000002e1 <link>:
+SYSCALL(link)
+ 2e1:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2e6:	cd 40                	int    $0x40
+ 2e8:	c3                   	ret    
+
+000002e9 <mkdir>:
+SYSCALL(mkdir)
+ 2e9:	b8 14 00 00 00       	mov    $0x14,%eax
+ 2ee:	cd 40                	int    $0x40
+ 2f0:	c3                   	ret    
+
+000002f1 <chdir>:
+SYSCALL(chdir)
+ 2f1:	b8 09 00 00 00       	mov    $0x9,%eax
+ 2f6:	cd 40                	int    $0x40
+ 2f8:	c3                   	ret    
+
+000002f9 <dup>:
+SYSCALL(dup)
+ 2f9:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 2fe:	cd 40                	int    $0x40
+ 300:	c3                   	ret    
+
+00000301 <getpid>:
+SYSCALL(getpid)
+ 301:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 306:	cd 40                	int    $0x40
+ 308:	c3                   	ret    
+
+00000309 <sbrk>:
+SYSCALL(sbrk)
+ 309:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 30e:	cd 40                	int    $0x40
+ 310:	c3                   	ret    
+
+00000311 <sleep>:
+SYSCALL(sleep)
+ 311:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 316:	cd 40                	int    $0x40
+ 318:	c3                   	ret    
+
+00000319 <uptime>:
+SYSCALL(uptime)
+ 319:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 31e:	cd 40                	int    $0x40
+ 320:	c3                   	ret    
+ 321:	66 90                	xchg   %ax,%ax
+ 323:	66 90                	xchg   %ax,%ax
+ 325:	66 90                	xchg   %ax,%ax
+ 327:	66 90                	xchg   %ax,%ax
+ 329:	66 90                	xchg   %ax,%ax
+ 32b:	66 90                	xchg   %ax,%ax
+ 32d:	66 90                	xchg   %ax,%ax
+ 32f:	90                   	nop
+
+00000330 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	57                   	push   %edi
+ 334:	56                   	push   %esi
+ 335:	53                   	push   %ebx
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 336:	89 d3                	mov    %edx,%ebx
+{
+ 338:	83 ec 3c             	sub    $0x3c,%esp
+ 33b:	89 45 bc             	mov    %eax,-0x44(%ebp)
+  if(sgn && xx < 0){
+ 33e:	85 d2                	test   %edx,%edx
+ 340:	0f 89 92 00 00 00    	jns    3d8 <printint+0xa8>
+ 346:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 34a:	0f 84 88 00 00 00    	je     3d8 <printint+0xa8>
+    neg = 1;
+ 350:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
+    x = -xx;
+ 357:	f7 db                	neg    %ebx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 359:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 360:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 363:	eb 08                	jmp    36d <printint+0x3d>
+ 365:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 368:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+  }while((x /= base) != 0);
+ 36b:	89 c3                	mov    %eax,%ebx
+    buf[i++] = digits[x % base];
+ 36d:	89 d8                	mov    %ebx,%eax
+ 36f:	31 d2                	xor    %edx,%edx
+ 371:	8b 7d c4             	mov    -0x3c(%ebp),%edi
+ 374:	f7 f1                	div    %ecx
+ 376:	83 c7 01             	add    $0x1,%edi
+ 379:	0f b6 92 60 07 00 00 	movzbl 0x760(%edx),%edx
+ 380:	88 14 3e             	mov    %dl,(%esi,%edi,1)
+  }while((x /= base) != 0);
+ 383:	39 d9                	cmp    %ebx,%ecx
+ 385:	76 e1                	jbe    368 <printint+0x38>
+  if(neg)
+ 387:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 38a:	85 c0                	test   %eax,%eax
+ 38c:	74 0d                	je     39b <printint+0x6b>
+    buf[i++] = '-';
+ 38e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)
+ 393:	ba 2d 00 00 00       	mov    $0x2d,%edx
+    buf[i++] = digits[x % base];
+ 398:	89 7d c4             	mov    %edi,-0x3c(%ebp)
+ 39b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 39e:	8b 7d bc             	mov    -0x44(%ebp),%edi
+ 3a1:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3a5:	eb 0f                	jmp    3b6 <printint+0x86>
+ 3a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ae:	66 90                	xchg   %ax,%ax
+ 3b0:	0f b6 13             	movzbl (%ebx),%edx
+ 3b3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3b6:	83 ec 04             	sub    $0x4,%esp
+ 3b9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3bc:	6a 01                	push   $0x1
+ 3be:	56                   	push   %esi
+ 3bf:	57                   	push   %edi
+ 3c0:	e8 dc fe ff ff       	call   2a1 <write>
+
+  while(--i >= 0)
+ 3c5:	83 c4 10             	add    $0x10,%esp
+ 3c8:	39 de                	cmp    %ebx,%esi
+ 3ca:	75 e4                	jne    3b0 <printint+0x80>
+    putc(fd, buf[i]);
+}
+ 3cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3cf:	5b                   	pop    %ebx
+ 3d0:	5e                   	pop    %esi
+ 3d1:	5f                   	pop    %edi
+ 3d2:	5d                   	pop    %ebp
+ 3d3:	c3                   	ret    
+ 3d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 3d8:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
+ 3df:	e9 75 ff ff ff       	jmp    359 <printint+0x29>
+ 3e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3ef:	90                   	nop
+
+000003f0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	57                   	push   %edi
+ 3f4:	56                   	push   %esi
+ 3f5:	53                   	push   %ebx
+ 3f6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 3f9:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 3fc:	0f b6 1e             	movzbl (%esi),%ebx
+ 3ff:	84 db                	test   %bl,%bl
+ 401:	0f 84 b9 00 00 00    	je     4c0 <printf+0xd0>
+  ap = (uint*)(void*)&fmt + 1;
+ 407:	8d 45 10             	lea    0x10(%ebp),%eax
+ 40a:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 40d:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 410:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 412:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 415:	eb 38                	jmp    44f <printf+0x5f>
+ 417:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 41e:	66 90                	xchg   %ax,%ax
+ 420:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 423:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 428:	83 f8 25             	cmp    $0x25,%eax
+ 42b:	74 17                	je     444 <printf+0x54>
+  write(fd, &c, 1);
+ 42d:	83 ec 04             	sub    $0x4,%esp
+ 430:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 433:	6a 01                	push   $0x1
+ 435:	57                   	push   %edi
+ 436:	ff 75 08             	pushl  0x8(%ebp)
+ 439:	e8 63 fe ff ff       	call   2a1 <write>
+ 43e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 441:	83 c4 10             	add    $0x10,%esp
+ 444:	83 c6 01             	add    $0x1,%esi
+  for(i = 0; fmt[i]; i++){
+ 447:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 44b:	84 db                	test   %bl,%bl
+ 44d:	74 71                	je     4c0 <printf+0xd0>
+    c = fmt[i] & 0xff;
+ 44f:	0f be cb             	movsbl %bl,%ecx
+ 452:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 455:	85 d2                	test   %edx,%edx
+ 457:	74 c7                	je     420 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 459:	83 fa 25             	cmp    $0x25,%edx
+ 45c:	75 e6                	jne    444 <printf+0x54>
+      if(c == 'd'){
+ 45e:	83 f8 64             	cmp    $0x64,%eax
+ 461:	0f 84 99 00 00 00    	je     500 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 467:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 46d:	83 f9 70             	cmp    $0x70,%ecx
+ 470:	74 5e                	je     4d0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 472:	83 f8 73             	cmp    $0x73,%eax
+ 475:	0f 84 d5 00 00 00    	je     550 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 47b:	83 f8 63             	cmp    $0x63,%eax
+ 47e:	0f 84 8c 00 00 00    	je     510 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 484:	83 f8 25             	cmp    $0x25,%eax
+ 487:	0f 84 b3 00 00 00    	je     540 <printf+0x150>
+  write(fd, &c, 1);
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 494:	6a 01                	push   $0x1
+ 496:	57                   	push   %edi
+ 497:	ff 75 08             	pushl  0x8(%ebp)
+ 49a:	e8 02 fe ff ff       	call   2a1 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 49f:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4a2:	83 c4 0c             	add    $0xc,%esp
+ 4a5:	6a 01                	push   $0x1
+ 4a7:	83 c6 01             	add    $0x1,%esi
+ 4aa:	57                   	push   %edi
+ 4ab:	ff 75 08             	pushl  0x8(%ebp)
+ 4ae:	e8 ee fd ff ff       	call   2a1 <write>
+  for(i = 0; fmt[i]; i++){
+ 4b3:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 4b7:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 4ba:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 4bc:	84 db                	test   %bl,%bl
+ 4be:	75 8f                	jne    44f <printf+0x5f>
+    }
+  }
+}
+ 4c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4c3:	5b                   	pop    %ebx
+ 4c4:	5e                   	pop    %esi
+ 4c5:	5f                   	pop    %edi
+ 4c6:	5d                   	pop    %ebp
+ 4c7:	c3                   	ret    
+ 4c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4cf:	90                   	nop
+        printint(fd, *ap, 16, 0);
+ 4d0:	83 ec 0c             	sub    $0xc,%esp
+ 4d3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4d8:	6a 00                	push   $0x0
+ 4da:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 4dd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4e0:	8b 13                	mov    (%ebx),%edx
+ 4e2:	e8 49 fe ff ff       	call   330 <printint>
+        ap++;
+ 4e7:	89 d8                	mov    %ebx,%eax
+ 4e9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4ec:	31 d2                	xor    %edx,%edx
+        ap++;
+ 4ee:	83 c0 04             	add    $0x4,%eax
+ 4f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4f4:	e9 4b ff ff ff       	jmp    444 <printf+0x54>
+ 4f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 500:	83 ec 0c             	sub    $0xc,%esp
+ 503:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 508:	6a 01                	push   $0x1
+ 50a:	eb ce                	jmp    4da <printf+0xea>
+ 50c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 510:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 513:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 516:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 518:	6a 01                	push   $0x1
+        ap++;
+ 51a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 51d:	57                   	push   %edi
+ 51e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 521:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 524:	e8 78 fd ff ff       	call   2a1 <write>
+        ap++;
+ 529:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 52c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 52f:	31 d2                	xor    %edx,%edx
+ 531:	e9 0e ff ff ff       	jmp    444 <printf+0x54>
+ 536:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 540:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 543:	83 ec 04             	sub    $0x4,%esp
+ 546:	e9 5a ff ff ff       	jmp    4a5 <printf+0xb5>
+ 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 54f:	90                   	nop
+        s = (char*)*ap;
+ 550:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 553:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 555:	83 c0 04             	add    $0x4,%eax
+ 558:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 55b:	85 db                	test   %ebx,%ebx
+ 55d:	74 17                	je     576 <printf+0x186>
+        while(*s != 0){
+ 55f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 562:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 564:	84 c0                	test   %al,%al
+ 566:	0f 84 d8 fe ff ff    	je     444 <printf+0x54>
+ 56c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 56f:	89 de                	mov    %ebx,%esi
+ 571:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 574:	eb 1a                	jmp    590 <printf+0x1a0>
+          s = "(null)";
+ 576:	bb 58 07 00 00       	mov    $0x758,%ebx
+        while(*s != 0){
+ 57b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 57e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 583:	89 de                	mov    %ebx,%esi
+ 585:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 588:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58f:	90                   	nop
+  write(fd, &c, 1);
+ 590:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 593:	83 c6 01             	add    $0x1,%esi
+ 596:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 599:	6a 01                	push   $0x1
+ 59b:	57                   	push   %edi
+ 59c:	53                   	push   %ebx
+ 59d:	e8 ff fc ff ff       	call   2a1 <write>
+        while(*s != 0){
+ 5a2:	0f b6 06             	movzbl (%esi),%eax
+ 5a5:	83 c4 10             	add    $0x10,%esp
+ 5a8:	84 c0                	test   %al,%al
+ 5aa:	75 e4                	jne    590 <printf+0x1a0>
+ 5ac:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5af:	31 d2                	xor    %edx,%edx
+ 5b1:	e9 8e fe ff ff       	jmp    444 <printf+0x54>
+ 5b6:	66 90                	xchg   %ax,%ax
+ 5b8:	66 90                	xchg   %ax,%ax
+ 5ba:	66 90                	xchg   %ax,%ax
+ 5bc:	66 90                	xchg   %ax,%ax
+ 5be:	66 90                	xchg   %ax,%ax
+
+000005c0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5c0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5c1:	a1 08 0a 00 00       	mov    0xa08,%eax
+{
+ 5c6:	89 e5                	mov    %esp,%ebp
+ 5c8:	57                   	push   %edi
+ 5c9:	56                   	push   %esi
+ 5ca:	53                   	push   %ebx
+ 5cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5ce:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 5d0:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5d3:	39 c8                	cmp    %ecx,%eax
+ 5d5:	73 19                	jae    5f0 <free+0x30>
+ 5d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5de:	66 90                	xchg   %ax,%ax
+ 5e0:	39 d1                	cmp    %edx,%ecx
+ 5e2:	72 14                	jb     5f8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5e4:	39 d0                	cmp    %edx,%eax
+ 5e6:	73 10                	jae    5f8 <free+0x38>
+{
+ 5e8:	89 d0                	mov    %edx,%eax
+ 5ea:	8b 10                	mov    (%eax),%edx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5ec:	39 c8                	cmp    %ecx,%eax
+ 5ee:	72 f0                	jb     5e0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5f0:	39 d0                	cmp    %edx,%eax
+ 5f2:	72 f4                	jb     5e8 <free+0x28>
+ 5f4:	39 d1                	cmp    %edx,%ecx
+ 5f6:	73 f0                	jae    5e8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5fe:	39 fa                	cmp    %edi,%edx
+ 600:	74 1e                	je     620 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 602:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 605:	8b 50 04             	mov    0x4(%eax),%edx
+ 608:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 60b:	39 f1                	cmp    %esi,%ecx
+ 60d:	74 28                	je     637 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 60f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 611:	5b                   	pop    %ebx
+  freep = p;
+ 612:	a3 08 0a 00 00       	mov    %eax,0xa08
+}
+ 617:	5e                   	pop    %esi
+ 618:	5f                   	pop    %edi
+ 619:	5d                   	pop    %ebp
+ 61a:	c3                   	ret    
+ 61b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 61f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 620:	03 72 04             	add    0x4(%edx),%esi
+ 623:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 626:	8b 10                	mov    (%eax),%edx
+ 628:	8b 12                	mov    (%edx),%edx
+ 62a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 62d:	8b 50 04             	mov    0x4(%eax),%edx
+ 630:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 633:	39 f1                	cmp    %esi,%ecx
+ 635:	75 d8                	jne    60f <free+0x4f>
+    p->s.size += bp->s.size;
+ 637:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 63a:	a3 08 0a 00 00       	mov    %eax,0xa08
+    p->s.size += bp->s.size;
+ 63f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 642:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 645:	89 10                	mov    %edx,(%eax)
+}
+ 647:	5b                   	pop    %ebx
+ 648:	5e                   	pop    %esi
+ 649:	5f                   	pop    %edi
+ 64a:	5d                   	pop    %ebp
+ 64b:	c3                   	ret    
+ 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000650 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 650:	55                   	push   %ebp
+ 651:	89 e5                	mov    %esp,%ebp
+ 653:	57                   	push   %edi
+ 654:	56                   	push   %esi
+ 655:	53                   	push   %ebx
+ 656:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 659:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 65c:	8b 3d 08 0a 00 00    	mov    0xa08,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 662:	8d 70 07             	lea    0x7(%eax),%esi
+ 665:	c1 ee 03             	shr    $0x3,%esi
+ 668:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 66b:	85 ff                	test   %edi,%edi
+ 66d:	0f 84 ad 00 00 00    	je     720 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 673:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 675:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 678:	39 f1                	cmp    %esi,%ecx
+ 67a:	73 72                	jae    6ee <malloc+0x9e>
+ 67c:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 682:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 687:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 68a:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 691:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 694:	eb 1b                	jmp    6b1 <malloc+0x61>
+ 696:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 69d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a0:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6a2:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6a5:	39 f1                	cmp    %esi,%ecx
+ 6a7:	73 4f                	jae    6f8 <malloc+0xa8>
+ 6a9:	8b 3d 08 0a 00 00    	mov    0xa08,%edi
+ 6af:	89 c2                	mov    %eax,%edx
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6b1:	39 d7                	cmp    %edx,%edi
+ 6b3:	75 eb                	jne    6a0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 6b5:	83 ec 0c             	sub    $0xc,%esp
+ 6b8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6bb:	e8 49 fc ff ff       	call   309 <sbrk>
+  if(p == (char*)-1)
+ 6c0:	83 c4 10             	add    $0x10,%esp
+ 6c3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6c6:	74 1c                	je     6e4 <malloc+0x94>
+  hp->s.size = nu;
+ 6c8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6cb:	83 ec 0c             	sub    $0xc,%esp
+ 6ce:	83 c0 08             	add    $0x8,%eax
+ 6d1:	50                   	push   %eax
+ 6d2:	e8 e9 fe ff ff       	call   5c0 <free>
+  return freep;
+ 6d7:	8b 15 08 0a 00 00    	mov    0xa08,%edx
+      if((p = morecore(nunits)) == 0)
+ 6dd:	83 c4 10             	add    $0x10,%esp
+ 6e0:	85 d2                	test   %edx,%edx
+ 6e2:	75 bc                	jne    6a0 <malloc+0x50>
+        return 0;
+  }
+}
+ 6e4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6e7:	31 c0                	xor    %eax,%eax
+}
+ 6e9:	5b                   	pop    %ebx
+ 6ea:	5e                   	pop    %esi
+ 6eb:	5f                   	pop    %edi
+ 6ec:	5d                   	pop    %ebp
+ 6ed:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 6ee:	89 d0                	mov    %edx,%eax
+ 6f0:	89 fa                	mov    %edi,%edx
+ 6f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 6f8:	39 ce                	cmp    %ecx,%esi
+ 6fa:	74 54                	je     750 <malloc+0x100>
+        p->s.size -= nunits;
+ 6fc:	29 f1                	sub    %esi,%ecx
+ 6fe:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 701:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 704:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 707:	89 15 08 0a 00 00    	mov    %edx,0xa08
+}
+ 70d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 710:	83 c0 08             	add    $0x8,%eax
+}
+ 713:	5b                   	pop    %ebx
+ 714:	5e                   	pop    %esi
+ 715:	5f                   	pop    %edi
+ 716:	5d                   	pop    %ebp
+ 717:	c3                   	ret    
+ 718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 71f:	90                   	nop
+    base.s.ptr = freep = prevp = &base;
+ 720:	c7 05 08 0a 00 00 0c 	movl   $0xa0c,0xa08
+ 727:	0a 00 00 
+    base.s.size = 0;
+ 72a:	bf 0c 0a 00 00       	mov    $0xa0c,%edi
+    base.s.ptr = freep = prevp = &base;
+ 72f:	c7 05 0c 0a 00 00 0c 	movl   $0xa0c,0xa0c
+ 736:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 739:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 73b:	c7 05 10 0a 00 00 00 	movl   $0x0,0xa10
+ 742:	00 00 00 
+    if(p->s.size >= nunits){
+ 745:	e9 32 ff ff ff       	jmp    67c <malloc+0x2c>
+ 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 750:	8b 08                	mov    (%eax),%ecx
+ 752:	89 0a                	mov    %ecx,(%edx)
+ 754:	eb b1                	jmp    707 <malloc+0xb7>
diff -urN xv6-public/zombie.d xv6-public-new/zombie.d
--- xv6-public/zombie.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/zombie.d	2019-10-04 10:45:49.376028915 +0530
@@ -0,0 +1 @@
+zombie.o: zombie.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/zombie.o and xv6-public-new/zombie.o differ
diff -urN xv6-public/zombie.sym xv6-public-new/zombie.sym
--- xv6-public/zombie.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-new/zombie.sym	2019-10-04 10:45:49.392028915 +0530
@@ -0,0 +1,57 @@
+00000000 .text
+00000758 .rodata
+00000774 .eh_frame
+00000a08 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 zombie.c
+00000000 ulib.c
+00000000 printf.c
+00000330 printint
+00000760 digits.1101
+00000000 umalloc.c
+00000a08 freep
+00000a0c base
+00000030 strcpy
+000003f0 printf
+00000250 memmove
+000002c9 mknod
+00000140 gets
+00000301 getpid
+00000650 malloc
+00000311 sleep
+00000291 pipe
+000002a1 write
+000002d9 fstat
+000002b1 kill
+000002f1 chdir
+000002b9 exec
+00000289 wait
+00000299 read
+000002d1 unlink
+00000279 fork
+00000309 sbrk
+00000319 uptime
+00000a08 __bss_start
+000000e0 memset
+00000000 main
+00000060 strcmp
+000002f9 dup
+000001c0 stat
+00000a08 _edata
+00000a14 _end
+000002e1 link
+00000281 exit
+00000210 atoi
+000000b0 strlen
+000002c1 open
+00000100 strchr
+000002e9 mkdir
+000002a9 close
+000005c0 free
